node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "../tfrecords/train.tfrecords"
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "buffer_size_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1500
      }
    }
  }
}
node {
  name: "seed_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "num_parallel_calls"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "buffer_size_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "FlatMapDataset"
  op: "FlatMapDataset"
  input: "ShuffleDataset"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "tf_map_func_FnxK8VMp2OM"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "FlatMapDataset"
  input: "buffer_size_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
}
node {
  name: "ShuffleDataset_1"
  op: "ShuffleDataset"
  input: "PrefetchDataset"
  input: "buffer_size_2"
  input: "seed_1"
  input: "seed2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset_1"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
}
node {
  name: "ParallelMapDataset"
  op: "ParallelMapDataset"
  input: "RepeatDataset"
  input: "num_parallel_calls"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "tf_map_func_Cr21um4S1no"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
          dim {
            size: 56
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "BatchDataset"
  op: "BatchDataset"
  input: "ParallelMapDataset"
  input: "batch_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "PrefetchDataset_1"
  op: "PrefetchDataset"
  input: "BatchDataset"
  input: "buffer_size_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "PrefetchDataset_1"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "images/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "images"
      }
    }
  }
}
node {
  name: "images"
  op: "ImageSummary"
  input: "images/tag"
  input: "IteratorGetNext"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 6
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "IteratorGetNext"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19245009124279022
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d/kernel/Initializer/truncated_normal/mul"
  input: "conv2d/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/kernel/Assign"
  op: "Assign"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/kernel/read"
  op: "Identity"
  input: "conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/Conv2D"
  op: "Conv2D"
  input: "transpose"
  input: "conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "initial_conv"
  op: "Identity"
  input: "conv2d/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Assign"
  op: "Assign"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/read"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Assign"
  op: "Assign"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/read"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moving_mean/read"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moving_variance/read"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "initial_conv"
  input: "batch_normalization/gamma/read"
  input: "batch_normalization/beta/read"
  input: "batch_normalization/Const"
  input: "batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg/sub/x"
  input: "batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization/moving_mean/read"
  input: "batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg/sub_1"
  input: "batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization/AssignMovingAvg_1/sub/x"
  input: "batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization/moving_variance/read"
  input: "batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg_1/sub_1"
  input: "batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu"
  op: "Relu"
  input: "batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_1/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_1/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_1/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_1/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_1/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/kernel/Assign"
  op: "Assign"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/kernel/read"
  op: "Identity"
  input: "conv2d_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_1/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/Conv2D"
  op: "Conv2D"
  input: "Relu"
  input: "conv2d_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_2/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_2/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_2/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_2/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_2/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/kernel/Assign"
  op: "Assign"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/kernel/read"
  op: "Identity"
  input: "conv2d_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_2/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/Conv2D"
  op: "Conv2D"
  input: "Relu"
  input: "conv2d_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/read"
  op: "Identity"
  input: "batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/read"
  op: "Identity"
  input: "batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_2/Conv2D"
  input: "batch_normalization_1/gamma/read"
  input: "batch_normalization_1/beta/read"
  input: "batch_normalization_1/Const"
  input: "batch_normalization_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg/sub/x"
  input: "batch_normalization_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_1/moving_mean/read"
  input: "batch_normalization_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg/sub_1"
  input: "batch_normalization_1/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_1/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_1/moving_variance/read"
  input: "batch_normalization_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_1/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_1"
  op: "Relu"
  input: "batch_normalization_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_3/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_3/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_3/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_3/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_3/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_3/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/kernel/Assign"
  op: "Assign"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/kernel/read"
  op: "Identity"
  input: "conv2d_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_3/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/Conv2D"
  op: "Conv2D"
  input: "Relu_1"
  input: "conv2d_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "conv2d_3/Conv2D"
  input: "conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/gamma/read"
  op: "Identity"
  input: "batch_normalization_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/beta/Assign"
  op: "Assign"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/beta/read"
  op: "Identity"
  input: "batch_normalization_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "add"
  input: "batch_normalization_2/gamma/read"
  input: "batch_normalization_2/beta/read"
  input: "batch_normalization_2/Const"
  input: "batch_normalization_2/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg/sub/x"
  input: "batch_normalization_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_2/moving_mean/read"
  input: "batch_normalization_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg/sub_1"
  input: "batch_normalization_2/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_2/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_2/moving_variance/read"
  input: "batch_normalization_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_2/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_2"
  op: "Relu"
  input: "batch_normalization_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_4/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_4/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_4/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_4/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_4/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_4/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/kernel/Assign"
  op: "Assign"
  input: "conv2d_4/kernel"
  input: "conv2d_4/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/kernel/read"
  op: "Identity"
  input: "conv2d_4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_4/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/Conv2D"
  op: "Conv2D"
  input: "Relu_2"
  input: "conv2d_4/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/gamma/read"
  op: "Identity"
  input: "batch_normalization_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/beta/Assign"
  op: "Assign"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/beta/read"
  op: "Identity"
  input: "batch_normalization_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_4/Conv2D"
  input: "batch_normalization_3/gamma/read"
  input: "batch_normalization_3/beta/read"
  input: "batch_normalization_3/Const"
  input: "batch_normalization_3/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg/sub/x"
  input: "batch_normalization_3/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_3/moving_mean/read"
  input: "batch_normalization_3/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg/sub_1"
  input: "batch_normalization_3/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_3/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_3/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_3/moving_variance/read"
  input: "batch_normalization_3/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_3/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_3"
  op: "Relu"
  input: "batch_normalization_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_5/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_5/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_5/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_5/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_5/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_5/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/kernel/Assign"
  op: "Assign"
  input: "conv2d_5/kernel"
  input: "conv2d_5/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/kernel/read"
  op: "Identity"
  input: "conv2d_5/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_5/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/Conv2D"
  op: "Conv2D"
  input: "Relu_3"
  input: "conv2d_5/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "conv2d_5/Conv2D"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "block_layer1"
  op: "Identity"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_4/gamma"
  input: "batch_normalization_4/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/gamma/read"
  op: "Identity"
  input: "batch_normalization_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_4/beta/Assign"
  op: "Assign"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/beta/read"
  op: "Identity"
  input: "batch_normalization_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "block_layer1"
  input: "batch_normalization_4/gamma/read"
  input: "batch_normalization_4/beta/read"
  input: "batch_normalization_4/Const"
  input: "batch_normalization_4/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg/sub/x"
  input: "batch_normalization_4/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_4/moving_mean/read"
  input: "batch_normalization_4/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_4/AssignMovingAvg/sub_1"
  input: "batch_normalization_4/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_4/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_4/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_4/moving_variance/read"
  input: "batch_normalization_4/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_4/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_4/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_4/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_4"
  op: "Relu"
  input: "batch_normalization_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Pad"
  op: "Pad"
  input: "Relu_4"
  input: "Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_6/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_6/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_6/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_6/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_6/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_6/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/kernel/Assign"
  op: "Assign"
  input: "conv2d_6/kernel"
  input: "conv2d_6/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/kernel/read"
  op: "Identity"
  input: "conv2d_6/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_6/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/Conv2D"
  op: "Conv2D"
  input: "Pad"
  input: "conv2d_6/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Pad_1/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Pad_1"
  op: "Pad"
  input: "Relu_4"
  input: "Pad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 58
          }
          dim {
            size: 58
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_7/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_7/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_7/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_7/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_7/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_7/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_7/kernel/Assign"
  op: "Assign"
  input: "conv2d_7/kernel"
  input: "conv2d_7/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_7/kernel/read"
  op: "Identity"
  input: "conv2d_7/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_7/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_7/Conv2D"
  op: "Conv2D"
  input: "Pad_1"
  input: "conv2d_7/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_5/gamma"
  input: "batch_normalization_5/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/gamma/read"
  op: "Identity"
  input: "batch_normalization_5/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_5/beta/Assign"
  op: "Assign"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/beta/read"
  op: "Identity"
  input: "batch_normalization_5/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_7/Conv2D"
  input: "batch_normalization_5/gamma/read"
  input: "batch_normalization_5/beta/read"
  input: "batch_normalization_5/Const"
  input: "batch_normalization_5/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg/sub/x"
  input: "batch_normalization_5/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_5/moving_mean/read"
  input: "batch_normalization_5/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_5/AssignMovingAvg/sub_1"
  input: "batch_normalization_5/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_5/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_5/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_5/moving_variance/read"
  input: "batch_normalization_5/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_5/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_5/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_5/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_5"
  op: "Relu"
  input: "batch_normalization_5/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02946278266608715
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_8/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_8/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_8/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_8/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_8/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_8/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_8/kernel/Assign"
  op: "Assign"
  input: "conv2d_8/kernel"
  input: "conv2d_8/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_8/kernel/read"
  op: "Identity"
  input: "conv2d_8/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_8/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_8/Conv2D"
  op: "Conv2D"
  input: "Relu_5"
  input: "conv2d_8/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "conv2d_8/Conv2D"
  input: "conv2d_6/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_6/gamma"
  input: "batch_normalization_6/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/gamma/read"
  op: "Identity"
  input: "batch_normalization_6/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_6/beta/Assign"
  op: "Assign"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/beta/read"
  op: "Identity"
  input: "batch_normalization_6/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "add_2"
  input: "batch_normalization_6/gamma/read"
  input: "batch_normalization_6/beta/read"
  input: "batch_normalization_6/Const"
  input: "batch_normalization_6/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg/sub/x"
  input: "batch_normalization_6/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_6/moving_mean/read"
  input: "batch_normalization_6/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_6/AssignMovingAvg/sub_1"
  input: "batch_normalization_6/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_6/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_6/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_6/moving_variance/read"
  input: "batch_normalization_6/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_6/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_6/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_6/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_6"
  op: "Relu"
  input: "batch_normalization_6/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02946278266608715
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_9/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_9/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_9/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_9/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_9/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_9/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_9/kernel/Assign"
  op: "Assign"
  input: "conv2d_9/kernel"
  input: "conv2d_9/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_9/kernel/read"
  op: "Identity"
  input: "conv2d_9/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_9/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_9/Conv2D"
  op: "Conv2D"
  input: "Relu_6"
  input: "conv2d_9/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_7/gamma"
  input: "batch_normalization_7/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/gamma/read"
  op: "Identity"
  input: "batch_normalization_7/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_7/beta/Assign"
  op: "Assign"
  input: "batch_normalization_7/beta"
  input: "batch_normalization_7/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/beta/read"
  op: "Identity"
  input: "batch_normalization_7/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_7/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_7/moving_variance"
  input: "batch_normalization_7/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_7/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_9/Conv2D"
  input: "batch_normalization_7/gamma/read"
  input: "batch_normalization_7/beta/read"
  input: "batch_normalization_7/Const"
  input: "batch_normalization_7/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg/sub/x"
  input: "batch_normalization_7/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_7/moving_mean/read"
  input: "batch_normalization_7/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_7/AssignMovingAvg/sub_1"
  input: "batch_normalization_7/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_7/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_7/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_7/moving_variance/read"
  input: "batch_normalization_7/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_7/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_7/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_7/moving_variance"
  input: "batch_normalization_7/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_7"
  op: "Relu"
  input: "batch_normalization_7/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02946278266608715
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_10/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_10/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_10/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_10/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_10/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_10/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_10/kernel/Assign"
  op: "Assign"
  input: "conv2d_10/kernel"
  input: "conv2d_10/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_10/kernel/read"
  op: "Identity"
  input: "conv2d_10/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_10/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_10/Conv2D"
  op: "Conv2D"
  input: "Relu_7"
  input: "conv2d_10/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "add_3"
  op: "Add"
  input: "conv2d_10/Conv2D"
  input: "add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "block_layer2"
  op: "Identity"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_8/gamma"
  input: "batch_normalization_8/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/gamma/read"
  op: "Identity"
  input: "batch_normalization_8/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_8/beta/Assign"
  op: "Assign"
  input: "batch_normalization_8/beta"
  input: "batch_normalization_8/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/beta/read"
  op: "Identity"
  input: "batch_normalization_8/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_8/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_8/moving_variance"
  input: "batch_normalization_8/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_8/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "block_layer2"
  input: "batch_normalization_8/gamma/read"
  input: "batch_normalization_8/beta/read"
  input: "batch_normalization_8/Const"
  input: "batch_normalization_8/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg/sub/x"
  input: "batch_normalization_8/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_8/moving_mean/read"
  input: "batch_normalization_8/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_8/AssignMovingAvg/sub_1"
  input: "batch_normalization_8/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_8/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_8/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_8/moving_variance/read"
  input: "batch_normalization_8/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_8/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_8/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_8/moving_variance"
  input: "batch_normalization_8/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_8"
  op: "Relu"
  input: "batch_normalization_8/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Pad_2/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Pad_2"
  op: "Pad"
  input: "Relu_8"
  input: "Pad_2/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_11/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_11/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_11/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_11/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_11/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_11/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_11/kernel/Assign"
  op: "Assign"
  input: "conv2d_11/kernel"
  input: "conv2d_11/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_11/kernel/read"
  op: "Identity"
  input: "conv2d_11/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_11/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_11/Conv2D"
  op: "Conv2D"
  input: "Pad_2"
  input: "conv2d_11/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Pad_3/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Pad_3"
  op: "Pad"
  input: "Relu_8"
  input: "Pad_3/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02946278266608715
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_12/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_12/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_12/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_12/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_12/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_12/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_12/kernel/Assign"
  op: "Assign"
  input: "conv2d_12/kernel"
  input: "conv2d_12/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_12/kernel/read"
  op: "Identity"
  input: "conv2d_12/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_12/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_12/Conv2D"
  op: "Conv2D"
  input: "Pad_3"
  input: "conv2d_12/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_9/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_9/gamma"
  input: "batch_normalization_9/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/gamma/read"
  op: "Identity"
  input: "batch_normalization_9/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_9/beta/Assign"
  op: "Assign"
  input: "batch_normalization_9/beta"
  input: "batch_normalization_9/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/beta/read"
  op: "Identity"
  input: "batch_normalization_9/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_9/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_9/moving_mean"
  input: "batch_normalization_9/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_9/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_9/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_9/moving_variance"
  input: "batch_normalization_9/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_9/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_12/Conv2D"
  input: "batch_normalization_9/gamma/read"
  input: "batch_normalization_9/beta/read"
  input: "batch_normalization_9/Const"
  input: "batch_normalization_9/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_9/AssignMovingAvg/sub/x"
  input: "batch_normalization_9/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_9/moving_mean/read"
  input: "batch_normalization_9/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_9/AssignMovingAvg/sub_1"
  input: "batch_normalization_9/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_9/moving_mean"
  input: "batch_normalization_9/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_9/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_9/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_9/moving_variance/read"
  input: "batch_normalization_9/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_9/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_9/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_9/moving_variance"
  input: "batch_normalization_9/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_9"
  op: "Relu"
  input: "batch_normalization_9/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02083333395421505
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_13/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_13/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_13/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_13/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_13/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_13/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_13/kernel/Assign"
  op: "Assign"
  input: "conv2d_13/kernel"
  input: "conv2d_13/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_13/kernel/read"
  op: "Identity"
  input: "conv2d_13/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_13/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/Conv2D"
  op: "Conv2D"
  input: "Relu_9"
  input: "conv2d_13/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "add_4"
  op: "Add"
  input: "conv2d_13/Conv2D"
  input: "conv2d_11/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_10/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_10/gamma"
  input: "batch_normalization_10/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_10/gamma/read"
  op: "Identity"
  input: "batch_normalization_10/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_10/beta/Assign"
  op: "Assign"
  input: "batch_normalization_10/beta"
  input: "batch_normalization_10/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_10/beta/read"
  op: "Identity"
  input: "batch_normalization_10/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_10/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_10/moving_mean"
  input: "batch_normalization_10/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_10/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_10/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_10/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_10/moving_variance"
  input: "batch_normalization_10/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_10/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_10/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "add_4"
  input: "batch_normalization_10/gamma/read"
  input: "batch_normalization_10/beta/read"
  input: "batch_normalization_10/Const"
  input: "batch_normalization_10/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_10/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_10/AssignMovingAvg/sub/x"
  input: "batch_normalization_10/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_10/moving_mean/read"
  input: "batch_normalization_10/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_10/AssignMovingAvg/sub_1"
  input: "batch_normalization_10/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_10/moving_mean"
  input: "batch_normalization_10/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_10/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_10/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_10/moving_variance/read"
  input: "batch_normalization_10/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_10/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_10/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_10/moving_variance"
  input: "batch_normalization_10/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_10"
  op: "Relu"
  input: "batch_normalization_10/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_14/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_14/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_14/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02083333395421505
      }
    }
  }
}
node {
  name: "conv2d_14/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_14/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_14/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_14/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_14/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_14/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_14/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_14/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_14/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_14/kernel/Assign"
  op: "Assign"
  input: "conv2d_14/kernel"
  input: "conv2d_14/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_14/kernel/read"
  op: "Identity"
  input: "conv2d_14/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_14/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_14/Conv2D"
  op: "Conv2D"
  input: "Relu_10"
  input: "conv2d_14/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_11/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_11/gamma"
  input: "batch_normalization_11/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/gamma/read"
  op: "Identity"
  input: "batch_normalization_11/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_11/beta/Assign"
  op: "Assign"
  input: "batch_normalization_11/beta"
  input: "batch_normalization_11/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/beta/read"
  op: "Identity"
  input: "batch_normalization_11/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_11/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_11/moving_mean"
  input: "batch_normalization_11/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_11/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_11/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_11/moving_variance"
  input: "batch_normalization_11/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_11/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_14/Conv2D"
  input: "batch_normalization_11/gamma/read"
  input: "batch_normalization_11/beta/read"
  input: "batch_normalization_11/Const"
  input: "batch_normalization_11/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_11/AssignMovingAvg/sub/x"
  input: "batch_normalization_11/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_11/moving_mean/read"
  input: "batch_normalization_11/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_11/AssignMovingAvg/sub_1"
  input: "batch_normalization_11/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_11/moving_mean"
  input: "batch_normalization_11/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_11/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_11/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_11/moving_variance/read"
  input: "batch_normalization_11/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_11/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_11/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_11/moving_variance"
  input: "batch_normalization_11/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_11"
  op: "Relu"
  input: "batch_normalization_11/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_15/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_15/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_15/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02083333395421505
      }
    }
  }
}
node {
  name: "conv2d_15/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_15/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_15/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_15/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_15/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_15/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_15/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_15/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_15/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_15/kernel/Assign"
  op: "Assign"
  input: "conv2d_15/kernel"
  input: "conv2d_15/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_15/kernel/read"
  op: "Identity"
  input: "conv2d_15/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_15/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_15/Conv2D"
  op: "Conv2D"
  input: "Relu_11"
  input: "conv2d_15/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "add_5"
  op: "Add"
  input: "conv2d_15/Conv2D"
  input: "add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "block_layer3"
  op: "Identity"
  input: "add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_12/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_12/gamma"
  input: "batch_normalization_12/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_12/gamma/read"
  op: "Identity"
  input: "batch_normalization_12/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_12/beta/Assign"
  op: "Assign"
  input: "batch_normalization_12/beta"
  input: "batch_normalization_12/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_12/beta/read"
  op: "Identity"
  input: "batch_normalization_12/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_12/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_12/moving_mean"
  input: "batch_normalization_12/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_12/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_12/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_12/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_12/moving_variance"
  input: "batch_normalization_12/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_12/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_12/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "block_layer3"
  input: "batch_normalization_12/gamma/read"
  input: "batch_normalization_12/beta/read"
  input: "batch_normalization_12/Const"
  input: "batch_normalization_12/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_12/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_12/AssignMovingAvg/sub/x"
  input: "batch_normalization_12/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_12/moving_mean/read"
  input: "batch_normalization_12/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_12/AssignMovingAvg/sub_1"
  input: "batch_normalization_12/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_12/moving_mean"
  input: "batch_normalization_12/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_12/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_12/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_12/moving_variance/read"
  input: "batch_normalization_12/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_12/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_12/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_12/moving_variance"
  input: "batch_normalization_12/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_12"
  op: "Relu"
  input: "batch_normalization_12/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "Pad_4/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Pad_4"
  op: "Pad"
  input: "Relu_12"
  input: "Pad_4/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_16/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_16/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_16/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0625
      }
    }
  }
}
node {
  name: "conv2d_16/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_16/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_16/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_16/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_16/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_16/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_16/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_16/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_16/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_16/kernel/Assign"
  op: "Assign"
  input: "conv2d_16/kernel"
  input: "conv2d_16/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_16/kernel/read"
  op: "Identity"
  input: "conv2d_16/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_16/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_16/Conv2D"
  op: "Conv2D"
  input: "Pad_4"
  input: "conv2d_16/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Pad_5/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Pad_5"
  op: "Pad"
  input: "Relu_12"
  input: "Pad_5/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_17/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_17/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_17/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02083333395421505
      }
    }
  }
}
node {
  name: "conv2d_17/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_17/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_17/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_17/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_17/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_17/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_17/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_17/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_17/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_17/kernel/Assign"
  op: "Assign"
  input: "conv2d_17/kernel"
  input: "conv2d_17/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_17/kernel/read"
  op: "Identity"
  input: "conv2d_17/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_17/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_17/Conv2D"
  op: "Conv2D"
  input: "Pad_5"
  input: "conv2d_17/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_13/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_13/gamma"
  input: "batch_normalization_13/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/gamma/read"
  op: "Identity"
  input: "batch_normalization_13/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_13/beta/Assign"
  op: "Assign"
  input: "batch_normalization_13/beta"
  input: "batch_normalization_13/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/beta/read"
  op: "Identity"
  input: "batch_normalization_13/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_13/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_13/moving_mean"
  input: "batch_normalization_13/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_13/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_13/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_13/moving_variance"
  input: "batch_normalization_13/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_13/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_17/Conv2D"
  input: "batch_normalization_13/gamma/read"
  input: "batch_normalization_13/beta/read"
  input: "batch_normalization_13/Const"
  input: "batch_normalization_13/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_13/AssignMovingAvg/sub/x"
  input: "batch_normalization_13/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_13/moving_mean/read"
  input: "batch_normalization_13/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_13/AssignMovingAvg/sub_1"
  input: "batch_normalization_13/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_13/moving_mean"
  input: "batch_normalization_13/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_13/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_13/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_13/moving_variance/read"
  input: "batch_normalization_13/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_13/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_13/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_13/moving_variance"
  input: "batch_normalization_13/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_13"
  op: "Relu"
  input: "batch_normalization_13/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_18/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_18/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_18/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.014731391333043575
      }
    }
  }
}
node {
  name: "conv2d_18/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_18/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_18/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_18/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_18/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_18/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_18/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_18/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_18/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_18/kernel/Assign"
  op: "Assign"
  input: "conv2d_18/kernel"
  input: "conv2d_18/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_18/kernel/read"
  op: "Identity"
  input: "conv2d_18/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_18/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_18/Conv2D"
  op: "Conv2D"
  input: "Relu_13"
  input: "conv2d_18/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "add_6"
  op: "Add"
  input: "conv2d_18/Conv2D"
  input: "conv2d_16/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_14/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_14/gamma"
  input: "batch_normalization_14/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_14/gamma/read"
  op: "Identity"
  input: "batch_normalization_14/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_14/beta/Assign"
  op: "Assign"
  input: "batch_normalization_14/beta"
  input: "batch_normalization_14/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_14/beta/read"
  op: "Identity"
  input: "batch_normalization_14/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_14/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_14/moving_mean"
  input: "batch_normalization_14/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_14/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_14/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_14/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_14/moving_variance"
  input: "batch_normalization_14/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_14/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_14/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "add_6"
  input: "batch_normalization_14/gamma/read"
  input: "batch_normalization_14/beta/read"
  input: "batch_normalization_14/Const"
  input: "batch_normalization_14/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_14/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_14/AssignMovingAvg/sub/x"
  input: "batch_normalization_14/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_14/moving_mean/read"
  input: "batch_normalization_14/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_14/AssignMovingAvg/sub_1"
  input: "batch_normalization_14/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_14/moving_mean"
  input: "batch_normalization_14/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_14/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_14/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_14/moving_variance/read"
  input: "batch_normalization_14/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_14/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_14/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_14/moving_variance"
  input: "batch_normalization_14/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_14"
  op: "Relu"
  input: "batch_normalization_14/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_19/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_19/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_19/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.014731391333043575
      }
    }
  }
}
node {
  name: "conv2d_19/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_19/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_19/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_19/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_19/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_19/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_19/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_19/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_19/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_19/kernel/Assign"
  op: "Assign"
  input: "conv2d_19/kernel"
  input: "conv2d_19/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_19/kernel/read"
  op: "Identity"
  input: "conv2d_19/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_19/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_19/Conv2D"
  op: "Conv2D"
  input: "Relu_14"
  input: "conv2d_19/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_15/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_15/gamma"
  input: "batch_normalization_15/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/gamma/read"
  op: "Identity"
  input: "batch_normalization_15/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_15/beta/Assign"
  op: "Assign"
  input: "batch_normalization_15/beta"
  input: "batch_normalization_15/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/beta/read"
  op: "Identity"
  input: "batch_normalization_15/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_15/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_15/moving_mean"
  input: "batch_normalization_15/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_15/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_15/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_15/moving_variance"
  input: "batch_normalization_15/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_15/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "conv2d_19/Conv2D"
  input: "batch_normalization_15/gamma/read"
  input: "batch_normalization_15/beta/read"
  input: "batch_normalization_15/Const"
  input: "batch_normalization_15/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_15/AssignMovingAvg/sub/x"
  input: "batch_normalization_15/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_15/moving_mean/read"
  input: "batch_normalization_15/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_15/AssignMovingAvg/sub_1"
  input: "batch_normalization_15/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_15/moving_mean"
  input: "batch_normalization_15/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_15/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_15/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_15/moving_variance/read"
  input: "batch_normalization_15/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_15/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_15/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_15/moving_variance"
  input: "batch_normalization_15/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_15"
  op: "Relu"
  input: "batch_normalization_15/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_20/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_20/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_20/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.014731391333043575
      }
    }
  }
}
node {
  name: "conv2d_20/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "conv2d_20/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_20/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "conv2d_20/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "conv2d_20/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_20/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "conv2d_20/kernel/Initializer/truncated_normal/mul"
  input: "conv2d_20/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_20/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_20/kernel/Assign"
  op: "Assign"
  input: "conv2d_20/kernel"
  input: "conv2d_20/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_20/kernel/read"
  op: "Identity"
  input: "conv2d_20/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_20/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_20/Conv2D"
  op: "Conv2D"
  input: "Relu_15"
  input: "conv2d_20/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "add_7"
  op: "Add"
  input: "conv2d_20/Conv2D"
  input: "add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "block_layer4"
  op: "Identity"
  input: "add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_16/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_16/gamma"
  input: "batch_normalization_16/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_16/gamma/read"
  op: "Identity"
  input: "batch_normalization_16/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_16/beta/Assign"
  op: "Assign"
  input: "batch_normalization_16/beta"
  input: "batch_normalization_16/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_16/beta/read"
  op: "Identity"
  input: "batch_normalization_16/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_16/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_16/moving_mean"
  input: "batch_normalization_16/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_16/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_16/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_16/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_16/moving_variance"
  input: "batch_normalization_16/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_16/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_16/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "block_layer4"
  input: "batch_normalization_16/gamma/read"
  input: "batch_normalization_16/beta/read"
  input: "batch_normalization_16/Const"
  input: "batch_normalization_16/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_16/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.996999979019165
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_16/AssignMovingAvg/sub/x"
  input: "batch_normalization_16/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "batch_normalization_16/moving_mean/read"
  input: "batch_normalization_16/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_16/AssignMovingAvg/sub_1"
  input: "batch_normalization_16/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_16/moving_mean"
  input: "batch_normalization_16/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_16/AssignMovingAvg_1/sub/x"
  input: "batch_normalization_16/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "batch_normalization_16/moving_variance/read"
  input: "batch_normalization_16/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_16/AssignMovingAvg_1/sub_1"
  input: "batch_normalization_16/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_16/moving_variance"
  input: "batch_normalization_16/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Relu_16"
  op: "Relu"
  input: "batch_normalization_16/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "Mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Relu_16"
  input: "Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "final_reduce_mean"
  op: "Identity"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\000\002\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "final_reduce_mean"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "readout_layer/kernel/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
        tensor_content: "\000u7=\314\206\316\275f\341D=\265&\217\275\024/\331<g\365\n:5Q\002\275\274N=\275\027eS\275A\354\272\272\035\352\036\274!\320\325\2749{q<\"\004\351\274\372f\342\274\017:3=.U\\\274\306\250\002=\3651\353\274is\240<\347\371$<I\235\000\276\375\207\265>\275-\217\274/0F\275\267k/\276\344\224E=\247\030%\275^\227\212\275\264/\032=\324\370E<L\010\373<\200\004w\275M\200\231=\355\263\310>Q\363\000\276\026#f\275TR\233>:o>\275\306\311\'\2759\202\\<\374\303\337=\0144\200\274\000\223\205=\357\325\324<\206\'\024\275\276\335\216\275\3328m\275\253\214\206=\215\234P<\226\3640\275d\362\212<8\276\207=\2527\357;V\254\322;3\234\321\274\034\307\303\275{\225\317<L\n\322<LZd=\2146N\275p\n\014\276\t\215\017\274\303\341X\274\302\235\315\274\235f\266\275m\245`\274U\341]\275\323\270\005<#5\006\275\233\323,=\263\316\326\2745\355N\274\020\302\304<\023!\376\273N\224\030=\375\215|<Q\343?:\341\312\362\274\334e\222\275|\241j\275m\371\227=\373V3<s\305\302\274\345\024\212\275Z\314\310=\336/\311\274&\252\205;#\260#=\272\306\214>\260\366(\275\324\376\200\274\013>\004=\023j)\274\224\336\223>\306\004\020=8[\220=\377\034h<#\035y\274j\326\254\274[\226?\274\2537\273\274\225\252\325=\362\310\245\274.\033\261=\330\020|\2742\305\322=\245\352\027=\2219r\275\3237L=+\206d;5\306N>\332\000\022=Ls\206<H\375\026\275\2349\207=\315\003w>N\274\203\275\216rz\275\344\251!<CA\264\274Z4\004=T\350\361<\370q\217\274d8L\275e\374\370=\357=\261\275\241\235&\274e\302\222<\265p\267\275\tMW\273\223\222\310\274\026@\307\275\322z\253\272S]D\273\3014o;f\340\240<@\360\244\275\263\226[\274\220l\013\275\004\247\004\276\376\262\340<\272.\264\273\220 \211\275\223\2001=f\017/=\202\260\177\275\227po\275\210c>\275\014\017\000\275\317\253\315\2732)\006>\267\340J\274e\246\037=\333K\005\275MQ\r\275/\257\225<\3475\201\275l\345\'=1\253\210=\356\276\276=\251\177\336\273\374\301\245;\016\3329=\365\327\310>!?s>\004\361\024\275\215Ur<v\375\244\274c\304\211\275\331\227i\275\020\271\275\274\014S_\2759\230E=\022\277\303<\023j\263\274\303\\r\2752%S<\275\241\221;\033\032\345<\272\372\353<\0010\014\274\034\244\375<\010\236!=\242\001\240\274\242\220k\274F\226M:\227\017M\275\005\364\002\273\253\310\'=\233Y\202<1\377+\275q\035\001\276;_e\275Uj\302\273\321\036(< z\273\275\'\312;\275\345\240Q\272\225>\034\275\341\004U=a(\271\274\225\315\264\275\344{\257\275\326\210=\275\364Q\306\273\275\225\276=\000b\374=\372\207\'\2750\027\036= \013Q\274\301\353\232<\247\312\242\274\035\367\305\274)\245\203\275\217Yk<sgj\275\t5M=r)M\274\303\206|\274Y\247\220=\r\024*\273K\315U\274\316\241\210\274\324\252\277\274\257\303\235;{A4\272z\323\240<\256xa=Kd\262\274/\276p\275\356l|>\367d\273\275b/8\275&\304y;\207\264\270\274F?B\275%\261\031<\355\001\234=\2020*\275\242\002\237\275\343\341\027>+\230\331\272]\241I\275h@\002\275_p\256<\261\257\215:M\236I=\306\3328=\347\215`\273\010z@\275N\001\031\275\323\3016\275\317\177\205\275+\250\327\274\363\017\245\274TP\212=B\303Y\273\242_I<\340\303\200>\260\323\224\274*9\333\275\334\342==\261\335\244<|\211(=\341RI\273?~A=pV\247\275\213\327\206\275\\\205\315\274\207\312\234\274\003|\006\275.\357K\275\302\312\226\274Y&c=\226\277\266=7j><\032\333\'<\1775S\274\374\322\017>Gy@\275\324\006\254=\252\206\202=M\023\277=\321|\310;\315\254\367\272\337N&\273w\215\344\274\204\032\241\275>M\013\274\310\3114=GK\004\275/\305\'\275\245\037O\274\326\'\2779\260c\267=\t\365\357\274:\002\271=\220\375\204=\031c\314=!\321\023=~\337\261\272z\223?\271\247\261\206\274>\225\"\275\353r\002<\236\266\022>}\373\016=_xr\274\331\250@\275\367Q\243\274\235`/=\245\202/>\345N\227\275\314\360\206<\337\220m\275u\245$<\022y\3179+JO<\252`\231=x\277Z\275L\223|<\263\227\037=Q+\351\275eDG\275\005&y\274\301Q\277\274:i&\271\237\260\177\275\234\354S\275\021\300Z<\312\tI=&\247\n\275h\374l\274V(\271=\264\255\362\274_1W>\t\'\024=\251K\247\274\223{\327\275c<\023\274h\354\247\274\276>^\275r\013\271;\034M\235<\003\343\241\275\026\216\365<\342R\304\273\227|\372\274\261\354D=\002\205B<\313\354\325\274\026\021J<\245\203_;W\276\204<\333\244\310=\236\2406={\366\320\274\245!,\275\335\007v\275\007\376\261\274\345\352\352;\215C\223\273\\\242\323\275\324 \252<\232\220H\275\034\271B\274\r&f\275\344#\253<P}\213>\205\327y\275\231yX\274\376\"\021>h\250\022\275\214N\250\273\272\003\217\272\253\356.;\362\321\355\274\374\322\210\272\233\204\202\274\203R=\274;\366\341<\215^P=GBU\275\360-\037\275Zc4=r\217;=`f\376\275=W\205<\365\247i\275\226\3212\275+\"\345\274)\\T\275\223\321`<\365L\333<\351D\220\275\n\211\265\274>m\363<#S\333<\237\330\262<H\377\353<Eu\034>\243\016\255\275\3648\231<\216\013\007=\376\252\247\275x\253\320\274lF\027\274]\261\206=bG}=\\5\224\275\344\000\020\275\335\320\203<\361\221\200<P[\013\275\322\322\205\275\327i\220\275`c\337<\322\304\250=\264\003*\275\224\203\365=R\354\212\275_fq<c\230$\275\013\371\334<\230\267-\274\376\371\026\274N\211\353\274[\310\020\275\337i,>\365&\234\275\321\335\263\274 \354\360\274\255\226J\2754\365\021\275\002\006G<\271S\000\276\n\250-\275\370\336A\274\216\316U\273\255\310i\275i\217\206<3\005]\275\301\370Z;\003\271\n\275>\350><$\202s;\357\322\"\274d&\205\274\273Q\233=\t\r!=\206I\315\275\034D\255\274DHF\275\313\333%= \020\220<V\214c\275\037\240L\275z\340w\275w\026\342\273\304T\234\275q\360%=Z\260\355\273\2350\342<\264t:;\221O\021<\334N\205\274r\343(\275\261\016\207\275\010\2631\275\307ZT<_\277I\275Y\242\027\275\303+\316;\200\316:\275\327\333P\275\350h\214\2731\253\242;\215sP\275\346\236b9+\213\007\2753\251\313\274\220\314\032\275Jj\334\273\007<\254=\314\326\247\275t]\n>\031\210\r\2754\312\201\275s\212\001\275w\002\276\274\301\025\222=u\352\200;F\353#\274\334\341\201\275\357\276\001=x\332\344\275o(\002<\341\215\253\274\300\276\260\274!\200\207\275\326L5\275M\330\205\275\344\231\212<3\356\224\275\2332\224<\001:\256\275\004\210\277\274O\004o\275 \304\352\274\226\276\022=\335X\216=J\215\260=\245Z\001=\230iD=\260\277\003\274\232,\225<#\373\251<\226\035.\275j\022\026\275\337\004@\275\252\005\205\275\325\240\261\273\026\314\010\274R\245 >e\024\363<@T\334=`\245\360\274r\177t\274\265\325V\275D4\323<i\312\343<\340T\023\273\022\022q\275\007M\205;n2\002<\376 =<\253(Y=\034~\271=o\376Y\274,\241\000\276oy\262<\321\346\325<\377\361\367\274\214\252\274\274\274`X\274\234\213\211\275\253\276\354\274\335I=\275\237\305\313\274?E\"<:\0165\275\213\t\202\272\030\376\326=\\l\323=\r\304\207=\330\026I={\000Y\274\235\220\201\275\371\336\016\275,\020D\2751\214\352<c\t\327=\251\003e=\372\006\004\275yQ\010<\020ho<.\265\253\275c\315\030\275\303F\213\273\345-\033=\303\207\035>\275\027\201\275\014D\222\275\353\031\201\275le\202\2757\363\320=\275u8=L\264\217\273\246\023O\275\342\021\275<0\334\362\274\337-\347\274\252\244\030=\030\177\254\274\013\220\t\275\205O\272\274\372\205y=\206\016\211=\027L\'\275\232\204\n\275\357L\253=\372\373H\275\345\343\024\274k\335E\274\004\313M\275\212\032\276<\312\255]\275f\033!\275\326k\033\275\352Y\230=O0\261\275O\304\212\2748\021\274=\276M\013\275\177\030U\274\017\030V\275\210\2062\274j[O\275\351}\327=\253\255\303:Z\366\360\274\222\300\025\274\275F;\273\207e\233=-\253\357\273\201\354>\275\214\225%\275\317\324!=mT<=\3441u\275\021\201\302\2720\324\215\273J ><I\336b\275H\026+\275\212\344\356<\336P\325\275\225zU<\2361\375=L\304\034>\323q\200=\355(?>\247\215\007<\261\224(=\205\222?\274_\221\372\274k\n\025\275\312\036\270<\354U\373\274\226K\277\274HR\r=\027 \333\274v \'>\351b\304;\243\261\274\275C0\262\275\260;\256;,i\262\275\021|6\275\266\217~;8\334\300=5Y\223\2751\215\334<V\330$<\233\306\340\273\257\221\002\275*yf=\274\370%;\030Y9=\223\032)\274\377T\201\274\311\320\323<\272E\243\275\017\240?\274\244\226\224\275\234\321\362\2748\025\344\275\030uM\275(AI=\343^\245=\311|\230\275pj\207\275j\203\213\274\n\375\256<\315\257\331\274] D\274\341=N<\243\t\316\273\336\257C\273.\305 \275\017\351,\275\312\016\232;\367A\027=\300?\374=\301.k\275R\302\233=s\'\230\275\344\223\266;\212yO\275?.\306\274\362\377\210\274r\340\000<\256\320\236\275\021\025\r=sc.\275Wn\036\275\264}\304\275\";\354\274A\260Y\275\311\316)\275pv\231\2758!)\275\301\300\371\274\022\234*=\264\000\235=\330\366\240<\272=\n:\024\227\332<\016\025%>\256\357\177<OK\317<-\215\246<\021=\035\275\252\235\217=JX\003\275\033\037\303\275\025\022\370\2747\304\217\273\255\000\334<\373.\301\275\023\260\235<\200S\231=\361\013\014<\255D\333=a,\252\275\244\376\226<vfl>\244U/\275\243\351\\\275_\324I\275D\3652\275\366\223\256\275#\246\210\274\236\322\357<Z\rK\274~t\004=\224\234\235\273*\260\037=\301#\314\275\227\346\013=@\302J\275\"\352\243<\233p\304<\003\212\224=p\321\003<\\y\217=\334\303z\275\215\336\207\275(8]\272\264\005+=\244\035Q\275 mw<L\003i=\336@\216=\000\030M\275O\356\n\275K\342\025>\200Y\373\274cO\004=\2658\265\271\2519\271=\311@l=\367lV\275\211\005\n<\014\302\307<s\276+<\317\333O=\263\354%\274\340U`<p\201\372\274U\240V\274\001\245\017\275\0363\355=s\274\352\274\217x\322\275\301\344a=\377\361\345\273\\7\326\273/,\304\274X\212\243=\363t\001=c\001\336\275\303\3114\275A\236\227\275m+\023=j\017V\275\220\006\017\275?{a<X\2116\274\004\361+\275t\224\001\275\261y\003<:Z\220\274\026\235a>\203\255\361\274\262\243f\275\231\021\244\274RR\303\273\250\227\247;w\230\000>\223\372\000\274\256\214d\273\2362G\275d|\226=\350#(\274$\'\026\274\030\262c\275\036\342\261=<\275(\275\3359\255\274\371\321\026<\200\344\n\275\343\265b\275\024z\273=X\301\214;\332\353N\275\346\023\202\274\346\254\220\275`\2757\275F\030\036\275q\335\022\274\275\025\374\274\"\363\000\276[\317\212=\367\301\307<bd\276=*S\314\273m\230n=\222\003\\\275Ev\210=%\004\213=F\245\274=\323\002\303\274$A\307<S\334\221=&\201\177=+\345\006\2758C\374<\204\021\242\274(V\271\275\235`\331>\311\362\240\273\323\373K\275\'\230%\275I\251\003\274T)|=\016\257\021\274\234\000\237\275\355S)<\002\004\340<\344X\244\273~.\302;\267\260 \275\270\377K<\022\316\321\272\323Z\274:ny\t\276\227\000e\274~L\362\275f5\007\275T\334\333=y\357+>?TK\275\003\310~\275\353@\225\274\252\203k=\323F\010=\307\307B>s\312\232=\342\253\017=\346\217i<\'\261\354\274X\2176\275f\304\005=F\252\362<03\261\275$z\221\274P\225\033\275\267\253R\274\315a\377\270\031\221\331\274\261j\211=I\302z<[2T>\001L\230=9\333\004>\265\'\351\274Q\325\316\274\037|x\274\267\'\243\275\336\2352;@\007v=:\257\027=(\313\'<\305\300\342=\323\274\365<\221\006\210\274!\250Z\275\354\3508=\324\217\204=}\223E\275\256m\273=\2723\252< \311j\275\370\220I\274\274:\200\275b\344\017=UUx\275\010 #\275\312\333#\275\266\367r\275\014O\026\275~\006~\274\277\177\245\274\337\224\361\275\013\252v=\212\330\001=\033/\211<i\226\217=\246\301\314<C\231!\275\221,\177\274\211\326`\274\024\330&\275\220\002\240\275\231\330K=K&\022\273@\365\223<\316\230\314;;+\036\275\271v\010=\211\027\024\275\0166I\275\244U\316\274B\033\017=\334)\013=\356\036\r=\326\276N=\231\212\300\274\033\261\022=\023\032n\275\330\375\243<\353\344\313\271B\274\264\275\254\265\304\273\032\342\235\275H>P\274\225\003r\274b\356\247=h\177\'\2750\360\317\274/Hr\275[\006\363\273\236\022\254\275K\232\241\273k\205\204<cM_\275\n\333\r\2755\277Q=\244\245\'\275l\373\201\275\205h\017\275HV\233\274\335W\306=\260\274\222<\177#\215\275\033\t\252;\344\030\212\275\323\273\036\274\261!2\275jt\250\275\002-\316\2746\246\237=\345\025j\275\253\230\261\275\345\006~\274}\371\214\275=;\275=1%\207\271\307\207\022\275\023B\345;<\243\241\274\366\272\244\275\255\265\001\275Yf\337\272^g\037\275\010?9\275\315\234^=\360\254\376<\257#\373<U\n-\274\221\005\021\275\225\033\016\275\022/\236<^9\277=\325\375\354\272\201\016\356<\034\310\356\275\344\272\037\275\000\366k\275\037<\377\274\202\247\214=\262O\357<\317\216&\275\333\261\036\275\344\351d=_\251\270<Xi\036=\2205\211>]7`\275\221\326\220<\330\342z<O\221g\275\024dZ\275\2538z\274\3563\035\275\314\200\356;]\321h\275\324\274d\275^\317\003=\020\316\n<\235\360\224\274\023\316n\273\202\2677\275X\267\334\274\275\325\n\275\375\023\331\274\270\262\265\275\252\301\204\275\305Hp;[12\275y@\220:/s\221=\366\231\316\274;\2544=$\240\211<e\247\034=\3167\336\275\317\305\022\2752\013s=*=\311\274r\232F\275\247\203I=]\272\005\275J\250\334=\251\223\n=\010\032\210=\230q\305=\276\335\000>o\363L=[\314\251\274u\321<\275>qv=d\200\247<)\311\177\274\3374\307<\366\033\207=\rd\237=\025\261z=o}z<M\273\242\274|@K<\367\366\222>>\243\327\274\037\023\370=\226\303\317\275\370u\n=\234\3578\275J\204\177\275\260\270\364\275\351\3065=\231\370\216\275\360\353\277;x\343\300<\244\225\275<\353+\262\275E_\340<bv\215\274\225\010\202\273\326qL\274e\235\354\275\310\233\252\274\003\277\265<7\347\216\273_S\010=I\020J=\346A#=\203\206\274=\307P\204=\361\013/\275+v\241\275P\037\303>\227f\202\275\200\367\303=\267\000\210=\233?==\222@\222\266\346\324_;\225\322\307<\367\212\031\275Fc\355\272\270\236\245\275\024H)\275\354J~\275\206o\271<1ab\275~Z\343<\205dM<2H\222\274VLY\2750\004\261\275i\371\313<\322\351\242=\2571\024\275\202(\016\275\210&\303\275\3041\363\274\237\366\223=!\255\347\274\330\240\211\274\\{\330=\037\260\017\275\351g\003\274\247\007\007\275\322l\275<\240\356w=\252;f\275q\226\216=\332\324\022\275\222\262\273\274\207g\245\274A\204\031=r\262,\275Q\201W\275M\'\036\275\367\350\224\274\340\361\356\274\203\260B<\324\261\016\275\317MM\2757\355\251\273F\367\356\274F\336\311=d.a\274\263r\251=\311\377\351<%\264$\275\004\3051=\004\034\335<+o\026=E\223\007>V\317\372\274\277\010*\275\335i\341=\341\251\243;\2041\352\274$\247\266<\362\332\025\275\312\033\375\274\254\233\001\275-\023\376=\303\202\3678\213\365\030\274fRu<\031\325\216\275\200\206\262\274\014\367\351<\371CU\275\274\317\321\272k\225\002\276\210b\n=\323u\207\275\365\272\022\273r\305 >\206Z\036\275N\275\261\274D\225\006\275\024\351o\275(\264\337\274\262JN\275x\017\021\275\214\024\201<\312\354f\275\250\334t<\020)\t\275\371Q\244\274Le=\274\367\336\264>\257\236\203=\234\314T=\021 E\275\252Q\222=\034\231\306:\256\253\203\274\201\345\305>\325\240~\275\320\201e=\321!q<\026 7\274\037\032\250\274\216IE==uA\2736\251B\275\343\255\212\275\356\346\n\275\020R5\275\341\263T<G\342y\275L\304\363\274T4\202<\024\370\364\274;\251\031\275\376\343\341\274\322\250w\275\023\200?\275\037B\317=\221;\220\273\365\036\035=\252\035\324\273\375\001\007\275MfV\274\263\251\246=1*\034>\252\000\240\274\036\361\367\274h\307b;Z\354\005<\337`\365\273\013%G\273\231J\026\275\365\317\256=\230?\177\275\276U\375<\364\"\230;<\035\372;\2554\317:\233v\277<eu\372<La\321\274\'t\200>Q\3578\275>\344\261\274\002\224O\274\247\234\351=MG\352\272;\016\300\273\322\217g<\213m\305\273\367\232\226\274\344\250\304<f\255\010>\360a\"\275\352\357\001<\231\016K\275-\370*<\322+\304\273\251\355n\275\231\3701=0\310\027;lr)\275\345\213\022\275B|M\274\023\036\225\274\341\014\336\274\2204@\275\206\200<\275C\370\233<\226\317\035\275e\305\370\273\227K\203\274\004\201*\274rcx=\003\331\245>!h\037\275\035\324\027=\027_n\275\340$\333<\364~\215<\006\037\301\273\267\031f=\260\035<=M\226\242<\375\025{\274h\006\306<Fz7=\261H\224\273\266N\374\274!/\006\275\005\364?=\224\024\307\274t\254]\275\210\2077\275\207\375b=\346\351t\275\311\350f\275B\335\017\274<\231L<\222\207\225=[\306\352\275\367\243\341<\034\312\037\275\203P\215>K\267\327\273[\242v<\213\2477=\005\013\004\274)\246\220>.\242\373\273\266)\010=x\363\001\275\214\377[\275}\204\217\275\346=\300\274\277\276\356\274\314|\246\275\355\375Q>\325\264A\275\264\271y\2754\006\332\274\016^\232\274\264\257Y<8\032^\275\306\014?\273\177\214\362\274\245R\340\274m\006 =\'\246>\275\001\005H\275\334\347+\274\276D\t\275\260v:\275:e\026\275\245\255-=^\324Y\273\031\031\'\275_\023\245=\225\340*\275\312\030\300\274p\242\350=;\362\247=\337\301d<\235\277W\275\271\324%;\346\264\223<\021\245#\275\366Oa\275\267\032\033=\373\235\023\275\213\\\205\273^\324\213\275\014*D=\346\350\227\273\341\250\t\275O\242u\274^\251&;\327\345\202\274\264\037\346\273\304\215@\275\375B\307=\354U\336<\240\317\017\276\002:\334<\233\254\237\274\355\245G<\275\320\014=\326\007w<\372\317\037\275\316<\207\275\333WB\275\221\022u=bjq=.-\303=\263\3547:=9\243<*\004)=\031\376\020\275\313\346^\275\010w\261<\226Q\306=\314\263\225\274<\264n\274\347\236\021=U\307I\274\220\3106>\240\3037<\207;9\275\207\022\355<I\352\310=J\034\215\273\031\240a\273\324\303\345\274!w*=V\210\350;\030\256Z\275\037u\233\273\275w\000\274d\0172\274`-\276<\200\357\212\273\200Qp\275\0367+\275\320O==\231T|\275j\264\031\275\243\341\034\275\205\301\310=\237\263z\274c\006*\273Y(_<\305\002\025;,\226:=\'C\227<@\242\"\275\335\312q\275s\020,>P\303\362<\305\352\254\271\223\317\013=?\364\214;\335\241\330=\377>q>+\274\203\274hY\023\273\236\204\305\2756\343*=\305\360\365<CK\365\271/)\324<<y4=?\177\231\275\003\315(\275\311\304\326\274\022\322\037\274\216R\227<\240\301J\275\256L\013\275K\377\320;*\341\226\275=\210\266\274\204\024\301=\266\232\377<\301\246\211<\033\360v=\214\232P<\026\213\303\274\376\352\360\274h\222\033\274\320\027\013\274\210e\336<D\207\246\275>F\000\275\260\207\037>\025\t\314\274I\257\201\275SL\206\275\335\372f==\244\237=\307\250\312\275\003{\231<p:\375\274P\275^\274T\207}>\270n)\275\375\010\n\274oo/<\3125\351\274\006\250\203\275{\334\243\274\364\211\254=\341\253\341\274;GU;\356\231\326\275Iu\021\275\322\304\216>\332\342\253<J;6\274\350\330\264=\344N\247\273r\214?=\307l\331<Kv\001>@\225h=\206\234\333\273\353 \312=\317\325\255\274{Y\324\274\2001q\274\310\'w\275\364\2223\275,\0176>\305\021\376<t+\335\273\361\316\314\274\357?\000\275G\2343\274\310m\033\276N\324\301\274\236\276\027<\023\374\264=\200\235\002\275\375\331\010<\021\346\004\275\340\316\304\275\234y\310=\031~\240\2753}\033<\313\266Z\275\230-\373=\352S}\275\256P\354\274\371\233\252=](\200<\225\017\030\275(\005?>L\035U\275 \347\221\274\323l\302<L\242\300<\030\256\017=\305\3517=Fve\274\376}\334<A\324\\<\353\336\220\275o\304\240\273\016\316\"<\022\247!\275\271t\200>\013r4\275\234w\274\274w\206[\275g\246)\274\213u\273\274!\311\215\274\221\364w=H8\303\274\344l\234<\253r\326\275\313\211\022\275\252\350\211=Kq\356\274\0348E<E\226F\275r\024\302\274\245\264\030\276\235\333\025<c\214F<\324S\025\272\317\351\276\273y<s=\301T\261\274k\324\372=\264\307\231=h\264\000\275\215\271\206\275\220\364\254=l\256\030=#IP=l\340Q=8\300\200\274\365~\212<\371\023\034<x |\2752-\316\273\342\325\'\275\320\220\324<Uv\025\2755b\204\273\271\022;>\371N\237\274Q\346\247=?\220x\273\264\350\000>H\240\251\274HYV=\236\225\253=\253\237a\272\031)\256\275tK\323;\262\220S\275bkj\274\n\331\233<\252)\305\274.\334\207\274\344\334D\275!\356\034>\024H\372<\021\2059\275%.\335<Z\006\255\275\341/\010\275\260\333m<\351t\224>{\351\3118\317\356.;\013 \274=\016\210\250<\023\363\003\275\301\300\301\274A\330\205=\205\013\001\275\332\003\216<\367BH\275\354\211v\275\375\377\210=\3176\210\275\216R\014=\311\024\241=\345\030\254=(\244\215<C+\213\275\345\224\023\2753KW\274\004F\313\274y~\330\274X\336\326<\230@\023=\205\316\006=\270\227\365\274\030J\025=\t\334o>\360\347\"=B\355\033\275\367\322\212=1\205[=\341)\213\275\231\352\304\273\224\023;\275\313\354\220<\006\367.\275/\317>\272\255\177(\275=&X9}\350\274\273\023t\302\275\026p\277\274^7 \275L2\276;S\342\213<\374#\026\275\024\303E\275\363*\020\275;\343\t\275\376\000\005\275\030I\017\275jo\034>\356}\024\274\210\214\017\275k:|\274o\320\204\275\222\313\225\275+\004.>\2111\301\274\232\375\\<l\270\332;\251 +\275\273`8<\245\017H=#\377\325\274\032\236\347\272\240`\004=jw\373=\360\014\017\275\346\021\r=7$\214\273\335\024W\275\337\326\274\275C>u;\215\262\360\274\272Jk\275\366 [<\370\331\345<\263\263&<j\330n<\350 \254\274B}(<\221\367\233\274\"3\332\273\301Ot\275<\027\243\274\351\276\274<\334\245]\275pJ\270<\035B!;\005\016\364\272\270\313\354:=V\342<Q\036\234\275U+%=\2417><0Q\222\273\376d\004\273\312\021\212\275X\221\250\275\235\r*\275U\200M=!\312\000;\265d\335<\353\027\316=\2364\222\275t\272\300=d\227\277=\t\316\031=z#\246=\204\357\234\272\353\306\227<\006\372\224=\373\335`\275\204.$\274\327(f\275\3127-;2}\003\275\034EX\275\016Lm\274P\004\201=2\214@\275=\253\267<1~v<\251\310\347\274\267\213\204=pMe\275\261\276@\275\320G\275\273H\350^>\215\220y\274\233\306\252<\031F\214\275\004*\037<\342\025\216\273\3421\255\275I\353\253;\364\\\252\275\236\3340\274\357\376U<\231v<\275m\233\217\274\013w7\275#\337\227\275\213E\304=\326i\374:\223\256\030=\357P\313<\010Q\321;\013\236H<8.\254\274\253u\223<>X\202\275z\224\273=\321s\277\274\267\310\336>\310\003e=\324\025\014=\336\237K=irO=\277\252\016\272v\345\242\275\372x\320\274[\257w\275\206\020\204=\271A\333<\232y\206\273\304\027\253\275k\257n=\014c\245\274F\223^\275\233\322k<qYI\275\23180;\216C\003;\\\013\030<\327\232\256<\3577t=\247rW\274\303\004Z<;\223\r=\233Z\233>\243(\236<\321\216c\274\255;Z<\271o\230\274\201B\377\274R\321\241\273\372\310s:\363R\316\274\334\245\030\275\252V\307<\251|i=\342\300\360<q[N\275\340\210\261\275\233\252\262\272\320n\316\274Y\240\234<\267\227\203<\317\032\274<a\323\210=\203\214y;#h@\275\316\217u\275\210\204\377\274\371,\303=\001*\270=$\232\037>\212}c\275\005\374\200=\004\236\247\274\314\320\014\275\'y!=\240\']> \004\027\275\210+\t=\263Ve=^\335\323<w;\303\275\345I\234=g.5\275\253\310\033\275\330\213\275<\245\374\246=R$\216\275\'X\364<\217c\003\270/\007\326\274\n\231\216>\013\313\277\274\033\343\210\274\306\376\267\275\031\021\257<\243`M\275H\222j\275;Z\205\275\022R\014={\\$\275\027\301\351<\353\304\314=!\204\321\2741\225K\275U\303\022<\3062\275<}*r\275:8x\275\\\321\205\275\325\3709\275\326\202g\275\304w0\275\357\030\212\271W/\214\275\000~\343<\252\374\351\275\325\203\204\275[\264X>6\247\377<\250ln<\245}\202\275qp\014\275.\263\327<\2633\217\274\033h@\275\274\314\307\2732 \313=\300\351\312\274\013\247\223=+\300\216>\307\026\307<\363c\241\274\334A\024\274\343\305\240\275^\010\033>\340?\203\275t\376\375\274\370\377\013=\265\334\273<|+\347<\372\227\t=3\\};D\315(\275F\0149\274\033*\257;\004!\245\273a\343\300\274\305Q\232<#\305\\\275e\r\232;Od\346<\203\363E;\247\350\315\274\223\254\256\275 f\343\274y\005\364;>&\367\274\264!\334\274Z\031\244\274\327\0236\275\256F\332\274I>\013>u\354\265<\314\r>\275*\003\027<\325}\241\275\016|\224\275)\210\023\275v.(\274\261\244\355<\301\321|\273\000\'\027\275\023f\013<\323\223Q=\216\254v\275\2332\220<\260^\207<\265\216S\275>\205\022\275\0168~\275|\336*\275\200\336\\=\226\2237\275_A\333<\303\362\260\274\204\222\032\275L\230\345\274\245\022\226=\316{\217\275*\237\t\275\347\261\010>\334\322\216=0K\207>*\220\206\275\326\254\032=\253o\225:\331hX\274\002\355\234<\334yY\275\000\006\000\275\006.\236\274\270\205\303\273\342\207\215<m=\002\275\342\373\237<~\034\005>\370\334Z\275Oz\225=g\216\305<F\341\272\274\266\353}\275\021\221\005\274\310\034K=Q\204\346\272\375\301u\273\254y\006\275\277j\301\275\026\316\220\275U\255.\275o\240\202>\345x9=\326G\017=\354:\205\274)\020\001\275\262\213\237=5U\337\275\371\356\314\274n\341L\275\017\036\365\275\361\0143;\343M\005\275j\247\350\274\373v\315<2\221\302\274\264\304A\275\377\'\332<\312\314U\275P\025\247\275\017\037\254<\'\336\244\275I\267\025\275\242<\036;\003\255\223<2q9\274P\374}\275x\311\t\275d\t\340=bI\237<\262ze=\225\027\352<\353\243\007\275\243\271I\274\353\327Y\275\0143u\275\214U\202\275et\267<Z\205\204\273\274\270$=\334\001\211\275\272\221b=BD\217\274y`\203\275\222\255j\275\245:>=\360tJ\275 \3204\275*!\327;Q\033\220\275\267\232\253<\240\314\251=\220\326\211\275\033\272\216=\244gv\275_\260\272\274\210\215&\275\034\262\222\275\244\272O\274\335\254\266=\036\010N\274\242\351\000\274\320\005\320=D\223\332\274\356\312>=i_\021>\376\317\231\274ca\346\275]\207u\275\3036\272\271\036\302\244\274\024\'\344<^\264\342<\235B\355\272S\263\330\274\370\301(=\203\3425\275\220\356y=L\220\333=q#\334\274\351\372C=S1\217:\256e\261<\250\237@=\362\017\016<\2744_\275\311\331\371=x4\211>\334\260\355\274\276\004J=\314G\302\274\355oW=r\344\234=\037\n\306\2748E\357\272c\233\2279\360\214a<\3740\\\275]\241\356\274\342n\270\273h\356\237\274V\021f\274\221\346\004\274\272\n\014=3\002\215\275@\257\274=\347\214\211\275\024\375?>\301X#\273\222\250\t\274\376\226\323\272Iys\275\020\346\000\275\030Lz\272x)u=\333\370\\\275Q\257\025\275\360dS\274\266\247\014\275\352\333\242\274\250&\365\274\307[/\275\014\210\021=c\315\003\275\250k\332\275TaP=\335\001\356=\205$\232\274\335?\212;B\207I:d\376^\275n\010d<\371A\351\274M*5=!78=>\\\352\274\262\331\223\274\324\n\300\272\263\247e\274\305\307_\275\217O\216<\237\227D\275\361\231G\274Hv\327\273\232W\236\274\336i\024=\310\032\205\274\031(\024\274\365H\030<k\017\217=\250Q\026\273\236r\033<\350\216\204:\013cM\275\204\322\373\273\373\311\243<\256\260\255<\022\233\336<{[\016\275\217\271C\275\217\010h<\276\330x\275Z\377(\275\327\304\257=Vn\033\275\250\262\202\274|(\266;r\252\226\274\270\006\230=\371\252\245\275\223^\200\274\260(\t<\350\366\004\275f<E;!\350\030\273Y\376\230\274\353\311\216=\226\204\336<w\210\021\275\263k\263\274\304\0358\275a\260\026\275\265\227S\275\007\344\377<v]\250=u\033\006\274\005\241\014\275Y7\001:\205&T=q\343\224\274h\236G<\315r\272\273?\377\365<\273\324\311\274J\265]\275\344\255U\275\377\332\\\275b\r\021\275\271\344\032\275b\260\275\273\351\247\344\274F\310\333\274\025}V:n\223\265\274\260\223\037=(\375\227<\005\036\361:}2_>\036\314-\275\367\256\005=qX\266<\210\027A\275.\004.=\3044\216\274Y+(\271\344\251\360\274\203\350\217\274\265\354L<\373\273\227\275\322|\013\275\266\216\241\275\366H\201=\304R\202=3\330=>\322\030e\273[\022\026\275,\2169\275\247\361\306\274\364\357B\273M\263W=O\010O=\037\225N\275\360D\213<\232Y\337<L\003\354\274\3538\203<p\364\223\274\371\3730\275\032\034\272\273\221ac\275)\0046=\213\004/\275\347\021\373=\307Bj\275\027\024o\275\320Q-\275\354\210`\275>\210\277\272\n\224\352\274\222d\'=\323\013\274<\217A\r=\3137\303\274Gqb\275\337*~=n6l\275{\272\026\275:\320\226=\307\030\005\275\003\303\304\274\337\303\302=\313A\237\275\212\354?\274=5\240\274\373M\352<\371x\204\275\273\247\217=\254$\005>\326\301\307<*\345\260=\001\0233\275\365}\342\274\217e\210<r{K\275~\226\260\274M\340@\275\005eL=x\264\\<\0270\342<\325\250n=\002\312\200=/M\203\275\010\247\222\2746\2438\273\353\365Z=\353\031\254;\334 5\275\033.\357\273\006\"\034=\304P\333<\006\375v\275g\263D\275|X\r<\220u\204;Jy,\274\210\345E=j\014\374\273\360S\341=\226\0312\275\313\337\305\274B\357P\2752<\321\274$\342\010\275\333\224i\274#\023_\274\310\364K=\031C\222\274\023UW\275\260)\302<\212\315>=\206\237(=\003.Q=\325\026B\273\"\323\222\274\3460\370\274\372\321\021\274\3064\345\275\"\036H=\275\343\367\273\207\313\022\275\210\224_\275-\010\341<z\030N\273HH\277\275\007\243\344<\361\355-\275\301N\371\274$Z\231=\272wD\275\262\276\374\273\335\007\373\273.B\3167<\305\241\274\231\220b\274\300\376\345\274\357u\276\274=\216\372=\302\\\003=\332\032\210\275|\344\255\272\217\n\034\275EX\000=(MP<\266\341L=\006\312\003\275\032\\x\275\271\3449\275\342`\301\274m\250*\275\327\331\366\274\330\344\316\274v\343\r=\000v\371\274\n\023D\275\031\2371\274\237H>:\247\312_\275\355\020V>G\304\263\275\320\016\247\274\356\311\342\272\207\350\347\275\232\224g<\355\354/<\216\2119=\375Dl<\271Y\203=\335\374\326=V\013\303;\376\272<=SF\305=\253\277\226\2759E\223=4\3758=\013\013\335\274z\200\267\275t\344\366=:\200\277\274\246\364(>\343\270d<\344\230\222\274\'\\\206<e9\337;Q\373\005\275\274\313\326<!\224\201=x}\355\274A!.>\353\252\237\275\032\200\204<U\240\247\275?\374\2158\347\025<\275\344\315\007=\256\0246\275\0067\256\274\246d\232<z\213W=\311#\220=\354\314p<e$J<4\345\231\273~\212\"\275\334\321\333<\377)\3028f\350Y=\254[8:\253\376\253\273\321\334\027\275\254\315J\274\020\277\333\274\363{p\275\330\317_<-\241\203\275\364\203,=\337\371A\275y\302.>\036\343\257\274Mo\313=\356\017\367=\352\200\201\274\233\230\334<\364L\325\275\341\274x=\263\200\302=f%\\\275.\323\200= \367\271=ja\224;\275Q\303:#\224\037=-\017\237\274\251\355\206=v%\330=r\0032=\2009\227\275\356\030\036=\244\027\221=\',\026\274\255\010\016=\223\374\203;\227W\353\274\236\347\267\273\267K,=Y\312\306<\017M\240:\2419\213<\213\346\276=M\024\237<\031\354\002=F\346\033\275\355?\357\274\317\001\003\275b\207\250\274\217M\203\275\307_\202<\373D\230=\322\027\242\275f\310\372\275\245fB\274:\'\277\274\345\237\300\274\200\3416\275\031\0221<I\310\341\274\027\027:\275F\231\254\275NH\224\274\252\256{\274\361\360\"=}#\005\275\236\251|<C\213\020\274\301AO\275\241\205\020=\014K\347=\006\246C\275\0242\203=\0371\300=\023\332L;\345\263\234=\306b\372\273\367\177E\275\317\243\003>\241\342\254\274\004q\311\275p8\360<9\245\376\274]th=d\236\257=\360f\010\273}\246\322\274\231\204\243\274G\265\352=\316\221\225\272\374\267 =\006\013`=W\005E\272\266\267*>\177\276]<\247r\200\275\016I>\274K\347\254\275\3178\301\274\327B\216\275s/;\274\246\200d=\342&\016\273\014\274\036\2758\365\017>\026\225H\273Q\256\003\274\275R\312=\300\354\234>6\033a</\r5\275\266\212\273;\3462}<\025w\356\274/\323\203=\270\014\237=\312\213\034\274\t\260p\275\350\204\313<}\031W\275\023.K<\247s\356\274<(\241\274\272\333:\275(\355@\275\215\3744=\257\\2;\021\027_>\200\226\221=C<\256\2755$\211\275\214.\022\275R\2464\275%q\301\274\027\345\315\274\320\226\335>\275r\201=\007\341>\274\253\273\001\276\310\026\207=\346@b\275z\336I>\004D\n\275\322X\223\274\334\225P\275\021\345\000\274\022\\\340\274GB/\275\222\215t\275\207\360\220</&\022\275\263\3150\275y`>>4\026\270\274\266L\330\274\013ec\275D\361\033\275Z]\270\274%\242\\\275c\232\272\274\313j<<Gy\241=\362\340o=c\333\321\273\233I\227=\363\233\000\275\245\346\017\275xA\3658\367]\231\274*\331z=-`\201;z\n]\275e\312\225<\203\226\230\274;\303,<`\321M=\370\310]\2745\005A=nB\022<\355\311|<\\OK\275\300$\311\274t\035m\2756\206K=cH0\274\204r\376<\331\211E\275\205\271\036\273\037`\223\274\336\205\214=\"_\237\275w\302%=\223\306!\275\237\240\005\275\253;\367<\341\234\206=C\371^<\320^\355\275\304\336\016\275\243\346\367\274(p\274<\277\250#=\216\306\003\273\303\337\225<\370&[;-\247\'\274\250~\334\272c\372$\274fpN\275\3064\277;\231~S<Hq\202\275z&\314\274\314^T\274S\243Z=Ev\251=\034\217/\274\261\003\341\275\266)l\275+\226+=\003\321\271\273\210y\005>,6\372\274\235RW=\203J\217\274a!\225\274\030\266\032<EBY\275\365&\212<5\327\000\275\3564->\315$o=\260\305\260\274[i\223>\3345\030\275\336W\030\275\275v\336\274#\026\013\2756\023\213<\027\317w\275\205\247\332=9\207\035<\302\241\307\274{\372\265=\021\330\255;B\375v=N\372\367\274\310\t\242\274\243\235\013\275 \035\273<\236p\220;k\243\310\274F)V:\221\224\033;\022\273\343\273R&\320\274\320\207\257\274\020e3\275\222?\241\272\306\n\004;Y\356x=\265\366Z<\334D\300<= \205\275+\347\003\275\225\315\017=\206\314)\274\342\301\234\273/\235\375\274\316\340V\274_\002\371\275\267\246\255\275\325\365\201\275\207\275U\273i\267\315\274S\270\270\275\327c\006\2765<\237\275\215\351\260;\302\264>\275!\3520=\376\313\227<D\301\003>cFP\274_\331\263<qA\017\275\372\367u<\327\343\241\275\253T\330\274\245\010\030\275\354:\033\2758\361\347<Ims\275W\362\242\275\214\033\242<_\016t<\"`\377<\204\251z\275\341\370\213=\010qa\275\261i\204=\234\326/\275\223\332\010\275\311\274\252<tr%\275feh\274Z\0031\274^\327\027=\262\003\263\275f+\256\274C\245\n>A\214 =\336\022\336\274\271L\252<\270\241\027\275\014\213\222\275:\007\266\2755\356\'=o\330C\275\001k\200=^\244\253<}W\316\272\330\206\032\274u\023\241=\266\205Z\275\374v\222<C.=\275\007q\214\274tO%\2735\000\200\275\3321X=\324\267\253\274\035j\263\275z*\233\275he%\274\304O\357\274\272\252N=\274w\363<\354 d\274\267}\315<\025\264\220\273\330_\303;e\257;\275\037}\347=R\036\245=\372\314$\275\260\343`\272U\316!\275\255\251\233\273\350\312G\275\222\250\024\275A\224\304=\244!\r<\315\321\250\275t\217t\275\320m$\275\276v\240<p\273\217<r-\270=Jh\024\275\2059\\\275y\375L\275\231\310\t\273!\210>\274\303\000\203=8\244\001\275f\234P\275Z\335\200\274\224\326\266=c\274\224<LaG\275\307~\233<I%;\275\261]\037\275L\212O\275A\3214\275\037TF\275\203\352\267;\270\253_=\000 L=\313\376\207\275\223\2617\275\320\t\352\274_\250\315\273\254~\201\275\03449=\327\026\213\274\266W\037=YxJ\2738=\376\274\313k\272\274\364\2249\275\336p\014\275\357\244J\275\302I\236\2744E\030=i\255\";#\335\227=\271Oq\273W\364\344\273N\316n=\260V\337\275\347K\"\276S\226\240=\257\030\232\275Fi\356\273+\002J\275\311nS\275\364\307m\275\365\000]\275,A\260\274\274\270\334\274i\221\"<\254\311\"\275\007k%<\022\270\256=1\341\003;\246\0340=(\357\203\275J\253\356\274\342W\212\275\235\235\'\275\2245\270;\323\305^\275N$\233\275\370\262\037<;\363\201\275\346N\342\275\325\001\242\275\364\027\210\274Vow=s\375\014\275\313O\226\273\344\311\036;Q!\361<L\225\013\275\365\020\204<\322&.<\215XT\274\rs\010\275L]\224\274\016Cq;\201o\337<B\334\001\275\302\245\375=\202j(\274a\305\350\274\324.\341\274X\245c<\004b\000=\010\254[\275\214%\212<\341[&\275]dd>\316%\027\275\255!\005\275^\356\211\275\343\027\331\274\260\361\341\274qL\242<\356\371\033=\311@W<L\020\324\275:D\001\274KW\006\275>\202\330<\251U^\275\370\3419=\027)\375<{\3374>\300R\033;\262\272N=\214\276g\274\032\264\265<\267T\032\275&d\252\275u\372\037\274\327\024\344<\3166d\275\235\300\202=\010Tn\275\021I+=,\\\333=\355l[\275.A\203\275S\351\004\275\212\n\205=\022\2343\275\256\224;\275\240\372\212\275\362\347\253\274\257\327\260<\3018j=\322\013\367\274\203\370\017<\336U\266=\337)\024\275\276y-<\313\354 \275\004*\233\273N\264\250\274.X\n>5\\&\275\351_\000\275\373U\014\275\243bX==\333\t\2750M\200\275\300\270\361\274yk,=\231\222M\275U\237\221\273\257b1:hd\004>\360\244\254=\360\370\005\275\025\270F\275\312O@\275/RI\275\017\303\226<\343\"\247\271\350\002\202<\340\353\333\274<\3139=_\020\352<\256d\225\274N/8<\375\327\223\275\377\331\347\274\3129\207=\377\223r<\230\311\010<H\0209\2742D\005\274\031\367\260=\355[\261<\364\305W\2757\177\032\275O4\000\275\261\375I=\030\234r=.\336\325\273^;M=\205\311\366\273\014\345A7\222\315\024\275\204b\004=\017\303\271<f\341\263;\302$+\275\2652d=\264b:<\235\340Z\274\300\306\">\302\203K\274\310\363v\274\364 l\275A#\321\274@\356r\275;`\353\274 \031\247\275G\260\313\273\3365\362<9C6\275\213j\021\275\032a\331=\304\360\006\275\251\260:;\24393\272/)K;\372\036\312\274\225\352\347\274\"\267\216=\321L\221<\"Q\216</@\007=e(N\275\261\201V\275\316\257\374\273\325\240\364\274\372N5>jL\344=\332\326\231\275\214T\246<!l\274\274\247\334\216<Q0\231\274\013\321\201;\361\3475=\213\3618= \265\322\272\250$\375\274R\201Y\275E6\371;\005/\220\275Z\0378=\276\276\301\275JL\202>d\311\363=\371\301\202<\317\323$\275\342x\344\274`\215#=!H\306\275l\271\217\274@\326I\275p\022\037=pU\346\274\371`\210\274\353e_\275f\010\227<\343\2412\275\3255\257;\345\204\020\275\321\\D<PE\315;\200\234W\275)\200\201:\310\341\360;-i\224\275J\014\024\274\216,\242\274\357\326\030\275M\265j<\353\307\225<Y\334p\274\'l\357<\327\"\346\273\217\350\256<\332*@=8\244\0349Lqz\275\277\316\\=\nT`\275}\304\002>S\004F;\026?\215\273\351\274B\275y>n\275\341\255\237;[\213g>\322x\275\274\265\225\307\274M2\027\275r\342o=\251\334\363;\231\241\344\273\3529\010\275\370g\'\274J\330\303\274\310\"N\275\317\231\220=\364\000\202=\321\r\244=|y\256;S*\265\273\244\205\243\274c\205\200\275\270\'\355<\214al<\360\321\322\274GH0=z\345\266\274A\334\322<K\323u=\277qy\275\311\213\254\274\027Y!\275\223\225!\275\374\267|\274\256\217\335\274o1\340\272\\#\373\274\306\215\264;\366\237\223=\337\334\336\274\227\346\037\275\251\243L<\224\034\030\274\261\211\3039\363\2244=\263Kd\275\020\315q\274\256c\016\273\237\307#=\314w\237\274/]\241\275H\\\233\275\360\300d\275\354y\312<\307\312\271\273\360[\354=\323\252\023\275\352\324\236\275\245>3<\330\356\356\274)F \275^Q\326<\\\267\345\274T=\366<\307\351\243=<d\207=d\367\013>\342x\373<\233\t\002\275\263\250\343<\025x\240\275\324{\224=M\250T\274<\302\241\275\264w4\275\023\205\262\275x?7=M^4<\241\246L=\252,\004\274+\206\257;\0218\037\276\362e0\273`\026\331<\177\334\202>9\025*\275\272\020M=<`)=W\036\270=Q*\226<h\225\210\275\3718\352<\262n\231=\202k\313<~\023F<A\254\307<\014\267\243\272R\336\002\276\243\202\211=\354\334\034\275\240\037\242;\314z\317\274\323\274j<VJ\204=\227\355C\274)\033\245;$\277\347\274\271b>\275\317\332E\274\267k\214=_W\202\275\007\367\212;\177\260c\274\'\341m\274&\365\267;\335\261\322=/\260j\275U\365\257<\366\215\330\275\351rR>\256Q\027=8\307\023>\346[\247<\336^O\274\310;\255\274\341\253\027\275\027n\204=\350\025\201\275\021f$;6&\205=*\307?\274q\373\201=\352K\330<\325\315a=h\r\331<l\377\024;\321\'y;\305\362\250\275\224H\224\274\312\266u\275\243\352\r\275h\212\215=\302H\213\273\361\235\232\275$u\320;\333\315\037\275\254\321X=\375\351\264\274\024\374d\275\231\236\211=\323s0\273\360X\252\275\350\227\014\276+^M=\230\000\004<\266\300\021\273[cU\275\230ut\273\204A\230;\335\021X\275\326V\254=4\033\016\275\200\226\200<\r\rI=\326\365=\274\247[\020<\266\263\366\275\342\215\r=F\005O\273\377&C=\275W\214;\002\241U<o\224\304\274\243\313\222=t&W\274\3309\000\275n\254\270\275\016\002\246<\010L\t\275S}\244\2759\375\314<,\334B<\234\024/=+\323\232\275~\253\n=~\356\263\275\032\214f\274\203\235\333;%\227\203\275\3043\332<s\340\273=\375\234\027>[ \027;(K\005\274\303\326c=\037\036b\275\342\244\317\274\2260\303\274v\2628\274\027\200\032\274\023\275\331<\307!\005=\265y\323\274\203G\232\275\212\010\205\274r\211\037:*?+\275\267\265\266\274#\374\322\273\363A\027\275\t=\362=\360\305\014=\212\213\004<$+\001\273\024y\004\275_5\016=Jm1\275)\265\267<\244]\210=\177z@>|n\031>d\026\357\274\255\365\256\273\332\3330\275\307\231C=K\232\301\275\373UU\275\377\321\036\275*\327\010\273\342\366\307=( \336<@k\354\2756\r\023=\237Z\205<\352cP\275\276w,=\225c1\275I\037\002=+\360\276\273\000Qn\274\254\211\267\274p\257.>~\226\252<\177 \262<\23221\274\253x\032\275\217\201H=>Z\245\273\225bB\275kA\006>\376L\252\275bx\247<j!\255\275j\251\230;|C\243<\250\302V\275\324\037\r\274\334\237>\274\r\347\235<\222\266^=4\345\244=\374\206\231\274\254\220\027\275V\217\004=\216\207\340\274!\332\314\274\263\262@=\205\247\017<\263=,=\330*\207<\331\372\213\275cSx=4\373\350=\221\374\357=\314\366N\275\001u\253=\2566:\275\337\247\321:\205Ss=x\372\205=c\246\034<\345w\001\275\017\367\032\274\332WO\275\241\337\000\275!uy\274\356\206>\274U\350\362;o\203\037<\023[\037\275\255w>\275\r\324\352=\231\264\010>\300S\226\275e\226\211=\024Y\000=\322\216y\275\302\200\240\275\013\\\033\275\025 8\275\262Ap\2752\223\223\275\313\266&=;g\252<l\372K=z\376\211\275W\230\233\275E\266\230\274\257A\307\275\346\276+=I\325 \273\'\007v<\337\360@=\033\n\300\274(n\354\275\360\350\202=\371\376\001\274\373s\252=\031E\023\275\272\366j\275\234V\016\275\234\010\367\273c\275\236\2758\351\013\275=\366{\275\033+\275=\275\177\326\275Lr\200\275\277\270\252\273\3275\201\275\233\376)>\211]\245\275\343\306\236\275v\310\240\275\356\211\n>\262U<\275cw\324=>\223\356\273>J\036>\227b\325:\217\201$=\226Pq=\266%\027=\347Z\227\274\003\013\035\275c\304\303\274+\231\032>U\274E=\266\320\353\274r}Z<\224\002\221=\257i\226=\262\014\"=[\350\000\273\032\261\0209\2431\237\275\310\':=\266@,=\023\201-=\334\267\022\274;\256\034=\270\272\202\275&S\354=\005\010$\275\211\263\n\275\276\365\320\273\032\236+\275\257\035\\<j\366\211\275\2076r\275\311\327\305\274~\027\363<&\036\027\272u:)==\270\304;\300;\221\274\025Iu;\254\r\341<?\177\351:\263k\037=\275 ;>\216-\247\274\250\377\006\275x\247\260<\203\032G\275Z\317\202\2753\364 <h\204\304=\305\266\r\274\323\322\002=\3524\021\275*\"!<\3424\220>84\215<\3244\357\274\314\306\377\273\361\264y<`\356\013<\n$\242\275\033\030Z<\201>\335<\205\310e=\037\005T\275\236\270\014\275\365^\217\274\035\311\221\275*R\354\274\014\337\274\272\000k(=e\276w\274 \014\031\275K{\252\2756`\r=\315\263\365<\201\302\003\275\225\235\222=4U\307\275\233{\200;\022#\223;\375\027/\274\344\021m=\300\307\005\275\221\213M<\215\0230\275\207\324S\275\242$\343\274#\214\214\275\344\234:\274c\027:<\373sW\274\033\242\213\273\351mp\275Kb\312\274\352!\237\275^\267\307\2731I\301<\305\263|\275\226\3400=xO\211\275\300\014\210\273Z/\232>\363\211`\275\262&\205=\022\321\376<\177\007\023<\016\301\002\273\356 K<3\235\221=\216\270\312\275\317\213\2639\213\346\202\275\260\232\026\275nXD\275\223\274\226=\352\306\307:\255\'\262=l\270g\275\210\233\267\274\204g1\274*\305g<M2\271\275g\341\200=\300\273\207\275\375\315\300=\331\233\257=\215x\244=\206\007\276;\030Y\264\274T\312\241\275iq%<\033}\002>V\346\264;[\233\323\274\004\024\235\273\016F%>\'2\t\274\310\274\200\275z\336Q\275\214\276\034=\312w\265=G^9\275\251\321X\274\230\t\372<x\326\205\273\374\031\222\273\240\363\247\274\300\034\226=\362\265U=6J\201\275:\314\214\275v\006\214<T\330F\275mK\221\273f\327\346<\\\013\316=\231m5=\274\305\270\274<$\213<(0?;\374\000\031\275\327\203\t;\264*\226\273_C\033\275N\032p<\027\320\317\274\217\344R\275-X\007\275\352q\214<\326%1\275\326\230E\275F\323\001=\271\3028\275\321a5=\222\0208=^\251\273\274\335\221k\275\223$\211=b^\231\274#%\010>\366\274y\275\275\252}<\247iZ=\344\363\002<\005\277S;pC\252\273u\262\206\275\377\317<\275\363G\355\274$\237!\274\363\251\177<Xh\004\275\002c\260\2744x\376=3\363H\274\003\363,\275\335\177\002\274\033\026\227\273 \317\342\274\222KA\275\032\220c\275\255.\027<1\274<\275\203\203Q\274c\010\322;\200\355]\275\321\322\231\274{5\000=\356i\347=4\270C\275h\327\227<\007\360h\274In\320\274\234\222W\275\010\335j\275\365\325\357\273\025\201i\272\020\\\313<$??=\300d\010\275_(E\275\344~\027\275\341\333H\275\005\343\213<\210$\316\2747O\360< ;\312;\031V/=\177L\221\274V\021\372\272\266\315\031=K\224/\275~\374\226\275k5\263\274KK\336<\002)\323<\'l\305\2746\3231\275\203\343\037\272A\rP\275\'\316v\275)\022n<\337\312\346;K\2750\275\262;\300\273\303\321\020<P\357\354\274\3016\333<\332\360\\>X\030g\275\265\260\000\275\353\034\336\273\350r\222\273$b\000\275\032|\260\273\t~\037=2\333\263\274\270\244\251<\377\235\r\275\357\371|=+P<<Vr\213\275\3529T\274\017:Y\275q\300\004\274\242\262\314\275\211\206!\275\234A\r\275!\003S<d\332\345\274\304\363\256\275x\376\321;U\207\262\274\327\313\341<\252\216\037;\367\325\272\275\325\370&<\307\250\205\273]\313\310\275\314O$\274\233\347x\275q\034T=\320\240\026\275\237\006(\275\3558?\275_!}\274c[\340=\320\017E<\371\331\230<\335~\\\275\216t\341\274}\022b\275\270gz\275\200\000\025\275{\301f\274\263\006\024=2\'\013<n\2723<\360\221\376=\223m\233\274U\325Z\274\244\203\024\275\311\373N\275\3468\323\274\207\243\230<\355\242\316\275z\372k\275\350\336.=n\022\006\275\307@\035\275\035\231\304>\337\247I\274.E\014\275\303k\255<\034r\374\274\\\356\226\274\367\016\275\274\253\215K\275\232\202\355<\013_\204\275x\033^=\3028\'<\263?8\275F!\177\275u\342\213\275|\365\376:l\243\242<\322kT<\373\226\323<|\244\r=w8[\275\372\314\332<L\222\215>i\203\212\274\362M\212=B\334{\275\240\024\010\275D\n\317\275\372\3651\273xw\310\274\346\0368>N%$\275S\374\334\272\226\253\223<\273\246R\275>?;\272\326\210m\275\320P\234=\004Z\'=\226q\216\275\0351\002<\200~\260=S\347\271\274\375>\341=\361LG\274\362\206\275\275\265\026\327=\223\032\373\274\235\026\237<\2257\212\275uR\310<e\321\322\274\363\307\332\275I\005\021<J{-=\214(\316\274d\255\220\274\375\323\212=\307\366&\275\246F\267\274\203\365Q\275\374\257\226<_x\313=\242\347\311<\367.\030\275\004\0165\275(\026L\275\206\366w<\315\016.>\'|\246\274E}\2568\025W\246\275\344\300\364\275\264\271\202\2752\311\372\274\250\302\242\275\362\2323<\226\224B\275\033J\251\272vv\017\275j\366\026; \"-\272$\300^\275\207{\251\275\332\221\362\274J\345\007=i\246b\274\261\314\216\273\376\024\255<\272\211\210=\241\375Z>\2371\205\275\277\343\244<\227\343$\274oh\206<mo\004\273\327\257\264<\215M<\275\3139\216\275\275\336\023=A\023\222\271KQ\244\274c\332\265<O\360\357:\231\0251=.6\026=\317\2673<\351\223\242\275\3110\226\275k\215\002=\345f\024\275v>k\275\207\355 \2749F\241=>+\177<\022\275\215<\276pM\275Z\347\363\274\247.\315\274b\354\333<\276\244\227\275L\210\031\275\320\334\"\275\261l\327\275f\307l<\327\272!\275$6\341\274\372Ia\274\327U\236<\251k@\275\310\215\335<7\305\211=\275\226\037\274\030\275\340\274\357\330\354\275LFb\275\307\360\375;\345\213\332<sR\317\2748h\033\275\322k\013\275\262\304\377\274OP\205\2750\335K</ \272=\204\221\253\275s\222H<\270R\332<-[\007\275\341\027H=\245\017z\275\t\212\316\274\346=\300\274\246\204\354\274f5/\275\376\257\315\274m\211o\275E,P\275\224\224g\275\033\274\302<f\214\225\275y\234\277=yA\014\274\340\0033\275\234u\271=\315\271\035\273\006\014d\275\2362>\275\000\020\357\275Dg\014=v\267\215\274DL\303\273\314\202\203\274\221\246\263\274IB\271=C\325\213\274\214\001L\275\320\036\020\275\240\331\237=n\233N\274\226\210\014\274\221C\031=$\220\346\274\031<S<\035\300\317<\274qg<\031N\351\273m\263\306<\2607\266=d\312.=\234\245\361\274Z\016]\275|\374\377<.^\205<\216\3512=\260\305\356\274\033]+>\231\266\322\274:\357Q\275\327\251\025=\233\3132=a3\270\275\316\034\333\274\243\000\223\274\311\022\357\273>|\320\274\370\273V\275\304$\205\274L\226\334:\370\355>\275G\216\022\275~\'\305<\267[_\273o\262\017\274\221/\231<\322;\004\274[\n >\t\246\204\275\237\0143\274\014R\206=m\363\267<]vV<\325\304;\273\276\031H<\351a\365<\331\221\317\275w,\275\274\350\356O\275\272~\320=d3\350<\310\213\211\275\322\252r=\330\303\\\275\205Q\010\275\250n\314\275\301\230\221\275\253a\220\275\031\237\345\274\274C\204<\301\022\203\275\242H\023<J\314\232=,\274~< Jz\274F]\373\274\233\240\014\275rSn<7\002\337\2747.\264\2748\303\242=\350\366,\275c\253+\275\035\275b\2744\204L\275\250\335\314=4R\202\275\307\031\347\274@\375\376\274\tI\n\275\345\214\374\274\3173\001\275\344C\\\275/\317\026=\213\344\235=~0\'<\375C\363<v\370\227>\323y\t\275J\341s\275)ZJ=\2057\356\274\004u\274=\020 \207\275)j\270< \326_\274\373\237\256\275\220\250Q\275\251b\362<\363UZ\275.QO;ia\215\275aG\003\275\271\256\214<;\344\373\275\275\252I\275\037{<<I(\r<l\346\025=\034\233`=%\205\032\2732\367I=wNa=\373\313[>\353\241\314\274<V\202<\362F\230\275*\346\277=\375\346\236\275\355j\004\275\367\343u\275N\3043\275\363O\013=\273\274C\275[fl\274\326w\246\273\342\335H\275{\304\234<\255 \374\2746\300\003\275\270\206<\274E\367A\275\251yb\275\204\323F\2758OJ\275\217\271u<XV\254<\243[\035\275\256^\353\274OJ\265\274\275C\241<\036\317\244\275\205\271\207\275\211\005\212<&\357\350;hU\264\274\311_h= \347\363\275\277p\347<\266\262\003\275~\206D\274\347\211\226=\n\223\262\273\254\013\331=\260\350\277\273\"\014[\275A\260e\274p\246\211\275\302\037\252\274z\r\226\275\254\253\303=+J\230\274\346*\221\275E\033\000<\274\233S\275\312)\025=\205@\r\276EF\020<\256\353\301=\242.<>f\006J\275\213p\272<Q\244\231=\332\372j\275\270\2363<i\233\232<\374\003.>\211\352\221\274y\3536=n\305\223:\346jU\272\316\226\276\2748C\322<\366\320/\272^E\240=Q\004~<n\265\301<6\235J\275\3215y\274\212{\242\274\326=P\273\344v\254;\006\2067\275\003o\254\275@q\244\275\246\243\333\274{[\275<\226\364\t\2750/\262\274F\024?\274E+\233\275\200\177\227<3\301\273\274}\213W:H\300\2229\362\264\256<[\004Q>\023\334_\274$\033m=\311\006\n\275tI\265;\345U\260\275\340},\275[\215H<\301\322F\275\374\276v\274\375/\212<\034ae>\024t\341=\"n\202:\225W4\275\000\360\017\273\251\034\343;2G\032\275\250\326\260\275\002T?\274\"\225\310;\027\307y\274\203\272\351<\255\365:<[\367\001;\002\346\356=\200\270\272\274L\032\336\274\315\312{\272\360\"\201<\266c\241\275\207\'\005\272Sw\374<\232\236c\275\222\252\305\275\006\354\325\274B\3237\275\304\315T<\223D\035>*\372\215\275anp\275$PX\275\000:;\273\322i\020\276j\346\r\272B\251\353;\316\3535=\311My\274\351e\340=k]x\275\353\255_\275yL\314\273\371~2=\3749\201=\337\366\221<n\024a=q\221\032\275\243\274b\275ar\341:\335^\264\275\324\345\227\275\372]\202=yu\017=\236\334K\274q\260\'\275\227MI=\374w`\275}\2222\275r\367\255\2735<\245\274\303\374\344=d\225I>\330J*\275\203y\342:gJ\037=\027\333\351;\035\220\276\274\001\022\306\274\275\241\217\275\022\212\300<\271\330Q\274`\337\257;\270\021\235=\035\255\013>\314t\302\275\337\345@\275/F\352\275DkU\275\266\'\212\275xMw\274\332\014\233\274P\200\340<\314D\227\275\273<\263>\314v\236<\347g\231=yk\306=YW<=\327\032\225\275\377\"\202\272\304\021b\275L\204\200\274\326\313\215\275\336\213\000\275a\3167\275\212\271\253=V\"\036\275Z\271\204=\256D^;\321^S\274\201\2229;\036A\014\274m\355\261;\337s;=Y\316\213\274\255\374\006=\227\035f<\'\370\204\274\373Dw<&P\224=C]\230\273?\262\277<\204W\275\2749{\273\274Dt\235=\235\271$\275c/]=\3415\247\273\243K@\275\005\244v\274r5\000\275V,\257=\364-\031\275*u\350\274\274Jp=#\341L=\331\330\333\275f,\037\275\000 \256\275\301\020C=\264\365*\275k`\223<6\n\302=H\366\314\273\203aq\274\362\020\315=_Q\360\274\003\203\344\275X\326\020\275\270M\266\272i_\273\274\257\247R=\235\201\214\275\325r\252<\001\306(=:\237=<\201\270\300\274o\204E=\213\212?\275\036\3474\275\217\260\343<\333\303\221\274K\371\320=Q\355/\274~\035\030\274\273+K:\307G\362\274\317\275\243\275F\336\202\274\246\031}\273\254o\'=\306!u\275/J\243=r\232\315=\276\264\270\274(5\005=\275)@\2757O\"\275\034b\236\275\301F\336<\262r2\275\366\236y\274\301*x\275\276\tl<\267:\355\274\303\213,<\t.\\\275\363\353\257<\314t3\275a?\337=g\203\261=\346\2016=\356v\252\274\304\361\266\274\302f\036=R\211\201\275\021\3321\275\217\317\036\275\217\243l\274)\245\220;?_~=!\031t;@\217}< =.=\220\346#\275\314\315`\275\2549f<\236\246\363=/\232\347\274\010\373&\275\352e\274\274l\345\216<\227\270\334;\342\310p\275\357gV;svC\275\342\201\240<\203\377\t>\275<c\275.E\027;{\264C\275\240\022\252\275A\234~<\333#\372\274h\354\351;|\352\036\274\307\303\352;G\313\242\274\004U<=\231\232\225\274\330\257\361\275T\347\200<e\254M\275\354Q\375\274\230\245\235\274\230=P\275\365\330\304\274\202^\023\275b\245\004\274a\275F;\265g\242;\000\336\351=\006\246\224\274\3346O\275\263\001~\274<\330\006\275n\016\223\275V\226G\274\376\234H\274\200^\262=\210\3023\275\3226s\273\217Y\334\274m~i\275\234\212\030\275\250Fp<F*\245;\216\343\234=P\014\356\274\036\254\206<\361#f\272\362s\353\274}@\016\275\3024\034<\315\340\326\274m\323L<r\237\032\275Nf\005=f\3607\275\226E\203\274\306\223E\275z7-\275\200\267R\275\t\033C\274\017\253e;\250\324\351<\233T \275\021\330\002\275\200\034\r\273\300G\035\275\322\371\252<u\271G\274\234\201)\274\315|\332\274\252\036\233:Y\321\370\274P\215W=\232\230\017\275=Bq\2747\210&\275\016\201%\275\2362\306\274\350\240\006\275\312V\204\275\332\032*\274\352+\037\275> g=\260\341F;\217\342\000\275\356\241Y\275\327`\222<\235\\\273\274(\346\035\273n\360:;\261P\353=\273*(\273b[\352\273W~\226\275\357\033\327>\302.N\275\204]\026\275\335\304\003\274\004c\200\275\313\2767\275\036\275\331<#\033\351\274(\010^<?\034D>\206VH\275\362\r\332;\rN\017\275:\035?\275\306\004\252<Y\322\022\275I\317\r\275\347k\254\274\273\030\376\274\373\361v<\331f$\273\016W\273<+M\007\275\022\t\214\275\004\253^\275\232s\210\275a\377Y\275\324*\225\2751\230#\275qk9=\212k\321\272+\346\341\274;\212\235\275B\277\222<juh\275\226I\300\274{12\275\345~_<\332\264\262\275\240VN\274\376\201\371<!\000Q\275\245\024\334\274\255\004\243;\010\310L\274\234o,\275\\\206\232\274\360\"b>\024^\214\275\254\244\212\275\331\242\025;Bl\255;\027\350\222\273\220B\374\272Pr\275\274;\2555:G\302\225\275\202\304\027\275f\244\243\273\210<w=\223\312v=L\275\217\274\3541\253\275\270W\316<IJb\274bW\215<\253\250\327\275GC\243=qP\215\274V\215\272\274$\224\036\275\271\312\225\273\333\227<\275A\2411\275\021\352\267\275\260\0358\274?c\307\272\030\257\273<4\305A=S(\023\274A\300\206<\274h\264\273\"\207C\273\350\203\263:\262J\314\274\217\222\017>\225<\371=\244a_\275\277\336\235<$\241\006\275\353~\003\274e\356\025\275Z\344\361;\316\332%\273\262\356\263<\373\306\371;4\215s\275\024\301\003=VB\240<\006\224#\275\241\355\205\275\342\356\254\275\313\236\324\273[V\211=\215\252\300\274\252v`83\'\002;\026F\260\273\013\227\246\2752\225Y\275t\372\"=\342\3026>\324\tx\274b\376\261=s\035\003\275\021j\224=2\004\226:\204\324-\275f\265C=}\023\231\273@;\220<^\273\307<C\277?\275B:\274<\267\243-\275\273\001b<\365\221\014\275r\260\004\276p\242\244\275t\212\004\275\204\357><\342\366\351<@\273\267=e\251\355\274\251\344\224\275\327\014T\274\356@\321\274a\t]<\000\275\t\274rZI\274\305 \303\274\2071\352:\360\266\213\275\r<O\275\006\214*=\366t\261\275d:\204\275\225\031P\275\302\023=\274u\\L=\245\374);\342w\317\274\n\222/\275/V\004\274a\361Z<X\245\263:\'_\326\274\024|\017>\320\024A\274\017=\037=\232\303i\275jF\224\2758j\267\275\241\243\000\276\257\266\031\275\362!\226=\270=\227\275t\036F\275<\371\273=\031\016\326\274\303\373\324;\277.z\274bZP\274}\356O\275\215Ym\275\003\351\226\274K\204\266\275\365\255f\275,F\261<\205\230\347:\010e`<\306\277\025\275\202\374Z\275:\334\237\273\204(\035\275\002\000\347\274\351\0075\275c\357\007<\226V^=\003\034\304<\2415d=\177\r\371\273\353*i9\303\313U=\215\214\017\275\210\304\014\275\204\242\246=KS\275\274\035\252W\275] \362\274\366\273\023=\220\204\037\275\363S\314=\254P\t\275\366\312m\275\305,\024=-0o9\031\035\333\274\267\242\003\275\214b\245\273\017\254\006\274.\304\351\274\341\265d\274f\200.<`5\234\272\"g\004>\214\260\213<\365\205e\275\276\213^=q\'\272=2\037\364<c\017\202\275\313GD\275\326\365#=\326\326\364<\317\333\211=j\310\023=\376\307\223\274\220z\232\274\347\202\243<\272\t\356:\264je\274\307Pz\275\026\345\250\275\201\344\021=s1x=l\224\252\273\251\374\201<\271\361\211\275\013\317\353\2751\r\267\275\337\373\263=\tR\253<{U\326\274{Nz=g\241\n<\020\017\263;E\341B\275*w;\275\223q\t\275\270\035V=n\361\335\274\215\307\305<\302%\017\275\317\216\200\275\255\016\210<\356\323k\275\r\277+\275\252\344r>+[\213\274\262\360\347;\225W\240=\221\257\260<\"Ce=\006\235\242\275\357\344\263;\203\326\205\273\037\312\010\275F8w;[:\271\274b4\377\275&n}\274Y\344\252\274q\324\373<\314\032\310<\260\377P\275\326};\275\242i&\274^\307\322\274S\303\034\275\375`\274\274\343\337\353<\035\327\236=\237^\346\274\375\272\204\273&\267\275<(\300\315;\261\217\357\274\267\253\014\272\321\350\205<\317\224b<\377\336:\275\0234\016>\331\214\004\275\252C\266\274\321L\361\274\376\355\306\274}\313\\\275D\271\211\275\347\314\205\275\205\351\003\274\360\026~\274L\306?=\354\315\241<\265\273\312\274b\330y\275\303\230m\273\314\240Z\275\000~\033<7\222C\275:\037\375=jx\375<\360\322^\27592\263<\275\357\334\273\313M\202=z\216\252\274n\202B\275u\023\006\275\213\010\016=\013\263\214=;\251,\275\025!\317= \233\241=\206u{\275v\2305\272\205\370\343\274\034\366J\275\323\275\315\273[Z=\274?\243\326\274\241\215\266\274}\334\217\275\237\032\231\274\364\324\266;\263\026\244\275\202EI\275\234J\r\275X(\240\274\200\215\320\274\376\320\312\274pQ\244\274`\212\014\275\267\346\344\272\330\234\373\273\250\340V=\245\013\227=\'t\026=dR*\275\265\356\324\274\021\273\274\273{\311\263\274\212\354\027>,9\235\275i\350Y\275\234\262\333;\223\361k\275\001\223\007\275\016W9=[/\262\275\377\316\230<\361\3665\275\027\340D\275\373\276\212\274\317\352\310\274/\366\201\2740\273\254\274\266\212\321<\311y\301<Ezt\274h~\023=d\345\n<\257\373\334\274~\003\034\275l\301\271\275\201\205\n>\005\253\374\274|\021\366\274)#\217=\251\267\222=\331\210\326<\036s\025\275\341\346\362<\212\"*\275\177\273\212\274\r~\205\274\201\214h\275\'\377\310\275r\224\373;z\340\222\275\231\371\005\2757\231i<\n\214:=f\371\202\275\230\375\221=\361\320\377:\3255\035=Yx:=c\252\374<~.?;\351\312\t;!\363\034\275\363/\302<\241\317\361<h\270P\274\022f\023\274\242@\224<\263\212\307\274I\321==K\005c=\016\233C=\331\240k<\025Y/</\016\206\275\346\322\262\273\231\317\226=\256\022\234:\021\233\236\275Jj\224<\335\333y=\261>\240<\343\2170=\034D|=\255U\314<\343\313\373<O\005\004\275\275\033\235\275^W\2059(\033@\275RI\313\273s\227\340;\'2\345\274\370\356\365:\251\265_\275\013\274\277\273R\316\211\274rg\007=\221\330\230;y\326e<w\314\326=\272\256\242<(d\243<\025\372:\274w\307\374\274\033\320h=\234\276-\275\341\221\371\274\341\322\\=\023K5\275\327\022\362;\002\314\373\273\201?\005\275nX\311\274\020`A<\376t0\274s\260e=\376o\332;<\306S\275V\247?\275+\347\246\274\377\305\266\274\202\241\006\274@\206)>\002\265T;\245\242\020=\2331\345\273 \323\326\274_\234G\275\350\031o<\375\232\031\275\254\n7\275\251\317\224<\245\234\177\275\0370\234\273I\021d=\355\322\030\275\031\240/\275\351q\\=H&J<M\030\224\274s\335\023=\231\031\312\274\244Q\310\273f\356O\275\210\263\220<\2438p\275]2\002\275\276C8=\333t\271\274\201F\'\274\340WQ\274\n\232!=\007>\235\273v\240P\275-|\231;\021\274\235=e2K=\321hM\275u\327\001\275\010d\205\275z\023\325=2L\214\274*q\256\274\000o\223\275nw\200\275`\365\246;(j\236=\254\336\270\274}\3725\2759\372\022\275\r\231\365\274.\016 \275\026u6\274\362P\352<N\311b=\276{\245<\371\252\211\274\027\270\335;\027B>\275\3743\330\274\341\']\275\252?\207\275\337\375\225<\252\024\"\275\034\344%=4&\266;Y\330\210\274b\325\033\275\'\260 \275#\027\317=\217\267T\275\303\336\373\274i\356\024>Y\273\353\275\n\360H=\367\220H\274\003\277#=\r\334M<\334q\331:\272R\342\271\336\023\376\274|\315\236=\302\263\363\273\342\223j\275\201\254\363\273\305F\271\274\003\231\236\274\026%\260\275\014\305\377;\211\247H<:\271j;\300\235\367<\373i\2659\033\212H\275\243\335\311<D\010\345<5W\334\274\345\350\362<km\334=\315\346#=\003V`\274C39\274\345\341\232\274dm5\275H\302?<\214x3=\014\363\275\275\3030T\275\246\320\276=&\353-=\355\275\205<\210\372\306\274Z\333\t=W\343\016\275\322\360\035>\377\013\220\273< \016\275\377$\242<h\277L=\337k\220\274\303\315o\275t\343\333\275\223\310\257\274\365\305\217=\022\241\\=T\021\033\272\035\351\212\275\246\317\344<\264\222t=\262\"\240\274\303V\306\274.\017\003<\3132\276\273%\262\302=\247\332\276\275\250*?\275\347\222\254\274m<\315=\252U\342\274,\302\324\272\366\337\320\274\306\027<\275\037j/\275\315T\025=\340\267k\275\256F\206\274\271\005\202<v\350\246\274\333\000\354<Er<\275\252\305\216\275\247\255B=\361\304\253\274=\225?=~=)<\351g\361<.\3674\275G.\217\274\034\"\313\274%\225\017\275,\353\256\274\272\2266\274V.\000\274\3530\234\2741\0237\275\007\256\200\273Q)\032\275\365k\032\275\010\022l\275O\005C\273\225\3637\274kg\226\275J\255\215;\374gg\275\216\272\364\2745\212U=sAB\275|@\212\272_s\365\274Vt_\275\014\364\207\275\364\246\022=z\256\246\274zQ\220\274\214}\025\275\014\313d\274iD\353<\261\354n<^\243\177\275\353\301\214\275\300\360\260=\247\235\232\274\215aq;)^\336\274\213$\r<\231ju\275k\276\263\273\353\322a\275\374\013\354<^\362\340<%\307\036\275@\246\315=\341\227\207\275b\367\247\273\027\334A\275^\222B=)?\344\274\335\031S\274\270\213\351\274\033\364\021\275x\251\327<->\214\275<\227\001\275M\177\300<\315I\005=\0026\037>\237<;<\353\320E\275\231\317\022\2752j\276;\0273q<A\2150=3\014t=\251Y\202=\325\273\371\274\001\223E\275y\325\014=HEt\275r\365=\275\016\271 \275\027\334\335;\023D\246;\207\351\225\2751B\336\274\304\346\212\275C\237M>\0012\014\273c6\216=\270\017\235\275\300\265\266\275\372t<\274c93\275\237&\205:\312\252`<|\345o=\332\247\006>%\323H\275\022f\346\274\366\"F\274\272\217\241\275\310\215*<e\341\315;\001KG<\222\2040=\3513$<}(\240=y\327\013\274\340\030\222=H\303\317\274Zu\256=o\327\270\274u]\251<\327P\025\275\177\370\334\274\000\007\314\275i\312m\275}\032X=\321D\033\274\241\010\005\275\236\004\250\272$w\233\275\226\r\266=\314\253\213=^\273\000=1\361c\275z0\273=\374?\372\274\007\231V\275!\014\316<\2324Q\275\332\3225\275\0328\021\273`\217\356<\231}\022=\r2\350\274C\251\243\274\237\344\\<3\332T<s]\215\275\n\315\032<\025\210\331<\302(\202<\324\236?=\030\235\214\275\265\320t:3\021X=\322\014l\275\225\366\211\275\0314\031\275\033\227e>\004\0332=v\233Q\275-:\266=\024\372p<\201\253\257\275\272\203\202<\342\210X\275\306F\223\2744\203\263\274=<\213\275\003\237%\273\2415D>IGE\275\004\266\363;[\314\034\275\257\244\236<\226\304\245\272\224|5\275\243\335\216\273}\271\233=\021k\267\275\245]\000\276Z\037\355<\261\301D=!5\212\275\332\2465\275$P\205=\010\242\236=_\207\325;\377\210Z;\234\\\017=\tow<\232\205\265<\266z&=\333\334\211\275\233*\334\275\242\322&\275\246\340\314\275\0031\232;\333\227\274<\275V\246=b\362\212\275\202\225\247\273\352\245\322<\372\375#><\3146<c\344W\275\007c\030\275=\004\030\275*\202\207\2758\347\032\276G\265\263\275a\275j<t\026\274\275\310\214\206\273\231\033\374\274\236\247W=[l\251\275\335p\203=\245\212\013>\207\354\306=\2462T\275/\324\274=\254XZ=\263\326\224\274\235\026\337<\0060\222=\025\347\245<Q\244\304=\035+`<`\"p\275o\271\275<\376\346\014\273`\003\201\275\232\r\261<\000\362\326\274\"`\234\275w^;=5\260X\275\210\3762>Q\357h\274,\333\310:\200\326(\274\260\210%=\235\255\367\275\362\217\035:\250\004[=htY=\261=P\274\257\'\200\275\000\2659\275\212\221\221=\313\205,<;\357\020\275o\376\r<M\3474\274\247\223s\274o^\364\274\212\224\370\275\210\236\036\275\237\335\214;\203,\270;?c\231\275\026\340\234\2745T#\275\305\022\307<\370U\363\274\313;\363;\363#\255=\227j\312\274\001\026\232\275+\355\220\273\367\2534<o\336#\275\203\206\016<\3169\345\274\227\244\315<\024\2330=\022\213\375\274\273\266\233\274\2226\257\273`N\035\275\207<\211\273\3071\003=bM\252>C\231P=\004H\027=\362p\272<1\030\276\274\235\356\027=9\260\035\275\031r\004\275\033\324;=\177\264\224<\"\031\246\275\200\207\212\275\'q7\273\307\234\277\274\334\322\305\274 \202\017\275\303\027\322\274ai1<}\244\204\275\336vC\275\030\351\335\274\270K\235:\201z#\275\214\242p\275\315\222\270\274>*\277\274\203D\023\275Q\026=;\3077\366<Qx\004\2756\352B\274fX\370<P&\245\273\332J\375\274\005\276@\275\024!~\273\001\013!\275\006\214f\274dE\355\274}+\233=[\370\303\274CX\244\275\376\255\343=0.\247=\235\304\276=\025%\373\274)GU\274\3615H\2740\"\266\274\025i\245\275\0048\032=~R\314\275(\364\n=\3547\200=_N\374\274`\352\324=\275\363O\275\320\232m\275\333x\216\274\317\251\226\275y8\000?!\027v=Jg7\275\251\354\243=\351\252\330;\213\342;=\315\277\350<\345\352\023<\317`:\275\030[.\275\256\262\373;Xnw<F\210z\275\2021_\275\035N\203<>w\212<\00646;\327\271\345;\320ie<\3078S\273[\3756\275\026\222\366\274S\\X\275V\267#\274\013X\220\274\356\037\245>\376r\214\272Kz\206<|B\213\274\2123\343<\322#o\275\210\002\014>\353\370\325\274)\233\000\275\326\302\233\275\253\003\311<\3030\222\275V\226\003\275\263\273\177\273\253\274\001\275\371\n\002>\0039y\274\272\024T\275\014\3723\275(\327;>\031\314k\2758\024\243;\027\310D\274\216\277.=\262O*\275}\252\024=.\217H=\216,\331<0\214<<t\376L\275\201)==m\205\266\274\302\300\'\275A`U\275\341\021H<\225o\'<\010\251A>\215\334\374\274\257(\013=\207\354\234;C\341g<$\376\204\274=\246\367\273\317N$<Wl\r\275I\2120\275v]\215=\231\344+\272\273\252\215\2758\236F\275\233\010I=\320\003\t>\244\316\265<S\352\352\272\034\260\352\273\370u}\275]\372\222\274\210\270\276\275\200C\211<\252\n@\275n\000\"=\272|\366\274\345_\277\275\330\320\354\274p]\206<\230\275\272\273\207Q\r\274\323PG\275\026^\201=\022\235\241=K\246\340\275\225\217~\274\315\037A\2752w\"<\365\241\205=L2};LC*\275\274-2\273C\261\016=\031\376\334\274G\202=\275\253&\305>\n\030\266>\236X\302\274\000\034\327<\344\373\231=\242\376\325\274&N\204<_o\212\272\032\214\027>Q\037\357\274\\Is\275@\367\214\275\233?\367=<\300\212\275\244\335g<6\336\255\273`\335\276=\372\2622=\377\314.=\337\345&\274QSZ\275oPE=\310\335\005>\2519\230<\210^\214\274v/\322<\0216\251=\006\240\350=\314~\304\274U%,\275xm\214\273\216\336w\274i\"w<\345\225/\275W=\337:\tY\277\274\032\230\262\275]\006Y\275\302zf\274d\263h\275B\214\t\275\003ht\275\377v\t\275\376\333\247\274\267$\321<\331\326\262\274\322I&\274\255u\030\275pG\222\275a\332\201\273\340JQ\275t\n*=\266\355F=i\340\224=\240g\262\275\377U\032\275\327\007\177=($\312\274j~\231<t2\256=G\364>\275\276aR\275c\364U\274\343\000]\274)4\211<\325\213f\275\315\316#\275{P\022\276t<\007\274\312Y\310\274r\3370\275rW\356<|Z\354\274V\345\366<,\221\t\275p\257m\275\272\204\235\275\312\241\246=\377\314\242\275\010\366:=of\333<{q\305\274\244\240o=jX\222=\265\351\207>e\227\035=F\243\033=\335\213?\2749UT\275\014+\225<\322 \210\273M)\277\274\212\t,\275\331/\225\275X\211\330\274\030\3375\275\233#2=\256\216J\274n\001b=\233Qx\275\022\276!=\014\323\235=\341\024\316\274s\235H>\236\035\242\274\220_\004>\310H\034\274\264v\211>\320\344\202=K3\210\274\211\316\272=n\305\275\275\360/\222:\240\253@=\246\236\014\275\360\337\232;\354\356\222;+\355\000\274\234\250\375\274\211\371\336;\\S\373\274\037\332\344=\217\367\274\274\216u\032>\274\025\275\273bw\026<\230=I\275Q\022\277\274\355\334\332\274\256\034\246=\271\312\213\275\"\220\326<\231I\212\274\226\372\r9x\361)\275\220\275\027=\034\022\335\274\341\226\020>]0\235=IYw<\344:\014<(S\005\275\216Z\243;\227\034\356=\n\213S<X\251\037<\326\021$\274\352\035g\275>Z\t\275*\325\212=ZK\241\275f\026j:\363\2564=MT\037\275\031\323\310\274\351\353\334<R\030\320\274\365k\027\276\353\245\010\275yfx\275\365x\213=])\264\274\366N\321\274>\n\364=T\275_=\211\266\342=\313\035\216\274\311]O=\334\2451\275\322\337\201>8x;\274\325\000\270;\377f\345\275F~\354\274\222\321\2739\037\325\202=\331\357\037\275\217w]\274\251\270U=\213\276\017\275=\236\244\275[\262\211\274\255\003\332\274\370\004$=j\345\337=t\214Q\275}~\232<W\245\016\275\257#r\2749\327n=\255\3453\275f\220\257=\340\274\013\274]\367\300\274\271\350\373=\274\331e\275\2230K\275 \345\232\275D\243%\275\273.\240\275L[P=\363\361L\275\350e\204\274\200#\351\274=.\026<\352\334\330\271\245J8\275i\006\020<\277U\237\275\362\352\312\274\335T\220\275\256\375\001=nQ\220;3\334A<\331Gp\274\217t\236\275\334\320\305;(\275\002\275\235\3022\275\3778\267=9+b<\270KP\275v\325\246=\006\221\213\275\023\376\\\274\266\023&\275\356\200\204=\345\001\225\2759\022y<\215V\307\274z;\005\275UA\205\275?\2346=\324\016l\274\343\260_\275|\010-\274\033\220\261=\3310\326\273\233\316\026\274\240\365p;j;\263\275\002\001\034\273\022\323\261\274\332\322\005\275\346L\234\275\377j\205\275\2465?<&\224\246\275\r\363\333<fk>\275]\370\246\275\033\311\366<\321\032\252<\206o\206\275\177\223t<@<`\274\342#\323;\375\301T=\203\376\216\274L\234\r\274\344^\224=Q\261\361\274\230^\307;$\345\212;?\345t\275=\000\276<j@\210=\253\024\206\275\305\257\204\275qPv<\002B\255;d\301\300=\032\223\234<\310C\305\275\206<`=\324|\310=\227?\177<m\363\215\275K\337\000\274R\251\312;g<\333\275\367Sy\275\246\310\037=\231\315\200\275K?\237\274$\346\"\274z4\017\274b\3665=\243C\200=\216\231o=\322\207\226<s\336\003=\345\214_\275 \200\024\2721\312\003=L\253\220\274\354\231 \274\233\370\256\275w\362\325;}sI;/A\222\273\361\263u\274\032x\346<-\231\311=\002r\217\275:.\230<\271\275\350\274\r8\322<\323\251\3268z\333l=\321\243\315\275\245\372\\\274\317\373\214\274\350,?\275\r\215\306\274\002\364\333\274\362\221\241\271\311l\215\275\313\026\2659\244#\004=Tq\025=O\312L\275\211\3260;a\363\254\275\227\371\202<0\025\244\274\271\310^;\207\221\210<\364\254\326=\255\342o=\016\324\251=`\372\305<hS\252=N3\\\275h\257\255\275\212I\034\2758\215\215=!\323\266\274|\302\370<\010\271%\274\277B\265\275J<X\275\354\000\322\273\010\236\341\274k\236\201=K\331\224\275u\344\217\275\272\334\274\273\002\257U;q6\010\2756\207{<8\214|\274H8d;@\006/>TW-\275lW,=)B\310\274\030&]<\374O\032\275\3362\230\274\311>\213\275m\177\237\275\336\326\220\275\204\275U>\002\207X\274!o\220=\346\312-\273*G#\275H\'A\275\245\253\013\275#\333/=\316\031N\275\225\335\\\274\260\305\373\274F\335<\274\306\244\243\275e\026F=\007\322\307\274\205\331\201<\357\373\221\275dW}=\177\360\036\276D\r\262\274\n\016t\275\363\177s\275V0\246\274\360\2072\275Zl\306\274\rh\360\274P\357\344;\325\013\362\274q\330\001<n|\252=\031\221\324\274\r\254\002\271\373\203K=dG\212=\3410\262\274\003\\\252=,\340\323\275>\341\200\275\223\\\374<y\022e\275I3\003>W\000\325\273\336\373i<sNZ\275v\234\021\275U-\206<\256AQ=\245\3661>\301\334\201\275\\\213{\275<+\022\273\377nj\275\330\224\003<c\372\361\275\337\013\302>\313\205+\275\217\3322>\205I\234\275\361K\373\275\360^\035\275\212\221\273\275\336\033\221\275\303a\322<\021\020s\275\274Xx=x\253L\275\024\017\013\275IG\331\275r4P\275^\217\227=S\355\306\274\026\274\226=\327\226l<*F\267\272%\263\000\275?\034\263\275\313\306\215=\033s\365\274\032*P\275E-;<{\034\343=\215\322\006=\377>\202<\323\2370\275\300\216\353\275\020ji=\271\261/\275a\215\r\2756\033\037\2749q\032\273c\340,\274\334\033\002\275\314\351m=9\245\216\274\251\026O\275\r\374J<\270\312\263=\013\366\312\273`\000\347\275\375\006\221\274L\300\362<0V\203\275\nh\370<u\312\250\275\212j8\274\030\323\351\275\014C\240\275\312 \261\274\030\337\027\275\005\034\305\275\376\217\033=\273\261p\274\301x\355\274\205\215\340<d\014\270\275w\274\363\274\026L9\275\335!\n=\342\342\035=6\031\221\274I\007\213\275\004\006\223\274k\001\022\274\246\322\033\275\253\212\243=\376U\365\274J\340p\273H}\203=2\351r<\243Y\273\275\214;i=\037\307\221<\2737\363\275j;\201\275+\377\306\274\273\341\265=\315Xl\273\221<\330\273\206V\276=\375ZJ\275Q</\271\003\343\246\273xT\210\274*\334\351\275\006\030\240;\254\013\327\274\004_\261\2735\"\3239fl:=\235\023\222\275K$\017><\243\'\273\207Og\274\350\306,\275\300\262\201=F\352&<<\313\271<\241)\027\2755[\207;jE&\274\221\236\204<|\214\235=\361\346U=WcI\274Z(!\275\240\236~\275\205\220x=\356\314\364<\004\300\243\274\273C\200\275\353\002\304;g\322\206\275\032\272\333\274\340z!\274f\177\216\274\311P/=\037\317\371\274\210g\213<\370\372E\274@2B<M\020u>{\321\306<\013F\217\275\274\346\003;\373\005\271\274\310%\210\275\203\352@\275\247\003I\275R(\033\275.Os=G\0345:E\3306=\263Z\210\275 ?C<\020\217,\275v\037\233\273\251\271\021>\"\240\302<\307\014/<V\271l\275)\341\313<H\325l=\310\265\257\274 \037\217=i\263\350<\225\210\324;\013\344A\274?\272\216\274\253x\233\274\271\346\376<s6\201=4t\201;\261\0242\274?\370$\274c\375\356<\005Y\315\274\004w+\275\211\253\031=\003[\230\2756\203\353=\327h\205=\357,\256\274\227\244a\275|\320?;!\307\200<aFH\275\377\177\301\274\203\351`\275\355\257y\275\017\251|;w\305\316<\221\240\243\274\330z_\275\036\023\303;\3500\013\276G\257h\275\3754Y=\330\252\n<\'g\227\274(*\305\272)\206\333\274\030\233\250\275\352\221\\\275uh\272=\037\002\220=U\255\031\275\306\0210=\200\010\275<J\2267\275\355\3424\275\332\275\005>\330$%\275\3761+=\222@y\275\344\n&>\213\367\253\274/\330\233\273z\374j\273\023H\340=\n\3021\275\231\351{=\262\321\370=Q\031\303\275\215\242\362\274\241\354\000\273\277q\345\274\360I\356\2746\270\224\274./\252=AB@\274\310\365\000\275E\240\226:jp\024=\264o!\275|\312%=\255\330\263=j\351\244\275\001!o\275\204S%\275`9\240\275\201\263\014>P\026\023\275\355\235\177\275Jt\350;Qho\275>\215\230\275\222B\223<#\027\002;Q!_\274e\013\342<\027pn=@o.=\351e\212=`\342J=\230\035\271\274x7\231=\377\374e\274\374Y\202<\330p\201\274f\207\025<]\255\365=7b\032;V$\022=\377\357\016=\'L!\275\335\256\014\2753l\025\275\006)\221\275ZW\300\275)\233\013<-\333F=\252\372\345\274\036Xv\274S&\263;\320\224;\275\317\\\n<\242\273:\274\214\336\373\274\224\222\337;\031\212\177\275r\026\203\273V\002\202\275\322\274&\274\035U\335=\343}9\274\326:[\274\207\314y\275a\317\235\275\003}z\275T\242\005\275i\240\003\275\213\\\205\274\036\334\236=\034}\033\275\256v\375\2748g\320=\371\367:=-\364,=\003Q\200>\'\233X\272\327j\001\275\201\347\203=\274\272\200;E\374\t=\210X\021\274.\212\222\274\225\256\000=\027tN>\316lM=\225z\257\271[}0=\323\327\270=\377\276R\275\226/m\274Na\036\273o\346@\275\300\003?=\326\035\355\273\371Q\372\274QE==R\037\253\275\"\254+\275\335\371\\\275\355}\210\275\227n^\275\003\226\"\275N$7<\301\201m\273:\273f=\362\260:=\315\226Z<\214\007\203\275\022\2519\274\374\261\360\274s\311a>\260ze\275\001SV\274\2304\214\274\021\241;>X\2539\275\234\366\214\275j\326F=^\177|\275\266\2765\275\213\302\031>%\316h\275\"b\037>^\n#\275|\010\302<hzG=Hs\022\275;\364\346<\256\252\220;^\321\016=\214\201\246\275jN\324=\331\344\225\274\304\250\021>S\212\272=k\204\023\275\246\324U;\244\301\321\275\275\227\270\2753R\000=~OP\275\252\250\005>\252\014\225\275\260q\310\274\304\260\222<q:\021\274\214\345\245\275\314!\276\274\375\323\375=\233\300\254\274.\223\032\275\"\323X\272\312\331\306\275\004\016\222;D\n\027\275\233\243\331=\353\035\246\275%3\033\274<\217\263\274\310;\214\275\275}\n\275\264\211\270\275\211\021\216=\027\177/\274Jc\213\274\231\216s=\322y\337\274Z\\\341=\201H\000\274X6\353<\370\331A\275a/\306\275\031\215\242\274\304\013#\275\031\tz<Uo\311<z;\007=eqP=D<\266<r*\007\275\204\203\205=Q.\330\274\2069\022\275\017G\266\274\375n\237<\020\026\246\274\266\267\364=\177\352T\275\260\267\334<\315\020\t\275,\230\375\274\345\"\215<\316z\371;\004D\247\275\254\220O\274!\300\372\274\301f\235\2747\026W\275\230\244\177\274z\'\320\274\236\256n\275\255\001\t;\032T\247\274\345\226\350\274\032\372\204\275\224g\276<\n}\367\274I\005&\274\263\306y\274\253f\323<\241{\215\275\316B}=\032\217B=\275\371\"=\316\373><\321\323#\273\254Y\373\273\320\010\244<\220G\223\275\"\327\237=\023x\307<\257i\267\275\2755\356\273\225S@=\031i\177=Se:\274r\340\007>\260\347\371\274R\331o<b\216\235\274\207\277\312\274\342\352\272<WX\324\274\007\217;\274\224\325\201\275@u\257\274\327\271z\274\033~\216\275\307v\010<y6\260<u2h<\312\036\371\274\207h\307\275\277\2263\273m\030\250;\212\331\007\274\030\370\374:\242{\222<+\346\202\275\266O3=\304\021+\275\271im=\200\007\t\275\374\207\376\274\212\017\320\274\347\037\036<\223\265\002\275?\302j\275\354i\013>\006V\024=G3\201=\010%\025<\243\002\276\275\337\244\233\271\341\250C<j\300 =\005\374\254\274\"y\003\274\'\267\270\273\301;\316\275\277\271\006>\\[\010>\353A\247\274\010\361Q\275\207\364\220\274\220\275o\275;\030<\275\305\273\t;w\032j\275\332$\272;\010\216t=\217\273\233\2748\351\211=\330\315i\275\367Z\261\274\214\213\267=\007Ii<\313\007\215\275[\216\210\274\347\004\300\275w\357m\275<\304\364;\226\234\016>s\032\240\275%q\326\274\207\360H\274\274\334Z\274\336\217\270=\177\321(\274*I\177\275~\330\002\275\262.h\275p\247\037\275\306O\347\275j\037\361\274\272\226i\275&\3374\275\205\363|<\355\3221\274\360\216t<\354\276X\275\300\247h>sUk\274a\377\311=~\303d\273\206\237[\274p#\205=\214\210\035\275\345\324\241\273\250\232Y\274\331-#\275\323Va\274/0+>%g-=f\344\n\275\002\331I<\225\216.\275S^\217=\240\362\220\2759\232\014<\003\344\002>\230\217\267<c\330\016=\261\0249\2752\325U\275\006\236\361\274\037\367|\275\220\t\007\275i\254\216\275~\016j\275M\214\324\274\3578\303\275`]\n\275\253\231\251<3\220\243\275\030\362\260;\201\374\247\274\267\330\333<=\306v\275\263\305\036\274RKH\275p\224j=\375\370\237\275\214\004\364=\341vN\274\373@\373\274U\271\267\274\004xy=\324\257\353\274\222\n\215>\017\260\234<{\205\252\275\251\333\202\275\310\\\250\272%\201\204\275\222\310\300\274\372W\376=!c\201\274=\034\016\273\271P\"\274\027\'\032<j\017\026\275)sK\275\005\004\212=\331\0010\275E^\214\275hkq<iv\213\275e\266\233\275\234\337`;\t\301\010\275\027!u\275\365\364\357\274\362\327m=Z\337\032=\274E\214<\207t\204\275\310\374\243\2744x\334<\306\361\017=\262\266o\275\233a\230\273\252\307)\275\347\322\241\275l\320O\275{)\215;\026G\370\273\247\257\324<\006\016\257\274\002\253\337=\311\325\251\274\247\342\014\275kA\255;\230\026\n\275\244\017\213\275\213\'\275<\325\265\224\273\326\262{\275\367U\032\275\017\353\333\274\276?B<G\221\031\273\240\370\255<DA\020=\361\266X\275\034\037N> \232\325\275\336\375\336\274\221x\376\275\333>\267\274\314\225\010>>A9\275\320\0367\275\316\201\314<v\225W\275\020\222\242<5\021\215\274$T\234==\n\013\275\023\032D\274fg\037\275\340\320a\275\001b\230\275~\261(\275\341\243\355\274J\345s\275\340\223\013\275\225\232\217=P\263\'\275\026\000t\274K\233\234<\361\317\201\275\245^+\275:\303\366;d,\225\275\306\334\327\272\321\212o\275\327\037\t=*L+<\336\351\241<\232^\245\274\210\337\217\275\n\000\263\273\224am\274R\024\201=\372o*>\007\360\204\275\027\203 \275;d\332;\246\220\002\275 \354\277=g\366a>\021\033V\274\370\273==T0]\274\231y\016=\374U\221<]b\347\274-~\217\275\326\326\211=\247\233\243<\247K\014\275P)@\274F\236K\275\233u\333\274w|\350\274\215\227\230=\365;\262\274\240\037H\275R\0031\275`\354Z\275\006\3022=\236\276\265\272d3\216\274C\277\337;\326\300\302;5NC\275\220\027\342\274?\372\000\276\252\026\232=\034\276\241=\201\221\210\275G\023\323\275\330GC\275\260\274\235;\212\017Z;\321\\\347<\177\260\203<\025\220r<w%\360\274\'J\340\274\263\367\030=\363<\017\275\370r\375=\300xG\274?\3356\274\215F\351\274y\006$\275\307b\277=\312x\233\275\236\246|<\367y\215<\235\237D=>\032a\275\246\250\210<\003\001\223\274\300V\305\274\376{\255\275zs\306\274\342F\374\274\356\"u\274\342\354\347=`\276)\275\326\004\034<\371w&=\315i\212\275\274\272,<\322\031\300\274\332\036c=\2027\304\274$b_\274\237\312\t\275\021\267\370\274\016\304Y\275P+\351\2731\213\024\275O\020\362\274\227g~\275+\014\302\275r\215\347\275\342\365\333\274\310\231\304;u\262\362\274\030)v\2752\n\243<\342Uz=]? >\336\036\363\274O\277$=\"\345%<\306\352+\275\307iv\275\323\322\362\274\366\305\253\275\310c\343;\321\275j=\016\336q;\261L\322:\221\242 \275\351\345/\275\277u\344<t\020\232\274*(\244=\340\245\372=\254\256\303\274>P\023\274\230z\347\274\217\013U\274\265\302=\275\005\373\000\275\212\270\017\274\203\231\325\274\272;\254>\022~\"\275\225\013\232<\264_\346\275< \033\275qZ\016\270\2660\242\274\343\277\327\274\371A\351\275K_a\275m\253\210=\027\217M\275\264?\277\274@de\275<l\220;\216*\277>\003\026Y\274a\271\337\274U\204\'={\257m\274\003hb\274\007\2517\274s\341R=\353&\272=\304\036g\275\361\212\343\273\231\226\014=] \204\274V\350\231\275\365\331\304=z^\327\2740p\027=?l\222<p\273A\275\031\240\203=\273\244\006=\277\013;\274\2742\214>)749F8\203\274\322LE=\222\373\344\275\206\027\211\275\020\326_=\337\223\362\274w^\200=\033$\023\275Bz\025\275\010\307\244<\222\264\t\275\233\014\032\273\2622\307<\331\256G\274\302\242\346\273\231Hq<\203\001_\2755<\206\275!\326\271\275`&\207\275\023\202\251\2753\344\235=]8<\275\261hD\274\360\2303=\370\204\343;S9\241<\323\315\304;-\201\200<\335\\\356\274\232\r\364;\323\013\266\274\337\214!\275*\000(\275\317\200B=\311\312\354\2740\275\t\275\343K\236<]\017F<\200+\367=\346\231\3407\326\331\211=\t\313\201=\370u\360<\222\313\030\275\324\216`>m\271\210\274^\376\260\275\343J\237<\216R\004>g\261\037\275K\361\235\273\376\367\010=\326\003\207\275`\265\220<{\314h\274D\347l=\243\307\022=H\201!\2757\344C\274\006*\224<*\316\235\275\037\257\213\275<mS\274\366?w\275^$\255<\343\020=\275\350f9=\335\n$\275\\W\213<]\017a>\371f\351=De\307\275?\017*\275\007\332D\274S\325\365:\214\013\005\275\316\332\242\274\353\312\300\275\272\206\276==~,>\207\251I\275\366I\211\274k`\261<\231\344\257\275r\257\345\274\315\231s>\366$\303\274nC\236\275N\n\220=\255\020\206\274iO{<`\014)>\262\300.\273\246\243Q\272\331\275\220\275\022\257\006<\263\226\221\274\347!\023<C\242{\275\377\245B<N\303\225=\004[j\275\301fQ=6\177Z;\266\211\244=\222\341\355\274\354\216(=V\321\337\274\030JI\274\030\034I=\0074*=]\036e<\343\322\374\274\231\n\242\274x\367\203=\231\356\002>\3624\026=\034O:<FJ\'=k\034\351;a\337\332<\210\232^>\247\027\321\271\234\032A\275\317o\202=\323\263\004\275\333\243\177>\336\231R<\326\253@=\342\266T\275\303\242\020\274\2237\252\273\341\367\033;Z\256\365<7R\311=`\331^>\323\3129\275h\316\237<M9d\275\252\031\216\275\315\236Q\274=\313\262\275\271\017Z\274\213\307\017=\013\375\375=k\013\263<\207@[:\344\354\261\274y;\230\274V\352J=\216Z\342\274\314v\217\275$\037v>6q\200\275\307b\026\275\030\211k\275!\013C\274S\353\242\275\2147\327<3\000\013\275\\\306U=7\221\034=C\325e>R5<\275\244\336\364\274_K\221\274\276sQ=\302[(\275\360J\270\2731\345l\275\360U\2649\263!\000\275n\256\026\275}5T\275\260@!<\346\230\226=x\253\037\275YB\226\275\261\2641\275$\335\303<zM\263\274|\033:\275\247\205w\275!f\377\274\367\t\313\274\"\033\034\267\350\034\333;\374\017\356;\035\361m\274(Zr<\016\007\325\274\232\317|\274e\267I=\266T\334\272Q\010\310\275\001\352\211\275+\317&\275\234\007\035\275\301\220\233\274v.\010\275\235\271)\275\367\201\313\2745\265\345\273\323\224\257\274@h\314<\021\313t;\250\234)>\376\211\260\275\316\'\004>\3306:=\250\266X=\345J\276;7q;\275\367\207J\275$7\207=\017\257t\272\233\205\270<?\230\244\274=tj<4\341\226\275^\311\217\275\026\363\300=R\233\327\274v\241h\273\263\247\273\274T\313\252\274\302A\231=\361\365\305<{\351\032\275R\032\231\274\314s`\272\276\244n\275-\371\024\275\310\177A=\021\350\225\275v$\267=\r\241w=\3131 >\366w\326<Y\221$\275\266q\224;V\375\202=\250\367K\275*v\023\2753\000\204\275\306\311H\275\005\225\220\273\234\251\264\275,7Y=q\307.\275\035\311\210\273\237\320G\273\001\220\354\271i\023\033>\364\022]<* \251=\007\367u=s\263\177\275\231:\310\275a\355\204=\001\004\002=\021\"N\275\010\n/;j]\003=\217\223R\275\327\241\265\274^\0379=\245\202Z\275\034\276\310<\022G\205=\221/\251\275\344\353\013\275\243\021N\275#\332b<:E\250<\372\356q\275d\017\"\274\221\3369\275\3673\004\275k\340N=\315\236\302=\217\255\003<>\245\031<\231?L=w\253\220\2757^\355;)\252\007>\311\335a\275\276\302\320<{(\t\274Nj\234\275Q8\t\274:\276\300\274U/\030=\362xD<r\360g\2745\240\334\273\3534\243;\333\350\020\275\207\273\256;\362\2021\273\025\016M\275\013\233\001\275ji\350<\177\235\211\275\3414\216\274/\341&=Qqh\275\220,\247\274\2119\225<\357\375\225\275\333!\033\275\207\373G>\271y\014<i\024\372\273\232s\342\273\305\002\002\275.\355\033\275\234h\201=V\365\245\274\257\221\265\275M\003\213\275\2508\233\275\203\231\n\275\354\277\212=\334B\311\274\250_\006\273\214\016\265\273\027\014\262\273t*\330\2748\365\310\274_v\301\273\255 \216<\177\277\036\274\347\342+<\353\010\231\275y-\021\275\0028P\275\001w\375\274\245\243 =\272\027\366\274!\2613\272\314\350\320<\330\363n\274X\201\253<\374\275\006=\021\247h\275*-\235<\272L\013\276\304\203U\272{$\356<\313\323\216\274\256]\351\273\220\002`\273{\234\'>gJ\233\275.\243\247<\177d\344\273\322P\367\274\2277\235<\324=\210\275\025\223j\275\010M\257<92\032\276\352\345\032\274\256G\022\275\357/\367<%\251Q<g\370\027<Wm\023\275\236\310e\274.+\255=\226_\001;k\227H\274[E\010\274V\350T\275Y\n\334\274n\021\230=w!%<\210\362\323<\005\252v=\311{|\275\227\226\220<o!w\274;U\323<[D\013=\354\267x>&\346\031=\214\336\001\275\252D\253\274\307\222[\274\273}\322\273:\"\361\274\345\363\010\273v}m;\234\272\322\273\252\261\"<\264\263`\274\213<\r=hPJ\275v\225\007>dB\024\274\240<\345;G\033\250\274\352\rI\274:\316i\275\202\026\2239\357\030\244\275b\312\323\274\301\005\265\274l\246q\275\200\374\323\274\343\270\024=\371j\025\275\\\250t<\245!\246\274D\256\277<\357\243D=\207$\177\273\236@\314\274\342\216\005\275\023e\306\275\271\370\321<\301({\274=!\255\2743\232S\275\333_#\275\037\274]\275\233J\024<\327M\217=M\240\227\273\2123\006<\311\300\262<\314\232\367\274\022\255\001\275{\302\211\274s\300\001\274\027l\350\274*\376\245\274\002\007\003=S\235*\275\202\312\322=-U\272\274(\306&\275\374\357V\274D\341Z\275\'\277\3338, h=\325\307\002\276\323)T=\217\226k=\216\023\233\275p\333\331<\345\321;\275\333\225\242\274^\363\211\275;]{\275|\226\250<\326\302\016<\352\001\005=\351[\t\2753\037\034\274.=\263\275\365)\221;\030A\"\275\022\242\246\274O\234\262<\354\232H\275m\260X=\374\243\213\275\232>2\2756\006\215=`\004j\275I\252\005\275A\031\211\275.\342\r<\337\\C\275\367\367\301<\245y\207<\016\305\335\274\357h\'=_{7\275\3131\361\274\3765\303;D\362V\274:8B>\322\315\267<M#+=\224<\025<\326Xh<\"\037\260;~\346\237\275N\366\225<H^\321\275O\017\200=\251W\017=\202\351\241=X3\316;\233/\321\275?\2336\274\356\014\007=\310\"\231\275\245\022\270<*RB\275\001_\257<:%\353<\343\335u\275:c\367\273\365bC\274\227\247\206\275V\241\223<\347L\310\274\310\033<=\200\206\n>\021L\222\275\305\230\007\275\022\000:\275sV\201;\307_\341\274\254.\226\274\313\272\307\272\321k@\274\264H\022\275.\310\364\274\302O\221\275\306\3243<\033 <\275\371MN;\362<\260\274K\277\035\2753\360\300<\307c\224\267W\\\242=*\013\242\273e{ =:\265?\275\375\014l9h\026D\275\330ks\274\201\242\377\273\246\374\356<\030zi\274\317\366\244<\366m\236<\202\311\007\274\000\242\346\274\264T\202=\227:\003;\014\032|\275\305\264[;\325\264\361<T\277==\262\260\036\274\210\3615<r)\252=\277p\237=\230\034\314\274\226\247\231\273KY\373;\207\263H<fM\034\267\255\'\203\275\304h\000\275\3230!\276;\264\031>pt\216\274\244\353\270\275B\212(=H\"c\2738@\030<\275Wh=\317.\222=\322\006\367<2\226\236=\256\253\177<\016\t\313\274\271\364\024=\245^\356=\375\006F\275\301[\213\275\3400\215<\016\375\314=\375\323\270\275\215a*\276#\225\256=;\006f\275b\302P>\201\315\254\274\345\300\021\276\302m2>`a\330\275\314\211\324\273;l\250\275\223\320\340<\335\333l<F\024\001\276c\205\002\274p\237`\275\347\234\023=\355\307\212<\252\254}=\327\027\306\275\343\200\271=\251.,\275\264%\346\2724\264^>\261\343\261\275v\250x\275\240\342\035\275|\333\002>\n\321\337\275V<\332\273\375@\010>\201\372\212\275\202\033\337<\355\3706\274\224\355\321<&>\257=\321\326\024>:\365I=)\345\016\275\303\217\t;\363\367\217\275\265`\036\275\231\341\001>\021GM\275I\222\251=\347\2744>\234_\022\275\004~\253;\365\360\010>W3\006> \376\217<|\311\337\274%Kv\275\031R\206\275q\213\316\275\243]M\275\207\014\310=x\003<=\210(\021=[0\326\275\255\223\205\275\207\3633=\237\000/\276\025\355\232\274\177s\3619\205\367,\275\224p\017=\334\310\332\274\244\204@=TY\233\2758\2147>\345\225,\275A\320\036=\021j^\275\207Yv\275\311!\242\274\240\264\232=G\205\266\275\302\252\216<v\257\221\275Xk\247\275^\010)>Na|\275\261A_\275\313\325\212\275X\027\222=\"\0138=\256V!\275}[\310\275\204\312\275\275\010\203\302<cM\273\275EX\224=\215\242*\275h\3427>_\314y<\005\305\241=\031-A\275.Va\275\351\317\t>\3475\211\275\303\220\r>\276\224i\275\334\200\365\274L\215\000\276wqJ\275\331\364\014>\321h>>CS\232\275\230\257\377<\344A\244\275\357\022]\275w\277\261\274\371\321\260\275\267\332\213\275\220>\264=\302\317\006\276\207\364\256\275@\371\276\274y\010\340=\275\255^<\276\226\222=_\204-=\271\222g=s:\230\275\211\240\232\275\315\311\256\275\010\354\010\276\0247#\276\350Un=.r\235\275\332\273\227=\214~\242\275\276\343\233\275\037w@\275\322\2766>T=\214<A\032\004=\024T\222\274\260u\037<\345/\212\274%WP\275\3762\205\275\201L\013=\307\001\345\275\203\235.<\236\355\214\275\234+%\274F{\000<\3308\222\275\250t\210=r\212\273\275\"3\317\274\3128L\275\371G\"\276]\205\250=A\313\276;[\314\322\274\301\371\003\275\002\005\350;!\016 \276\367\274^\275\373\206\230\274\332q\013=\345$\267=\236\203\026>t\022+\274!\243\001\276\336\327A<!e\351\275\363no=\000^\316;S\214\027\276\020\346\334\275X}S>\302}\030>)\237j=S\234\337=\t.-\275r!i\275;\244\203\274~\217(=,\225\202=\032\300)=\207lV\275j\230\224<\366\035$\275\211\0307\275\320[2\275\230R&>\232\234\267\275\342O\341<\336\236\352\274\027\370\265\275\261V\265\274r\331>\275\343\220\216=A\226\333\273\266\261\021=]\035=<*\346\377=\312\222\243\275\221\242\021\275\243\255M=\3606\266\274S\270\t\275n\214\317;\317\220x=\341\212]\275\276\263g\273\304[\031\274:\014\307<af\274\275\310#\340\274\262\353H=\347\344m<\225\201P\275Zx\317\274/\331#\275\177\350`\275\220\326(=rR\327\275g\353\265\274\200\232\321\274\262\363\354\274\330w\007\275\253k\251\274\357\2721=7p\322=\020\244\026>\034\370\203\275\246Z2=\244\271\215=\225\"D\275\027\243<\274\225\243\354>[\311g\275\355\"6\275*V{\275\205\315\007\275\240[I\275e\375\232\274\003\030\035\275Y+\220<\030\230Y\275\300\000w\275\244Kd\274\366\211\013\274\n\266\235\274\177\201,>\326l\222:\243z\373\275\333\377\222=\213\374\236\275\262\3421\275\334c\206\275\247\212\t\275m\210\n\275%-\361\274\024s\260\275\3761\211\274\030H\034>\211\331\027\275\347\253\270\274\235,\357\274\215\020\004\275\322\302\206\2756,\246>\326\255\325=\202\261\013\275\246z)\275\200H6<\014\313\236\274zV\023=\260\303\201\274x\223\010=\230\271\315\2732\372\037<\242\3037\274\317\352!=\2227\206\274&\305I\272\201i\307<agC=\013\357\260\275\365\037\034\275\230\251m=\352\316\247<\037\035\207\275\377\271)=\201\226e=8\307X=\241W\007\276\"\236.<\200\347\205=\030O\211\275\031*\230\275)\'\311\274c\"\343\274c2l=0\350J\275\243Ez\275\344\275\355\274\030\036\340\274\340\242R;_J`=V>O\274\003\003\265\275\243m\220<\013L\371<\305\307\263<n\177\224=$D\351=8\332\276\273A\n\214\274\220Y\"\275\2054\273<\224\352N\274T\201\360<Ba\224\274,\316\316\274h\213\361\274\001\357\016>\3533\016\273\242|\311\272\240\203%\275\306dP\273\305[\216\275\004!\363=4\035x\274b\340b\275G\241\225=\004%\343;\212\276\263\274t>\001\274%\014\265<V\205J\274\017\0245\274\342\237g=f\275#;\264:B=\202H\3669\253(@\274f\025O\275\3378\025=\213\276*=4Z\232\274a\352\244=b\207\214\2753\321,=\214\261\237\274u\261\025<omt<i\265\023\275H\262%\275\234X\t\275\221\006M\275\364\006N\275T\302B\275k\006j>\302\224n\274\323E\245\274b\240\223\274\266g\206\275\234\3435\275\375\001o<\r\377\375\275\270\2012=\001\336\376<!\223\022\275\247G\212;\202\205~=\375\002W\275\037\200S\275\345Vb\274%3n\274\007\335S\275\314\335\010=\000O\241<m\233\244\275Ri\206\274l\035\253\275\232\223M\2754M\265\275\203\266\r;#\026K\274\361\310\233\275\374\376\013\275\261!Y\275VVR\275\263\007b\275\345\330\255\2743<^<i\225`\272a\250Y\273\355\003\025\275\035\337w\275i\252\343=\017?\021\275\364\230;\272\324\340p\275Q\335\005;4d\230<\210\246\213\274X\251\240=c\273~\275\326\242\3638\214\2347<\234\026j\275\203Z\252=\377\2065\274\374\231\205\275\356\r\223\275\024\226\221<\346\014\r=\363-_\275\205\017\205;\263\236\246=t\305\320={\274\215\274\025Mn\274vOS\275M\311\365\274\264\237q=\347\217?\275\205\365\334\273\341\336\231:\205\227\'=\237\352\276\271.+\353\274\353GI\274\031W\347\275\211|\265=w\350\243;\207\377\356\274\025\373F\275\313\312\233\274\376\314\227\275\320\013\261\273\0160\227\274?H7\275\315\026\207=\266\216\207=\363\341\367:\306H\242;6\332\336\274K\022\022>\232\025S<\"\316\352=\330\201\277=\263*\215<C%\273\275$\310\023<\270S\257\274V;\025\275\216\017H\275\025c3\274\312\305\002\275Q\274\306<6\036\254\274\224\022w\274\0003\265=*H\333;h\215#>\333\204o<h\0140\275f\216\235\275[\3167=\346\216\271\274\250;\224\275\237\017,;\242\262\234<\242H\013\275\030\362A\275\370G\232\2737\021\277\273\267\335R<\275\225_\274\2462\345;\246\023\227=.\246\003>\377QL=y\t6\275v\225:=\264\026\336==kX=\353j\275<!\333e<z\352L<Nx\331=\340Sa;)]5>\240\206<=&\256\032=&\352Y\274K[?\275\223;\r\275\322py\275W\310I=t\350\205;\363\305\307<\325\232D\274\346\324\t\275\240\336\236\274\200`\023\275\034\253{\275\321b\227=\310\234&=\323y\022>K$.\275r>\026\274\255\350X>\217u\222\274\277\312x<!#\313\274s:B\275\225Ch\275\212\004\255\275\010$\267\275\374\225o\274\255Z\253=\002\367N\275\021\000\250\274\360\250\027=-\n\177=\353\3075\274\326\n \2754 Q\275\302\210\234\275+\026\356\274+\3103<9\227\027=\240\211Y\275\214!D<\253\342\225<W=&=\340\300\317\274\267\357\267=d\037\r\275\202*H\274\340?c<&z\326=^\273\222\274\233U\217\275|\352|\275\204\006H<\317Y\014>\373\003\271\274\305\035\253\273\206\335\213\274\376\316\216=\357\206\361=\334i\177\275\273\205\014\275\260\277\'\273\257\344{\275%\007\n\2760\314@>\254\330\222<\203\214 \275c\214\315<C48=\3235\000;\263\250\002=n\014\314<\253Y9\2752\250\205\275;\226/\275\212\3261=jT/\275\316[\210\275K9\003\275\211U\226\275l\353z\275\010\235H\275\273\220\351\274t\306\223\275zwy\274p\034\205\273\346F\037\2758\272\250\275\245\326\211;{_\220\273\200\323\304\274\276\212J\275]\3010\275k\340<<\247g\031?\215\375d<H\303\306\274\272%\303<|\311Q=\3238\363\274\022\n\034\275\334\262\210=l/\"\275\217 T\275\277\222\356\273\374\324\317\275\232\313\016\275\345:d\275\252q\035<\001:\373\274E\037\356=\313Y1\275T*\003=0\222\244:\342\367I\274\244\333\312=\351\375\000=\376%>\2750\376\200=6\'\217\275\214F\004\275bX\267<\277\277\230\274\321?[\275f\365\242\275W\252\323\274O\210A=\303\333\014=\014\210u\275\203\213S<F\014\250\275\3019\203=4\006G\275\222\304\256\274\206\310\350\274B\037s=9\206C=\005\334\364\274\005_\037=\312t\022\274\226\000\274=\241(\305\274\027\236\321=\031`\203\275y\242\024=Cm\206=\260=\247<\177\230\020\275\203\363(\275\314\014\300\275\n\221M\275\'k\370=ju}<\023\314\322<\220\037\002\272:\000\035=\002\253\232\275\265\030\264\274\177\tt\274\353\272I=\024}\311;q\353m\275gi\'=\335h\204;@\030\010\275\273*Z\275\363K\211\275\354R\320<\201\340\200\275\347\223\271\275\304\265\225:\3554\316\273k\347\220\273\253I\347\274\253\271\331\275\017wA\275W\306\220=\375qu<j\010~<\372 \025=\255\227\000\275\215\214\212=\331py\275\"\233\257\274\020\242\225\275\021HQ\275\343\217\316<\r\032\372=\037\336\270<1F\204\275\274\256\023;\250=\337\274a)\236;K \260=@\216n<_\244\366=e\022\014>\t\277\221\275\022\017\201\275\202e2\275m\261\031\275\245HG=\201\222\246=v\257O=\r\'\017\275\350\352\022\275\222\021\237\275%\233>\275\232\224x<J\250\013\275\216\362\244=u\216R\271\341\222\022=`?\203\275\026u\'\275u2\234\274\331\314\206\275[\246\021>\202W\020\2758k\345\273A\r\340;\206+\306<\031U\242\2747\367\241\274\025V\220\272 \235E=\"\376\272\274OP\243=j#\265\272\315\356\270\273\270\203\272=\210C\355\274\217\'\250=\345[!<_L\272\273\200\270\350\274VD1=\2471;\275f\236\316\275\247\247\303\274\3458 \275\323\352$\274\276\337\367\274\242\257\314\274%i\336\274\242\272Q\275W7\245\274\203\212c\2734\207\237;\264\363[\275\2143\007\275[\236\201<g\236/=\344\025\242\2746\311\3268\256L\305\274\027\313m\275DC%\274\314jD\275%k\265\275\320\365\346\274\2539\351\275\037\324\200<#T\266<\222R8<m\247\263=7\024\343=9\002\345\274\375\370\204\275\276\347N=\235e\336<\267ui;\324\016\347\274\205F\362:\003\225\n=_\020E<\225\3147=\3061\307\274\265\006\210\275\tS\214\274\366\032\237\275\212\034\222\275n\311\024\274\376\362x=9\224\217\274\267?\201\275o$\\=\361\312#\275\312\022c\2741B\032=\275r7\275Z\340L\275 y\000=\237\327E\275\265\235\331\274\304\316\r\275oI\333<\211\000\007\275N\201\216=\275u\000\274=\323\361=\0341\205\275\314\332S=),+\2748(d\274\007C\354\274\021q\264<\235V\364=6\220s=\272\213I\275\377\371\220<\337\353\247\274Tb\001\275\\\2030<\232S+\275\317\223T\2756\361\276=x\273q=n\260\255\274\243\300\177\275%I\204\274\271\224\177=\036\203\332\274\211\313#\275\317eF\275\304\202\225\275\177\241\300<12\255\274\001W\223=\350\352\243<Q\231\277=\t)K\275\3107\334<u\217\220=C\350\177\275T~T\275\201\302\257\275`vQ\275 \367\234\274bB\343<d\277\275\274\246\2717\275x\325+\275\375,\024\275L5C\274\036\315@\275\267\264E=gQ\021=\373\3568\275P\230%\275\355/\036\2754[W<_(\322\275\352S\"\275\361\265\357\274\231\325\200\274\023>k\273RJ\307=~\341\341=m\000\034<}4c9\255\214P\275&\264\221\275\361\220\000>\270by=\253\025\253=gg/\275a0G\273W\236\017\275\213k\335=\1770\202=U\271\327\274\270\227\r\2756@]=u\204\256\275[\341\224\275RL\r\275\020(\204\275P\025T\275\332\364\352\274@\261\024=J\246\325\273=\333\366\2743\250\017\276\356|\r\276\316\265\205>8nX=\002\005R<\316\255\236\275\251z\004\274\032\257\004\275\316UE=<\010\253\274\206\367\250=\273\311\227\274\227!\013=\036\335\353\274\256C\226=\034\256\216<he\215\275,8;=\2408\312\274\026\254\010\275\321?\r=\r\333\303\275:?\317<c4\024\275\313\352\207\274\243\311-\274~\206a=\212\332\313\274\030\342\234<E\365e\274\0256(<\376\267\024=\361&\277<lA\033>^FD;4\250\014\276\300\251\374\273\334C\374\274\224\201\261\273S\212\t\275XN\232<\272\250Y\275\363\021<=s\330\233\275=\204\313;\270\"\262\275\342\335\333=\251J\020=O\333\241\274\255H\265\274\244p>\275i\203h\275v\"\252=\306z;\275s&\003>\307\332\013\274A\247\250\274\357\305\221;\304\242\021=\345y\277\274\312\315\223=\321\037\232\272\316\271\'<[\310`<\311\260F\275P\325\350=\344#t\274k\247(<\205Y6<\345t\370\274\230\343\303=\233j\234=]\316\213=\037\370\316\274z\320\362<}S\244\275r}2\275\337\244!=J\026\222\275Yg8=q\366:\275\027\210f=\222\305\032<\235\027d=)\324\"=\014\320R\275\037\345\324;\010\252\233=\316\226\r\274\234\261\004\275\013M\226>\"\214h<3\377T\275\300\307\036\274\t\240v\275\223J\315<\363:\031\2751\001r=\345\2413\274\205}\302\275\273J\371\273\177\013\223\275\257t\254=\204\367\2779\031\353\371\274\276\314W<\366g\357\274\026/\033=\223\353o=\3507K=\2665\312\274Bs\270\274\325\n\250\274\236o\014=\330\'\242\275n\203\024=H\326%=\360e\356\274\230Z{<\322\366\216\275\257\335\273<w\321\236\274\t\313\213=\355!\017=+\346\210=9~\272\273K\327\023\275x\006\n\274\222M\331\274\363\036[<\360<\343=c\251\304\274\251\210q\2758\024I\275\314\262\t\275A\271\256\275\3075\202:J\316N=\356x,\273p.\023=\275\034\356;\360\316\267\275\004u\237\275D}\256<\014Xk<\007\337\201>\016\027\"\275\305\001|\275\336\277>=\354a\344\274\306\277\3518/\340\326\275\312\217\372<\236Wh\275\357\021\366\273\010b\220\275\303\342\240\273A\017\204\2737}\261<V\000\227\275V\257\355;\263\226\266\275\203\335\242\275t\360\344\274`p)\274\013\264\265\275\3701\n<\364\240\351\274\001D\310\274\253`\367\275P\020v\274\331\rY=m2\027=,\343i=\267\226\332<\255\241\177\274\201\275\320=\215}\272\274\336B3\2744\264\345<\333Sz\273\353\231\210<l\373V<\210\201\022=\310\256\271\275i,\263<\261\353\315<\345\024\037\275\032\323\326\2745\027F\274 \252\276\27327\210\275{g\214\275n4[\275\037\266|;v\311\026=\026\026\216\273A\021B\275\217\032s\275!\222y\275R\240\365=\352\325_=\344~\224\273J\3153<.\261]\275p6\026\275}7\027=\300\034G=\223#\300\274A\211\255=\327i\254\274\316uM\275ii\267=..=\2736>f\274\231U\225<Cw-=\202c-\274\262\200\256\275Q\221\253\275\r\220\203>\376\266\034\275\363\000\247=\313\021e\274\216\220\367<\353\033\321<\362\257S\275\032qY\274\250.8\275z\277\233=F \013\274CU\272\275\244\264*\274\303M)\275\247\252\005=mY\022\272\217F\022\275?\340\037\275\342\3323\275\021\316:=\334o\372\275,rW:2\rH\275\255\202\224=d\270\353=M\244w=\003s<\274s\033\352\275s\352\313\275\013\2235\275U\230)\275\245\342\342<\034R\223=g\250\333\274\207\002\352\275\030\325\350<\'vo\275\013\267L\275\242\263\311=\272t!\275\311\355\236<\3748\177\274\201\003\324=v7\222\275\273\016\360\274K\204:\275I\223\322\274]\230\213=_v\025\275\373WD=\336\241\013\275%,\355\273\"|(=\na\204=\325f\224;\\-\205\273\215\000X==\224\260\275\251\331\364\274\341C\222\273u\257[;\3244g\2745\335\371\274!\226$;\360\005\262<\321\205\237<\010\315,\275\221D\026<\237L\347<ab\241=\311\327T\275\025h\316=\026)\207;\360\257\376\275@\246\307<\353\003\022>\2116\212\275E\037\315\273\354\226e\275$\315\361\274\217\222\373=\261?&\275\300\333e>\342\2457=w\206]=M\006\225\274\241cI\275u\221D\275\313\253C=\277Z\376=Ib\244<\246\263\243\275\002$->{LV=\\b\375\274K\035\231\275*u\315\275\257\225\371=6\357\014<M3C>\245\356\303\275hQ9<\370\227\002<:\366\230\274\244\344\344\2747V7\274D\261\323=G4\177\274%\362\217\275\010\351\316<\230\364I\274\244g\221\273\207(\232\274\226\215S\274\277\2479\273l\357\005=c[E=\202\'\345\274ta\305=\010\020\267\274.\251\036\275\332am\274\335k\000=ik\356\273P]\307;\207\202S\274\207\323\004\275\215\377\003>Q\021\211\274\310\216-\275\202\'J\275\307l\216=\334\322R\275\320\3010=8\252\205\275\313 3\275$\036\031=!\324\003\275L~@:B\271\236\273y\205\326\273\026b\273\275\022\300C\274\266l.\274\325!\340\274y$*\274\177 V\275bj.9\242\312\353\274\032\345\2009Uk\010=\"\335\323\274\241\253\343\275\236\360\252\275\363&\206\274\273u\245\274\236\024\266\273\313\022\032\275#=Y\274\345Z4\275\224F\r<\242\235|\274\201\244\3329\3044\'<\376\346\227<\324\366\207\275\352\257P\275\261v\321=\271k\242;a\322H\275\273\\\206\275\022\352^=\212\265\342\275]4X;\356\030\357\274R\331\347\273nqJ\275\335p];\\\323o\273~\271J<\036{\245<\001\023\244\275\327\234\263\275Y\000}=uu\365=G\377m\275\242\360\231= \272\231;z4\027\275\353>x=\274\371N=\342\005u\275\351\027\226\275@Q\035>\221.z\275N\2703\275\303\366\t\276\261n\232\274\212O\216=\017\036n=\327\226\013<l\362)\275\275t\262\275\376<\220<Z\266e\275\300\010\272\2747OH\274\213Z\322=g\242\362\275B\337\005\275\031\356Q=\361\263\006\276\362T\327=\270|\007=\\\242b\275\000\207\210<\212tf<\357\222(<h\314\004<%W\034\275|*\235>\177\rh\275\355\003)\275\357s\315\275\325\307\245\275~\336B\2755\240\235\275\337\220$>\232E\340<N\222\211\274a^\212<\240V\255\274\212BF\275\306\313\t\275\007\007\342\273P\033\005<0\027\275;\242\316\347\274em\271\274\311\231 =*qN;\'\031h\274G4|\274\377sR>&\0013<\325\335\300=\316\340\253\2744\031f=h\025\014=|\265\364\275\357pj\274P\0230>\322\276e>\225\006\010\276\346f\352\274/U\031>9\306C\274LY\231<\320zH\275[l\264\275\031\004\022>u9\210=.\035\356\274\320U!\274/\004h=\\\254\005=O\300*\274:\247\324\274@\346\005\275\n\351\225=\033(\306\275k\227\305\275\002\247\324\275k\010}\273\327\341\326<$\217\342\274tQ\036\275\026\351\"=\203(\247\274\243K$<\002h\306\274O\264\031\275\245\034\203\275\234\214+<n\320\204<\343\365]=\306^t\2739\300\001>\373\336 =\301@5\275\311\350\231=`\366w\275\213\261\025\274AZ\002<a\216\226=\003n\025\275\260P\345\273>~(=\260\321p=\317\020@=\373\372>\274S\260@\275*\234\321<L\356;\275\020z\000\275\370k\241\274=\265\232=\"\201\002\275\305\312\203=\020IC=\363\341P=\307\363\314;\277\021 :\255\245\335\274H\344\035=$\025L\273\303\037D<\211?\225\274/k\033\275\375\341(\275\220\232V\275\356\342@<\302j\333\274\303\213\300\273\350.?<\301\271O\275\267\206\346\274\262\016?<2\217n<\225\307\205\275A\021\346\273\254\303\271\274\370\333\267<\226\230\265\274\277\270\204<\372\024P=k\334\305;\2646\272<\312\360\360;\320\210\033\275q\177.\274O\022\250\275\271\244\000=&\245\177<&v\027\273\241\324i\275ZG\210=>\371\270=1\276\254\272\320\320\026\271\264\315\377<i\000_\275CJY; \203\021<\262\245\274\274\310\240\254\274\023\324\250<\356D5>\027[\216\273l\253\350\274\305\003\235\274\314N6\275>\177T;\033\315V\274\220\234\003<|\245[=%\333\312<\235\250\232\275I .\275\301\020\277\275\374\216\3169M\001c:\335\216\214<\325e\246\2744\237\036\275J\312\003\273^\033\317;xV\206\275\251+i=\324\277\026\275n\223N\275\2569.\275zM\223\275\177\032\357<\2740\270\275\236\317\240\275\234\306~=c\022\207\274jq\310\275\271\"S\2753\034y;VV\016\273\356\350f\275_\303\007\275Vi*\276\370\301F\274\215\253J<\227\265\376\274-\215\350<\023\270\013=Z\027\'>\307Z\234<\210\216!\275\216\262D<\320\260.=\301\017L=\007z\251\274\252\211\233\274\010y\211=;87\275\302\372\276\275Cp,\275\212\223&\275\373\203\343;\030Y\261=\206\312\014\275/\373<\275q-\005\275\023\201\020=\005\374\316\274\031E\326\274d?\002;/\276\352\274\356\200\255= @P\275\343\332\314\274\350\270j\275\275\214\337\274\342\245\352<U\302\246>\320\'\301\274\230\213\026\274~KH<\345\nE\275\345\216\305\274U\344C;{\236\376\272\2740\212\275\347\021\025\276\032\007p\274\355D\032=\342\277\225\275\034R\013\275t\376\000=;\347\013\275S5\214=(\260\006\275\330\0317;\376f\233\274#\300\225\275H\255\032:\003\036\252\274?<\361\274\311\211\330<\206\037&\273yi\234\274\200i\270=\336\336\002\275\304\237\214\275\314\361^\274\222R\242\275\004V\210;\244Y\010=\306W\346;\031\376\037\275\245\021\005?Y\203\326<\377\224\261;\252\0265\274\313\252\207\2759<\350\274\217\0233;q\330v\2754P#=I\014\253<d\370\371\275\303\224\256\275?\340\246=\221\352x\275\221>\230\274\256\322B\275\007\266\305;8\242\">\260\365\357\273,\377\355\274\377\024\240\274A\013\235\275b\030\r=\235\232A\275l\370\276\274\006\361\002>\213Tt\275\242\230\250=t\237\212\275\235\235\244=\035\240w\274\245\247\275>\323Y\301;\254\206\314\274\032]*>\254\217#=\032Y\260<j-<\274\233\305\255\273\225\224\335\274\267.\270\275\302\335\305\275\311\350\305\274a\333\255\274\217\201\033\275\351\352\252<~\276\347\274\035H\226;\320\323\205\275lw}\275\'\277\205\274z\242\302\275\n\234\361;\260\270\376;w\177\334=\204|b\274x\214b\275#I\003=l^\206\275\263\303S\275A\021\210\274\320\331o\275\271s0\275{\326\026\275+\365$<#<\022\275K\310r\274\035\272:=\230\003P9\314\n\020\275\272\237\206\273=B\330=|e\"\275\017\303B\272\254\346\316=\025\354\033\275U%\371\273-\024K\274\235\201\276\274\324Au\275W\341\014\275\243\347\226<\031\315\030=i\354\365;\033f\315;\247K\211=\312fs<\323\0244\274 _W\275\366\210\203\275H\275\353\274\266\365\242\275\371\367\334\274*\002\255\275gL\377;\343\363\037\275R\230\364<\220J\021\275g\322G>\035K\310\274\035=\007=\367eI=\311\355\'\275\242\353[\275\0328<=\026~\001\275\226\301\236\275\205\224\000>\352\223\363=\313K\335<,\247\201\2751n\362\274\310\231\276\274\\\322i>\005\277\212<\3413|\275\203r\340<\027|\367<\003\320Q\275D\032\003\275\324\371#\275\317,\331=Z\3665\275\031$1:O\232\035=\263\001\321\275\321\365\030\275O\301\275\274\340cN\275\321\206\207\275\021\327\311=#\035\013>\021\265\365\274U\007\023\275j\205\242\274z=\027\275\366\207\274=\323\247\245\275\\\025W\2755\033\231;\216\236L\275g_0<\020c\030\274^G\204=\255\200\333<\362\276k=\016)\r\275\252d\204\274\315\250\271\271!\006\373<\337\267\270<\214m?\275\375\317X<1\216\023\275}d\256<\327#\303\275\311\303\373\274\347\010}\275\2716\334=cE\013=\210\236u\274\204\014I\273[^\214<\256\277_>\036`l<ak\331\273\351h\026\274\007\322I\275\2057E\275g\340\241\273\325\260\354<\267W\007=\210p(\274\231GV=\2505\213\274AP\006\273\306\256\017\275\0310Y\274\224M\351;\325\254n\27240\212=\263M\017\275\264\307\232\275\320\201\253<\217\"\177=\243\251\227\275\315\276<\275\030\363&>f;n\275\340\203\n=\017\361\244=\234,W\274\262\305\014\274D\276\230\275\036\203\023\275L\200\232=C.6<\014\322\3269\236\203\007\275\371\227\323\275%+_\275\026\310\201>&\3565<\372g/\2754\361I=\322w~:@]{\274\321\251\322\274\314_\205\275i#~\275\266\177\206\274\246\366\263\274 :\256\275\026\354\323;=\343\033\275\0210\341\274bT\357\273\247p\376;z\377\271\274\001\000a\275+\241\210\275>\351\312\274\004\211 <\002\277A=\250\212\247=8G\314;^\372\246=s\347\024\275PPb=f\364]\275&\220\207\275Zf\027=\307\204W<D\327\010\275\335a\336\273\261\331.\275*4\232\273J\220\325\274:(b\275I\266\n\275\202\236;=_DC\274\341\261\021=Z\014Q\275,z\250\274\032E\203=\000\212\001\2750\355[<\334\253]\275\346\025[<R\351\014\275D\234\013=\270\202\006=lv\206\274x\354\254\274\232\307&=\364Z\021=\020\327a\272+\214\376<I\366\372\272?II\2754\331W=\234\364y\274I{\361\274\3234+:;\263?\275p\373\030=\220\243\311<*\214\337<\002.\212\274\370\036\022;#\273@\275\366\225\237\273\262\245\n\276\3454\211\2758\021h:\001)\261<\014\350-\275d\335\275<\261\346Q=\016\200\252\274s\\h=q\013G=\n\242\201\275cf\231\273c\323\225>hU\301=\210/\343\273\243p\016>3E\242\273\321\303\201\275\266\376\341\274d\027\344\274\337\356\326\273 \201\316:]Z\303=\360U\230\275\365i\016\275\264+\245\272\274.\020<*\351\270\275\353\222K=\272\241\010>\320\017G\275\205\342\305\274\013@\331<;\356q\275\'\365\355;\224\r\251=#\240\231<i#\225\275\276Y><\024=\020\275t\237l=\251m\010\275\263\214e\2749y\260\274\204\023\377<K%\226<\2114)<\215\032I=\001=\\\275\342\246\225\275\226\302.\2753w\344;\346\004\313\273\026-\376=8\221\235<\347\252\177:2\226\247\274O\212`\275[\340\211\275\346T\312\274I\001\032>\316\345\275;K\351D=\265\313\250<o;\002\275\327\302B\275\275+(\275\'\327\177=\220U>=m\243N=+\345\365\2741\001\245=\202\240\036=k\027\305\275R~\223\275:e\210\2753\345\205\274\271\343J\275\206\223\204\275\t\374\025=\032c&=S\226\327:\212\272\315\275\340LD\275<\354\273<\302\023\335=\016\257\033\275\361\311\262\271\353\000\315\2758\271\036\275\017t\224\274O\313\277\274(o5=>\337B\275\230\ti\274Wh!=fl\265\274R\241n=\206\234\221\274K\312\216\2751\221Q=[\265\230<\215FR9\344~\364</\t\207\275\306\346\347<\005;!=\000\"\321\274gO\005>t\016\273\272;\346U=I\346\236\275\252\324g\275\004t\311\273\025\216D<\236\0041\275\003\277\333\274\316K\235\275\265k\240\273\'\373W\274:\376+\274 \325\004>$\261\344\275\277\rL\274n\2372=\013\340\344=D/K\274\317\232Y\274Q\033\317\274(\004\275\274r\3060<2\311\246;/\023\347<\357\3626;w\263\213\275\235\026\037\275\251\202\217\272\255R\223==\273\337\273\377\325D<\233Jr=\231\354t\274\3554\034\275B\031\204\274m\027\233\274\264n\035\273eA\010\274\332H\264\274\243d\007<4\257{\275YQ+:\354\256M=\260\257\274=\3115\330=F\320.\271\326\024\351\274\035\351d:#\306I\274ui\201;\276#(=g\304:\274P\366\267\274mF\257\275\343\2156\274\315\264\207<K(\233=\342\217F;\321\227N=\021)\227\274\232\241\\<\233>m\275k\273o\273\234Vk\274\305K|\2746M\014\275\274G\321<\341\335\025\275\273\201\037\275RX\247:\365\321\230\274T\227?\275O*\017\275\235lh\275\020\371\271\274\357\364\334\275,~7>v\000M\272c\231\222<<P\340<\257\371\240\274I\013W\274\276\037(\275\025J\320<o\275\024\274\205\255]>\000\316\207\274\334\251\242\274nK\265\275\273{O=\242O\231=\314\346\207<\217\035>=[\315\347=u\221t<\261[[\275\344\005\331\274\362\222\025;t\202\037=M\252\024<>\251\007<\367\266\020\275\313}!\275\203f\251=oK\210\273\346\035\032\275\355Z4\2750\017\237<\326\316\202\275f\242\360\274\255\235\024\274\005\234x<\220\270\317\274b\027\202\273A\001\331=3\375\037<\226v\243<\373/\312\274\026\013\245=\245o@\275\270\325\245;R\016E=\220\354\313<\265\177g\272]\013\313<\014\r\317\272\004\032i=\371\272\202\2753c\023=\254I\252\274\301!\251=\210r`\274\337>\013<\364\000\t\274\211)\373<u\334\245<\243\370\243=i\034&=,\374j\271\322\355\\\275\220\034\266<\27530=\320\017\206<\216\234$\275=\324\026=\223\367/<\255\037|\275\325!\031<\242\217\334\274\025\375\263\275\336\024\013\275\264\220\200\275\344\337\307\275\027\177\036\275ve\366<dR\035\275#\337\021<\307e\034\275Jt[<;\004\271\272\341\342!>\212\035\245<&\315\212=O\002\201=\371\333\306\274`\002\202\274\357\300\232=\037\347\353<\205\223\337:\033S\246=\312\276\007;)\251a=S\271\310<\307\231\024\275\3600\250\274\347\026h\274S\207\305;.\037\206\274\364\013\202<\361\226\220=u4\'\274\227\336\207\273l\310\010<Q\226\274=\251\353,\275JC+\275\214\240&\275\001%\007\275\305\245h\275r\225\255\273=\035Z<\352F\332\274P\310\203\274\201\253\302\274\2561\034<]\017\032=\215oM\273\241,\021=\242\220\307=\021\t\177\275\344\247\005\2752\202$=\250&\225<\014\033\371=\306\260\255\275}\003\247<l\272\301\274Q\357\354<p\257\345=ht\200:\305\236\261\274x\374\332<\363d^\275\270A\361\2745\tC\274\230\264\313\274\271q\257<l\203\006<\223wV\275\217\335%\275\026b\223<\301\276\314\274\027\306\323\275\255Jz\275Be\030\275\265\177\307\275q\232\222=\206\364\323=\343\247\n\275\341\016\005\275g=\345\274\346\264\253\275Wk\\\273\265Q\312<\222*\326\274\350+\270=\246\223Y\275\317\265l\275\r\232/>\2003\255\275\003,e\275\037\235Y\273\023: \275\rE\326;K#\000\276\241!\322\274\342\266\340\274h\261\305:\1778I\274\245\031\221\274\322\335\032<\207\362\030\272J\340\241\275\032\021\303\275\306\212?=k\327\036\275\213el=\273\242\037\275\361I\241\275\264d\021\275\355C#\275\037\261M\274\037\265\357<\250\227\364\274x\226T=\342(P>\257\2175=Fm\264:\326\305P\275\"y\315\274\357\365m\273;\006h\275\')\037\275\370\007\254\275\370b\333\274;\254\373\274\205\225\304\275i1\224\275\037\266O<\346x5\275\367\034\220;\020%\035\275\340\337\374\274)\232D>\251^9\275\310\010\240\275Zaz=\310\355\372\274\263\035U=h\272\227\275=\305\355;\347\206\214\275\232\267\222=0\344\n\2757x\222\275\261\231\203==1\006\275*?\202\275\003\334\036\275t\305B\274EI\211=\225e%\275\200\212H\275\222\227\212=\351i\233\275\233\351\200\275\016\332\315\274NhI\275\007\007\230=R|\253\275\377G$\275\007$q\2754\330\236\275\353\234\'\275C\0238\275\335Z\222\275\376\034G\275)P\370;`\370\336=\371\242G\272\374x\267\273\001\314]\274HE\232\274\231\024\202<r\022\255=T\214\016\275\224\344\200\273\177*\244\274\244,\210\274\234\005\231;%\271\210\274Q(\355\273\0244\351\274m\243\320\273\212:\355\275\257\325\315\274}<7\275\2109n\275\270]\177\275\3676\204\274+\235/<@U\211\273C\274\036\275\327\247\305\275\003#o<U\004\313\274\235g\025\275\2774L\275\326:\217\275\035\265%\275\270\3521\275\251o\001\275\265:G>\301j\020>E\003\271\275\222)\001\275\301\3134\275G\030\363\274\013Y\023\274K\346\351\274\272\367c\274\017i\302\275\364\230\r\275\213>\232\275\322nH\274\255\2155<\2479!>\253\265\005<\3760\313\273\0224\366\275\266\037d\275\022\274\241=\000\350\327\275]\204\025\2747s\237\275\211i\037\275\376\225\264\275#\360[\275\342\351 \275fD\304\2733\355 \275\253\257\250\273/\373\034\274\004\353j\275\035:\306=\020z\024\275R\211\037=~$\323\274\004\341\340\275\364r\031\275\347\031\"<\263))\275\0257\247\274\312Z7=\021\235\305\275\346u\007\275\310\2707\275\322.\211\275YCj<!\234<\275Q\370\337\273\\(\302\274\263\242 \275\377\3005\275\356\314\244\274\244\020\321\275\016\235\332\275:\333\231\275\260\316\313;\371\344[>A\313\022\275+\352\275=?\035+=))\353\274^\202u=\257\234#\275aY\220\275y\253\256=\274fI\275b\024\360\274 \323\237\275\\\206N<\323\025\270\275\242\356\372\274pA\300<\247\177f\275\220\\\026>\376\027f\274W1w\275\227\3312\275\300}M\275/\027x\275\363\030\033\275\014u\344\274\273M\327;z\333G>\224\240\311\274\251\000\212\275l\273]\275\223\365\214\2755\251\236\2754\202?\275g\006 \275\261uG\275\003[w\275N\357\324<\273\332\254\274\336J\303<\243+\032\274\333\327\316\275\355\312\026>[\024\310\274\367\226\222;\3622]\275\260\251\260\274\372\304\333<?\277\253\274\037\223\350\274\206Sj<\341\221\371\274\324\334\344\274\376\372^\275s\2705=\n\227\201<N\273\343\273\353\321\n\275J\225\346=\265*/\274h+\031\275\020\214$<\2731\335=z\014\261=\307\014;<\324\027\360\271\004O\217<\375\257#\274\375\321u\274\366w\337\274\256\032\220<\301\376\226\274\323/\317<q\2456\273\307\373B<H%;\274\236\361\323\274\332\n)\274\314\214\246<}\361\"\2759_.\275\302S\023>\t\330\037=.2\221\273n\367\250<v\261\251\274\371\251c=\312\372C\273\235\266?:ky\202<\024\267\212\275\000]\351\274\033\211Q\274\343\323\270\274\260\004\335<\372\341\265<gj\271\274\246\003\223\273\202\255V\275Q\003\325\274s\362\346\274\367\261e\275\321\215\032<\030\327_\275\344-Q\275\376rE\275\227=m\275\202\314,>QM\022\276\251\345\201<\304\370\324\274\306]d;f\310\255\275<\234\314=\021\225\010\275\03048\274@\026\240<\245\207\017\275\r\237!>{\256O\273\027h\025\274\000\277\221<\220\003\023\275\376\235\315=<\210N\274y\325\207\275jy\231\273\251#o=\211G\235<\320#^\275\030\201\227<\216\245C\275R<K\2752\375\307=\214is<C\354\006\275_#}\274HS\216=\320q\367\275\210\205\220\275\334\363j\275\243\035\246=|\276\254\271%\212\004\275\2328!\275-\2463=\355g&:e\315\226\275DS\212\275\315\304\236\274\031N\277<\375!\267>\021\311\306\272\014\031\007>(=X\275\274\210\213\275\234\345]\275f\205\220>\234\n%\275\350dz<?a\314=Z\r\360<\034\357:\274u\2633\275u\365N\275\360\\q;k\316\353<\010R?\273p\214m=\203\375\210<\364\330#=\255\350U\274\371\\\315;\352\377\t<\3534l:\340\001\224=\t\021(=\26786\275\003\n\035<\005J\246\274~\323\342<!B5>#\240V=hH\325\274\263/H\274\n\303\323\274\353\026\327<\007\001E<\2278\244>(Hr\274j\274\250>bY\205=-\221\311<(\262\\<>\373\004;\030\307\244\272\021\037\n=\210\201\213<,\237\217\275\3358\034\275\35008>=\332%\275\322\256;\274U\002C\275\322\031\230\273\026\027N=7y\330\275\242\001\312;r\\\332<\006\376W\274\2711z\274\3335\253<\363AF\275]\021\225<\350VJ=\254\021\006>I\204+\2759\375\212\275]\n\'=X\277\277\274\356X\003\275\357\206\312=Uny\274^[\374\274#\206\243:\232\\\002;\033E\301<\346\3174=$\312o=\302\243\007:\\jf\275\323\374\210=[[\331\274\031a:\275\235\014\254\273\332\2446=\306\275\353=\224|\306<\364H\313\274\276\nz<\373f6\275Z\217\241<\003\006?\274\363 \266<\305\237!\2765\016g\275\214sN\274B\036X=;\213d=\225H\023\275\326\375\305\274_\326\215=\006\276\222=\373\366Z\275\202\211\221<a\315\302\274\222\255\013=\201\370\204\275E\2234\275\325J\275<\261\360\247\275\274\325\233\274\025ix\275x\267\314<[\216\177\275~t\357;\262\226\322<\027\253\313<]\272\231\273@\310(\274\242\267\264\275\256&\346<!8\013>KaA\275\222kp;g\332e<\332%f>\353H&\275\013\005\351\275\332MR>S\3309\275\266\221\373\273\271\340G\275\364\2652\275?\310\302\273\2612\256<6\223\">\365X\351\273\t$5=\225!==%L\205\274X\277R>\236\364V\275\352\327M=\310\252c>\270\211\000\275\254\237e\275\357{9;\037\215\332=x\253\234\273X\346\226<\3125\304\274\214\031\303\274\024\261I\275U\351\223\275Ix\352\274\372Z\304\274Nf\225\273;\rF\275d7\252<\3108\230<\275\025\315<xD\034\275l\n\t=\024\343S<\231\367\227\273\353\312\021\273\24735\275\030\214|\275M\230\256>b\224\277\275\333\300i\275\224\236\307<A\202\214:}\2116\275H\265 <({u\275\001\324\200\275d\275\270\275\346$\342<s\3664>I\253C=\212`o\275\230\374\335<\317\0379<\020{\244\275\023\r\376\273\364(~<\236\377\n\275\025\213\213\275\371\206\326<\301\214\242<\302\353\356\274Q\022}>\'\3475\2750\351\224\275 R\013=\372\301G\275\002`\352=)X\217\274\323. =\323Z5\275z\0016\274\031\3054=\201\221\255<\314mO\274[\030\253>\270I{\275\376\025\353\274_9E\275\326S\361\274\352\227\213\275vp\315\274\264 P\275\"\260\016=\205\"\270\275!\030\026\273z\340_\275\204\214\">l\207\251=Eob\275\177\360~\275<;\024=\337\320\214\275\225\314.\275R\0375\272\010\247\333\274\240\232\340\272F \242\271L\240\030\275\244\203\251\274[\312\273\273\221\013\271<B1\211\275ax\235>\272\035\204\275\325\353i\275]S\006\275j\353\242\275J\345\333<W\352#\275\254\352H\274\352\017\367<h .=\370\000\036\275\324#\025\275\253\346\341=z]\372\274\3556J\275\303(\212\274\245.\253\275d\261;;|\016\021\274m\302~<P\314P>\320`>>_q2\275\232\313\212;\264r\316=\254\345%\274S|u\275p\307\342\274@\366\230\275\225\340\320=\224.\006=\262\337V\275\014\334\222\2751\022W>\362\346\n\275\315\222\240\275Q\027v=\232S&<\362<:\274o\322{>\243mL>\324\252<;u\003\027>\333^\214\2757\364\316\275\371\333\225\275#\202\022\275\222\270\014\274\235jX;\t\000\036\2758P\031<\242\343g\275z C\275m\351\336\273\037\331\003>L\232\362\272\320\0367\275[\377\343;\300O\274\273\225\016\242\273Y\227\253\275/\0014\275\2253\362;\223\372\030\274\r\022\236;\224\221\310\273H\365@=\022\255E\275\210\355i\274\275`\331=\275B\027\275\010l\036=\034\307\242=;m\353\273@a\331;\345\372\277\274\305T-=\024\202\243;\245\"\357<\303O\000\2758\210\206;\t\270h=^\300\365\274\257\320\300;\026\235\203\274d\305\365<\005\260\245\275\300X\274= \304\350\274\032b\022\275\237\367\217\275\"\371\001\275QC$\2754W7\273\224\037&\275\362\202\014\275\376%1\274\033\272u\273=9G\275\2521\021<\020\215\345\274\035`\026>\373*\027\275m\325\310\274\033I=\275\027l\025\275\273\276\303<\217\033@=e\343\246\273Q\247\243\274\010\010:\275\3508\005;\235?\005=X\222\323\274Qz\020\273\327\304\205\274\371\276w\275\001L\264\272\010?7;\'\370\226;01u\275\2132\311\274^a\204<B\3348\275\345\212\t=\341NQ\275\0046\026>\251\361\033\275\272\330\237\275\275Ka\274\375\001\226=\'\303\2459P\371C\275\\\366\357\270\023\331\273<\325\016\223\274Y\350T=Z\256\375;?\201\224\275\215\273\377<\006O\216<\370N\263=\364\321s\275\370\224\262\274,\365\353;M@\001\274H\'\245\274\366\263\303\274^\377\002\274\277_{;\353N\013=\265 \010\275p\225\233\274\311|g\274m\363\211\274@\235\252\275\340\224%=\336\226\234\274K\205Z\274\325\264\360\274dA\322\274B\263\226\272\257\244.\274${\201=\372\2322<\372\031\221\274\021e\024\275t\202\350=O$\210\2751\034\014=E\211\335\275\374\260J\273\315\3361\275~\307 =\245\330\231\274\301\377\303\274o\233\t>\331\231\031\274\255\357\231\275C\334\355\274F[0=\231Cn\275\364\210\361\274\300\342k=\313\215\\\275Z\027\241\275\037}\332=\230\320\263\274\340gb=\340\027<=\354[\257\274\315\261m\274Y\360!=R\2030\275\346<h\274;\310\307\274\220\211\320=\021\202n\274\333L\267\275\023\277\252=\013\000\211\274\312\376\220=\310\245*\274\276\257\205\275W>N\275\252\331\204\275).\217=\217CU\275p\255\275<bZ\r\275\252\351\215=V\365\267<\341.\314\274~\026\252==\302\277<g\236e=\0016\036>^\257\236<&\274O\275Xw\307\273\347\343Z\274\254:\262\273\306\323L\275\253\203\341\274h\205\205\273\205\250\257<<\371\036<\277\205@=\372&\r<\374}2\275\337N\033\273!\224q;\275)\240\273\374\336\021\275\205V\236;\002\263,\275l\342\331\274\324\204\r=\323w\211\274\3726\272=\n\350|\275\356\020\303\270\304J\004\274\207\023`=\363Vz\272E\3247:\325\327!<\235d$\274\220Tu;_*7\2750\350\203\274\007\250\243\274zc-\274\215\201\033>\205\224*\275\010\024\234<3$\007=\333\"\022\275\3649\033<Ma\310\275@\204S>\002\037B\274C\352\236=y\312\222\275\213\355&\275t9Y\275\351\310\236=y~\024<M\203B\274\017$C=\224(\304\275\026\003n=\337Q\037<\350 U\275\211r-\275\206\365\366\275\317f\031>B\313+\273\222\\::\025\351\270<\342\302\333<B\n\230=R\003\317<]\242K\275\004=&\275\365:\314<\377\310\004\275\013\265j=\3534\234\274\310\202\001=k\227)<2V\302\273\237\010|=\357\026\007=4m0\275b\271\373\274Mt\025;L\017\003=\201\261y\275F>Q\275N\364\0339\3714\365<\346[\035=\240\354\010\276\255\341\376=\t\367\331\273`\317\206<]^\343<W\243\234\274\232\030)\275\361V\205\275\260\014\\\275\032\217\342\274P8\247\2735z\014\274;IM;<\320\236\2752O\340\275\353\237)=\243\324\003\275(\257\031=\343(\356\275U\217\250\275\253\357\301<\353HH\274\024\217\266\275\356\233?\274\351F\361\274\016\226<\2735\236\237\275\201\302\001\275\260\254\315<\031\033\321;\020O2\275\236\203\364\273\223\014B\274\253\277\033>\242f\264\274\265\001\003=\223\3353\275Gf\345\270^/\341\274\331\014\301;|\224\022\274\332\255\372<*[\264:,\273a\275w\363\331\273&\t?\275\324\3239\275\326d_\275\317\252\305\274\265Y\273\274\351\202\006>\302c\316<;\331\013=\002\252\035\274\313\300\370=gJ==\216Pp\275\3550\315\275n\350\204\275\354\206\224\273\243\313X==\275\211\274\364\210\313=}l\300\274\306\334\271;\004\2029\275\\6\210;Y\034\001<i\375\225=\355\rG\275\305\256\343\274\326E\215\275\225\314\331<\375b#\275\300#\310=\364\265\271\274,\\\022=\240\000\235=\233\311\334\274\363\205\326\275\374\327\217=G\207G=\"\220\362\272\2504\363:P\327G\275u7\263=\360\233\275\274&m\246<\266\006\024>|\t\272\274\372\024N\275\362\210\215>\017\323i\275\0327\010\275\262S\227\274\204\247\215=\224\342\'=\013\216\375<\324\302\230<(y\027=\210\020\264\274\325l\310\274\356\315\020=I\010/<\221\253\014<\252F\247;\367D\273\274g\264f\275\223\013\236\275\355U\216<\266\035\005<\347\"\004\275\375\026/\275:-\244\274;\021\022\275\370\205\242=\352\353\335\275\311Z\357\274+\344\253=\217\210\"\275\220u\210\275!\265\007\274\371bN=\245S^\275\230`)\275{\360\t\274j\327P\275L\005_\274\270\204t\274\332\234\243<=X\207=$\014\355\275\036\010D<\361\376\217=\363\247\222\274\237\016\353<&\2568\275]uU\275t\321X\275\251\272\200<B\263=;*D\023\275\266\324\370\274\327\361\356<[\306\037<!Wj=Y:o=|\001\034\275\256j\200:\251\274\006=\2242{\274R\t\310\273`8\017\273\377\211\204<\245zB=\026uD\275z\325[\273\375~\327\275\032\343\205\274\266\232@=\315O\340;L\211&=#R\325:\016-v;F\026\236\274\322%-\275\254zf<\306\264w\274\274\233!;\254M;; \322\371\274\214\203\247\275\000\375\'=\3028\336\274\322\246.=\006\365\016\2740\t\235\274\365W\277\2737\314\313\274l\346\016\275\307L\202\274\200\263V<x\317$\274\321\223\307\273\222\370F\275{\271\000=\217\r\242\273[\031\031;\343I\214=[TT\275\361\256\372;\t\007\205\275\355Bk<\233\223b\274\262e\032=E\364Q=\222^J\275+\034\305\275K\314\265\274\200\016;\275\254\203\253=\234\376\007\275\224\200\225=\026n\r=1|\222\274\235\352^<\207\204K\274\241+Q=\356\017E\2758\205\014<\317\024\t\275\351\232\2029\006\372\235\274\364\360\276\274LX\372<\010\257\337\274R\246\277;\245\231\306=1\025\037\275\026\372T\275\323K2=\252\274.=\\\230\001=\310i\037=}\362\026>\256mz>\210s\002=3\325\t=\214K\266=\230\221\304\274\3012\260=\271\265{\274\016\251\341\275\014\n,\273pJ\001=\372\203\302;\227\305\032\275&To\275\031\260[\275Lp\023\275w+\223<b?\002=\261\362Q\274\311\332L\275\301;\307\275\277\330A\275\304/\274\274\237{\007=\362\327\226<*2\220\275\014\371\214\275V\026\231\273\'\317\025\275\213\3067\275\227\330S\275\n6\243=\003\373K\274\0014A;EJ\346;\342\344\252\275\245\213\005=\025\000}<\317\231\020\275/\276\211<\262\230F=\321\354\027=\034\017\022\275\306\235!\274\265\307\204\274\273\372\223<\243\204\244<\033\242\374<\303\224%;\337\365\204\273\374\236i\2759|\034\275\3074x8\345ax<\336\013s=\362v\331;~)\023<\331\361\220\274&\253\266\274\220\3006=xO\306\274\241\375\247;g\246\226=\320z\226\273\"\222\311\275\217\347\244=t\037\255\273\276\017\325\273\020\212\0139@\243\035\275Yv\365<\002+\275\272?\017\220<\025\371[\275\263\3705=&\200}\274T\317\243<g2\036\276x\212\355;:\323\252\274\373=\227<\253{\200\274\ni\213\274\324\2708<h\233\014>E\212\013\275:\373\233\274\364\002\341\274\033\225\330;vL6\275/\3157\275l\010\000>|\305\235;\330\253\243\274$\262\\\275\366:\235\275\2619X\275\020l\"\275X\343+<p\266+\274b\034h\275\312\345/=6\2138=6}\270<\255Su=\343@1<\233-\275\275\273i`\274#\316\305\273\017\300\003;\271cL\273\223\2303=\216\004\276\2746\ns;w#\337\274$v\343\275n\337<\274\326\031A=|\235\323\272\001\225\031<G\013\327<\254z$<\365\032\334<\312&A\274\021\263b:\307\006\317<Tr\010<\252I,<\250\344\354\273\314\003\371<\303\374\003=.\3741\274oG\251\275\2150\264\274\350\350\233\275u\021-\274\270@\213\274\301\330\310<\203\014s\275\257\225\010>hSY\275UR\014\275:\220R\274Iz\004\273\352\262\336\273c\262\030\275\017\207\306=K\303:=\213\371\367\274I;\220\275\374\306\351=P\345I\274(\036R\275!<\014\275.\366\030\274E2\3009-\264\221\275\246\300\201=\202\200\017\275\207\375Q\275\216\321R=\371\243\255\275\352K\316=X\213\262\275\370.\352\274-Zg7\363N\247=b-S>}Q==\222\375F=\030U-\273\262l\373\274M\r\216<\317\035\211=b\026q\275\035.\001=\0055\354<b\324\342\2742\244\353\274\344\353z\275\034]\365<\026\0271\275\316H\t\275t\010\204\275!\326f\273d\000\271\274\326\373d;{\021\372;\3658{;\274\010\220\274hC\211\2755\203\220\274\226.\214=\016\262\037\275N0==\017\002\006\275\027h\277<\377\354H\274\371A\355\274O\212\205\275\010\242\201<\364\016\366\275\334A\213\275\001\272\230<S\274\214\275\310z:\274j\334\206\275\364\302\323<-\370w\275\301.\214\275*\265\001=/I\013\275S!\306;\2345\003\274\244\037\254\275%\205\226=\257}\000<Y\3072=\361\315\277=v\202\305\275\022(<=\213^\376=\000X?=S\277\234\275\232\353\'=zZ\362=}]&=\203\254 >T\237\032>\362\014\027\274\312\006Z\274\217\205#>\n\321$\274?\324\370=9\025\343=\353\004\202=~\255\311\274F/\032\276\210\317\005\275\272\034\022=\032~o\275\233\256\'<x\233\221;\272\235\312=\205p-\274Y\003\265\273\206\376b=i\234b\274\212\014\273=\024\326\336\2746\254L\274mc=<\235\2576=\305\205\207\275\265\255N=\277\\\230<\234\302\374=\245\331\205\274\343P\345;\240\233\271\274\351N\002\274y\257a<Ww\201=\033\225\006=\016\226\200\274*^\034=\325!\220\275\222\003\213\275{\314\247:\374\226[\2758\3229=oL\264\275\363\341%=\207\254\327<\257\371\003=?BC<\207_;=\303\376\361=a\257\266\275\3756v<\337\005>\275Rcz\2758\325\t:\366,\021\275-\311\274=\273h\377\273 \020\016\275\376\002\200\271\214A}\275#\304\235\275iU`=\301\275\230=\345\205\247=\035\351{=\001)\016=\324\276\256=2\203\202=\254\002\027>\241\237l>\315\222\000\275]\237\010>\264h\200\275z\010\n=\261\332m\274\324\002\205\274\370\336\014=-0\351=\003R\243\275\204\375\314=\001\201\240=EA\270\275\203\343\003>\206x\325\275.\2478\275\235\347\003\275\332\312\246\274\361\026\370=7|\371<\205\376\267\274M4\201\274\347\301\007=\'D\227\275\241Q0=6\014\326\275\343Q\261\275^j\224\274\305P\341\274\352U\217\275A\t\340\274Fp\326\274\211+{\2750\277o\274\243\020\247>\211\234\202\275\245\301j\274\"\310\255\274\037\310]<*9P>\302p\357\272\214\222\212\273\300,39Q\365\337\274Ek\346<g\373[\275R\375\223\275\251\304\246\275\323\252\023\274\355\247Q\275q\217\327<\255\343z<\"\240#\275\220,<=\331\337\003>1\316\001\275F\002\177\274\215Dc\275\341\351h;\256\031i\274\013\376\017\274\223\305\330:\355\037\277\273\212- \275\223=\035=\365-\243<\362\370\256=k\377\261\275u\222\204\2744\010\235\274\304\322\224\275\344?\312\273\300B\211\274\0374t\273\377\243\255\275J\263\325\274y\177\242\274\367R\210=\025\255s<\277Z\037\275\212Z\217=\312\265\312\275\323\237c\275b\346B<\371\013\234\275\217\325F=\365\314/=\223\231\013\275\177=\300=\362p\256;W\327I<\255O\034\275\353\346>\275R\020\020>Q\367\321;\2607\027\275\301\037\203\275r\026H=]\324\247\274\030\005\024\275\025\305t>\275$4\274\'\304m>.h\n\274\373\025\033\273\034%\246<s\332\363<\306A\004=\010\026\320\274\030\345\354<p\031)\275n\032\303\273\224\177V\275\315\323\370\273\021\032\272\274|O\037=\234\314\010=\231VS\274B\272\316<J\037B;}\315U\275p<.\274Pn8=\245\256O=R*\026<\037/\233\274\'81\275\201*\007\274\272\211)\2753\336\374\274\343C^<\253\232\376<\263*\364<\215\220\322\274:\214R>2\275\261<\344\346*=5\326g\275\333\210\221\274\227<\005\275\260F\263:\025\373\036<\030\276\211=F\234\227=y\277\200=5\226\225\275@\275\275\274\257V==@\004\\=C:F\275\354\311,\275\365\037\245\273\026z\301\273CR]\275w\244i<NpX\273\036\025T\2737aE\274\033\340\341;Ud\242\275z\221\026\275J\211\261<B\300A\275\007\026\007\275T\223%\275\205\321x=\307n\237\274[=\\\274\345\367F\275\2007\211;Y\036/\275X\201c\275,\356\215\274\213\007\315\274\263\253\362\274\350\357\224\275a\203\232\274\035Y\364<\\\345\225\273\037V\247\274\004\372\001\275\371\345.\275\001y5\275\205\266\210<\317\'\021\275\275\301\321\274\013\2127\275\324\'/;\033\031a\273\304\027\215<\214\317A\275\370\271\n:n\266\331\2744\364n;\3408R=\337\322Z\275\000\245\010>S\nE<`\270\207\275P\235\320\275\017S\300;Mh\025\275o\n*<\250\231\201=\242\221\003<\233j\267=\323\2218=4Ve\274@\'\237\275%\031\247\274k>\\\275\027\342\230>r\336n<\330|/\275\326.\014>\267\3122<\250\305+\275\023\027\207>\245\327\235\275\030\374S<\223\235@\272\214\276\364\274\023D\013\275\027\355\277\275\352k\212<g\344\211=\272\352`\275\344\3465\275*\t\215\274\320WH;&Z\246\274\376x~:\327D\206\275\304\360y<\032\306\345;\203\375\343\275\t\331\345\275I\271\214\275\304\326\025>\013`\000=\316\'\033\275]\207E\275\013\363\241<_n\254;\333\363\005<\316\"\202<\341\366\204=\241\n8=Tw\271\273\373\356\270<\014M\214;\270\302\003<\265\356\342>\302\366\344\274\302,\216=\320+~\275\202\037\215<\371\027\267\2735\253\331=DV\013=3\363\224\274{\316]\275\030\234\205=<\300\227<\276Vl=\026\231\310\274\376\317\t\275w\025\215<\206\265\374\272\003\036\360\274\312z6=\247Wf<w\245&\274\220\246\002\274i!\217<.\234\330=9\231\352<\371/\327<D\324\343<\236f\363<{S\002\274\361\261\001=H\000\313\274\351\340\027=\306}-\274\004!P=\360\323\357\274\342\213}=\253{\223;)/x;cK\374\274\003\365\031;4\240\331\274k\356\304:n\340X\275\350m\372<LZ\000>\253\322\226\275\'\346\330\274\233j,\274\345\034\r=\374\337\026\275\223\240\025=\341\355S;G\264\225=\314\201-\275>\307\275=\215\322T\273\n\306\301<\"E\377=\026h\246;a\3628\275\177x\021=\240o4\275F\342\244\275nUI\275~\334\232=8bx<\202\304\202\274m \201<|r\213\273=\237k\274\316\376\025\275\002\013\226\274\314 -=5\355&\275\"\2506=\332a\017\275\322\203\256\275\336\276\376<\352#;=R\227\266<!\030\220\2759\022\001=\343\324)=jD\342\273\033\307\334\274+\357\245\273\226G\301\274\210\371m\275\240\213k<\300\240\t=\336\265%>$M\225\274^\3152\2750\201<\275\313v\263=\343Tu\275=f%\275\265[\333\274\350t\212;\265~\020<\323\240\256;\212\016\203\275\234\022|=\205Z\024\275:\177\305;\300(==|(\002\275Yx\237\275\260\232X\275>\016\355<)J\214\275\312\262\205\273\337++\273\232S\375;\n\377\224\275\037/\013\275*\315\240\274\306Q\225\273\227}\354\274\311\245\214<#M\275<\270\\\210\274\333 ;\273\307\207\240\274z\177K<\325\347\274\274\220\322\025\275\330Q\005\275y\360#=sA\204<O\035^<W\211I>WTd\275\335\207\333<RK(\275^\017\352<\332n\252\275\254\303\036\275\376\257\014\275\216-z\275C1\205\275,{\207\274(\201K=\247[\n\275\036@a;\342p^=h{\261\274x\nH\275D\035V\275\220s\215=\256\026\251<\252\374\312\274\177\337\'<\324V\016\274\243\347\260<\375\336\032\2758\2466=\330\277\235\274CM\242\275\205e\344:\233\016\027=\013\261\316\274\020GG=]\016(>b\365\234;]\232\t\275\032XK=\265\221\344;4\331\213\275\371\275\220\275\032t\343=C\205\271\275\213\353\271;\336\025M\274\026HN<\224?6;)PC;ps{\275\320 \016\275\333--\275\314\254\220\275B\204\305\274\221R\006<#t\271\275\212\257\372<\264.\273<\351>\370\272\343\310\256\274`o~\275\203\276\230=\007\'\204=\007\374\236<\305M+\275.\033W<\277\373\313\273\250\tX\275_\265\224=\r\201\036\275\232%\355<\363\026\037=\351K\342=\022\346\235>\303\311\306<\302\014\215<\211M\302<\251V\313;/w\037=\345^\243\274\245\";\275s\301&\275\221\277\261\275\272\267\360\274\333hD=\002\363\253<6\021q\274\265\224\217\275\023\262J\275W\353\204\275\340\t^=,K\335\274\366\002Y<\353(\033\275b\374U\274\312\377\361\274\027\2148\275X.=;g\253\226<\267\2274\275\271q\025\275\315e\213\273\334\201(=\010\206E=:\222\240\275\252\025\r\275\266\314L\275\253k\007<\342\224w<\342\260%<\272P\247\275\350\202\016<H4\337\271\220\321\261\274&\322\241\273n\001\257<4+\200=\370T\253\275\355l\243=\306&\331=\355\253]\273&HL\275\326\217\204\274\243 W\275\017\360\351<\004\264\312=3\364\002=\035h\256\274]\032+=g\312\005\275\325X\346\274)\320\361<\356\364\001=\213D\233>\306a\356<\244\273\366\273\357\235>\275\200\266,\275b\367|=\204\002J\273-\031\373\271\002\344^\273\330v)<WG\013\275o?\005\274\305u/\275\230U[=\007\022\327=m\371B\275\373uy=\034\246j=iL\r\275+\203\315\274\036c\222\274\374\200\013\2741x\204\274\275\0109=\263\265d\275\322\030#>0\313h\275\034\t\267\274\204\230\014\275\337\332 <?\313\351=\370\247\214<P\025\274\275\312\270\233\274_\215y\275\247\000\313=\301\363\264<CU\301\273\215\030\350\274\354\254\312=\325\226\275=W\226A\274V\001\321\274\274d\205\273\270gB\275&\312\267=\373\3120\275I\227\213\2732\007\263\275q\217,\275\177\241\316\275f\236\230\275\016n=\275\371Vt\274\227\273\014>\344\032\247\275\326g\356\273\230FR\274:\023\261=\276\212I\275\360M\367<fq\t\275\375\235\376\273\331+q\275f\252k\274\326]&=\024\302\255<uj\267<\245\271\245<\234M\232\275\235\252\363:$\010,\275-\306*<\262\3202\273\345L\200\274\026w\n<Y\"\233\274\216n\374\273\237\256\354\273QY\364:BE\207=# &\275\210\342\033\275\216dw<|\'\251\274\2523$;H+\245\273G=\271>\221\014t\275\022\370O>m\236\227\274\213\245@=<=\263\274\372\330\227\274\213!\323\275\357\237\270=\354\257f\275\356;\234\275\024O\337\274Q\377\007<r\236\027>\343\230\214\274\247\240\353\274\266\306r\275\021lq\274\226\003_=DUv>m*;\275~\264J=v\216\230\272\270\344\250<\016\007l=\231\030\227<p\265_\274\035\016u>\373\302\031\274N\004\r=:\247\330:u\354\211\275\006\370\024\273\301\204\033=.:\231<\303\007\211\275\305\024(\275\216\334\301\275\005\020\314\273U\\B\275Xk*\275:V\016\275y\003\200=\027j\035\274u\005\207>l\270Z\2752u&<\243\221\357;a\222%=\337z\345;\n\227:\274\026\263\240\274_\253\326\274\037\372\007=u\001\233;\206\374\305\274G\335\341\274:Z\020\275\262jK\275\213_F\275\021a\230\273S\006\226\274i\230\236=\314\236j\275(\326\220=f\n\233\275\032\327=\275\311E.<\230\231k\274\240\342\273\274r\327\353\274\303;\213\274\222\350\034=\371\003\240\273y\371\222<(\205\302=\341@\220\274m\004\327;\nQ.=\232\275\020<=\350\266<:xD=\373\340\231;\371\212#\275Q7\204;Cu\207</\324\267\275`\253\267<\211\353\022>\227\213 =\rYG\275\320\204$<\356\341\357\274\024\323\224;MjZ\272D\013d<\304\325\234<\342\222\253\2758\251\301\275q\230u;<\372\2649}\216/<\303Q\251\273\202\310\270<\331\270\231\2752*\305\275\275\340U<\276\007\204\274\310\000\361=Q\326\213;@2\007\274\'\347\224\275Y\026\242<\235u\025\275^\360\216\274\372}\001\275\207\374b\275\245@\235\274\273\307\023\274\314\237\340\274v\222a\275H\261J\275A\353\215\274\003k\323<\341vR\274(^L=(}0>R\246\263\275\264\004%<\351u\233\275\273\354\247=\3340\327<\177\r\304\274\347x\231\275 \305\033\275\337\241\034=\213\331\010=\207m\357;\322\341\'>\242e\213=3\225$=\033\020\253\274#N\025\275kw\312\275\371\260\202\274\335\236\"\274\240\257&\275\'vc\275\344\214z\274\335Z\002\275\326n =a\025\"=\305\357\363=\345\247t\275P\264\330\274\032u\220\275\035\242\334>\021\206\361=\177\224\277;\022(.\275\3218@=\336\005\355;\205\267\304:\301\212\201\275\365\013\006>\3234.=\264 8>\333\266\205\275\346\3308;\377\003\002\275\212eE=#\364\232\275.\315\366\274\365As\275\212\376<\275/Z`\274`#\013=~\213\220<\250\277\007\275&h\215\275\r\020R\275\014EJ\275\222U\326\274\202\363\330\274\006\003\215\275\213T\215\273\026q\035\275 \254E<C\307\266\275E\363\266\275g\252 \274\017\033\017\275\272\203n\275Gc\036\273\326 \334\273\014\260#\275JS\r\275\211\221e=&\243\203\275\"\367\264\274\000\t\221\275\302\344};\236\233\"\273+&\342<\331\251\035\275\353\355\017\273`\313x>\315\256\t=\026\355j=%(q\273\251\025\006=-\315\004\275\264\367~\274\013\300\255\275\264\312\242=\235\366\344<\024\3258\275t\306q\274\2732e\275\2220\254\274\237\213\207\275\347\271G\275\261\330\221=1\235\014\275u\364_>88<\275M\245C\274L=5:\205\274\226\274\367f\241\274r\333\r\275\264\222\014=}\306\223\275\026\377\255=\362\214H\275\361/J>\255q\200\275+\207\304\2750!\t\275v\010\216\274\267f\305\275\323\270\030\275\220v\031\275\317\216\215\275\346\304O\275\302\237\217\273\304?\307;\225l\314=;88\275\301E&\274\223\224\022<a\247s\275\362\351\242=\215B\024<\024\226\362<\216\001\351\275\345*#\275\262o\200\274\0172\365\273\362I\324\274\035\"\241=t\271\223\275(\0245<\266\037\265\274\371\246\275==\274.\273\237\362\240\274\273\013\376=\2372\321\273{\222\233\274X+\304\273\334\317\024=&7\014=\371j\252<\261d\343<\213\270\021\275\214k\366=d?$\276\360\272\004\275g0\304\274{G<<\330\365Y=\252\360\206>:l\255=\243T\226\275H\"x>=\255\277\273\234\005\266\274\203bG=_-\373\274\305\254\031\275AlI;U%\335;\377S\265<y\276\311<\"R\350;\277\323\320\275\237\320\370<\357\305F\273\223\016\202\273\n\241\262\274\324&\321\274\302[\'\275\305\362\2329\360\316\244=\236Mh\274\013\024\202<\003\2554>-`c=\352!\204<yU\342\275\361\231)<\314_\206<\322\237\022\273\rW,=8\036\351<\232\024\265\275\014\244\007\274q\277\325<\257\364\201<\032\360F;\200K\215;\342\270q=\332\347\227=\327\235\r\275r\020\365<\300\216u>\334a^\275\330;\'\275[\333\306\274\302\021\312;\2571\226\275:>\250\275 B\313=\362b\020=gk\303\274F\261\326<e\210\224=\021\355)=\266K\213\275\241O\215\275w\001G\275\263\222\200\275\277\221\371\273\010}\215\275\311\177\036=\253\311\203\275\345{\231\275\307\271\247\274\227O7\275\220\035\212\275\331G\033\274\355\334\350\273\330\242I\275\366aT=\256+\345\274\022\203N\2753\226\211={\022\242\274;\3049\276\213\017Y\275+{\001\272\234{\204\274\\\373\367=I\375\021\275\207J\205\274\347\0043\275F\030i\275\352\240\022=\303P\t;\244\214\310\273r\351\010\276\357\007\234=\333\353o\274\327{~\275&\370\217=\334\313\245\273\2548\311<\363\305\025\275\271\201\236=\377\363\226\274W\253\303\274\221\267\305=Ks\222<\305:\360=p\313h\274\232X2>\2678\027<\3610\364\274\200c;\275\016Cw<\306(\221\273\212\374_\275\252\276*\275\013e\024\275\244\301+\274\365_J>\021\014N\272%qh\274\324\225\260\275\204v\000\275\346\313\232;\255iX\275zXZ\274\277\275b=\203\362e<O\272\315\274jeU\275\344?\353<\336\223Q<V\311\301=\250\2419\275\250\347k\275\330+\003\2731\257\207>\335\362\">\250\221\355;;h\305\275\316m:\275\326b8<\006\364>\275\005\344\025=\326\234#\275<\252\327\275\221\324\340=\037\246\302<\361|^\274Vv\314\274\350\3522\275\334\372o\275\331\337\037>\226\327i\275\354e\035\275^\317m\275i2\265=\3240\350<\354\263\273;#\240\202\275>s\013\275\306\325\201\275\360\322\007=\244\306M\274\324T\335=l\213n=\231\260\322<\262b\227\275\336*Q\275\356\033\031\275\240\320c<\231\204\204\274$@v\274[M\241\275h\302#\273euM=*n\225\2744\341\263\275\320\032i\275\000\016\234\271\377\237S\275c\266\246\274\013\226\025\275\370\201\\\274\014\262\206\274\023\345\300\274\334|\252=\302\244\321\274\215\313\215\274\317 \344\274\014\212\313\274O\027\000=Em\230\275\337\372s<]\001\316;\357I0\275\210\233X\275\270Y\206\275\265h\377\273\014\305\262<\202\370A=\332\212\277\274\230:\241\275\033\230\242\274\220\341U\275)\177\343=\'\001\316\274R\336\025\2751\252H>7;\014\275\240e-=$\007D\275\343kN<hYM\275\220\3102>1\216\205<\001\2509\272\026\335\024\274N\266\225=\321Q\275=\216\220\307=6\277\002\273\013\203\234<N\212-=\371nZ=\2767\202\274\340\324\000>\nz\347\274*\301`<\034\367\036\274-\214\212\273\326\361\003<\271\375\034\275\217\315_\275V\021\032\275\003\257Z=\177\266\305=\326B\222=P\236\373\274\366\005t=\374\'\215<\350\007c=\376\330\036=\224h\005\273\354\230\r;\377\275\241\275i\004g\273\376V\277<\327\266\204\275\312\273]\275\223G\"\275\263\246\211=\020)\353<\224^6\274!\264\022>I\250\203\274\231\362P\274\231|\025=J[\300;`\255\262<\320\r;\274Um3\275\257\215\304=\033\356\022\275$E_=\215lU\275\376\304U\274l\300D=\324\343\217=\035mi\275\020\357\235\275\224\333\030\275hj\204\275r\210V=\2030I\273\t\034_<+\224\\\275\033\266\207\274H\372\005\273\031\337a=\243\213\336\275]0\263\274a\215V\275\252\362u\275\272\324<\275O\376\230=\035\217\300\274d<j<\305\2141\275Mh\213=e\3368;w^\315\274\357\206j\274\027\022\221\275\213\325;=\335\363\205\274\r\331\026=\276\305J\274\n \n\275$\261\244\275\014e\232=2j\265\274l)\230=\362\002Z\275;C\337=\244\354\330;\020`\312;\273m\222\275%\022\345\274 \201O=\316B\276\2756\203/>\023\352\t\275\211\346\341\274S\261\025=NPt\275#U\245\275\223\341\204\273e\226\307> \020\304\275\037I\004\275\023]\316\274\327[R\274\030c\223;\300\276\037\275\305%`\275\323\267\267\274\202\212\201\275\347\233\242\274X\033\313\274\370\270\320<\350\203\307\274h\002,\274\014a\361<\244gX<o\352\216\275\007\350\272;g\211\253;>\223\"=]\272\'\275D\240\217:\224++\275\277\333\266<\256v\223>/M\233\274Q\276\363\275v\251\237;&\311F\274.W\223\275\325e\245<`\204\247\275%\210e\275\344\253\253;\204\203\016\275\367O_=t\357\004\275\373\031\227\275\206\202W=\263\370\315;\241\027\326\274\031B~\274)l|=G\257\271\275\341\315\030\275*\233\250;\273l&=R\254\030\272\200\376\266=\274q\202\273;&Y\274F\375R=*\226\221=\316ev<GXu=\216\325\033<\225\267\010=\266\'^\275v\312a=V\340\031\275h\356\233\271\256\331\200\272\231\230\300=o\362p;e\026\235\275zBn\275\211B\376\273`\242\333\274\347\007:\275\201\027n\275\034\021\273\275/\013\204=\353\232\205\275D\022\351<\276\357\013\275h\330\333\274\027W\260<\275\010\037\2756\354\340\274\274\2252=J\350\361<\024\001\270\275\202%C\274\345-\304=\335*\007=\241$F\275(\003->\023\265\260\275\025\321\235:0\022\202=\303!o=\207\301\273<\214[|\274l\363\033=9\370Z\275}C\351\275\352\274\311<\275c\010\275M$3=\260\246\252\274\260\210\224\275\361\333\345\274\226p\200<d\310\211\274\247\213\001<\301r\313;\030\020\313\274\372\351,\275\203d\t\274\'^\n\274\374\310I<\002\374M\274\036\223K;x\237o\274)a\004:l\350\023=M\243\257<\317\240\033\275\241?t\274\221\365c=z|\201\272\001\264\005<\325R\363\274\335\244\235\274C1\266\275\2429\350\274\307S\235\274\304\362\373<\374W\352=X+\356<\367\227\036=\246\363\244\275\226\351\227=\311\247\321\274\220\257j\275\251\247\237\275\254\206\252\272\r\275\374\274\331\317\233=j\'$\275\334\322?<\334&\022>\035\343\261=\201\254+\274\353\305\030\275\272\277\260<N\307\356=<t\244=\236\')=\210\247}\275z~o\275c`\350\275`,?<\311\337\200<\363C\346<\345WH\275:\352\251<|\001H\275\352\243\024\273s\016e=\331\022)\275K\244S\275\013h\246<\241;\224=$\313W\274\360\307\230=-k\031\274K\212\265=\2079\231\275\251o\337\274\242\343z\274YG\306<r\026\336\275\226\357\220;G\271\232\275\000ah\273\303fj\274\333\3507\274\270\n\214=ps\211=\201$\235;\311\024\263\275Wi<= &\266\275\237\274R=\354\021\216\275\235\316\021\275\235\nl<X*\300\274\350\205J\275\260lt>?\276\036\275p\254X\274\347\337\321\274\n\303\r\274\255\r\373< \357\370\274iY\216;\372\352\221<?\271\212=:\017u\271\345,\305\2749}/\275\375\022\n\275Lo\346;_\231\271=-\304k\275\n\177\357\274w\346\025\275t\254u\275 \030\221<\037Q\034\275\305\357\345;\03489>\335\337h=\270|\214\273U\267\325=\251\252\203\275\037I\231=e\374\033\276{o\325\274\262\\\344<\262\303\027\275?\373\253:\026\321\242=\331\220\225\275\236GD>\241\177\221<\261<J\274Kg\210\2746\017-\275\316\266\325=\370\026\000<\013\312h=/\022X\275\031w{<+0\017\275\221$\263\274v\343\214=w!\364\272\332?\364\274Zw\';G0\006\274bOT=w\225\256\275\3611M\275\333\316a\275Y}b\275\347x\364\273D3\214=.\326N\275N\241\345<2\233\256\274*<.\2728_t\275C\332\347\275\351(K=\267\027\351\274\001\320\372<\302\321\035\274\3448\006\273\313!]\275\024\014(\275\024\304\037\275\232\212\206\274Ld\006;\007LE\274\326\225\345;\023\n\377<\356X\202\275,\204\216\274\205P\007\273Po?\275W\025\203\272\376\032\217\274\336?\307>\030 \026\272\334\231\262\274\237\031\347\274\360\001g\275vq\305\274\030\001\267\275GM\332\274I9\264:\002\\\316\274\231\307:\275\354\224\252\273\3528U\274\2131\320<\247\247\202=\360\335\361\274\271\315:\275\311;\026\274\211\364\313;\003\262\250<\374#\031>b\r\270<\204\254\250;\242k\253\273M\253+\275hK\244=g\255\220<z\330\\\275\361\2612=\3531a=\376\235\331<U\337\302\274Q\037\240\274\351~\023=<\272\037\275\376eI\275d\235\314=*&\330=\271\210\261\274\223\357M\275\307\\\231;>\320?=d\273\340\274+\271j\275\216\032\300\273\337=\340=u\206\343\273\013_\372\274j\026B;A\024\236<\005\204 =\026(A<[#\271<S\020s\275.e\030=\224\034\035>I\327\300\274B\216\312\274\246\0076=\3640\007\274O,\365<\353l\300\274k\377\\\275\362V!\275\272~\271\272\n\232.\275\267)\355=7^\211\275U\244\224=\370 A;\004\371\213\274\301\263\205=\250\273\217=~\270E=Q\271\201<\224\320\030\274C\007\026\275\323\177I<\306\277\342\274|3\325<j)\206<\321\361s>\033\035\231\275*\313\003\275\030=\273\274\251r\317\274\026\247\t=\356\270A\274\360-\315\272)\225!=\336\020\306\270\326\220\231:\320\244\022=\037\326\022<\345\334#\275\326\177\314\274a\367N>X\354\027=l\005%\275\273v\210=\316\326\243=\274\265\306\274\216N0\2752yK\275\311\325\367\272\r\027\017\274U\334>\272$B\354\2749\003;\274\270T*\275\037`/\275\2234_\274%G\301\275Jd\312\2740G\n\275Z[\377\274(\014\220\275H\203\354=DEn=.vY\274x\003\247;\222\277\360<\025E\363\274\017\350\'\275E\2341\275H1\377=\330\364\357\273\304\243\210\275\202\345\234<Z\"\211\274\243\005\334=\361~\301\274\222k\263<V#\225<~\200\245=\313$0\275C\276\224;\312o\262\274\315I\272\274o\3327\274\037\336-\275v,u=2\205\364\274\315\306r;+\345\307:\333o\354\274\351L9<H\006\321=Y\220\271=6\211\177\275\305\240\211;\274p\213\275\215O\262=\375\252/=M*\253\273\025\353\036\275^\034\031=*\027\021\275\340\246D\275\321\202\367\274\035\374\274<\263\376:\2745\353\223\275\311e\021=@8\351\273\214x\232<\363x\210<2\206\027\275\343\245\226<Y^\206\2755\261\261\274\210\270\236=\n\332M<\240<\240<\365\260\032\275\274\343\335:\324\343\007=vj\356\274\20573=9F\224\274\371v\244\273\216\030\207\2743\351\221<\374 \271\275\023G\305;\337\361\251;\\Q,\2755\357\245\275u\033B\275\277@\255\274\310X\307<\007/\017;\013\310J\275\3401H>\302\356#:q\033\203=\021\212`\275\017\333\234<O\362`\275}\"O=#\026?\275\370\334\301<)~9=H\363\330\274\000,\200\274\227q\224\274z\311\016\273A[\036\275b\203\324;\270\017\217\275\300\332\340\274w\332\314\274\3420Y\275\030\253\340\274\214\301M\274\314\312\325\274\227~\222=#<8\274\350\312U\275\030\255\035<9V\317\2750\347*>\021|\267\274F\026^\275\n\316\033>\2430\203<\3275C\275\241\2504\275%\304\251\274;l\250\275:0\370\274\226\265\223\274\207\036\336;\216n\355<\261\231\303\274/\250\200<>\260 >xw\t\275!\353\213;)Ya\275\355P\211<]\312W<\031\002M:\353\201\200=\013\004\017=\363\300\314<-\314o\2743>-<\275/\032=s\335^\274\255gi\275\3070\030>\325Q/\273z\236Q\274$3\003\275q\246J\272\234W\210\273\000\315\277=L9\003<9O5\275\362\037\320;\226\n\316<k\225\233\275\217\364\241\275\322X/=\246,A\275\317w\250>\024\'B\275\256Yh;\026^\300\274_x\335<n\325\003=7\303B\275\000G\203\274L\"\274=Iz+\275\316\250G\275\3068\324\274\373\035l=|k\025\275\022\245\304\274a\006\324\274\340#\206\275\264m\314=P\364z<\230\265\221\275i\t!<\252IK\275^\202e=\\t\207\272\014\200\214=\214\251\210\273\3471\030\275\355\271\333\273:\r@\275\rEq= \242\242=\253}\365<\276)\334\2757\006\363;\317\336\342\2746\356U=\366i_\275\360\267L\27435O\275\200\0142\274Y]\n\273\276m\027>#\005\220\274)\023\256\274\177l\250;\314O\356\274\250\210]\274\312Fy=\276U\r\275\213\224}=~\355\010\275\342f\217=\375\033\025\275[\233\343\274J\251\t>\013\2623\274*\315\365\273\301\025\205\274I\334\025\2758\320\330=\237~\023\274j\340V\275=\235P\275|.T;\365\344\255\2734e\024>\230\205\021</\n8\274\243\253\276>\0279g=\002\2157<\313\331\223\273\316\332\300\275\215\223>\273d\353\236>\177\254\212\274\306\226\273<\032\226\r=S\027\241\275\rW\277\274\013\213\205\275>\327\263\274\3553|\275\303\211\250=?G \275\254\345.\275\217D\257\275T\202\220\272\202)\217\274t\206V\275G\305\023\275\001\024\362;MUC\273\234\010\t\274\025Ps=\253\242\224\275\375\323\212<GL\240\275\001\241F\275b\030\256<\0165\005>$3\020\275\264H\001\275\344\030\246\274\312b\373\275h\251\210<\212\270><\302g\357\274\313\257\\;\017\277\227=\250\227o\275\226]T\275\250\307\232\275\256\254\020\276V\023\201;\366\334t\275Z\323\203\275V\325\034=\274*\355\274\325,.\274\262\233~;\234\247\271;\234\212x<E&1\275\014\245W<\260\014@=\325K\211\275w\\\333\274\251\3217\275\270z\347=q\017j=.\375S\275\253\034\307<q\230\315\274\352K\315\274\310\250\216\273\312\331&\27572\241<5Y\">\250\013\270<)\241\355\274u\224\021=\022\253\\\274sO\025\275\322\241o\275\031\t\004=\237>4\275\260\256q=\303wz\275G\325\335\274\201\031\003\275\242\352\005\275)\335\313<\036\256\003\275\270K5=G\326\215\275/\257\335\274\021\005\177=\271@\376\274Q\335\n\274\000q)\274\235W\000\275VI@=\321ZK<\2407\213\275\363\342Z\275\243\n\203\275\001\236\220\273\333_\207\274e\362Y\275a\274\250<\'\353\324\274h\233\356=\210\306A=o-\356;\375X\350:sk\007=[\333\007\275]p\306\274\230\257\275;\014,\324=\271=\000\275\256\004\215=\242\2322>O\002\220\2756\000\004=\221\215N\275\033\337&\274\245\211f=\322\001R\275Y,\331=\027\347+=W=\207\275\334\252\215=\332\302R=\224\263C<\031\n\352=z\257\030\2754b\203\275\251\264\026\275m\355\251\275\346\271\270\275hM/\275\342\223)=\300\250\316<\314\256\363;+s\"=%\313~\274\260\242\267<\365\323C>\271\303\312\273\376\022\025\275_Q\217\275\262\\\021\275|\373&=\200\350\034\272\264\315Z\275\327\227J=\001\262\322\274\217\357\202\275\004+~\274\024-\217\275\277\276\331<\266\376:>qM\337\275 \010\377\274\340\363\372\274\264_E\275}\230\215\2755\315\014=J\026\335\274\033Q-=\352m\225\275R\207\303<H\226\306\275Y\252\2609\302!\367\274\324\215`<\346P\261\273\370<]=n\351\304=\247*\365\275\217\227\302=\311!\203\275SC\004\275\315\344\264=\036\351(=\210\233\346=\026o\263\274y\310\370;\376Tq=\220\264\241=\301\026\014=\203\364\247<-\2458\275\227J\323\274\324x\021<\210\014\327\275\250\262[=\024f\220\275\377a\365<b\367\345=\016\024\374\274\263\\\370=iV\231\274\345o\307\275\243B\263=\353\246$\275\322\213\232=B\201\202\275\0068\252\275\262\213\007\275W\013\315;\345k\216\274\006\214X\275a\312\351<\365\276R=(\"K<z\267\317<\335\216:\275Z\031\210\273\030\310\016<W\024\377\274\374\302\262=\341\302\366=\227\240\274\275\332\032\272=\262\345\271\275!\317%>\034\243\301<\372\301\356=\253\307\013\276\205\375K\274\316\3061\274\363\000\333=s\323\261<9\013\247\275\350\353h\275l\330\306=\305\311\017=\3052L<X\345l\274\324\377\245<Z\036.\275\215\223!<\234%G=*\311\313\275\370\357\037<wiJ\275Bl\017\275\306\\\n>\256\361\'=\262^f\274\033\263:>SEu=}\354\035\274\037\313e\274\372\335\303<y\352\\\275~\200\317\275\3255;\275\373*k<N\037)\273\n\254:=orz\274}y`=\370\363\376\274\252qs\274\235\312A\275\024\325j<\362\370&\275776\275\374P2=]\357\225\274\263W\341<520\274\302\215E\275\242\005\316\274\260h]>\335,\001\275\020>\333\274\377Vj\275f0\316\275P\251=\275\232\212><#\2310\2759_I\275G\255\203\275\301\347\334\274\365\215\263\274\277c\221\275\255\273\372\274p\275*;|I\215=\026\031\367\274\034\232\201\275\254\205\254<\225\255\305==sq\273Tk\230\275\316H\337\275/\203D\273\017r\231\275!SU\275\024\246\312\274\260\275\336:\233\227Z=\235+\262<c\347\253>/\201I\275\";\337<\314\357[\275\274\006\013\275\2323\203;\275R\n\275\361\026R\275?/\211=>$\214<\237\331\305<\320\3479\275\007{\200\275\n\213N:]\002\366<M\032\313=\204\337\202\275R\331\246\275%\265\004>\026\242s>!\211\020\274\361\243\337=U\330Z\275\355\343\371\274c$\267<\243J\t\275\237\254\315\274\006xs\272@\364\217<\242\316E>}\232\323\275\337\314\027=G[\r=<\374%\275\366V\277\274`\336?=\364\177>\275K\307\035<\341\335\303\273\211\351\037\275\312o.=\0023\223\275Rw\333=\204\205}\2746D\020=\200g\274\273\223``=\336\244\310\274\271j\220\273\020r?<\033@\254\274\010\306\251;\003T\177\2744\352>\274\351\226\375\274\235C>=ul\255\272UQ8=\214\203\217\274H\023\307\275=\202\254\274\301\245\264<gg(=\263&\251=8\233\243\274*.i\275\2517\003\275V\241\214<ix\007\275\261\304E\275\nI0\275:\3262\275\213\365\244=\237\337q\275\270\323Z;m\014\251\275\271\345\017>2\251\t\275\224nF\275%(\317\275k\336*=\022\257@<z\003\225=\262u$=\013`\212\274\335v\201\275\021\201\341\274\331}\213\275J\200\"\275\225x\002\275\206/i\274\236NL\274\n\301%<4=\016\275\037\320\016=\253.m\275\377I\r\275\252\235\216\275u\033\233<\370Q\262:\3334\326\275\"~\001\275\223\365/=2\253\037\275cr\223;\006\374\035\275\002\322\224\274$\233:\274\010\371\365\273\021>#=\026\016u\275%\245\024\275}\307\003>\226\324\027=\017\204\r=\305\247\002={)\217\274\307\242\212\275?\007\253=?\177N\274\027\254\325\274@\216\273\274\274\253\304\274(\254\257<.p\243=\253\361H=\265\233*\274\034\376\262;@0$\275\357\267T\275\310j\026;|\223\250=\270X\226\273\224\362\354\274\274\255\246<\2043\003=\036\316\361\274\2763\254\275M\352\235<\350\217Q\275F;e\275P\356\252\2740\251\223\274\030\026\035=\357r\004\275-\361\212\275*C\207=C\217\001\275U \021=y\030n<\236~\372\2746G\254\274vQ\037=\251\201\225<Wy\350;\024t\256;\3512$\275\275U\272\274/D\202<\236\346u\273\026\242\217\273\256\261\333\275^\300n\274\2427\245=i\325/<\027UD\275\"\240\247\273x\032\201\275\320\257\215;\225bp\274\254\334\225\274\246\252\247\275\262D\273<\213\274v\270\272`\"\275\023\303\340<\307\301<<1$\033<\256\221\262=&\310f\275G\377\241\275!\214\306\273A\316\246\274\336K]\275\300\304\036\275\025\357\370=\0164H\275\177\316p\274nU\343:E\203\341\274\277p,:\252\340\006=2\006\220\273\220\363\316\273\326\021/=\2660\024<.\374>\275\322\020\021\275@:\232=\327\212\233<\010\271\371\274\322\222\261<@Ff<*\272,\275\376\214\037\275?\3047=\035\363\234\275\335\313|\275\333\312L\274\025\341-\275pJ\273\274\261\236\214\275\242\375\315\274K\353\203\275\3740p\275\225)L\275]\354\264\274$\334-\275\342\352\352\274\021\3300\273\261\332\016\275\220\r\320\2743\237\273\274\002\322.\275T;\227\274x\330\364\274Uu\225;\242\252\251\274\0009\375\272\366\225\336\274\n\346\014\275#\273&\275\361\253\303\274\341\251\200\275\027\245\266<*\371\310<\372R\350\273\257\375\332\274b2Z=\272\241(\274\251]\'<\375\307\346;WR\253;\243\206\035>\366\357\025\2756\265\262;\326\311\023\274z\021\250\273\313\301W=>\250e<f\343\027<j\207\370<r\340%<\3453\021=\016\233]\2749\221\035\274\226\332\360\274zk*\275\346\250\003\275\302\257O\275\230\277P\275\3330\317\272\325\342\325\274-\030\000\275\362h\233\275\212y?\275_\334\206\275\322\371\243:\240G\365\274\347\243\220\275\034?\372\274/\373%\275(\242\237\274\203\273\320<4\362i\275\277\275\024\274\017q3\274\020\000\215\274\270S\022\275\372\362\243\274\371r\004\275\233\216\361\273\254\371\304<;\370\243\275\302\307\246;yV\342\274\244QX<-j\330:|\034\201<\315O\016\275\034D\244\274 \330\226\275G\364k\275Z\365!\274\250`\256<v\217n=\247^\";T4\n\275\026V\310\273f\334\026\274\013/u=\261V?\274{\314+\275\0142h\275\263u\230\275\315\377\024\275\227\207P\274\336\002q\272\244\025y\273\031\316|\275\315?a=e\032;<Mr\334<\260\323\201\274\272/|\274\2665{\275\021b\273\274\032\343\251\273\243\307!\275\257o\026=$\224f=\343u\024<\221&4=X\364j\273W\304\300\273\365\220\343\273\370\320\025<\332\031\355\273o\3275\274w\307\301<Vnt<\320\307\036\272\023f{\275B\335&\275e\350\254\274`\2250=O\266\323<\331a*\275e\250\224;\262T\321\272\255\0366>\r\350\250\274\231\024\314\275\361\017\\\274\302\334r\275H=\213=\341\223^=\256\2218>\243\300\335\274\003\006\210\273qTD=\004\342\210\274k\010N\274\304\306\225=\310\036M\275\330\255#>\021\021g<F\305\026:\345jX\274\024g[=\005\031\226\274\365|\212<\374B\332\273\271\364\330\274d\241\'\275j\254\034\275J\2254\274>\361y<\373\014m\275\177\304C\275\245\255\265\273\325\223\212<\034\021?\274\224i\270;u\306|\275\224[\252<V}\222;\323\331e\274\240*#\275\352:\222\275\226\200\000=B\267>\274d\270\315;\r\204\267\272\221\r\277=\331\205\3659\327D\002\275I{\031\275)\270w\274q\362\214\275lg\237\275\037b\326<\213\025S\275\206\250\342\274\312w\377<\326\356m\275\272\307b=\242\006v\275_r\211=_H\317=\262\215\337=h\034\301=\336\014\026\275KWP;\255\215\376\274\016\372\212\273\027\201K<\317Z\354<\263f\240\275\003\r\231\274\2310-\275\255\2535\2750\352\217\275\215\025\236>\320\344i\275\344\2045=\037,\342<\201\261Z\275\027\026\024<~\315S\274\263\336\243\274\005\246\252\274\3656\000\275\262\375\320\275\254\261==\343L\025\275[\373-\274)-\251\274\300\277\006=\005H\357\274\323\327\345<G\375\334\274*\301\235\274lI!\275\030\341\323\274f\031\252\274\330P\216\275\177\305\027=gD\242>%\371\250<\004\316\250\274\357\211\022<\201] \275f\364\014=!Q\016\275J4\260\274\245p\210\273\300\270\311<\t7\217<\230\3145<\203o\226\275=lK\274G\322l\274\036\305\375;oud=\377\344\350<\233\003\315\273\255\317\332=\343\036\230=\257\323!=O\340\367\275\245%\036=\334\022\343<\274u*=\340\274\351\273\234\301\205\274\332\"\201\273\342\362\227\271\326Nt<\301Q:\274\2705\354;\225\004n\275\220\300u\275e\326\242=\031x0=\242.\024=e\333\034;\0060 ;\272\036.=\364i>\275\263\030^<\026\370\232\274\211y\217:\035Vd;\352)U\275\252p\273<\257\037}\275\305B\236<_\350+\275bv\305;\321\221^\275\277}!\276k#\251\274\025\014\\\275r\361\363\271\021\177.\275\021W\034=`B\005\2745\320\347\274V\006\265\274z\272.\274\364u\205\272l&\204\275\224\n\006\275v\240\274\273\366\330\204\275\335v#=\"\035(=\027\220\316\274fP\252<\342:\204\275\017mg\274$\260\224=i\007\307=L\231D=\231\220\306\274hi\000<d\0375=oa\311<W\323Z\274;&5\275\304\357q\275\241_6\273}7M\274|\267\340;\345\r\000\274\251\024j\275\220_\312=\334\366R<\231\000e\275\360\342\344=\260i\367\274\2405\177;(8\250\274b\273\330<\327u#\275\216\321:=x\"\032\273#_\306=\234*\272<\207\250\261<\233\t\307\274\221\315\326\275\016\007V<\007\037\232\272\341\324\333\275\340\252)=_\206\306\2753\352\020\275\375\234j=\2003\212\275\242]?\272\360)\030\275\302\236\033\274\312,{\275\330\375\273=T\005\204\275/[.=\332\004\343<\324X\236\273\250p\211\274gz\002\275\311\215O\275*\033b=\207\337n\275*$\360\274{\317\362<\256Bo=>6\305;F9n=H{/\274\024e-=L\204C\274\024\325\306\273\306}\253\274\204?2\275\000\345\306\274\'\0063\275h\006\305<i\205\315\273\256\334\206\275\322 ;\275\243q\032\275\302\030*\273\255\252j=\365\374\235\271\300\330\212=||0=\3462E\274h\201p\275\321\004\000=\030J\225\274\324\224T\275\003\344\325\273\353\321X<\343\014\026=,\230&\274w_\230\275\214k\305\275\352{\243\274\212.\257\275\372;\250=\242\237\324<\031\336\024<\201\327E\274\315\001\235<\022\221\037<q\366\320;\306=\361;\340\320\037=\022\013\334=\211\207\276\272yt$\275\250%\315\275\032\036\036=\351\262\n\272\362\216\304\275\240\372\340\274\233\272\027=\351\205\361<=\004\216=\037\362\244\274\245\230.\274\300 \310\274\233\037\324\275BY\003>\1770\242\274\330\322\213\274\270\"\202=y\301;\275\2669\006\275\305\010\027\275}\2467\274\255\247\372\272\034K\230=\206\357\256\275\360\371\307\2735\001\334<\323[\035\274\035\335\342\2723\316\220=\275\255:\275p\021m=.&\236<\254\337\243\275\235\217\305\2733F4=\257$\201\275Y6V=B\320p=N\200\327\273\247\255\225\275\014\346\260<\3749$\2752\356\334\273Z\004 \275\236\021n\274l\360g\275\372\031J\275\235Z=\275R\212\227\273\362\342\016\274d\277\030\275.|\363<.\256H=H\031\022\274\307v\021=\227\231\010\275C\244\262\273\240\000\014=\245C\212\275\273\010\217\275\024\333\307\274\241X\035<\362\217\212<h\250\317;a#.\275M`\306<\250\034\214\273\244\021\305\274\023\253\267=\222\357\014=\375\243f\275\t\261\206<\231\030\361\274\370\223\030\273\340\257s\274J\267g\274>\301\222<.\004@\275\355X\035=_\262E\275\302|\267\274\242\250\002\275d\\:\275\306o\211\274!\t\030;^\265\202\275\032$\265\273\276\034\216=`\r\034=Y\304\206\275Co\363\275\364\007\032\274!\272+=\360j\"\274\203\'\357<~s\226\274\211h\233;Xg\207\274p\227\007>gU\303\274\306\256\277\274v\251\247\275Y\227\203<\030)\026\275S\203\255\274\2329\234=\234\205\317=\205\276n\273\272\306\023\275\327p\317\273H\310i\275%\030\256=?\347\005=\n\244j\274z\210\313\274:e\260\274\200\240\251<\\\032f\275\263\357\250\275\220\177\260<$\322\037\275Y\247\002=K\344u\274\201\216X\275;\244<\274\337\252\212=\371\000\001\271\343\216&\275l\203\255\273\366L@\275>\324\232\275A\341\242\274u\025\277=\2433\377=\370Z\032=l\364\202\274Y8\035\274\216\031\"=x\257^\275\037\333O\273}]K<=$\217\275\372\024(<\332\367\210\275\372\317\253<\004\2503\275\030P\315\274~\333\223=\001f>\274m\211\332\274\266\271\236\274\2732\312=\033\302-\275`\3270;\302\377\325:q/V\275\301g\241<\265\311\211\275qO\243\274\214\221F=\262\356\211>[\237$;+h\347<=\362\346\2733b\261\274\026\361\250<\3346[\275\362\343\205\275\000|\024\2759\260\262\274\037\3036<K\246\214\273[\373O\274\323\"\320\275\227\331G=\0323|=\364i\214<\235\257\300\275\013\370\242\274_\267\213=\241\023\"<jIZ\275\252\202h;\245\317\320=L%\375=h\3112<\300t-\275.\355\267<\243YN;\242\354\245\274\355\315b<\240\364\371\274\2324i=\272\343\317\275\006\361\266\274\314N(\274>\022\260\275\265\003\034=GH\310<\223\0357=\252u\002=\213<!\273]\211\215<\021\346\224\273\021\233=\275Dh\277\273\307\245~\274\"]9\274\220+9\274\362\t\363\274n\353~\275X\215\274\274\\\210\246\275?\341J\274M\3657<\272\225\201\275\260\255\221;\227\321,<^\365->y\362\006\275\325\3065=\316g\013>H\025d=\330c\307\273u+n\275Zv\223\274~\351\016\275:\000\223\275\3119\032>\3546f\275#\212\355<\010\262P\275e\010\221\275\2618\367\274-\226\331\274_\303w\274R\200\201\274\t\250\351=\311\364\240<\330\001\361<\251\214J\274\317\322\267=\365 \026;\304\014B=\267\\\316\275C\274\344\274\332G\273\274\2676\312<b\010\200\274@\267\030\275b\305%\275dx\226\275\027C\315\273\273l!\274\025\363\227\274\275\212\273;8\005\036\275\214\240\375\274f\275\254=V\257\004\275\322\rH=^\352\273<y1\205\2741\271X\275nk&\275\263e\237<j\213\353\274\332g\254\274\305\013\036\274\357\210\275<z\200\251<\220\351\007\275\256A(=\316\255\'=\202F\327<K\220\224<\326m\216\274\273\327\277\274\363#e=\"\023\007=\262\035\273\274$\000\231\274\372\003\277;\'\255!\275\255\\\366\274.S <\024lv<\036~p\274U\372,>\321\223h=\234_;\2750\200>\275,\374\265\273d\206\035<\252\321w\274_D\016=\350\207l\275\3436\"<<,\335<\266\262\234=\211\265\225\275\217\033\252<7\2453\274\301\337\216;\341\262\221\275\315g>\275\365\233A\274l\321\020\275e{\232\275F\302I=\0253S\275#\316\002= \376(=\255\315%>\001\352\001\274\213\365.\275\360A\247\275\021\237%<\023\343\n\275J/b\275\025\205\016\274\027\267\213;\020a\024=\257\300\005\275\221\034\032=\322\t\034\274/Jb<\352\254\303<\371\034\010\275\333-\244=\237\227\017\275P\215\345\274\276\0054\275\337\246p=\243\200\233=\327!\272<W\311\266\275.\352\232=\267t\223=\217iL\274%!\223<\241\235\336=\3535\n;3\257\016\274\332\270n=\227\277\206\275\242\'\215\274\317U\344<x;+\275\220\317\202=i\365\260\274\0014\367\275\353\270d=\026\004\317\2758O(\275J\277\313\274a\253\300\273\r\253\177\275\353j\355<[\317\024\275\tg\255\275\3631\346\273\353\020k\274d\271\266;\354\2445\275\341Dk\275?\004\260\275*\003?<\"{\215\275.\350\034\274\030\350\n\2749>{\273\277\317\334<\254\002Y<sm[\275\341\274\271\275\347\207A\275\224\2774<\010\275\242>\331\3070\271a\242\242<?\227N\275\030+\\\275\235m9\275\250?m=3\2515\275\334\372\244\274\270\324\360\274 \341\022<O\343\351<b\353\215\275\200\312\355\274\265?\024=\307\224==\277\317o\274\031\'\005\275t\360P;\214\203\n=@v\225=w\227\036=\337KC<luA\274\3526\033\275\251\350\022>\332>\252=\277\336+\275\246N\356\275%@\203;6\277\230=\014/\214=\034\020\227=\031\354u\275\264\240\233\275|y\217\272U\202\341\274\223D;\275\226_\237<#\250(\275V\262A\275\332p\365\274\250<\\\275-:\023=@\260\377=\3032\">\267\312U=\001\245\351\274\251h0<\\\225\027\275\265\353\275;dI\250=\346\376\001\2753\242\241\275\2657~\275\266\374\335=\323\235\001\275\204\025l=\326UE\273\3535\367\273+@\241\275\364=\240\274\227\266b\275n\207\354\274\302\2122;\026\021$\275\tR\034<\324\027\207<&_\207\273\324\'\373\274\215\327X\275\035\347\212=\357\240\007\275\021\363\026=\223\'v\275\021Z\200=\204Z\301=\213\021\272;a5h=s#\257\2759\205\246=\311s~\275(\241\n=O\026`\275:\020^\273\017 4\275w\260/>\326\252\327\274\'\034\234<m\267r\275ZA\260\274&+\350<D\210\336=NH\201\275\340q\301\274hh`=\274\242)\275x\004V<\031\371\004;\207\325\302<\265$\246=1\332p\275\005\340\320\274\272m\r\275w\302\311;\3130\347\273\220\273\036\2738\263C\275\3760\334\275\313\375\237\274\320\314\371=p\324L<\225Q\001\275\232\033T\274vNN=\262\233\032=+\253\250\275?\'H\275\320fM<\350b\016\275\227\366\223<\203\325\257\274\257\262\027\275\366\021\202=\376\371\035\275\032\332\231\275\211\256\004\274\006\323\334<\321\324E\274\210\036\267\274\236\177\271\274X\331\345=\020\2205<\223\324\306\275\024\260\261\275\262`\010=\305\354\226\275#\204t<\330\331\325<\016\320t\275\202\2733\275\216K\232<p\237o\275\317l\206\275W*j\275\226\026Y<\312RZ<\n\3709\275\240jX=\3525\003\275\274\304b\275\343=4\275\256G]\273\365\260\266<e\362o=\362\344\223=\243X\270;-\273f\2759\031S\275,Pb=>\303\216=b\242\316\272\353E\213\272B\302\213\274\275\341\312\274T\341t\274\030m\373=|\220\257\275\266\027\025=\nq\235=\035i#>1N\344\274\266\262^\275\010\225\222\275\213j\301\275r\351\000<V\0027\275ac-\275\0015)\274\317\321n\275\'2\027=\361\200\006\275\333\261\207\274\260\252\215=\2744\034\275\260\263\010=l\027\027\275\266\333G=\365\345\251=Hp\374\274,\220\212\275\234\244\201\274l\341\264=\204\270\221\275\366u\027<\010\022\215\275\205\316O\275\375\356\022=.Q\025==\302\000=\024\201\227=\014G\333<\024\376\202;\330\031G\274\n\322\303<\302r\221\275\275\371\314\273w\036\023\275\377\210\252\275\203\345\217\274r\267\013\274\177\324z\275M\330\237<.\370<\275\272\213\323\275\312\032\342<\224d,=\204\364\334\274\217x2=\270&\205\273R]9=\342\362\217\275\247w\006\273S\312T\271\252&Z\275\366\334\035\275\256_\033\275\232\211\234\275\347\327\026=\225U\332\275\265g\302<\257(c=\277d\230<\017\352\356;(?\002\275OPr=\004=O;n\341(=\343N3\275\244b\211\275\030\002\225<\010\001[\275\264\340\001\274\267{\217=\371\033\200=\214c\306\2741\265\277\273\277\274\356\274\331L\324\274\274o#\273+\003\225\273s6m\275jI>\274\031\014\363=\210o\267\275\344\256.=\340\340:\275!+\271\275\267\232X=dC\275=\320#;=\"\"7>{0\241<\325C+\274\246\222\005=\022&\352\274\356\323\226=\317\200\315=w\000V\275\337\266\024\274\231x\034=\305U\374\2733,\002>\237\241\333= @\247\275{\346\255\274\223\245\303<\3770\316\274X\205\000\275\337\221\324=\363\264w=\0320u<\261Q\202=q\n\\>N\353\273;\323IG=\262q\033=-\230M\275\357\246z>\006u<=\240pL\275=\355\204<?l\027\273\334\345.\275\007Y>=k\010$\274\335.\334\275\247f\247\275\177[\037\275\3048\317\271y@\226\274\000\205\013=O@\177<DG$\274\200\337\304\275f\262\345;\27626\275\n\021\202=\004\342\021>\323\3526;\322\224\324=^W[=~g\233\275\206\024\270\275\212_\023\274\240G\013\275Q\t\221\275\357\232`:\317\030\205\275\331\016|\275\210\222\233\273\365{h\275{\025\241\275N\353\340\274\320/\231\275\013\027\220\275*\263\204=\200\275\205\275\224i\007=.\336V>O4\200\273\340\312\231;\345\377\313<\007&\344\274K\237%\275g\246\215<6\003L\275\213\215\237\275Vry<\310\313\354\274~\223\302;\2104\206=\'\327\320<U\313\260\274\212=\000=\236\250g\275O\3360\275\247\237i\275\32564\275\246\211\265\2737\004\001\275\231Z\371\272\3625\004\275\036\212b==\231\343=eL\005=F\\\340\275\016\354\277=\336\354\263\274\027nm\273u\005\201\275\310v\265\272\240\246Z\274\274\234\223\274\220\024->\246\347T\275ap[\275L\"\034\275\210\245\271=\0050\204\273\005\336\013=\277\337~\274\r\025\276<\224\364\001\275`\350*=3(\356<\217\021\274\274\351>\256\275\205\271\255=R\234\372\274\223+\372\274\327\027\370\273\253\036\322\274\014\313\234=\030\371\347\274\"N\237<\320\003\327\274\310.\213=\264\301\310;R\317\263<\256\327}\274B\231\242=\014\344>>hV,\274\"\3746\275\355B\026=\03770\275\264\335W9\026\036X\274\335\241\333\274\224\362\261=\327\246\267=<\275\3159\304\244\236\274:\241\362\274\355\240\033=\355b\037<\375\033A=\264\314s=\324Q;\274\245Po\275\245`\322\274B\324l<\376\335\244\274\272J\212<-Y9=aa0\274\001\260\265\275z\363\220\274^\014\371<A\312\304\273\250\327\230\275\204\331\337<e\026`\274b\346]=:\373j\275\264\335\224\2758\276A=\373\236\371\273#<\205\275\326\314\210\275\2569\027=\021t\017\274\270m\204\274o51\274v\3719=\301\274\327\274\321^^\275\027\217`\275\336\300\254<<{k\273\371\230\022\274v\365\236\273p-\264\274NB\336\275\334%\360\274\022\310|\275\002\255\214=[#j\275\275\336\334\272\242\030%=\013\311\233\275\006\201\262\273\326\016\250\274yd\026\275\206\322\023>\243\014\032\275\370\333\374>\033\2569\274@/D\275\362y:\2757\261;=\231]\017=\005\237\267\275\361\205_<\273\221\321\273[\375\027\275\024\364X=\331/\010?\244\036A<\365\343\267=*\'e\275\007o\021\275\231\275\317<\002\341\234<\264}\325;0\367\312\274\324$\225\275\346T\330=D\262\336\274\210;f\273\235\355\264\274\005\016\325\2747\027\033\274\267[\261:\025\"\351=,\211\022>\360x\225=*|\022>Pq\037\275\225O\273=\347Y\033\276y\372\241=\256\024A\274\020\200+=\005\222\330=\013\363=\275\373\237\243<zL\034\274\243\034-=0i=\275\225\220n\274x r\2740\0032\275Sym\275\203\237\373<t2\314=\224\365\240<n^<>\341@\243<Qo\364:.\352F\273\246\240b\275\367\255\215\273*\365\005\275^\302\244\275~\247\217={\312\373;\360\310\262\274\351\275\277=\036\204\311\274\324\001\373<\306\272\005:\312P\272\274Mo\204\275\001\265%<I\301z\274\335\231:>y`A\275\033\010*=\235m\226=^\351E<l\272\006=`=_<l@\023=G^\225<q\350\256=Dot\274&+!\273\r\177\024=\023\222\216\274\302&/\274\247D?\275\257\313\371<\332\246*\275I\316\277\274\325N\273\274+\014x\275i\235\366=>`P\275\311oH=\027\360\213\275\2617\275\2755H\201\275\252\235Y\274JaX>8B\251;s\216\270=\303\261i\274\336\363\000\275\334\250\310\273\n\245\013=\300\333\005\275\010\264\222\273DU\212<U\370`\275w\375\253\275M\"\020=\323\344\377<^\007\253\272\212L\373\275\212r\237<q\034\342;\333\\]\275\231\354 \275b%\263<\256\266:=`\372E\274\265\006\200\2755\226\000\275\344\254\234=B\020\032<\201\370\313\2755\277l=4\037\002\274\302Z\006\276\035>\353\274\'\260\000=\000:\025<\016\354\205;a]\035=\017\220\226\275\366\360\322=i\027)\275&\220\244\273r\001\273=\216\245\037>\026\0147<\034\016\200\274\033Q\230\274\037\215\244\274\361U\036\276(\357\334\274\261X\361=\277\250\232=\226@\373\274i\t\200\274\t`b\275?\021;>\264\3610<\323$y\274\210\334_\275\244\r\257<\225H\250:\035c\237\273\002\2559\275\211\306i\275\0104\206\275JAs\275i1\035\275\307I\211\275\356\346\210\275n \225=\215 \260<\rt\336\274_\345\373\272\265\330\031\275\205\227\230<\254\360\257\275U>`>\243\335\206\273\200#\265\274\315#\335;\276\264k\273T\223T\275\306\210\232\274\252\265\301\273\357,\333<E\000\253\273\253\375\244=T\034\373\275\365\271+<\207=\354<\326\305J\275(\307\'=\017\002&=\\\314\033\275%\373\265\274\236\363\311\274\324s\246\275\364\030[\275h\260\207\275\363\341i<\007p\032\275\2611\341;\255R\206=\341\313\320\274\252\354j\275\346z+=C\247\206<\373\236\021<\3208\266\274\022+\236\274\014\330$\275&\014\207<\316\004l\275\223\217\3439\325\234}\274\032\013\026\275\'\014\035>[\272\\\274\361\216\017\274\344\305z;\271\245\226\275l\333[\274\316\332\033>\024p\255=\227gh<\344\266\353;\203A\014\275\340\256\357<U\376%\275\361\235t<\205\035E\275\362\314\214<\212>@\275E}\027\275\306X\304\272M\030\366:t\352\241\275%\242\303\274\236n*\275\016p,=\274\037@\275\212\215\254<\177\355\236\273\037\t9=\351\320\371=\275\177\232\274T\211\312;\005\207\225<\241\374\004=\367#\006=\002\371b\275a\344\363<c&c\275$\004G\275\373U\334:\177\252\374\274\316n\t<\206e\224\274\376\367\200<kW\226\275\236N\003>\320\253\t=\251e^<\260\305\316<\034\337j=\257\246\315\274\236\022\203<\277\026\301\275\204\205e\275\257Do>[\367:;\330\035\223\274\222v\340=\301\204\006\275h\027\253\274\313\215V\274\255\001f=A[e=\312\217\206\2753\267H\275\277O}=\226\366\210<\247\234\362<\227{\005\275\220\206\273\274\203\351\341<\030:\014\275\'\242K=\035#\353=\256\037\'\275\274\026\223\275\035\323\\<\352\346\224\275\251\215p\275\n\325E>N\251\306<\000\226\020\275z\340\034=\267\330\327<\220\326\324<\214\317\002=\207\323S\274\260\241#\2757\007m=p\337v<\251]\270=\233;\216=\251\367\224\273(\247\020\275\\Ia=\263\355\243\273y(\016\275\247a\204<\355\324\301;\007\267\226>\355\352\n\275\351%\300\275\352\276\220\275U4\337<\367\3270\274\257a\327\274\177\350\206<\215\322v\273\242\243\016<v:\007\273\304m\301\274\333\355J\275\341\035\204<\335l6\275q\347E\274\024\034\344<\025a\275\274rT\241=\272!\200;\023e\204\275\330l[=\337\007\013\27420\032\274\374\3115\274L?\232\2748w<\273\347G?;\223J\036\274\247SL\275[\360\201\275\342UR\275\177W\364<e\353l>E\270\025\275Q\005\023\274\034\020\352\273$\354\312;\002\2545=\026\032\271;sH^;\372\362%;p\274,=\211I\215\274\372\234\255\274{\032\023<\324^1>k\251\333=\024\225T\275\270M\225<\306\367\\\275\254l\344\274\260*\037\275\337\230\207=\335\327\t\276`\276&>\362\366w\274\206\276\305=\201Z;\275%>\004\275\334R\272<\002\3609=\373\302\212<\304\2015\275(g\036>\017m%\275ve\022=\2301Q\275-2i\275\226-)\275%\006C\275b\307\315\274\365\304\376<k\336\214<\261\273\304\275J\313\231\274\207\227N\274\246\364\200\275\r\260\t=\343\307}\274\001\236\260=\366\362M\275\004\023&>b\027\363\274\301\277\024=I\201\325:N\244:=@.\223\273w6\314<\000\212`\275\261\201\224<\270:\223<\017|\n>r\277\266\274\217\256\206<\003\033\215<\024\273\336<\220\024\347\274\035\246\351;\017\031\237=\261C\t>aR\335<\346\rN=\371\277\212\275\304 )=\323,1<\2638\007=\314\360\331;\322\304\310<!\001\202\275B\352\234\274\331\256~=\373\215\236\274f\210\\\275\314\344\350\271\013\243d\274\312\'\301\275\3164s<K\037\336\274\0216e\274\206\2315<\330Cd<\207\266\240\272\3032<\274\035e\241=\314\274\275=\206\020\003\275\227\251\365\275\303(\014>U;\276\275W\244\342\274\236|L\275@\3278\275\204\214\307=I0\345\274\344\233\374<\334\020\245=\374U\n;\360f\013=Y\356\236\273\016+\214\274\200\213\007\2734U\013\275\017\026\034\275&\231\347\273\0208\005<@\250r=a\260\237=7\236,\275I\234\222<Z?3<\023\316\216=#\0229=\270\225O<h\241:\274iU\253\275\207\357\201=\336\010\014>=\375\303=\027\'\376<\371b\342\274\"<\272;B\370\322<\354\342i\274\236\306\317=+\037!\275\005\232}\274\356\330E\275\240\372\205\275\363\263\027\275\215A\"\275Q\204\201=\216\344\032=232\275\014\327\000\274w\330O\275\232@s:\000\325\351:h\312\221\275\204=\304\274\301\030\224;\266\273\304\274\230\203\020=[\006\203\274\027\315\001> f\230\275L\260`\274\375\006\336\273\200\007\314;8&\263\275\354\252w\274>\035R<\261\206\203=\3221\212=\3003\241=\341\315\275\272\364\227\214;,9\271;\3348\275\274\016\034\216<\264A?\274\256\035!<\217\325}\274\324\340p=(r\222=n\\\0239\312\266\032\275\257\316\006>{\031X\275\177N\217\274 \032\017;\246\203e>y\256 \275WL\220<}\242\343\275b\301J\275X3\212\275O\315\024=\200\251s\275\312k\226<\321\031\266\275\202f\256\275\335\353M>\200(\265\273\031O\354\273um\314<4`e\275\020\255\324\274xX\261\275\210\226\246\274V4:\274;7h\275\277/\315=\340\026\002\275\223\214\261<\227\334\021\274\336\301\233\274{d\003>\200\334\211\275f\262\"\274\205;\020=\316\341\237\274\362C\001\274\025\272\261\275+\351\254\274\006\337\334\2737}\303\274\316\r\215=\337JQ\273\300\000\030\273\333\255[\274\333\301M<\317+}\275R\3208\275\215-\331\274K.N=\374W\253;\276\250\376\274\230\226\007>\344\216c\275\366\273\201\275\221\340R\274\023\356\240\275\266E\024<N4\265<\255\017\316\274\311\341\202=\205Nc\275\2401N=)\264\021>\306wZ\275b\251-=c\317W<\022\320\210>\241\257-<\232|+=\300\361\373=\024\354\252<\335\306\372=\336\200\276;\266t\221\274\313\270\"=\247\307\372=\250\031I;O\3477>\006\232{<e\275G<\247\033\220<\243\361\254<\365\\\022=\227S\257\275n\014\253\272zNQ\2758\332\250:T\262\362<P\250\001\275\t\000\205\2742G\347=?\355\037=m%.\275\376#\212=#\2453\275\033XW\275\271\250\177\275\001\316\006=\260\302\234\273\271$\226=\345\267\341<\r\367\005\275j\343\214\274&\220\233<?\326\357=\253\016\271=%\037\276\274B\246\374\274\252\351\206\274\005\025\022\275\037b\300=\364\217\311;\306\021F\273\203*\217\274s\270\025\275\000S\033\275\016\0265\274\240\327\272<v\264J\275\017\362B=\263\254\253\274\367}A<x[\370=B$\352\274\376D1\274\353\360\251=g\3758<>\266\023=5\255X=E,\302=\267@\020\275\313sn=\246\341\335\271\203\231(\275\372\237\312=N\0131\275\221Y\017=o\204\217\274\300\205\265\274Vr\231\2758\270\000\275/W\211\275o\321\005\274?\r\366\271\017\364v\275M\356\250<\030\352\255\275JI\376\274\350\020\234\274\317=i\274n\221*=DL\254:>y!>\213+\005<9S\277\272\364\300\237= 6\321\274\306\2368\275\031\341u\275\231\332\267\275v\222i\275S(\226\274:\355\346<*\365\202<\273[\351<\257\366\201\275\306\027w\274\333\326\213\275\240\357\026\275;lb\273\316T\273<\376\242J\275\035\362.\274\266\002\010<\327:\030\275\312C\311=|\360\324\273\255F \275\337\003\200>\307,\215\274\r\'\235\274E\322\277\2751\345\027\275X\326\271\274!\235\302\275[\301?<\233\373l\275\261\347\205\274\0342\206\274g\243\367;\253LF\275ED\274>b\254\347\274\230\340\305;\201\354<\274\201\237\361\274\255\376\333;\355\315\306\273\265\216\222\274q\225b>t:\t\275\217:\263\274xKR\275\373~\221<\236\021\303\274k\342\257=;\2651\275\220\212\331;\020\255\322\275[\311 \275\237;H<E\334\002\275\362\211\253\272\177\341\035\275\302P\310<b\351O\275\002V}\274\263n\235\275\3712\204\274\322\013a\275\027\235\353\2742d\300=I\022\357<\355JO<\334\315L\275b\232\031\275\355v1=\313\216\030\275\016R\001\275\032\227\n=^b\245=\017\225N>\2439\363;F\250#\274\323\334\033\275\205\251t\274@\022X\273A\277\200=\341&\202\275\361\351\014\2758\351\256\275\240j\331=\2708K=\232\220\221<\036\207?<\025\221\206=\024\037\230=!\276\345\274>D#\275\306\343t\275{\265+\275\231X\264<\201B\214\275\354\264\031\274\016r5\275`\271F\275\322\365D=\034T\037\275\345\275\231\275\266\206\230=\376\231:\275\270#l=8\274\000=e\247Y\274\222p\207\273\315\337\">\255E(>\354\207p\275\205o\233\271\347\254\001\275HF+\272.\377\026=\332b\245<\255\230\013\274\205\024\231\274\316}\267<#\244\271=\273\250#\275\330\327#\275\352\353c=\262\251\244=\226[\220\272f\341\222\275\242\"\000\275g\320\344:\010sB=\'\311\203\275\237Y\204\275\357\345c\275\324\215x=w\001\363\274\262K\203<l\317\340=\020H\215\275\225f\216\274?\216\331=\002\277\274\273G\230\214\274\231\202A\275\211\306\224=4\206\275=\024t\234<\225UD=\371\027]\275t3\245;/\361F\273\220\031\031=\334\242\212<\311l;\275\204\215j>\217l%\275\016?\211\274f\251Z\275\004c\014\2758\005\367\274O\226\310\275\355\000\207\274\265N\366<\337G\261<\235\203\217\274\257d\222= \031\025\275\003\2436>,\324\003>\331t&\275\254\222\331\274\266\355\336<m\273T\275\037f\367\274\244\026\315\274`\230\357<8\023%\275\020\266p\275\007\273\253\274\314\273Q<\342Pi= \035\247\275\211\331\231\274\332\224\034\275E\242}>A\327\022\275<9p=+xQ\275\302\022F\274z\024\234;\"<\271\274\351\300\310=\355u\211<(s\300\271\231\260\025\275\347\021\270<\253+d<\221\242@\273\027\342\004\275\334+\034<\236\201Z\275\251*\212\275\351]\003\275\352n6\275\366+\215;\017\247\206\275s,P\275\322\273\302\274\025\207\215=t\345\306\275\337J3\275\345\211\306\274/\005r<:\237o\275\177\r\313\273;\373\005=?x\263\2751b\000\275\245\000\230=\023\323\240\2757\304\365\274\000\343\213=ZU\204\275\032\234\006=\024\0251\275\033\270O\274\373\246<<S\212H\275Ho\256\275 \002\032\273\303\375\243\274\354\376\304\275\240+N\274\337\206\227\274;\226\367\273\365\264\\\274\361\217\032\274\"7\234\275\177\017\036>\341!\256<\003K\202\273\2227>\275#\304\245\274\\b\000\275d\333t\275\017\376\331\275\337\3257>\242\334\301\275$\363>\275\357\241\240\2755\226o<\235\032@<\360\251\261;\035\226\026<\226\251b\273#\365\030\275E)\267\274\247\215\002=G\003\037\275\323\006\005\275\235\376z\275\0051\237\275Y2\210\275t\377\256\275\357F\212\274\244Tj\274\231\325\352\274\345\225\004=\366\"\253\273\007\267\231<\303\370\241=\205Y\000\274=\003\316<\n;W\2757\306`\275\177\217\336\274\256\234\325\275\276\005\324=\261\336\214\273\216\332\332\274\313\372s\271\327\310\325;\260\273\302\274\026\003[=(\374\224=\374\371 =X\366\270<\301\377Z\2752Y/\274\224.\215\274\342A\205<\230\301\225<\254W\365<\277\202c\274\226\210\010=\220U\037\275\034:\203=\242\3044=\354=\311=z\305\216\275WD\005\275\356F\037\275F\313\"\2753\321\r\275\030Y\360\274\303j\026\275H\325\252;\031|\203\275\363\366\"\275\006\240B=\343\270\251\274\355&\206\275\306!,<\3567\017\274\203\305d\275h\251\266=\245\311w\275\236\351\274\274\306\216\246\274\177\304\316<\217/\023=\0149d<\347\311\207\275\230\020$=\003\210\261<Ls\010\275!\245%\275\232<B\275\323\0007=7\370\243<\220Y\343:R\377k>\243/8=z-l=1\314\315=\300\323\216\275,\242\252\274\177wW=u\347\250\275\".\024=\216\312g=C\241y=\262\331t<\300\341\221\275\367$8>\222\250s\275\310\370\200\275+\365\206\275\273\211\344=\272\024\335\2742\222\"<)\365\357\274zQ\t\274\233>\272\275O\314[=[\360c\274\365\334\035\275u\207\336<\355,\202;d\274\210\274\321\363e=\022\376\361:\262\203n\275\361\277\337=u<7\275\004g7\272\374\016\304;\027\007~=\255(\225\274\301\r\204\273\343r\250>H\236\210=.\221\306:?\227\260\275j\225\267<\336\031\342<\230c!\275\240c\353<\007\023\254=\014\253\361<\367\006t\274\013n\210\275\231m\332<\037\353`>z\207\204\275Q\023\207\274)\\u\275\333\360\304=\312\306\275\274\226\2563\275\305\346\000\275\263\315\206=j\014\226<\357\017\363=lb\315<\360\243\367<F\033V:\3341+\275\212\371<\275|\364\255\274\333] \274\031F:\274\354\364i<\315\322_\275~5L\275z,\224;V\016q\275\30304<\207j\026\274.y\204;R\025\201<\252\003\236;s\024`\274\321\\y=\255\220\340<\362\304\357\274P5M\275\363\340\377;Jk+\275I\307\r\274e`\353\274p,y\273\231\274\344<\211\020\231=\237\010\345\274\345\203\032\275\\-\263=\273b\234\275\214!\r<ab\354\274T\036\347\272\250\261\243\275T\037\302\274\223\216\201\275Tk\251\274u!y\274Q\242\313\274S\372\r=\025g)=\033\025\327\274\370q3\275\315\252s\275\213\n\305=\353y\254<\365\261;\275/\220\355\274\007]K=c\022 \275P\316T<\005\204T;/\212:=\214f]=\350X5<a\346v>[\2372\275\177 \221\275\002\274\317\274\013\270$<D\363\'=\230P\036\275&\023\311\273\355\361\222\274\005a8\274B\030Q\275f\034Y\275\274dH\274\217*\377<\035\220\327<\302\010\036=H\237\322\274\020\271\001=\266I\314\2738\307\252\275|\337c\275\037Y\014=\017-\234<7\211\341;\207W\t=y\2103\2750\305\035=\311`\320\274^\271\324\274r\354#:\236\317R=\340\005\221\274b\304\236\274\274\270\347\273\355J\203\274e(\036=\242\265.\275Q\331^\273+Nh\275d\325\007\274\264\220Y\273\257\023*\273\230\302p;\352\'l=z\026\267\275Q\001\r\274..g\275\235\233\033;7\336\273\272I\371\216\274\342,k\274\322\251d\275\212\250\262<g\303\305\274\327\277\361\275wn\354\274^3\210=\271\301w=(\351b\275V\347\270\274\264\270)\275T,\n\275{\335k\274\210\023\361<Q\235\317\274z\034\003\275+\3035\275T\304\220=\303\364N\273}\225\372=\203\306T\272v\214y\271\003\2119>\245n9\275\020\2672\275\245\266%\275\343F)=-\334\374\274\270[\227;\032\215!\274H\225\222=\321\321\241\275=A\241=w\234\320\2744\032\031;F\310P\275CSD<\304m\207\274\310j\350:\036&\234;\311>\002\272\024=)=\232-\346\274\302\010\037\275\371~Q\274\303p%<sR\002\275q\340\021=\332\364\352\274\203\316\221<\263o1<n2Q\275\030>\225\273\300.\027\275\200\213\017\275\0261\207=\350[\323<\232\312\376\274\221$_\272\273a\365\273\313\020\307<\315Q_\275\235\030\256\274\365\204\232\275\263q\264\275\261[\214\275\027o\357\274\351\314\255\275\271\023\023=<\000\031\275\342b(\275\262\003t\274\355\202\334\273P\337@\275{\036\315\273\r\355\032\275c \0248\231w\231\274\270\252F=g\341/\275\230\342\366<\216\341\312<\357/\021=K_\270<\336\007\226:*\024\204\275\241\n \275\347\341\351\274/\325L<m\357N<w\302\312\275\235\324\300\275\340\320|;El\020<\031\205U\275t\267\025\2752Q\001=k\363\366\273!\212\350\274BC\304\274\226\331\217\274O2\t\274\177\221\241\274\203\251j\275\260\260h\274\024\025;\274\302\200P\275\353\201\361\274\271\013\220\275\033\206\336\2740$\323\275\231\342\241\275T\317\216\274\237\365\t\275)\347\230\274dG\230<\020\330\302<R\322\367\273\257\251M\272\20656=\376\237\016\275ts\024\275\232]w=?I\203\275\352B\350\274\007\224\023<\000\353&=\260\274\322<\334\336\003=\276\207\313<\341\336;\275 \342~\273W\306\010\275e\365\203<~\362\317=\033\034\257=\251\017\t\275\331\370\262;\3575M\274>\010e=2\230\241>W\356\256=\266\2206<\240\240\227=\223y\223\273\005\013z\275\\b\3169\275\206\004\275\322\000\000:\007Mo\274\357n\211\275U(\315\274\267\316y=^\275\004=\033I\341\274p\206\331\274\370\355B\275\370\004~\274<\0338;D$\020>\010\231\320\275[0\255\274\3432\347\274HNX\274\364\002\023\275\027N\036\275(\270\227\275B\025.\272`\257;\275\205\203;;\246\211\031\275d\n&=\014b\021\275\010\253\026<\232\230K\275\201\371\244\274d\006\007<w\357k:-@J=V\203\200\275\341\274x\273\304L\023\275\350E\242;\363\021\351\274t\357\034\275=\030\r<&\177\251;\317\032\177\275\233\337\345<\333\250\331\275f~b=\016\026\224\275\276\360F\275eJ\217<<\263\214<\336\272\274=\345\216;\2759J\345=\330\026N\275\361\t_\275\3640T=\020\223\232<\242\227q\275|h\257;\033]\276:\321\240\202\275\214\301y=\224\260\337\274\021\302\203<V\347\n\275s\022\030<\004\'k\274\tw\311\275\024\322\205=\255;\213\275\263\326\336\274\373\207=\274\010W\223<\3615\224=\026!\351<\006C<=8z\220=\"\357\270<2D\010\275\030\246}\274\276$\021;[$\214\2740#6\275W\210o\275\375\2170;ML\217=\346\326M\275\365\201M=>TH\275\253\0279\274n\016\321<\276\301\214\275y\300\342\274\007\221\273<\323\t\242\273et\375\274y\303\354\273\3351\364\2731\334\232<\306\001\021\275\205AM\275Vo\247\275\271y\314\274-U\244\274\317|h<:\354,=<\005\271\2747\002\260=\236\316\242\274\346\3453\275o\205\355;4JO\275\216\033\002=\370\227\225\275\364\311\323<\371\320\273=\016\370?\274\246<\253=\352\316\333=\356\230\312;\364#P\274\223H\026\275\333\007\364\273\354 a\275;\004\277=w\324`>\215y\r>\206\363\022=\377\247\234\274y\247;\275\302\035\220\273\373\243P>M\352i\275I=\305<\272.\335;v\316\025<\315\302\210\274V\000\233\274\205\033\r\2768\352\341\274\277Oq;dK8=\377O\341\274\320\320\013<\016\271\004=\372u\216=\375\021\273\273^U\226<\362\220\373<\306U\245\274w\201F\275\3228\004\274\216\214\217\275\'\021\237\275\311`/\275~\310\326\2743\236\177\274Nt\324\274X\377\305=\217-\255=,.\300;\225~\201=\340\016\323\275A!\231\275\360|\">\242\374\226<\377\232\212=5\303\022>\005= \275\243\"3=\357b\033\275\246~\\=b\021H<\327\354O>\357\366:>\227\230\273\274h\320\025>=\375o\275b\263\223\271 \022\260<`\002\007>\2310\223\275B\203p\275y\221\204<\024V\366\274\330\340\223\275\341\\\253< \243\r=\311$\013\275i]\255\2743B\277<\357\335\346:\303\305\226;\230\3416\275\354M\330\275\273\n\232\274\212u\270\275\200\266\334;\347\030\r\275\007xO\275M\220\221<:\324,\275\234G\264\274\036g\210\274\353\272\257\275m\025:\273-+Q\275h\214\234\275\300\317H\274\226\001\327\275*=Q=\311\025\036\275\302\323h;~\314\327\271\274\210\016\275\205\307\332<5.\223\275\317\3124\275\262\233\275<\261\rf<\177\026?;5H\305<\242\204\372\274\355\253\236\274\204&\235;Ab\\=\202\034y\274\201\233\325=C\251!=\002\250\242\275\027%;=\223\177#=O-\027\275\021\3620=j\334\363;\201\242\345<6\030Z=h\275\211\275\314\303u=V\014\317\273W\317\261\273\013[|=zG;\275\236\274\262;\264*\202\274@k.=\322-\254\2747\305\312<7/\003=\323b\013\275\370\000\352<v\346\206=\331\203V\275\0319\031<\"\256\270=KM\251<\302%\2409$\221R\275\212\376n\274\221\320\234\275\333v\213\275<0\244<\nZ\001\274\304\240\026:\342g\271=\347\263\026\275\350}\311\274bB\321<?\262&\275\000\302d<N\357.=\340L\n=\240\316\361<\352\027\355<L_\337=, \237=\272\212\206<\344\004\210\275\027)\272\275`\273\260\274\321\3425=\347T5\275\227h`=c\215\245=YX\265\274+\227\214<\212\361\260\275\266[B\275!\025\315=;E+\275\254Is=\274\002\343=\241\322\025<\314\250\226\274\220C\242;\003F\221<\250\300\026\271\323b\006\275\320R\306\274\3304E;\031_\014\275\006\372\2029\324\336\235\275\347_\020=\364g\274;\205\304A\275\255\360\340;A\203\005\275\332\374\345\274sCi=Y\250\321\274\304\241&=&\261t=\353f\331\274!|\275\274\337<\330\275\343\037\001<\3050\366;\364|a\275e\332\275\274\342\232?\275Cg\270<\263\211\325<\317u\005\275&\261`\273q\363F\275\317b\257\273R/\262\274\344\342\034\275\235\214\310=\354\027-=\313i;\275\242\241\276\275\370\274\001=V\361\376<Vs\240=\317/\225\275+\377\302;\343\341\357\275\024\332\222=(<\317<[\200\342\274\241\357\330\274\"\367>\275\377t\225\275-\000)\275\330V\250\275\372^\203\274mz\363\274\3209\035<\220\211a><(\210\274\375\352\200\275\010\215`\274\365\035;=\347),=\343\245\200\275\245\037\276\274\3558\030\274\0325\346\274jT\224\273F+T\275a6\252\275_\316t\275A\377\260\275@\022\t;\223\345\017=Zo\274\274e\242\020\275-\333\362<\272\360 =a\311\376\273\025\314\212\274j\002g\2749\020$=\352\034\255\274\022\310\245<\372\317\234=z\333\271;@\370\\=@]\243\275\356\276_<\367R\344\274\002\203\025\275|U\0239\330\362\022=\205=*<\373\345~=u?\027\275z\rp=\203\241Y=\233\035\325\274\375I\036\273\223Z\253\274\271\241|=T\376\306\275:\354\360\273\365:\016\275%\326(=\253m\353\275\223A\346;\r\362\336<\200\304\200\275\215\225L<K\310\022\274\315\354\243<i^\'\275\211\"`\274~\'\003\275\006\361\307<\267\332\035\275Z\240\031\274[\241\002\275\250{@\275\020d\242=\363\363\323=B4\006\275\352\374~\275\204L\023\275\\X\272\273\204\355\263\274~\203\220\275\337\232\267=\365\227U\273\332\201\\>\376\337\305\274\341\275\205\275W\225\177\274^\177-\274\263f\212\275\034B\036\276]\324\220\275Z\313;\275rX\204>\025\013@\275gw\372\272i\2455\275\363\243 =\277\0068<\273\242\236\274=J(<\n?\307\275\342I*\274\245`;\2753\320\214\274\211\344\035\273E\203\223=\021\306\022\275z\373q\275.>\275=\224\303\273<\260\203d;\331\262~>e\352+\275Z)1\275\'\372\331\274m\356\247\274\244\224\232\275\256\304\272\274oft\273\201\264`=\247\370\262\274\334\271\240\272a=\277<\335\254\251;\322c%=Z\013f\274\030ot=!^D\275h\275\005=\311Y\253\273\\7\260=#V\237<q6\215\274\244\227\001\274\244)R\273=\2653\275\227\354\036\275\337x\215\274o\211*\275\177d\263\274\300\300!\275H\335\017>\3020\211<\346+\304=7\327\'>\tO\377\272\022\264\242\275\254\272\271\275\224\327\204\275\341\013\257=\311C\343<\334iV<\226\205H\275\323\365\310\273\333\304\"\276LO\213\275S\274*>d\236\233\273\220\343\224<\366\364\023=?\013i\2749\006\351\272\256\254\260\274l\267\033\273\336:\262\274\350Y~\275\364\363\t\274\327\220\030>\362\033\234\275\337@N\275~\211\200\275\364\252l\275\000\016h<\267\211\257;\010O+=U\253\355<\260H\213\274\036N#=\335\231\356\274\300b[\274\342\333\231\274\207\262W=0\311\r>m\340/\275\347\314\201\274\3416\226<.\343\031\275y\253\273=i1\013=\276\305.\275\'\251\366<J;\000\275\354\262\376\274\361\355\237=3n\340<wH\204<\024\311{\275\330a\317<EK:>\265\033\320<g0\035=\310x)\275\211\271&\275d\017\255\274\201\027\007\275U\346\354\274\373\025\321=\204!i=\267\376\205\274\356\036*=\331 \351;f\345\217=}\'\255=\025\220{=\206\205\271\274\326\266\227\275\251\351C\274\373f\235<\336\226\010=\244\010\n\275\332\305\007\275D\376\263\275;oZ\274[\321\376\2725\366\253\274\312]\300\274\246\355\300=\211\317\275\274\025\222\223\275\321W\214=+T\227={\321\277<\360\020J=\311\362,\275\212.\342:iM\377;\354RH\275\374\311v\274\325\013\t=\036tW<25`=\n\312%>\354\251\335\274\205\336\270:LO\r>_\230\374\274\216\377|\273W1\271\273\025Y\243\274f\251A;6=B\275\252\004\206\275g&\353<\341\322\274<\263?\003\275\032\246,>@\354\344</B\032\275\273\243\221=\337*\217=\200g\235\274\333K\232\273\342\205\356<\312\311N\273\255~\324\274Sx\357=5[-\275G\246u=\234\314\213<m\354\246=\371-\352=\201py\273L\274c<x\345\033\275i5\302=\301\347\237\274\322,\325<\265\364\264\274/\264\324\274\2102\206\274\000{\350\274i\344I>\327I2\274#d\256\273\305\361\2279$\024\220\273s\356l\275x\005\343\274B\230\004<\267<.=\034*\202<j\243\337\274\001Q(\274C\334\237\274\3543\204\275\260\t-\275\207\333@\274\032}\372<l\025\321<\332\251`\275\254\224\001>\277i\347<\214\027\212=\243\363\307\274\006\371\036=\340\350H\275/V\313<\205{\347<Vjn\2740n\033=G\265z\275\022Y\300=|\304\363<\032\244\233>L\276\261<\203\017\310<\332]\024=\242\010J=\030\246\261\275\351)\033=<\221\232\274m\020C<\371\274\035\275\372R:<\2758\034<\323T;<\200\000A=\226\267<\273\354\206\301\273&\321\202=\013\370]\275yRB\275Hu\036=\377\010Q<\017Kh<~\r\221\275\253\023\300;\233\304\023;\215\341\202>\351rX>\021\303p=\214X\272;$\250\355=\263?0=O\345\202<u\270\2629v]U=v\341\255=\025Mw=G%E<,_\340\274\257\007\211\274\313\274d\275\2427\227\273Vc\233>\253W\005<]\225\337\275uT\224\274\302H\000<\375\373\002=L\201\365\274\226J\205\272\244C\363<\215\331\234\274\361$\321=)\227==b\2762;\372\362\202<\016K\374\274z\310\221\275\377\024\367<\021\006\360<\363\344a;Y\020\355\274@ji=m\364\273=\207\367Z\274\320)M\271V\363\2169\013\237\267<\\R\234;\2227\365;\240|x\275\220\030\235\275(\021\351<\310)\325\273y\233n=Y\320\373\273\266(\222=\235\204\353\275\252)e\274\353g\027\275\017 \250\275D}\242\272\006xm\275E\351q\275*{\216=\304-|\274\007\326\235\275\006\006%\274 d^\274X\355m=)$#\275\0327;\273\334\252y\274\3375-=Tn\">\255B)>\025\354q\275C\354\005>Q\200\013\276\3138]\275c\003\032<\361\024\010\275T\342\020=\312\337\222\275E\365\334;K\261\273=\2377\303:\014-c<\350\374\213\273\034e%>\027[\236\272\342\250\312=\346?\227=\3315b\275\334\346O\2758\3016\275\346\252R=G#~\275\307e\n\275\233\343\377\274\372^K\2742\177\250\274\375\257\234\274(\300\n\275\0206`<5K5=\267;\016\275Q\366\036\275\323j/<\030L\365;\216Pu<\327?\354<\246\306\021\275\371\312|\275\246\336C\275P \212\275_\216\001<\'L\273<\237|\213\275\362\230K<\001\000\266\274\027\321\256\274x\334\025\275\326]\014\275\337\221J\273\250\351t\275@J\326=\370\204\231=\343\203l<\371\2047\275z8\266<\307\3459\275\206\214\214\274\005\271)\275\243=D\274W_\271\273\361\332\310\275\272\327\034\275m\311\254\274w@\364<\326\227\233\274\256\343;=j\326\235\275\177\315\001\275\222f\347\274\333\202n<\262WQ<\342h\014\275\377\322\211\274`\020:=%Q}=\321\371\203\2756\323z\275\232P\224\274\347\206==q\204\204\275\215\366=<\262\226\246\275mY\246<\t\365\335>\'\271\026>\010%K\275\337\200#:\331\211V\275\367+\333\274\332\313\037\274\303\253\224<\230a%\275DK\341;\374@\204=\340\354r\275\244GT>-0f=\260D\342\274=\003\020=BQ\337:HPW\273>\302=<qs8\273\250\3753\275pC\250\274\343n\274=\"#[\275\252\020\355=\303p\374;\010h\271<\313\267\341\272\376\245O\275A{\n\275\016\221Q\275\332\310%\274\333\277\235;d\355\313=\215\303\300\275\003\305\003\276t\330:\275\360\\F\274\034\301\273=\225\261\302=\242\212\356\274\225\322+9\252\234\371;`\325\206\274\271=]\275\356\003\367\274\315\376\031=\005]o>W,f\275Xcy\274\210\344\013\274\001\362\253\275\227\022e\274\233\211\026\275\317\203\231\275\203\251)\275\336j\334\2743N\034\275\374\226\205<\334\345\205\275\272\256 \274\342yY\2743\023\374\274\227n`\274\203\023\\=\351\226\310<d\243\212=\304\267\r\275p\2405\275\307\276F\274\026\031\034=Xw\207\274\270\3641\275\207\377e>I\200!=\272.}<\343\264\177=\007\367}\275\007\027\344<O\n\370<Z\000\363\274\304e\001= _R\275$\316%<\365\371E\275\177\216\210=WE\233=p\204p\274\307+\377\274\224\036\3249\"[H\275\361\356\013\275Q{\330\274\355\307\366\274lu\337\274\307\377\005\275ibG<D\226\373\274\3564\313\274{\326\016\275\235\241\212\274\035\275\010=\312\315\241\2754\321%>-\222u<\031W*\275\017N{\274\354Rw=hi\201\275\010l\004;\253\226_=\000\263\215<IO\242<A\322p\2756(\246;?M\037\275\356\212\217\275\301\275\322<\333#\334<1}\014>O3\230=3\247\210=:Ws\275ZA\221\274\2667\n=\3025\256\274\265\373u=\301\272\022>2Z]\275\006Ec=\206\337\026\274\243<\203=~\352\225\274\021\201\034\274i\322\223\275\244\361k\274F\274\246=\303\364\363<\261p\035<\n\256\241:\337\214m;\017\222d\274\254\000\343<\313\215\'\274{Zb\275\017KY\275\354\014\205<\222b\372\275/\314\255\273\325\257\253<\322\304\213\275.\332D\275S\335 \272\270:\225\274\032\235\232<\262\221\232\273?`\230=\221\302\310\274\362\237]\275\243\324%\275\274\375\215=XA\333=\n\030\030=\031\341\302\274\353\"\255=M\361\206:i?\n>\2253\'<\027\331c\271\304\300\325\274\003\335z=/\326\350=+\213\320;I,\212\275]%\030<<1}\275\242\232]\275\205-\037<\325|\336\273/\256\207=2\021\027>+\007#\275\264%\300\274\212\246\255\271\216\314\300=\220\245\202\275y\202O\275xO\r\274t\006\203\275\323\023\366<\001v~<\021\2321\275\"\"x\275\271\215O\275\270\262\001= +\331\274\370\232u\273YU\250\275\37691\272B]^\274\351\017\006\275\345\213\371<F\354@>\314$E=\271J\374\274\242\247\020\274\220\345\'\275\211\250\036<\031\233G\275\315E\274\275L\205\277\274\253\322\334<\323\177\232\274\007\000\213\275y9\312\275\321\311\211\2758<\365:\003\247\203\275\245\257\264\274\376\202e\275Z\332\202<\362;\246\275W/a\275\311Pg=m\207\200\274\210\367\215;\\\273\304<#\202\353;\027\361n\275\305\202\003<\263R\326=\036\272n\275\217\357\334=\300,n\273k\336\267=\360/\216\275\334\321\364\274\214\357\r=fV\320\2748\231\250\274\321\355N\275|?L=6V\'<\010{\324\2749\233\033<\023\357\235\275\276C\010=\207\216\332<\325\264\244<\204\331\240\275\364\250\001\275\367|F\275\243\243\221;\357\032:\275\376;\257=3[\035\273v\021q\275\354\265\252\274f\264\356;Y\372\357\274\010\322\212\275\345[\317<J\255\377\274\307V\201\275;\035\211\273\361\006$\275\210\t\253\274\370\373\013\275\375\250\304\275L,\314\275\334\303\336=\231\220\030\275]\320v\275\n\276\204\273\007\032t\275\265\320\026\275\010}\302<\277\031\\\275?\374\273\273\\\304\366\274\300mR<pT\r\275\315\364e\273\017S\003\274\0349\233\274\303\214\261\274U{\202\275@\261\304=\246\2460\273\262Z\220\275\275\250\022=\031\324\270=^<\270\274\"\266\355\274\352>\002>To`9\210\223\205<F\346Y\274\233\326\362<\216\230\261\275\026Y\004\274\312\266t\275\350%\t\275\013\262%\275s\203\340<\333\273Y=?S\017\275l\251\007\275[$3<\344l<=X\265\344<\377>\204=k4\234=\262\037(>i\224-<\2757\236\274\022\017\215\274\374\202U\275\013\372\322\274L\223\316\274E\030\274<\262\320\275=a\3734\275\004\244d\275>f\'=\327\226\r<|\203\233\274\317\222\274\274\222\250\256<\377\274K=BH\010=24\235\275\264\014:\273\307\242\374\274\261\351\267\274\340\230\027=\216\261\315=\n\327n\275\247\334\214<6t\212\275\367\273\025\275\025\026\336<\021\010\254<\316\'\304\274\0254T<?\303\237\274v\261\271<jQ\371<\325|\275\272\030\272\272<\364[\033>\032\177J\274\335\337\027\275+r6\275\323\222X\274!s\014=um\020>\233\236\372\274\353J\301<\275\311\332<\325\020^<\006\254==\336\313\032<\332\342\207\274E\335\211\275\241\223@=\276\367\332\274?\266L=a\240,\275\360w1<\021_\255\274Z\351\231;e\320\345<Q\327S\275P\307u\272EoE\274?\253g\275\354\026)\275\221U\237<\266\252\311<G\303\312<\367Xt=E\256\323\273\215\313\375\274\371\014\213<\327Dx\275\267\353\347;\257yY\275\243o}>c\265d\274{n\362=\205\314\252<KOD\274\254\020n:\307\375\302\272?A\t=\2269\256\274R\245\251\273\023\216Z\273JX\221\274c\260\236<\006JB<\276\010\222<\261P\244>\2222\332\274m.\314\274\343\272.=S\270\326\273\201\355\204\274\356\217\236\274\357\325.=\201\204@\274q\304\330\274\260\207#=I\366\226;\342\036$\274\257xh\2745F\311=~P\351\274\017\372;<v\214b\275\311\221,<m\243O\275\007\324\252<\"\374\276;\330\324X\2758\006\207\274\017\0137\275\006\000\237<\203\2447\275\217m\356\274\330\335~\274\275\030<\273\367\271\324>\340\257\222\2740P6=-\302\030\274I6\003\275o\373\013\275\377\336#\275\322\217\342;\006\3337=\241\242\350\274\\\227\030=\336\246H\275\221bL\275\244\323c\274\203\212\030\275=\n\330\274\000\005 =aKd\274O\037\322\273<\315T<\3577\350=\032\235\214\2759\240\305;\3337+;\031\006\261\275\343\305\007=\002\322\343<e\242\177;\320\016r\275Y\313\202<wh\354=\253\tJ=V6\025\274)\016\016\275k\355\242<yp\243\275\t\361\201<\336\210\025\275\014\177\234\275\300\3700=V:!\274\031\004->\014\033\305<\252\325\302\274?\023\200\275\005d\322<}\033\301;T\002f\275\252\215\036\275\3411D\275\243\235[\275\337\016\255;\306\257\030\275\332x\242\275\004\330\003\275)2j<\264\314\203<\353kr\273[\032\027\274\205\035\247\2741\371\001\275lQk\275\"!\331;\224~)\275\001\344\027=\321\036q\274\230 \n\275\010*\205<\236a\025>\246\035\243\275\324\253\332\273Gm\346\274\204\272\253\275m\254R\273*B\255>2\036\234<P|\202=\243\367A\274Q\342\345<\tT\217\274;\024\340;\375c;>\301\334\367;N\037D\2756t\306<\245@1\274Z\'\350<!)\204\275\335ig\274\200q\241\274\326\303-=\026:\021\275\255P\n\275\356\3058=j\251\353\274\016\n\206\275\356\325\020\275\235\243\027\275\177\250\207\274Q\311A=x\267A\275IK\272;\345\222\235;\321o\014\275\213\310\205\275\352t\343\273\350\212\002\275Qi\355=\272k\266\274suC<hLy\274\366;@\274\374\n2<\237q\227=\330\303k\275\310\240\035\275\024\205[=5\254)<d\324\212=\036\033\004=aq\362\274\242W6\273g\343\306\2733\341\360<\271<\034\275l\314\016\274fe\346=y\357\341;>\226\340\275\250\377u=a\275\251\275\004\243M>+\232W\274\033\224\032\274\322r\262\275\246\364\324>\364\032\210<\260C \275\207H\337\274\370\240\212\275\252\007\000=\3314\232;\'\246\005\274\273i\365<\313\000\034;gY\213=\375\t\204\274\\\033/\274\256#\005\275\237\206d\275F\255\202\274\036\000l\275\305\332\223<\324<J\275\270\266\377\274\263\341\036=\036\275$\275\210\027\347;q\377\337;)\032,\2747\250\200\274\016\177>\275\261\204\362<\225\233a\275K\355&\2754\252\245<\273\363_<\"\017\304<\211\356\232=R\372#>\217\025L\275yk\224\273\361_\035\275J\361\326\273\331\346I>\331\227\246\275\262\326\256\272\023o\207<\361;\317<Q\377M\275\227\243H=xy\321<LKa\274\270\3601\273\336\213n\275\\\361\231\275\027\332\315<\263\037\n=X\357\036\275u?\235<\222\276\272\274\265\026\241\275\232\n\222\274\205\005\321<\277\265\227\275Tf\314<\t\211\326\274xx\246=8\302u;\224\000\216\275\260&\264=(\302H\275\026?V\275%]\202=\243\340\232\275S\230\270;Wv\240\274o\013!>\004-\232<C\315\024<\023X\327<G\300\021>$\013\220=\017.?\275f/7\275\203\366\026\275Q\177\311=RiZ<Q\201\271=\034_\227<;\217\001\276\232p\335;&\330\333<\251\333\277=\315\005_\275\210\233E=|\361\320;(\351\010\275\257P\312\2748\207\177\275<\230\330:/\314\366\275\361\376\n>i\337Z\275\001@\241\274\332\276\362\273\330\031\025\2748\242\023=Z\241\205=\326=4;\356\005?=\313\306\n=0\221;<\332\315\026\274K\240\230=8\360V\275U\260X=X\035\261\275\254,\017\275U\233\205\275\005b\n=!\305\203\275\207MS\273\240\tX\274\354j\025\275\354\201|\275\340i\312<\313;\005\275W\251\260=6\003\243\275\362\035\205\275\253\332\247;\232\000R\274\272\013\312\274 W6\275\322\353H\275)\027\324\274\250\224\226\274M\004O\275\\\224#\275V\362\330\274\253\033\225\275H\323\202=\312O\010<N=\276\2740\022\203\274\362\325\332\275\240XC\274L\251\004>\362X?\273\002X\201\274.\276o\273]\213\223\275lP8=\206\"\346\2740\335\317\274\017/)\2755!\342;4U\367\273)\r\035\274l\332\014>y\245\244\275\003\377[\275\301\355\306;\353g*=b\340\251\274\022_\242<9h\035\274\250\222\017\275\014pM\274\313=\025\275\325Q\276;\253\0073;\277\300*\275\347\332\252\274\263\343#\274^\206\256\272=T \275\351\037%\275\362Q\361<\2515T<\310\365\241=\006\236\036\275\324$\340\274\336\304i<\302I\020\273\226C\000\273\3446%=X\202\267\274\020!q;\324A9\273@Q\267\273\326\333)>+\317\367\272/\177\026\274nX\264\274\335\234d\275\026\007\3737.\026\266<\203\241\037=?\204\266\274\020\266\014=l$n<\346\335\371\274=\3239\274<gm<S\223\215\273\231\367/=\211\010\362\274\t7\365<\3256\363\274\005\014?= \370*;\2654\210;pi\342\2740\314%\274\327\344\200\274\366V\274\274\355\321\237\274n\300C;\330\377#=\177H\303\274\273GA<4\361\336\272F8\031=}\360\252<\035\230\265;N\020\027=\326T>\275D)\250=\361K\236=\353G\010\275\230\212\262\274\251\024\227\274\376\355\364<\"q\013\275\271\270\t\275\032\273\232\275&xg;\262f\022\275\301E\321=k\261b=\024x\231\273(1V\275\325\275\262\274\266\031\253\2758\2465=\014\252t\275\333\345\033\275,;\247\274h\360:=\001\266\340=Z\320\204\275_\345\251<U9\002\275\246,\301<\024\337\216=\277\317\224>0\344*\275\217\251\213;l\006c\275\214\370`; \312\362\272\315M\221\275x\025\275<\271\266\301<8\n\366<\350\214A\275\376O\204\274Q\317\301;\341Y8\275*\323\256=\203\263\r>\004F\022=W\333\333\275\317f\324;0_\262<i`\261\274\253\372\252=\347\2156<\223\037\225<\351\374\300\274\245\373\007\274\273/*<\357\354\340<\350\372B\275B*\330\274\337)&=\332r\336<?\270];\227\204\022=m\001\332<\241H:\275\235O\212\274\204C\001\275[!Q\275G\336\022\275}\204\037<\321q\'=\020\3026\275aL\311<w\214\365\274\261\275&\275\314\372==\001\373Y\275\232D\'\275\345Y\341;F[\243<\010\334\226\274\300T\267\274\371\362\261\274\272{\227=\001\355\033\275\230\211g=\334\357\n>\343\307\375\274\213\362\350=\034|k;\274\352\355<\310\234U=\254\257\213\274A\375\375=\355g\270\274\274\237\371<*\351\007\273F\270\024=\317\003\340;\215\266\034\274\275\345\252<\177\252u<\212\024\037<\347BB\275\257\242\357\2733\360E\272~.\345<\234\220d\274d\317\365\273\265\001\020\275\013wj<\';\252;E\3436=\215\277\327<\211Q\240=)x\207;\004]R\275\006m\333\274\007f\255;^\0148\274\307q\270<kd\021\275Qx.<\346{\027\275\017\316\217>D\342\022;\\\200\201<\n\376\263\274\324\310\017\274<\361\001>4p0=\245s\232<\037\214\242\275@\247\274\272\014\214>\271\364\005\202<\246b\024<\302_&\275y\216\340;T&\022>\264y\311\275\360+\215=\037\023\217;\350\226\000\275\3364\256\275m$\217=\367\341J\275N(c\274\370\274 =\324\331\001=n}\024\274\351\306\272\273\217\251\221\275\344e\022\274E\311\362<y\306\235<\207\256\256<#g\026\275L\337\316\274\320\334\350\275+\267\273\274\255l\376<\235\253\356\274\373!\326<R\354\210=\005\244\252<\307E\211\275]3\236=\361L\315\274\33347<\326u\301\274,\350\234=\013\311r\275\255\364\003\275V.P<$\000G>4\035\215\274\327\354\304\272\265\360\212=.\336%=\rI\370\274\241)\"=\263r\212<\371A\347=O\235\223\275\272X\024=\273\271[;C^\304\274i\257\336=`\337\355<\372\307g>\211*\227\275=\350\005\275\230\"\316<\030\355$>\002\272\300\275\307\316\371<\234\320\036<,\342\217;\354\201!\275\261\336.\275\200\244\302\275\324\217\346=\253\256\333=\337\005\211=\010+\273=\006\352\256:.\230\200>\355x!==7\232\275\354P\214\275y\024D\275\327\232X\275\362\251.\275#\265H=\307\307\241\275\244\023\035=C\007*\273\277\256\\\273\253bL\275\250\303\014\274\316\300\225\275]ZV<\277l\246\275\252\251y<M\225\221;\236\340\356=\0034\321<\236\270\210<\364v|\274,\n\021\276F\264\271<U\212\2629\333?1<\3119\315\273\251\360R=\027q\372\274[\214\250;\236\231\217=\033\234\225=\032\002\222\275\244\277\002=\357![<\261\242o\275X\210I\274\236\300V\275p\371\250=\303\373\356\274s\363\367<=a\177\275\212]\t;\003|?<\005\335b>K\300b\275:\267F\275\017+\217\275\214\264t<@l)>>\264[\275\346Z\352<uH\212\274\204\234\321\273\373+\233=\200\357\330<D\317~\274@\014\355=\032\214\027\275\016\t)\275\017\224\323\273\226\234\031\275\375v\025\275\232B\213\275\224H\241\273\223Q\n\274\270\001\203=\273\300\217\274\372\242\220\275X\331\022:L\310:;%8\321=}\016\222\274\343r\312\274\034\252\210\272\201`\303<\225\232\356\273\363\210\222\273\270O\252\275k\017Y\275\330\326\016\274\262Q\232=\345\325d\275\231lx=\345;\226\275\217\203\266=\237?\276\274\256\360j\274:g,=\017aa\275X\244\210\273:6\342<w\"c=\353v\317=\373\250\361\272\335\036\300\274iA\245\275\242}\265\275\371\225t<g#p\275Rw\013\275\271\237\310<[ln=\270\032\030\275\333KK\275\357\324$\274\331\267\247=\260W\002\275\324l\014\275\275\311\301<\\\362\351\274\270\274\000\274\371\353\033=\0063c=E\316\215\275\350qJ=F\360\035\275\037\026v\275\243\272\312\274F\246\036=\276\036\204=\237]H\275\'\203\025<\211N\311\275\'\"e=\256g\246<l\334\304\2740<\326\274q\327,\2754\266\347\275\216\210\262\274\371R1\275\315E\331\275/\264\206\275\0130\325=\006\001\357\273\276\276\226\275\210\027\206\275\246~k>\334d\253<\203\325\217\273$\237\243\274\254\366\340=V\237\030<@p\232\275\315o\223\274\002\\{>%\254@;\312\242\336\275\272;J=\341u\306<\266\252W\275\375\324\033=:\237\222>\037C\226=I\251x\275\340\014\362\275\331I_\275\356YY><\007\031\273\347\2355\275\001rQ\275\034\244\271\275\204\251:;\251\307\213<\306\177&\275e7\005\275q\323K;\252ci\275\222\356\205\275\234B\202=X\032\330\274\307p\203=B.\361<\230\007=\275\025\305!=\206|B=\323\342\301\274\336\027v<x\223\215\275\332>\317\271\363\375\355<\\D9;\251\313\200>>\215V\275Wa\216\274\331kO\275\267]\275<\200\013\231<\222\252@\275\365\321\277\274i7&\274\010OK\275\346\265>\2747\036&\275?\"\340\27498\220\275\310\227\016\274\337\267]<,s\224<\330\372H\273\330\273\325=\237\361\352;\353S\017\274\317\367\376;\026\361J\272\362k\024< \0275\276\225\267\246\275\262\337d<\275\177Z\275j\001\220\275\032\033\334<?Z(=\016\t\312<ju\322=\331XY>\201s \274\224\370/=\252\n\001>\016\232&\275\205\215\315\274,]d=\244B\222\274\343\360\023\275\022[A>\3443\304\274\375\225\361\275\005\302\260\275\271\252\371=\216\320\377<\274\316\255=\024\344\202\275<\321\247\275Z\343\204\275/\022\020\275\275j\r\274\227\247\312<\340S8\275>J\265<Z\350\275<\201\237\312=\200\372\315=\257\250U\275}H\314\274X\010\346\274\263\023b<_o\245\273q\371E>\366:w<\335\241\274\274N\300\252=\371\0238\274\262\030^=\376+\241\274\024\203\223\274\354J&>\327\270\002\275\337\302\361\274\333r8=\372\360O<P\tS\275\302\376\031>\037\234\021\275\375\251\233=&\'r<4\3204\275\367\'M<~\007\205\275\266\226\366\274iup\275mo\362<@\215\300;E\001Z>\t\212\235\273\331Y\334=\264\320\032=\001\030#\275I\330z\274\016\237\234=\336\365h\275\\\025h>\203R\250\274\027\010\252\275\230FJ\274\314V\223\275\357\\\207=\0241\263\274\377_\376\273\030\316\'\275k\343\262<\217.[=\023\013\252=\362\250\245\275\256f\335\274;-\305<\334kr\275\004\331g>\004\363\3056P:9=8\322y=:Av\275\323_\230\275\2319\2549\222j\227<\317\n\325\274\221\231[\275\365\023\317<\346\214\267\275>P\237\275_\246G=\251\007\315\273\216\017\332\273\304\361\346\274\001\315\215\275\266\317<:\264\370\333\274)\2720>=d\323={\033c\275\027\275^\2757\272\256\273\n\311D>Hu,=\372\037\300;\213b\212\275-C)\275\332p\305\275\025P\327=)\314d\275\026\014\214\275\323$\340\275G\220*\275\236[\323\275\375\360\325<F\273\326<\310W \274\367@@=Tl_=/\311\210<\327\020\224=\260\013\024=t\232\303\274\004\277[\275\230,\225\275\210\375\022\274\\\021W=\345\335\200\275\333\016S\274\262?\223\274\'\245\326\274\302\255 \275\217\365\226=\3116\020\27530\023\274\263\363\247=\352>\276=\2562\031=\215D+=\311\215\313\273\245\206\202=\374m\275\274\242\265I\275\323\220g<M\221\014<\225P\233\275\014\365\003=\000\213b>\213\004\017\276)l\000\276\335H\321</0\372\273\225\362\237=\340\373\207\274l\r+\274~\221\005=\237\342\250=\007i\332\274\343\310\310=\367\350!=\256\274K\275\374\263\220<,2\322<~\006w\275\324x\207\275\377\256\272=\r\311\224\275_K\222\274\227\367D=\354\227\321<*\305;=\375\225\017=L\227\272\275\261=%\275\307\360\224<\037\263E=\220\216X\274\337\002i\275\262\220.;\210D\345\274\220\342\214\274\245\2179\275\214CE\274\221\231\210\2757\005[\275\360`\246<\327\020\277=\327k\2358\347\001\355\273\005g\004<IE\237=\302\257\353<J\314\020\275\347\233\256\274G\310\302\273\302~5\275\353\234\377\273M\022\212\274XR\266\275\"\317\357<\005\250x\2758\202\200\275~\252\362<\375\332~=\024\3754=\342[\362<\320\231\251=X\323\210\273\225\237|\275 u\267=\036[\230\274\3212\215=9\\\323\274\241\272\215\273N\205O\275\211\312\241\274\277\\P\275\246\352\344=\211\375D\267Q\023\357;\306\261\253<\225\r\241=x\354N\2752\304\245=\200W[<\341]/\275\377\342O>\350\244(\275E\365\272<\"@\317\275\\\204\245\274\365r\224<nsc=\301V#8v\251\335=\26250\275;\032\211\272H\350\317=\001\370\221\274\312\345|=\033cZ\274\330\255\330\275}\270M\274P\260\021\274\220\2046\275V\332\365\274\3626\251\274]\326\310\274\332X(\273\322\341\n\275e\254\030;T\351\213=\355K\023\275\000e\023<Y\032L\275k\247[=\370\037A\275\320\277Q=\020Z=\275\\\371<=\305\305\005\275VT\257=\271\035_=\027S*\274\323\376s\274\372L{=\240\352\020\275\014\276\264<e\236*\274^\333L=\326\312\020=:-F=\302U\255=]e\031\272\017\337\303\275\263\362\321=\301&\304<\021G)\275\214|\243\275\270\247\361\274\246\2322\275\367\014\260\271\315\350\232\275O\006\037\2757Zp\275\230\300(=\314\224#=\215\013\270\275wy\217\275\337l\314=+e\034\275-l{=k\343~\275\373\1778=\273\373\240\274[t7\275x3\316\275\230Pp=g\031\316\274{pq=8\223\240\270\326\225\337\275x|\033\275\246\006\016=\304\215\222\275\021sO\275\343\307\226\274\037\321\230\274\344\223\323\274\027-Y\275\021\013\227<\221\201\270\274\337\276\250\275\362Gu=#\253o>F\261\312<V\212\224\275\232O\177\275\244\357Z=uD\216=\003Q\260\275\346>\264;\016\323T\275\032\221\t\275\332`/\275;\001\300\274\270\275I\274\327\\m<\332O^\274\216\243\303\275\\\207\'\275\3253\362\274/\335\203<\377\357\000=\215U\t=\250OV\273\257\3366\275\342\032\220;~\364\230>\300*\374<\205\252\246\275\036\rr=_sl\273\017g%>\245\320\216\274\022\321\322\274\247C\203=\032\014\263=#\270\022=Q\212\352\274;\367&>tK\256=\345\334 <\345Q\267\275\024\224\025\275\025B\240=8\327V>f\212\025\275\206\366\013>\034\336\312:t\365I=\217\376\236<t\3769\274\222\235\227=F\274\\\274\277\352\202\274\376p\375<r\207\335\274\002\242,<\363aL;\2501\006=^\346\333\274\255\306\206\273\274+u\275\212\225\241\274\352\203\225\274\370L\007\275\221D\'=\310Z_\275\210c\202\275Ig\244\274`\331\203;Z\247\250;\3309)\275\342T4\274\230\354\367\274G\316H>\351h\206=O3\201\275\014A\311\273\033\311\232<u]\\\275\327\250\240\275\3631@\274\254\036\n>l\341\344;\031\037@=.s\327:\270d\n\275ir\001\275\365v*\274$\326\251\271)\326\030\275\242U\242=\234) \275`$\247;^\241\306<\035t\364\274c\347\246\275\242\234R\275\326\200\217>\305X\221<\306{a<B\352\360\274|\323\233\274\342\370\254\274\200\253{\275t)F>z\232>\275\272\305\247\274\273\320\214\275\373m2=\221*\232\275\374\314E=l*\334\274\350\0368\274\325\316\275:\251\017\301<N_\235<\006n\227\275\212\255\020=g\203\026?]7\r\275(\3615\274+\350\216\274SB\306<\360\003J=\305\327b=\266/\312;\010Z\254\274\307\263/<\005\257\014<\311\335\243\273\2373\246\274_N9\275\276\222x\275T\326\343\274\361\336\035\275i\375\244;\356di\274c&?=\350\306\226=w\234\300\271\"\352\253=\033\213p\275\262\022\247<\243\350\361\272\216\337]<\201D\330\274\240\335G>\243\\\266\275\227\322\301\275b\234\330\274\322\257\n\275<\223 \275J\226\025;>\314\217=\260\201\270\275r\241\241\275\000\207\217\275S\264H=\361\247\300<\332)\017\275\256d\"\274\340L\000<]\267m=\226A\332=\240\255\344=\300\231\256:;\361I\275\246J\343=\"zK\275V\340\222\275\250\334F\275\261\223\277\273\2544\317=b\235\361\274\3634\360\274\260\223.\275\344\237\341\273{\205\363<\260\n ;\230\371\275\273Zh)=,\020\277\274R\023@\275X\017^>\330\013S<Nw\207>bUy=\333E\303\273_\373h\2753\233\002>kp\307\274\332\371\235\275\236\002\022>\310\301\001\275O\365\336\275\232\213Q=L\335\267<\246\363\247=\024(h<?v\360\274\266l\014\274\243gD\275\313\312\036\275\224\357\316\275\277\317\324\274\275o\242\275j\'C\275\250\022e\275\235\276\037=Z\010%\275\221(D\275\023\303\347\274\0008\331\274\266.\264<s\n\217=Z0\210\275\320\371\232;eh\002=C)\001<\217\230@\275k\227\261<\372\240|\275p\340|\275mW\205<\210\'\341;\230\302\276\274\200\223\227<\022\327;=\016`\251=h\324\300\274\202\370 \275\005\227?\275\014}/;\230W\002\274\217<<\275\007(N=\232\3072\273\233\370\021<F\224\375\273\017\251\014\2741\324\020<mF}\274\321\271\016\275\177\0136<\336`\020\275xg\230\274\017\214\177\275\035\356\347\274\253F\255\274`\265\342\274O\r\275\273K\022\023>\276vQ\275\'\'\033\275\201\216\277;Yq\241\2741\031\341=\275\364\331\2721\243\022\274\364\020B=.p\265;\354\201i<\336\214\027\272ZQ\271<\340\002\231<\247D\225\275\\Q\234=l\327c=oj\036\275\t3p\2751\332\216\275`~\000\275\0315\\\274\030p\334\274T\252\353<\014\213\327\274\367i\222;\336\370\215\275B\317]>\006C\004=)/\211\274\211e\032=\204\212\317\274\334\271\300;;\261\227<\332$\364:=\354\002\275\000q\"\275@\217\204;v\205\036=J\022\272\273\022}.\275\316sj\274\037e\225\273\nV\214\275\253\351\262<\247\310Y<\332c\006=\340\001X=O\341\211\274\220\255t\275-\0028=4\343\315\274;\340\304\275\013\264$\275\216\004\025=\034=\237<\216\266\317<\202\006\205\275yFS\273\006\323\365\273\"K\202=\241\210Q\270\316\320\252=\370\213\230\275\222@\202\267\031(\310<\031\266\266\274\223l\256\274\226G\021\275\264\217M=\276\t\312\274\277\242\202<yh\374<\265\025Y<\023*\371\274\331\t\336\273\340\214\315\275\210\225\255=\3325\206\275\354\307\023\275.\016\353=\216\332\234=\267\204\244\273H\205$\275\024O\301\275>=\244\274\023\304~\274\227\331\003\275\226F,<\305\257h\274\344S\233=M\241p\274\266\035\255\274\363\313\353\274\0204\372\274\312y+<mR\347<\353\031z=\tk\030=\351\235d\274O\307m\275\343\t\306\274\007\201\037\275\366:\243=\237\265k\275\006A%=x\252\377<Pf\373\274\332\031\003=Ik\256=\035\205\311\274\227\275\245\2755?\245=\220\232\222=\2224*\275\371\247#\271)\010J\274\202/n\275\307\226\232;\237\'\005\275\"\370\215\275j$\263\274\345:V\274>]\035=\375\351\250\275\325\0359=<\004\302\274{D6\275\270\235\317=9\261#\274\331\310y\275\304\372\257<\017\2150\275g\351\272\274b\301\007\274\030\307\037\275\305\225\216\275\207w\203:\317OY\275mD#=\271=\273\274\326\025q\275C\362\222\274j\373q<Z\271g<\277\005\353\274\315\305S=\274\262\216;\t\357\227=\306\010t=\266\034\314\274\302CT\274\263d\345<\352X\023\2745.!\275\373\211\240=\020\352\016=\212\247U\275\177\321\211<>G\202=*\266A\275\237\361\364<\340f\206\275\343\326\026\275~u(=\313\212\r>\225\005r=P\273\027\275\303\r\274;E\035\203\274\256\020\230\275\027\334\354\275y\243\263==n]\275\004\254\253=Zf\'\275\242Pc\275\312\306\213\275\274\\\001\275\334\004\377\2734\325U\275j\321A\275\373%\316=D<\346\274\344\365\221=uw\237\275dF8\27507\r\275\342\010W\274/O\210:&\206!\275(E\376=\321\004\370\274~\322\274\274\327\266/=uW\325\274\275\234;>\301G\027\275\003\215\212\275]\242\231\273\373\365\356\270\350\273\365=H\2366\274\231\233\326\274\266\221\177=\313\365\306=\036\244=\275\260\332\220\275\330c:<\363\013\007>W\035\000=\n\314\351;\260\354\262\275U\2615\275\0229\267\275b.\272<\345\r\237=\016\270\252<O\240\251\274Q\366\223\275\000Ep<,\310e\275\215,K\275\320\375\253=\021\022\260<\322\3311=\331\0047=7\\\367\274q\003<<\030\311\007=\224\271\233\274\016\371\372\275K\354\r=8A\340\274\372O\341\275\210\035\254;1\350\244;\020\230\337<b\356\020>V\r\300\274\256\340\005>\232\330Z=.\277\220\275\350y\003=$\214\226=pv8\275y\377\365\274\354\355A\2742`\000\275=nR\275\341\325R\275\334YK\275t\200?\275\311$\243\275\300~,\275\363\350\201<\333\370P:\r\340\026\275s,\346<d1\273\275\372@\223>\220vT\274\t\226\014=^\342\251\275\333\276\213<\337\351\';\224~\254\275 R\346\273\364\310\203<\264fa=\336e!=oA\354\273\300\346\201=\327 \022>A\'\307=\331if\275\270c\230<\275\205\244<\231\210\252\274\345\351X\275N\351.\275\002\312\024\275>+g\275\2306\355\275z\217\035\274\034\240\013\275M\010E=\265\241\207\274rV,\274\2700\330<L\214\264\274\324E\312\275ce\204\274\222\242\334<S\026\263\272\253\333|<r9!\275/h\322\274\017\351\313\274\340\211\005>%\020\000>AS\376\274\351\257\253=\213\016~=\316\321\016\275\344\312\000=\276\357\006\274\003w\021\274-\001\316=\247\312>>/\357\014\275\255w=\275tt2\275X\370,==\217\252\274\355\305d=\356\223g>J\225\013=\234\020>=S\336\217;\006\245:\275\216\177:<H\275$>\277\355\315;V!\031\274\001\260x;Y\315\002\275\337\223{\275`\022t\272\375R\203<3\036\366\274\"xK\274F\010l=m\013\254\275j\027\203\275\027\335\036\275\331\n)=\371\271\324<\204\303W=\271U\016\275!\036\246=\244\016n=\206\312J\274\317V\304<\302\314T\275\311(\353\272\231\376\225=\356\356\031\275\352\313\002>\005K\371;\203\221_\275\321\327\271<u\177\025<\220\263\033=\221\030L\275\2438\026<\325.v\275X\265\253>\262\301`\275U]\377\274\242\323\262;b\221\235<\316d\023\274\202\320\310\274\230\2250\274\013\310\031\275\244\027d=`\372\233\274\332=\333\274\372\262\273=I7\214\2758+\262\274\367?k=s<\236=+4h\275<np\275\332\210>\275\313K_\275\334\351\324<\002\361\234=\214nZ\275\216\342\223\275\206\373r\274\r\361\201\274\026\3320\274\356X\214\275g\273\302\2720qo\2745\263\031\274+\005A<\251&R;a\027\304;\300\216\253;\230\235\033\275U\226\245\273\026\262\216\274\254\243\225\272\222\347\224\274G\213R<\032\344\331\274\3477\006\275\017\177:=\007\352y\275\277?\207\273%\263@\275\024\357S=c\004#\275\370\206\257\275\372\\w\274\177\340\026\2753\251a\275U\364\361\274\345\265v=<\211\226\274\231\277y\275U\310\033\273\346\302`\2759\206\217<\306\241\016\275o\346\375<c4\'\274\313\030\224\274v{\203:\030\357\275\274m\231\336=\036\213\036\275\312\254\331\274{\246\t=O\211E\275\267\325y\275v\341\272\274\3434C\274\031\234\333\274s\357\206=\007\315\005\275\r\317\343\274\302]\255\274\260\020J\275\200\315\235\274<@`\275A\260\361<\355\303\25385\320\201=\177!\362\271\322\357\356<\330\n\034=,\023\034\274O\357;=\371\023\241=j\025\257\274x\213\007\275\222S(<n{\344=4f7\275\260\367\\\275\r\263\347;\014KN=\030a\271=?\017\212=\024\261\230\2749\306\230\275\340%\035\275\251a%\275X\006=\274,\302E=E\312\'\275%\336\273\275\010b\034\275\215\242\320\274\330u?\275!\030\343=60\023=\221N\021\275f\014L\274\306\373\235\274\373%\206\275T\340\305\272\035\270\350=\3712\n\274\257\211G\274\200\241\313\273\234\222\024>\360m\363;\231\322O\274\025\014\260\274\370\374=\275.F\231:\342\245\'\275\300\227\216=8\247\375\274\031m>=\2455b;9\\\331\274\351\374+\274N\223\256\274\357\030W\275\2668R\275\2168\236\274\n\327\224\274\313)S\274eX\275=,r\356<\323\211\027\275\356\235\313<>Y\262\275\343\000\026>@7J\275\001\265L\274\202\300\013\275\365I\013\27367\325\275\315n\314<\251i\356<mK4<^Le\274\345\214\006\275\004\327\263=\235\204\005\275y\3463<\234M:\274\337\335\237\275x\346\204\274\351\275%=\251\330\251=\0007l\273\351\344\311\274\302\221/<\243\262\227=d\313\226=VT_=\254|\206=\320\243\341\274\314L\351\274\213E\022\275\362\367(;lY3\273\247)=;/\177\225\274y\263 \275\345<\260:K=\201=woI\275\265\021\272\274J\365O=\021\005I\273\360(\232\273\305\3659\275D\027\272\275#\267J\275\031^v\275\227P\364<\365\352\'\274\202\t\333\274\035\327\215\274\255-\220=N\200\005\275\205X\227\275\n\205\226\275XH\233<\325\252\255=\364@\334<1\351{;\025\246\014\275\346\tR\274\213\001\026\274\351-\327\274e\353v;\315\317|\273b\027\003\274\221|]=\366\261\264\274\023\275\313\275L\031\216\274+\221\216\274\324\002\221\274\273\321\212\275\350KO\275x\245\036\275}\210\340;\323\312)<\210\345\235\2737\265\263=\346\027c<\221\n\254=]\305\235\275\254n\320\273\217\330]<\376\353\022=\355~\334\274\230u+\2730\316=\272-\245\374<\261\331\301=\026\305\372<v.\204\2759<\214\275\001C\004=|\003\023\275\r\350Y\273ZT#\275}ii<@\230\221=\260ev\274\335\351\305\272\'+\314\275_\365p\275\232\266y\275\351\303\204;\213JS\275\241\0141\275BtX=Bib=k\350k\274\217=\267\274\032J\216==]\371<u\2733=\233\337\003=Z\341\222\275Z/\002<\270\227=\275\273\251\302=\002\257\204\275\361\360\262<}\034J<\226\2424>\270\274\226\274N\220\320=\227\010\245\275\022\314\014=\302\237\035\274\372\323:=I\200\207<\373\241\300<\377x\214=\004+\002=\263\224f\274|\377\225=d\222\014>\037Y\224\273\007\221\375;\364\272*=\'\014=;I!W=\337+\223\275\331\332\302={\372k;\306\017\213\273NB\036\273N\211!>\031t\035=\351B\260\274Z\'\375\274\313\033\222\274*\346\016\275\361\004>\275y\367b\274\316\372\317=\010\204\203=dy\272\274\224ry<N\227<<P\220\305\2744\334\266;\341_\335\274\350\206\247=\001\245\037<\332\306\276\274\256\222\233=\242\325\273\273\256]L\275\302\270\254<\306c\214;w\206\210\275\350f\200\274\202+\273<\270\342\235>\367\005\240\274\344\256\250\275\025\023\021\274;\301\256<\346\225\330\274\\\344\345<=\000O\275\363\212\211\274\264\313R=\r\322\243\274(\337\244=\000\020k<\260\207Z\274\2226K\274\241\317\345\274=\267/\274H\332\370<\314\305\246\273Z\255\004=eB\351\275\361\207-\273\0022y\272\263\353\026\275a\224\017=#\201\023\273\335\201\231=pBX=\027w\210\275|\302&\274\323*\025=qC\231\274\233\276\227\275\276v\003>eu\372\273\253\3416\275\273&(=r\370\026<#\200g>u\334\034:\336\242\252:A\206\022\274\203Ck\274\000\tK\274_\005-<_em=EnP\273\261\276\301<%BM=\3738\207\272\nx\232\275\330>\377=\237\377{\275\335\360\243\275\365\027\033\274\253\320\224\274\211n{\275\227\'\273<\355\340\217\274K\010\035=\247\374a=E\201\267\275\351\353$;,\254D\275\221N\006\275\214\000\311<Y\205\305\273=\321\202;\307\243\357\274d\210\340\274\036\024\022>\300\350\303\275\227i,<\271%d\275\217\331\004\273/3$=:XB=[\2346\275\346\226\234\275\337\354\352:b\212\244\275\177\027\206\275)Y\356\274\227V\360\274\026\213\347\274\335\225\355\274\216\310\340\274P\306\002=\217\270a=\000\350\022\275rJK\275\212\216\201<\\\312U\275\372\326\301\274\276}F\274\243\364\227\273\235\307T\275\307\240\213\275\242~\307;\222\204\204\275\337\345j;\304@\t=\030\257\302=\315\025F\273\312\305;\273jI\240=\334\371\352<\260<\336\274>\245\202=\350\350\235<pR*<\350\235\036\275\257\\\314\275\374\3168\275\007\210\204\275\240\313\242=\322\243p\274\272\242o\273\244\302\305\275\213v&\275\013\365E\275t\324f<\026\212\340\274\2719\t\275t\0268\275\2431D\275\336h\334;%[]=t\031\035\275\224\031]\274VW\026\275@\265\031\275{\374\037=\375S\024\273\247\013R:\255\304\255;\202\004\245\272\252\263~>\000\307>>k\022\210<^\300\325:\273z\200\275m\305\356:D[\307\275\355bv\274\321/m<L\235\031\275\264\336\350\274\214\313\004\275\t\336\341=y;_<t\251\217\272\231\177\005<p\340\353<\0300\203\275\303\307\\\274f\253X\275c\001\203\275H\252\203=\264\017f\274s\312\270\274<]{\275\n\375P\274%1\204\275\353\203\223\275\212\261N\275\217\270\322<zQQ=\347\247\\<D\340\004\276\244\3732\275SJG\275\263\034\205=\272\272\033\275\360F\034\275i;\310\275\\\262\203\275\255\024\251=\025\341\010= 0\246<\354N?\275\344\312\327\274\325j\222\275\216\342\210=/\202\206<qNh\274T\336\005>\266tV<R\217;\275\373\002\t\275\316\346\343\274\033\306\346\273dP#=\272\240\301\274\003\332^\275\3261\234\275\014\201#\275\211\002 \2758\2677\275\007\222{\274\200\255\265\273+GO>\335#X=LK\231<\330\245\320\274\325\242z;\022o\023\274#\325\221\274\277\233\254\275\267\032\264\274\034/\223<\014\232\014\275\037\215\216\274p\374\023\275Cj\371=\236Tz\275r\373\353<;%Z<\374\252\305;\320\214r\275\307\222!;\214\322\242\274\037\005\341=-`\212\275\365\0035=\301\233C\275\254\242\000\275\007\200\275\275\005\230\016>\021Ey\274\322\n]=\224\237\\\275>\363\024\273\363\206\024\275\350=H\273e]\003\275\303\314T=8=q\273\254k\033\275\371\331\200\274\020>\264\274L &\275\321a{\275~x\276\274^\023\245<\245\224\253\275\006\226\214\273\222\334\260=\226\205\215\274\301\301\333\273\202Q\317<\177*\375\274\224\033\021\275\027\341(\275\205\306\266\274\222\334\370\274\237\321\330\274o\221\230<\327i\233<\205\313\222<B\330\367\274\221Z\000\276b>\227\275Z\022W\275\3672\371<\252\207-\274Z\355\3117\223C(<#\032a<\366\313L>\235\372i\275\272{\213<\357,\200=\306@\237<\020v\016\275^\010\240\275\342S\245\274\237ik=z]\203\274\372\216\367\274\300\207\033=\036{\345\274\330\233\375<M\323\034<\013\021\336\275\332\343\236=\336t(\2758\271\211\274\022\266i\273\243\3041\275\274\377\307\274\367\237)\274$\216\266\275\217\237{\275\035\022\246\272\233\312\010=\225el\274\202\206 >\347\236\356\274&R\226<=\323\341\274?\027\271\274B\026\307=\3672\202\2752\237\303;\223<\353=Q\2152\275 \336$<\037@\245\274<\224\004=\362\235\270=\221\243\207<\004hf\275w\3165\275\305\322\326\275\226Q\t<\306\005\275\274\261\342\t=\300\236!\274\035o\254\274\300\013y=\2762)\275f\327\020=\006\376\254<\237\342_=\355\304h\275E\002\344<R0G=-\366\027\275w1\332\274\357.j\275\351\266\255\275e\\\205=\311\300\316\275A\206\213\275\025K\347<\236\000V\275\362\274\035\274(\351\211\275m\005\026\275\232\320\232\273B\n\215\275\032H\"\275\n\001\"\275\034\336\321\274T\206\255<\303\004\273\273\035\\3={\034\243=i\263-<\r\343@>\351\230\000<\212\200\017\275\"\345F\275\272\251\037\275\3272)=\311C\340\275\032\221\231;\303R\226=\215\253x;#/\003\275\231\263\260\272A\002\272\275aO\345\275\353\377\332;\317{\300\275an\231\275w\001\330=[\376\363:\232\266[\275@\273\245\275*\361\250\275\272\210\353\274\022\"\206\275q\347\324<;VT\273\310\374K\275\373}\340;\270d\232<\307\261\272<\035]\023=\231\227w\275\376q\347\274_p[<B\226:;3\271\214<\257Pq\275\312=g=\346\220G\274\353\365\330\274\260\201\007\275\017\016\232<g\246#<\037\341i\274g\315\030\275\031\037\364<\206\032\241<\334\003\335\273\244\211\032=\315\320\021\275\017\355\234=}\270=\275\304\366\352<\311\3203=\365<\204\275\212\304\225\275\311vt=%C\341<\004vw\275\315{\346\273\036\002\305\275-\277\377<\306*\324=\340\221\320\274\312\\\037=\330AY\273\270\244\212;B\031\266<A3u=\340\000\304<\260)(=\0260\373;\353\316\000\276h\366\275<0\0266\275\355\232u=\343`\202=\352z\034=\370\337x;\260y\300=o\034\343\275\002\224\335<\344P\367<^\301T=h\315\346\274\030A\036\275\nH[\275\363J\251\275\331\177\233=\334\013L=\2510:<\375y\001=%\260C\275\270\352\246\275\2768\r\275A\222\314;L\331r=\374;/\274\223\323\307<}r\342<\245w\241\274c^\357\274\222\036x\275>\022\220\275\021\020\255<5\232\000\275\367\311\231<h\323\252\275\007\304_=o\274\217\273\305\307U=\r\336\235=\010\222A\275\376j`=[\010\207\273?\277\365\274\002n\023>\n\374i>\302V\242=~\340\325<\205\265%=$\270\206\275\230\300M\275\365\352)=b\207\244=[\216K\275 q\223\275\033\020=\275\"O\306\275\000\177\204=S\010\235=\367\352\352<g!\315=\374\264\314\273\315#3<\014\275:\275q\354\006=kJ\256\2752\311!={\001\327\275H\252\221\275\223\235\300=\216\247\334\273\212\002\216=\204\355\\\275\2401\325<h)\251\275\003n#\275\032\3077=;\233\217\2751\022\235\274H\346\035\274W\364V\275r\010R\274r\264\035\275,a\005=\030\214x=\320R\214=\354[\251<\264\320\274<Z\377\027>\315K\220\275J\242*\274\370H\266\274\221\r\025\275\250!\357=\216q\302=MI\247\275\002y\007\275\037)\215\275\006\365C<P\212\217\275\025\352\350\275<7\310<\336\315\331\274\347\366y<\n\211\271;\211gF<\227\362\037=<\353\344<\262\346\033;i\227\225=\365?\201=~U\262\274r\313o\275#\322\241\275uE\336\273\273\023_\275J$\203\273+\307\253\275\020\254\224<\004\336c=}\255\331\274I\277\226\275>\007\301\274\225x\006<\211\224\016=Qh\005>`\000\313<\315*Q\275\n\356\253\274\375\316\227=fr\022=\234\363z\275\3213\243<j\3144;\267#d\275\223\362\205;\376\325\211\275\373E\024\275\006\0226<\367\",\275\347j-<\034\326\256\275/\236\036\275d\\\326=\271\253W=\264\016\252\275\020\365\272\271\033\324M>\345Yq=\342\360\032\275\376\235@==\\\"=\237GI=\362\031\272;\264_\036\273\235Vu:\215a\330=\\\334\222\275\226\207F=\3464\200\275[`\223=];\014<dY\337\273,\316\010\275q\273\030\275\003t\271<\214\177+=\256\345\177=nzA=%N\033\274j\335\236\2753c\022>\257\2146<\207\257\251\274\023\2362\275\323\361\247<\354\300\346\275\221\001==\005W\305<;\270\220\274i\005\252=\217DE\274\030\345\'=\261)\347\273\210\347\342\273Y\032\230\274T/\363<\031[\022=\001\371\007=b\266\376\274k\313\220\274r\001\035\272\207j\023=\212=^>\024\346\301>d\037\036\275\245\274\372\275\002MP=\361~\233\275C\264]<\006\224\003<\207\204\272;C\277\273\275\325\024q\275\370g\267=\352\317\306;\230AV\275\251\2636=O\254\227=\241\014\033\275\335\300\203\275\177\363\000\275\034\333\267:#\035\274=\003U==0\022\205\275\234\3078\275D\360|\275\2175\003=F\374\230\275\001\201r=\242\306\353=T\351)\275Y\225\301\274\300O\t\274S\264P\274\374\326;= \370\270\274\021\204\327\274\207\000e<\002\337\255\274\363\307\222;\033\361.\275\200 \231=a\327\"\275\275\311+\275\375\3437\275%\362~\275v+@\275s\337\223;\267E\324\275\366\264\013>P\177\217=\375\271\313<\362\007\006\275\362\036+=\037\263\207\274\\\222\237;\376\020\253\274\342\235\r\275\022\032\252\275\362\222\265=G8Z\275\017\377\031\275\360Z\335<\273h\002\275\310\336A\275&v\001;\315\300\363=jv$\274\237\237\304\274\005\204\260;\272\202\200\274\240_\312=b\236\336;R$1\275\265\207\236=#U[\272\372G\230\273mb\006=\205\010<=\305\275%\275\201\251\204\274\355\274\006\274\333\313\231\275k\020R<>\300\245;a^o\275\273G=<\206\204Y\274|I\237;{\023\005\275\231\216\025<&\340\225\2756p\242=\375\267y\275\345v\215=\001U\024=\031w\325=\350\0203\274A\000\031\275\235\224\365:n@)\273\026\346F<\261\372H:\274\222\207\275\3610\213=\341\263\205\275$\340\'\275\031e\035=-\374\375<\230r1:\'\212o;\337\251-<\361\232\274<\265\005$<\3404\030>D\241I=t\244\300\274\274\335\253\273\233_2\274x#\327<\362\243\010\275\306E\304\273\331\235\215=\264!?<4\025\021\275\033\252\374<Is\356=-~e\274\317<:<w\321\242\274\375G\000<\253f\010<B\255S\275\264M\300\272~t\024:\000\325|=\304\350Q\274\022Y\207\272\341\244\260\273\375\302\034=\027\233\322\275~\256\215\275\177\315\225\275C\033\251\274\'\241\200=G\023\212\273}\320\233=\243\320\223\275\310\261\244\275\270\223=<\213{\353\274\230\273\235\275\013\363\034\275e\211\332\274\326g:\275K\255\260=#\326!\274\016M\037\275\250T\200\275/3C\274\220\326O<Jd/\275\227&\n>\311)v\275r\017\241=Y\t\213=\304\324\312\275\364\367\267\275$%\021\275\032M.\275\301\375\316=3\225t\274d\211\255\271\365MM=\000\003 \275\315v\271<\023\\\342;6~_\274N\320\356;\371\0355\273nWD=\006!\022<\220\214\274\274\375\225\035=/\270\215<\332j\224=\201\243\004\275\267\260\375\274.\016i\275\230\357\342=\225\270\256\274\211;\006=P\272\372\273\344w\\>]\340\330<\363\352\272=\023Th=R\010\030\275\017\364l<x\3623\275\257\361\341<\025\216\235>\232L\353=\261}\013>4\342/>\364e\273<\246\177\225=\3114\247\273RC&>\252\3278\275\313OB\275L\013\362=6t\235\275x\266\263=\0074r=/\031\t\275\321x\252\274\217\001\277\273^r\251<\035?}\275z\010\306\273\006\377<\275\361\265\277\275s\035\333\274\251\317\223<\330\tF<\301\016Z<\272\244\360<8\232\021\274\030\004\200;\325\3450\275\325#\207=(\303\016=\335\314\202\275\340\307p\2759|\255\274Wc\005=\270%F=\230D\203\274\263\206\245;\023F\364:\376P\017\275\203\207\305\274w@\207<\352\032{\2750W\303=7J\245<[\276T\274]!\246\274\'a\003=\274_d\275\316M\2308\367\303\307\274\222\203\373=\301\376\271<\232\276\007\275\302\367\221\275\304\001\211=v\341\250\275\273\021\305\274\235\327\345\274\264\274\205>\237\274\252\2752\272\321;<N\307<J\353\305<\216\317\367\275\033s\020\274\230\034\207\275g\213\263\275\316uP=S\364b\274d\303\202=K.\221\274\345\360\305\274\202N\251\274\361\334\t=\215\242o\274\007\266a<\235\001\240\274{I\336\275\327\2015\275\014,\334\274\200\223\274\274\3046\320\273\200\202\\\275s3\344<\214\233\t\274\214\002/\275v\300\313\275\204#\303\274\256~\214\275\202\037\377\270\310\021u=\255\226\360\274\254\002\334\274\314\327\252\275\234\2459\275\300Y9\275\336\027\260\275\017\277\035\2743\227\273\274\275~\255\273R\200Q\275[\256-\275\026(\025\274\315\2545=\272Pt\2755,\254<bo\021\274\365\017\273\273\034L\336=\033\037]\272\22351\275\245|m\275\352\256V\275Q\207`\270n\220\201<V\366\375=\363\264X\274\005\031u\275\371c\253=\2015\n<`\\\236\275\026\025R>\303\213\177<M>4>\002\212\220=\253\304\265\274\314eY\275\340\334\321\274\260\235\n\275\032GU\275\350, \275\215\204!=\230u\206\275\016/\260=f\301\005\276\253T\376\274\326m\252>\033\na<\'\037^<c@\266\274H\032\344<\257\331h\275\323]\365\274\301/\270\273?\340\377<\"\302[\275\177\340Q\275\226N\264<4r*<\247\306L;Tl\014\275<\322W=\331\252A\275Ckq\275$\200\220\274\374\035\241\275n\226H\273z\033\266;8\372\266<5\366\232\275/V\225\275\252\355\237\275\303\232;\274\347]\243\273\316\252t>\207\340\316=\343\034\342=\t\314t\275\353`P:\302\265\336\274\354\351R=\255Y\026=\034\273$<\277\367\246\274\3118\217;\341~\031\275\3510\340\274\256O\251\273q\342\314\275\301\237\032\275\330U\234\275\261/\243\275/\261\215\275\372\017B\275/\204G<\005\252_\274\214#\272\274H\321\023\275\246\023\324<\310\342\211\274\354p\235=\305\362\005\275X\341\261\273\230AD\275\034a\t>\361\025c\275`\254\020\275T\357+>3\315\030\275\377}\203\2755E\201;\3024\256\274O\255a<\204\3604\275x\257\036\275 &c\275}mI\275\014]\315\275F\365\310\274\236ti\275\032\224\356=\325.l\275\376\275\204\274We\277\274\336\374\312\274l\"s=\027=<=i=\022\275\327\026{\275\2068\314\273!\035T<+\235U\274,\251\303\275\222\246\026\275\r\3274<y\206\371\274\331 \310<TQY\275\223m\231\274sT\217;\330\242\257\274O\022;\275\375\200y\275_(\240=\355\013\030\275\262.\022>~\317?>\2402\256\274\014\"\307\274\270\003\177<D\326\264\274c\010\000<\351<\002=\016\307\025;\306\315O<\313E;\275\21327\275\213^\340<\241\264&\274\014\001K\275l\327\306>\247\221X=\005\230\216\274b\366.;\223=\343=-\356\244\275\273\362;\275\024\035m<[^\304\274\242t\376\274\taM\274\207\214\027\275x\255\r\275\357\317\224=\332RV\275E/Q\275^\362X>\037\330\034=X\311\023\275z\217\200\275\227T\005=\265\244\211\274\304>\202=\005\227\236\275\023\223\262<X$\361\274\304\266\265\273\277\362\344\274\032\275\200\274\232\374\004=J\216\354;\036F\003\27520\253\275\347pN\275b\376c\275\315\315X\274\274\304,\273\213}<\275GE\207<\352D<=+\014\231\275N\231\010=\201\245\016=\212\204&=\353W\316\274\r\331A\2752\0213<\365\205\363<\337\357\264=\024\343\216<7.\031=VZ\376\272\251z\220\273\311\342\225<\370\262\243\275\3622\240\275\331\"\302;\213\242\000\275N\232\350:\376N\031;\277\346\037\275\242\257\034\275Jx>\274\337\334\320=K\242\022=\376\255\351\2746\204\246<\363/W=B\250\353\275\330\322w\274=M\376\275\3342a\275\207N\300\275\2141Q=\314c\232\274\024\322\372;\212\207\364<\352\221S\274\t\357,=\257\332\232\274B\177\025=\253\360\022;OR4\274\321\333\004=\231\201\377<\330\2639\275\340\266\235<\034\002;<lz\334\274`\2747\274I4\005\275l\245H\275\220\237\033>\\\350\306\274/N\255\275\023\017\361\273\257:\037>=~\311\273\364\261J=\200p[\275\243\036\365\274y\032\310\275\266Q5<\240\233\303\274/Z\235;\036\305i\275wZ\210=\306\017(\275.\177\016>\r\261\232=\337\202\231\273v\342H>2P\021\273\334\217X\275\024\010,=\000\017\"\275\314\344\276<X\305\034=$\233;\275\3408\222\274\013\2257\275\256\335\212\273\031D\256\275W3\003\275\227\307\227=\253\007I=\365\327<\275\316\215\266=l\234\203;5M\234:\317\'m=\307A\235=%y\316<\364\222b\274F$\005\275K\024\214\275\327\367\025\275\302%\016\273MJ\224;\370}`=i<\220>:\025\004=n\020~\273\010\030.\275\221\221F>8\0346\275\301\201\361\274\331\255\005=\200\034T\274L\217\204\275\332Y\005>}\223P<\353%-\275\322I:\272\311\347\351<e\214\244<\257\027J=\323U2\274dn\242=\345h\221\275\205\371\304<m\377\216\275\262|5\275o\026\264:\304\334[>j\306\201\275d83\275~!\'\275^p\033=\260Y\257\274\254\320L<D\227v\275G\252\363;\345>\246<\324\211\215=\276[4<t\235\351<\346\240)<j\350I\275\243\252\357\274\376\220>>\341\247I\275>\356*=2\336\314\274J\352\210\274~9\2557L\247\201;\306\001\327\274\005F\357<;\377{=\'~\250<U\032\274\273\030\223\360\273l\300\365\275q\333\230>\300\212\277\274\347&\276=\010\270d\274\274xv\275\334j\333<\274\022I\275\005\200\t;\250\272j\274{*\323\274\3449\236\275G_\311=pU\344=4\236\346\274\256\366\244\274u\023\037=8\367x\275\021-\022<\354C\263\273\247\206\205=:\255G\275\216\352\006:E\246\007\275\321S\257\2750F\217\273\236O\207=KG\n\275\354:\302=\364\352\272<\010x\357\273\271\340\020=\275g\332\272\236\257\337\274DI\264\275\232\212\345\2759\310\017\275>\317\306;\021=\260=\333\301Q\275q\210\013<\336\204\021\275\307\231P\275\023o\315\274\243\nB\275\257S<<L\366\370\274d\034\231\275ZG\233\275b\213Z\275\203\207\353:\023\007\341</\361\340\274\215L\263\274\370\032\\;\0131\374\274A\304\034\274(7^=\010%\375\274\327S\021=\375\314\233\271\014\276,\275\026\263K\273\256G\277\275\223^\214;\257W<\275$\326$\276\2305x=\014%\217=\256\217\253=\n\331\243\2742Q\214\274N6\226\274\017f\334\273\273\237\242<\302y\373=\321\267\370;\013{\240\275Y\2338=\nB\245>\303e\240\275^\272\020\274\216\266.\274\r\010\352\273\312ic\275\203Z==\031\230v\275|\217\035=\306?\322\274\370\260\031\2758L\246\275\307\324x=\253\014\230<5\322\341<\301\216\033=\0376\256<\256\231(\274\206\230g\273\037\001\324<\256\023T\275WA\330<[\211\007\275\374\334\000>\230\014\203\275\034s\332\274\3175\271=\021Q\263:\312\320a=W\036\265\274\201sj>\177\'\267\274\236\"\335=\006\235\021<\254_\306\274\216\230\204=ve\273\274\344\007R>c\3032\274\2122\t>\036\264\307\275l\246\205\275\313=\330\275\025\220\311<\215\014k\275\243\244\375\274\265\233\006\275\351\025\315\273\276A\327=:5#\275\275\265\212\275\353+==^\246g<\362M\255>\036\244\361\274\306\360\266=\264\020\017\273\264KG\275\031\356\001<\370.Y\274\020\372j\275\223\177\337;\030\031\341\274\355Z\252\274\005-&<\303\216\266\2730G\201\275|b\243;=`\246<\313\360\322\270\353\254\212=\217\027c\274\227\337 \275\031\006W<\357\242\347=\220\210.\275n\034\233>4\266\314=N\253\330\274\373\231\203\274\000\236\213=\333p#<\026D\271\273\214\007!=j\315\000\276\303\260\326=\242\027\352\2742\262F=J(\004=C\332\231\274\035<\025\2756\301\365\274\355vS\275\360\202\027=)\014\010>\013\265\366\274GC)\275XiT\275U\252\203\272/$G\275\370\2524\275a:$:\3224H;(\n\032>\2054\300=\303X\312\274l\304\036\275\220\366\030=Q\270\r\275Kt\351<>#\264\275Q`J\275\322\247\002=S\n\016\275\232{A\274\341\327\035\275f\247\204\275f\267k\275\304\203\226=\021\036\245\275b\366\232;\360t==\253\n\262\275@\025\335<m\374[\275v\331\003;\370\257;\275F\356\251;`(\271\275\351\005\220\275\306[0=\313\367\253\274\367\177z=\251\200\205\2733\376z<\214q\224\275\033& <\357K\364\274\205\206S=\237\324\020\275\302\212?\275>\323v\275$8\026=2\231\325<\277\362\234;\246\027\246>\314\257\006\275\207\304\212\275\327mP=\033\033\322<\0009K\275\032GW\275\223\032\034=\004\376\261\274\354\362w=%\344\324=\353\032!=o\035\001\273p[i>C\261y>\243\327W\275\260\236f=\374\017\225>V{Y=\210\223\221\274\330\246\351<\362D*\275\243\033,\275\362;\363\274#\261\021<\360\351\225\275v\364\016=\365\"\037>\337\321\310\274\231WV\274\210\2250>\305\021\224\275\200\017\352<\215\367O>cq!\275\275]\010\275J\214\t\274\356\3001\275\365\035*\275\306\030\351=\310<b\274\020(\313\274CN6\275\257oO\2758\373#\275\306\317\300>\233\007E\275d\\\256;>\325\277<\n\350\264<)\246\262\274\312\246\243\275tG\376<o:\214=\2475\021?F\000\r<H\3074\274\327:\230\275\204\022\245\274\232o\360:\202p\264\275~\214\017\275\334\213\022=\352L@<\213\327y<\221n\007=\024G\035\275\355\306\034\274\202\376\\\275\317\035G\274czs\274f\320)\275\354b\014\274eyy=BB3=\210\030\206\273;\002\306\274\250\014\205<\'x\235\275\024B\004\275.\341\235\274\367qs\275\227C{\275NR\357;dO\312<\356\031\'=\255\210=\275\004\206\325\274\201\200F>\025\213S\275\236\240\270\272<\001%\275\037\363\346\274^\324\266=t\200\201=R\016\230\274\006\250-\275\014\323P\275\252\314w\274\253u`\275\274\320\217\275\033\213\360\274\327M\224\275\203\243Y\274\375/M\275\352\242\243\273\354\257\346=\t\326\254;\251\3625\275\256\220\205\274O8\220\275\366\225 =\006o\246\274W\254><\333&\315\274\177\273\023\275)\021\372\2735\004\230;n\034\037<e\207\005\275%\304Z\274\005/\001=\005]\243\275d\361&\274\300h3\275xY6>\355\377\220<\373\010p<bl&\275@\355\266=\200\240\221>(e)\273\271\202\214<\245\372\355\273\006\007\022\2750\032\310\274\347\376\226\274\225\344\024=\017J\030\275\376D\226\274\020\210\017\275$\030\266;\354M;\274h6w\273U\240R>\373\334\\\275\300\376 \275\371\362\236<\266\254\005\274\262\376\014\275V\365\016\275k`\t=a\245\003=P\034O\275/\354=;\260\315B\275n$\033\275\315\317\313;\344\337n\274\035\304%\275\330\207\302<\261y\241>\206k\203=\236t\357=H\224\312=\233_\002\275\270\000\024=\035\027\337\274\355\217q\275A!\2779\320\031\236=\261\010\216\274h\035\227=\323\211}<M\330\200\275\333\233K=\213\332M=\033\036\352\274\377UH=\343H\237\274\365/0>mP\265\274Kj\030\274\205\353\330\273\007\354|>\266\350\272=Z\021|\275c\257\315<\357!\303=.\216\210=;\363\000\275\372?\027=7\264\337<\0065e<|o\324\274\314\2017<X\300\250=j\r\376\274\367y&\274\316\317\216\275\306X\037\274\207.\223=\n\3653\274\376*)\275v\266\327=/\317P:t:\257\274E\215\303=\033\221\240\275?BD\2757\t\200<\330 \242=\306%\327\275xA\022=u>\227\273\234N\221\275Q\023\232\275J\233q\275Sn\353\274w\327K\274?A\223\274\013\370h=\310g\261\274\270\360%\275/\335\254\275\323\264\2029\343|p=\254\037\211\274\227\204\201\275\000t{\273\237#\007\275\305q\253:9\343\263\273\232\277\";a\013X\275|\226\367=&\t\200\275\351\031\017\275lg\273=\316=.\275\357\334\254\274\003o\037\275\227\302\212=1W]\274\305\274\261=V\204\353=\264\0243\275\366z\033\275(\n\357=\377X\313;W\031U=~,\242\275k\026\324\274\036_\306\273\317QK\275\352\273\017>2\251\330\275U\216T\275\364\'\321=\225T\032<\315\225\\=\310\255\315\273\274Vk\275z\222\252=\232\367\036\275\215{V>\310\322\356=i\207\235=\321\364\362;#\347B\274\311\364;\275-2?\275;\370}<\035\241\037\275\341\341)\275d\213/\275m`\245=\305NS\275\304\300Y\275\3762\374=\0215\033\275\361\337\352<\370\036\346\275\257\201\024\275&w5\275s\026\r<s\004\353\274\rZ\203\272\244\237\025;`\205\022>H\242\227<[\233\021\275\215\335\006\275\325\340\n\275\n\0345>\370(\\>O\232\010\275\353\234\277=\320+\020=\241]\005:y\213\r>O\354\360\274\266\242\000\276\0043\204=dN\005\275Ap\222=\001\212\236<M\035F=\236\311^:\241+\264\273\3330\023\275\"H\255\273>\2343=\263X\000\274\222\254\212\274S<k\275\275?\006>\213\321\215\275m\177\236\275\205\347\244\274\353\005#\275\320\236\364\274I\374\251=P_6\275\201\256\304<1\227\354\274C\375==\223/\375<\r\020\274=\326\373\007;\201\034\326<\343\313\250<\3547\222\275\'O\242=\226p\275=\033\232\220<\235\214,>\230\345\265\274\237\237<>\253\307\250\275\352\266\376<&iy\275\204\363\233:!\224\223=-\rd\275\334qg\275e\376^=\313\214\346\274\216\361P\275R\271]>\273\331\036<\261\262\206\275A\241\354<Q.b\275u\240\273=S\013W\273\253\306\327\274\322\334\344<\351\036\002\274\217\303n\275k\367@\275k\232\200=vY\320=e\"W\275R\353x</\030\204\275\373B\203\271a-\320\275\344m\221\274\315L}\275\271\0311\275S\006\341<\367Gd>T\243\010\275\331\234\340\274\300c\321\275Ps\351<\267\362\364<Um\233\274\t\267\030>{\264<\275=E\346<\264\024P>u\035\217<\020\322\203:\364}\355;\213F\201<\347\373\221\274;\001\025\275C\3246;\032\265\312\274\0136\023<69%\275yy+<\327s!\275\255\230o=\371\370T=N\322J;\332$\032<_kk\275\026\352\311;\257\303\247\275|\n\263\273\360j\306\275N\361\010\275\017=\213\275\037\270\212\275\3502\316\273\r\243\242\273\323\3434\272v\263l=qA\n\2755\321-=v\207\t\275b\214\217\275&\205\320:n\362|<\220\303\257\275\340\031\324<mOF;\206\2446\275\355Q\232;8\234\303\275\201\241m\274\221\020\177>\225\332\221\275\276\276v:\377\230\r\274n\275\211\274V\272L;~\375\226<\312\323\020\275\310a\321\274\004\210,\274\246\365\221<7\320z><V\222\275\316\205u\275.\304\207=R,\251\275)\266t\275\360B\034\275\261\004)<-\206\237\275:\277\026\275\032\0034=\177|\317\275+\256\277\273>\256\014=\303P!\275\355\355\250\274\264F\202\274\372PJ<fj\017\275\357_6=\373c/=\352\225,\275\302\360\377;\320\234\260\274<\022\330<38\205\275\270N\255\275\326eP\275\020\374\031\275\222\031\207=\362\217\221=\373]\353=Sx\324\274;\261\340\275\024)/>y\332G;w\253\202<\tr\235\273(\036z\275\023x\234=\3646\244\274\031\360y=\227K(=\300\237\250\273\265T\325\273\315\200L\275\212(m=\371q\206\274\241\262,=\275\336\224\275\244\016<\275\372/\230\2746\336N\275\'\317\020\275\355;\212<\002\344\235\275/\341\222\274\252\314\263=\260\000\r\275D\005\274\274\323\246\"\275\234n5\274Gz\260\274\340Y\201\273\004\250q\274\\w\361\275\317\362\245\272l\006\020\275;X}=\023<:\275\372|\237<\023\257\365<\32587\273\204\310\273=\032\036\231\273\005\335\300<\275G\227\272\300#\364\273\312\201\204\274\223w\265\275\2274\205=\237\373^<\220\341\320\274F\270X\274\\\277s\275\200\373\251;\221u\032;%\335\211\275Y\304\253;\000\232\007\274\213\303\257\274\350ds\274\220\374!\275\014\317\3058k\037\000=\337\305L<\336$\037\274O|\366<\2018B\273\331cO=\024u\322;\007!?\274\351\354D\275\327\366\320\274\005\305\222\274\263\\O=\364}\252<[\262\254\273\245\000\330<7aq<\236\t\0168\010\266A\275(\371V\275\037jM=\355\321\034<\014\3755\275\356#=\275\261\3607=$\316\311<\027\033\240\275\'\271\277>\353\341 \275\210p};\354\250\033\275\200\235D;0H\260;\316\360\256\275\003\342\271\274\353j\220=\250;#<-]\210\274\260?\335;\211\240\225\275\216s\177\274\007\300$\271\215\330\330\273y\254,\275\320P\346=\377\241\204=-n\003\274q\236\232;\231\363^</\340\243=\374\000\032\274\257\242*\2750|\213<0\272\210\274K$g\275\'F\256=0+\246=\242\372\221\273:\320B<\234\342\344<\226\031u\275T\r\264\274\215\177\030\275\375\376\213\274\373\006\244\275\007\364O\275}\367\270<\227\314\261=WbI>\232`\204\275\371\245|\274\353A\024\275z\213\205\275\r?I>R\336\375\274O\346=;\271z\376\274\264Y\255=\202c\"=)pP\275m\277o\273>\255\"\275\343\247\222=\274\256\201\275\323j\242\272\310\273\357\274\305D\364\274S_\220\275\264\257\315<^\037\364<9\177\211\275\\t\256<\305\2476\275\300\311\245\275\305\235\r\275\266\307\201<l\261\301<50\030\275\222L\275<o\234g=H\324\271\274\0277D=\224\034t\274\010\242\365<w\215\004\275\371\301:<\235x\335:y\333\216\273`;4=|\371F\273\000~b\274?-\350\274\311\213\214\273\334\320\030\275\344\306\335\274\341S1<\2570\347;H\215\353\272\200D~\274\231>4=\370\315\277;\366\222\016\275x\327\310=\277\312\252\275/6\324\274sG\027\275%\365N;\226\2523:\315\001\346=5n\313\275gr:=\322\202\355\273\233\364\271<\\6L>r\366\235;?\376\024=1\"\274<a\321}>\253\037\247<\313vo=\rZZ=\263\267\036>R\\I\275q\243\213=\263\236\215<\330\335\247\274\024\2561<\332\244\007<\007\035w=k\261R>$IF\275\312\356\224\274\022\240\\=\360\373\033=\267\240\332\274\346\207\200\275WV\356<\332:-\275\022\332\361\273\302?J=\331Op\275\356\t\217=\003V\000\275\265\235\t\274s\273\202>\216\374}\275\367NG\275\177\200\'\275c\304\312\275G]\250<\302+t\275>c\204\2742\031\205=\3220\211\274\303\275]=\227\203\027\275\262\274\203=H_->\371\316\377<\217\332\203<\026\002R\275\201\273\325<q)\005\274\025M9;\220\272\316\274\236\361^\274\212\340\231\275[\370\206>@\n\272<nHD\274\370\256\227\275;\323\230\2758V\014\275!U\333\274\222\242\371\274\372\t\215\275\177Jo\273\227\266\336\274\223\343\261<B\034\255<\243\035\204\273\301\232>=\341Z\220\273\026\337\365\274@j\253\275\236\203\032<\364\260f\274^\2136\275@#c<\033N\n\275\021Q\r<\027\202:\274\240\037\275<\tb\251\274\312\334\313\274\274\002@<l\322;=\374J\206\272A\177\201<f]\223\274\356\3727\275>\220\202\275\234\221I\275w\034m\275\004\'\304\273;\340\277\2745\023\336=\200\361\301\274R[\230<ls\'\275\020QK\275S\205\000\272)X\235\274\036i\010\275\213\177E\274Y\264\036=_\332a=$\201\205<\320wT\274f\366\232=\353\276\202\274\305B\205\275\\\235\370:sX\334<\363\324E\274w\355J=^N\323\273\372\007\252<\306H\247\274\204\347\362<\351W\234\273i\245\305\274\231\022\245\275\302n\234;c\002\022=K\1774\275\2761\331\273|\035\022\275\250\004\016\275\355\373{<\004\304\343\274\rPd\275\252\024\000<\312\217~<\356/6\275\222\304\2409\344*\302\274\177\263\036=;\322{<\357\027A\275,\326\037<\010\335\261<x\254\332\274}p\033=\351\346|=\320=\344\275^\221\273\274\334\345\013\274]~\236\273\251V\032=\240\300#\275;\213z\275\237\031\347\274l\357\251<n\211\003\275Y\255\201>\037\233\035\275\030\020\214\275\035\226l\275\260\327\270<\324\376\313;A[\201=+\330)\274o\255\300\275|\337\001\276\335\361\320\274\351\262\022;qA\255\274)\262M\274\034D\355\275\372y\260\274\033\026\201=\201\273\252\274\230n\241;0i\257<\313\337\224\274z\r\032<\376\032E<+Vd\275\nd\n\275e\223\010\275\366\203\214\275\"&\020\275\355\275e\2749\023\006=N\306\216=\272B\"\274Hu4=\013\201\305=M\031\310\274\236\034\002\273ji\017=\246\300\211\273r?v=\340\366)\275\301$h\275\330\213=\275\223t\266\274\020GQ\274~\266\212<\355\245\024\274\373CD\275\366x\246\274\254A\335\275\203U\223<\312\206\212;\360\266\207=X\020T\274\376z=\275X\023\205\275I\036\245\275\361%\006\275\351\242i\274\030\324\256\273S\\=\275}]\365;\320-0\275G:_\274\301\004\346;\017\rc\274P\351\240<\243<\032\275\231\375X\2755\177\366\275\303\313\200\274\353V\205\274\213\365\036\275P\017\242=\210?\021\275]]\220\275Eq\020\274\017\030\027\275r\276\037\275xE\235=\322\366[\2759x\254\275\275:\236=\021X\237\274\315\305\234;)\014\217<\035\231\217\275e\223\212\275\232]3\275\237\313,=\020d5\275\202y:\274\301}A\273H\357;\273\221gp\274\261\371\032\275\305\t)=\313\264\312=\360\312\347;\375\266\243\272\333\307\347\274RY\266\274/\366<\274,\235\344:\"\0148\275Q\\\321\275\316\317\202\274\r\005\007\274\366\306=\274\312t\231<\233\346\253=:\346.=\324{\212=V{*=\312/w=\n0\245;\373\321$=\023\301\272\274-py=\330\211\352\275\t\221\010>qn\331\274\266\237\016\275\345\t\261\275\245q\220\275\276-\304\273\343\0300\275\375iy<\031\202\261\275\352\t\277=\366\227\031\274\023?e\275\353\021\211;U\322K=YSY\272\2148\333\274\364\231V=\214\274\320\274 \234\r=M&\230=\361\252\334< +\205\275\272\225\354\274\370Tg\275\260\032\377;Y\2403\274\375W\364<\250J\247\272\317!\235\2749\344N=\225H<\274\235/\263\274M\240\t>}\031\003\275\023\257?\274\r)w\274f\272<\275+n\256\273_\357\330<\333N\315<\262\326\244<\243\331\027=\007\321\017;\345?==\203\340\035\275\377\356\033\275FO\017\2751e\237\275\"\177\361=\'+7:\363\257A=S\351\021\272 \006\005\274>\210\267\274\221\305\303\274\252~4\275\251g\014\274\311g\333<\306\224m\274\277s\272\274\205\335\222<\203!3\275\377\205\211\273b\266\303\272\240\376\376;\355\026\243<\242\345\030\275\270\017\224\274\262n\314<]\347\253\274 z\";\357\235\025>\360m]<\247\357\t\276\226Y\027\275\270lF\275\270BW=\245\216\030\275\333>\031=\242\tt\274\242/\306\273\026\364\375\274\235\315!\275\333\226r\275#_\021\275\304\230\336<,\341\016\275\354\'\010<\307\230!\275\321\364\251\273\357\303\206\274\317\010\333<h\274\\=~\002K>\3007\023<\336\247\236=A|\000\273\363\206\300<\213\244==\256\313\330\275\2604\343\274\006\304\226:I\271\225<\361rl\275+Z\350;q7:\275\023\343i\275\210\340V\274\202\355\244\275\233\327_\275WV:=9\027\300\273\251\001?=\220\255+=\331\361\000\275\237;[\274E\\\210\275\226\355\3559F;\233\275\301\374\263\275\346\310\316:\216s\265=\302\377\265\273\226\r\272;\321\373~\274\302\350\022\275h\225\205\275#T\201\275\"7s\2757l\300\273\264\370M\275\372Or\27436\030\275\030Es\273\326\315\302\275oj\302\274\030\035\026\275\002V\332;\202\247\347\2742\327\223<\253\252\241<\235\252\260\273~\373?\275lY|<\274\366\343\274\363\314\\=\241\235~=\006\026\247\273U4\331\274}\376\207\275\037L\253\274\261\017\273\274\025iS\275\014\371\247\274.\327\302\274]G\370=\016Y\004\2752\363X\275\246\346M<R\2302\274?\254\021\275\313=\207<\350\305T=\022\252\226\274}@\023<\215\324\277\273\233\275[<\020\306h\275\241\240\270\275\ri\353\274\277 C\275\025\213W\275$\256\347;>cV\275q\200\320;l\200\026\274\326n\372\274;5\360\274\271\\\235\275\230Tn\275\343\027\350\274\261\352\360\274.\254\377<\231_\202=O\222\340:~\250\031=\233iP;\241x\213\273g\311\200\2758\217\264\274\306\037\177;\3502V\275k]\260\273\036\241\350\273\316\362]\273\365o\210<\230\030[=)\222\327\274\346\344\211:\252\360\346<\223\324\034\275#\336\244\274\324o\177\275\342\304\307\274q\351\t\271\215\336b\275\375\234,\274>@)=re7\274L\363\003\275\372\341\357\273\270\245\007\275\231z\246\275\312\272\001\276>\325$=Q},\2754\367z;\007\007\361;o\210\241\274y\203\224<\220\231\216<N\266\327\274\217\005=<*F\200<!c:\274-\336\203\275\201\200%\273\0024{\274A\031:<lT\'\275\255\3406\275\300\353\206\275\177\256\230;\362}\000\274\2247\032\274}\375\263\274\206Z\227\275\372Sp\275l\256\241\275\336\350\001<\262\340\274\274MDW\274\235\336\026\275\232\242\230\274\376\234\244:\025\241\246<\340\2709\275\235V\017\275\363B\232=\377i\264;\247\264\277\275\315\356g\274\025a\216\274\314\353\226\2753\n\302\275[\240\n\275Z\204\265\274\026%\220<\215S\307<X\303\020\275\256\277\344\2731\300k\275L \357<6\002\263\273\353\313 ;1\004\362=\316\247\217\275\032K\247\274\035<7\275\327V \275@\t\022\275W\242\343<\365\246P\275\023k\264<\266>,\274\274\242\032\275tk\262<\266_X\275\332\266a>\022\225\351\274I\t\341\274\210w\"<\237\272W\274\356o\'\275\255?!;\234\253\003\275n\031v\275\336\014+=\255~\325<x\270<\275\323\371\203<\311\320O<c\241/\275\370*\023\274*\220T<\"\364\004\274\357$G>\025\244\356\274\016w\"\274NS==\202\034\374\274C\315\311\274UO\001=\224y\213\275\312<J\275\237\243c<\213\3070=\226h\363\274\201e\024\275\370FP\275\014\321\r\275y\0333\275nC\006\275\306C\201<\365\'\267<u\313#\276\037\252\016\275\272t\020\2752r\275<\277k\335\274\346I-\274\2516\240<24\360=\350\213S\275\267\314\220\274\263\323~\274jk\233=\253\3326>0\345\000\275\261\333@= C\021\275\346\216\336\274h\250\322<[3\371\274\251\257\230\274\357!\231=\024\032\037<\277!l<\265\025\017\275\024[ \275\214\330\275\274\327\235\335\274\326\277q=\2601\204;[\2716\274DRg\274\242\224\215\274\331w\'\273\331(H\274\365\332\025\275\025\237Y=\273T\327<]\334\204\274\337\201\306\273\271<\254<\266y\275<\360\214\204=\013\355\344\274\267\257`<v\017!\2756\257\231\275\267\'\246\275\017\246-\275\376p\213\275>l;\275q\331\244=;\363x\275Q\031Q=\021.\250\274\004r-=M\334&=\031\257\342;\013GZ\274P\361V\275~O\262<M\217z\275X\327^\274\222\256@\274\003\227\030\273S\367\254\274]\335\025=I\210_=x\273!\275j2\030\275y\310\227\274q\372g\275\236\203p\275\346R\300\272\265\020\321<\241,\227=I\276F;fU\\\275\300\314\267\273\225\323\202<\213\"\177\275\367\356*\275\013\317O\274\336\241\232\273\303a\245\274\202\357d\275#\262\375<Xa(=\002a\320\273i\321\313\273,{&\274\265\373\2719\247Zn\274\023\2533\274\263\224f\275\036\032\214\274iB\326\274s\315D\273\000\332@\274\247\267\004\275v\366Y\275\005D\243\275\250.\277<\270A&<yQ\371<\234T\327\274\033\326\001\275\241\217L<z\256[\275\\|\335<#\333\223\275\276XI\275\'3\223\275<\013\213<X\361\276;\257\211\233=am:\275G\351\360\274[\207+<\246>\376\272c$\246<o1\006\275\221\270h=\240\177\234;\322\246\237\275\240\016\177<\'\n\356<\3016\251=Jbk\275Y\241\003\275\370.\037\275\325\301\244<|\343\354\274\2127\341<\237\035a\275\221r\364\274\t\235e=Sy\211\273,\002\276\273|\363\025\275\357\366\247\272\270^\232=P\325\346=t\355\223\275a\360\034\275S\207\240\274\327)\004\274@C\303\274\232\256\352\274\354\247\005\275\266[\264\274\266\204\323<LP\316\275|O\035\275(\366\254\274\267/\323<\371\273\"\2758i\356;`+\022>\334\232\002\275\371\017\000\276Z\020\235>\363wG\275\003\315\237<\247\352\276\272\025UX\275\273\244\315<.\301\t\274xP\306;\355E\311\274\034\203\233<\353\326t\275f[\020\275\032\337\376\273\322\227\206\275\370+\205=\366b\277=[0\\\275\360u3=\270\361\205\275\210\231\344<\266f\204\2758\005\211\2746\022\001\276M7\241\274\345p\352\274z\0044\275\250\032\004=0(p>k\234\004\276\025\343N\275b\331Z=\226\332O\2752\210\225\274\347\3435<\242\222\034=K\3425\274\313\036\266<\361\002\023>\352\246_\275\334\303\373\274q\001g=\365\257\242\275\301\354\244=\374\307:\275\332\213^\275\321\244\362\274\0144G\275a\\ \275-N@\275\352\375\016\275\242h\357\274\373MQ=Q\235\213\273<\034z;i\261\201\275H\243\250\275\343\027\312\275K\212I\274\350Z\222\274\r\306\201\273\256uq\275\036\273\007<\247uz\274:\370\307\274\263mS\275\000\340T\274z\227\212\274\230\004\207\275\347C\217>\350\262\320\274\213D.>\2654\256\275E\352g\275\306\216\000=`\177~\273^\206\302\274\333\343\202\275\242q\r\275\014\372\004\274\370aU\275\3167\021\275\264\371\364\274C\"i=M\323\t<\333\351\300\275t\261l\275\347\354\n=V\216\332=\023t\274<\034\374\243=\251jH\276vQ\013=?\0071\275\271\006\203=\332\246\216\275K\2121\275\035\214K\275\216\340\221=H\232\214>2\323\351<\033\352\202\274B\013\222=\245f\346\271@\204\256=\302,K\276\236\'W;\363*\323<R\332L\274\277\014\021\275\035v\024=\313\2268\274As\273<\241H-\275\275\263\322\272\033\2667=\002:\237\275\330\266\021=j\264a>\264\346x\275\243\027<\274U\361\n>MH\321<T\010\001=!\223\203;\363-\323\275\337\273]\273\236\234\202\273\232CF\275&\310\222\275\335\334\202;x1\306=\227\317\344=\262<\264=2\320\005\276\342\227\360\274\022\372\236\275=\242\n\275\274N\313\275]a\343=\263\325\224\275f{\016=\346yp=\204\221\345<4\244\263\275\3568\250\275\276f\326\273\232\277\004=\324*\373\274>\302\275<\206\3503\273\020\030J=\321\276\364;\005\337}\275\023\303m=8X\224\275\022\366Z=$\321q\275\256\370^\275\027\374Z\275\273*D;/\177.>\177\245k\275\',\002=q\210\364\273\260X\263\275\345\317\026\275h\256\246=\003h\304\274V\021\363=\r\373\003>\355\013\033\275\260My<D\245\\=\373v\252\275\363\346\016>^\346G<\000\303\312<\376#R\274\220O8\274\236\360\334\2740\314\231\275/\373\211\275\250\335\353=\244c\344\274k|\304\273`s\202\275eFH>\355\214\025<[\266\023\272JR\250=\014\344\216<\244\377\025>\276V\025\275\200\240\347=\354\262\031\275\202\\\303\2739\336\017\275\2357\260\275\220\352-\275Z\342\316<\244!_\274Z\031\333\274^#k\274\r\340;\274\361\211\301\273\020\310Q\274@\320\274\274\221\340\252\274\376\244R=DM\201\275A\263\251<i\235\017>\311H^\273AD:=\300\355&\275bo\325<\377\322\225\275\343l\211\275\376\363\240\273\0304&=a%\354\274\233@\235<\334\321\372\274\267\t\022=\211(@\275\326\032~\274\211\267\273=\327\271\010\275\001>j\275\271\220\234\274\360\357\276\273\301\177\353\274\2231+<\337\245\013\275\"\307\217\274\016g\006\275\216\355\215=\016\220\246\274\240<\210\275\203\301\016\275\265\000\213=\243\272Z=\315;F=\311\340\215\2733J\217\273\357\006\3138\201K\211\275\201Z\215=|\246\017=\356\233\227<\377\272\274\275\363\022\320\274\217\375Z\275\352kO\275=\263<<>\306\371\274\223\322\334\273\323\317\014<\311\362\032>h\275\242\275\356\365]\275\322\243\206\275\373f\007\275\302v\000\274M\316\204\272B\241T\275t7R<\344>\205\274;w\315\274qN\210<\020\212P=+.m\275\364\262\007\276\314\374\302\271jZ\020\275\"`\312\273O+\024=\014B*<\023\246\206\274C6`\275\314\364\013>o\225]>\237\225\031\2758\267\210<\006,\024\275[}\007\275\257\257\025\275\314Z_=\324\212R;\213\267G\275\225\371O\275\255\255\\\275\314\202L\275\326\342\031\275\366\274\246<\'y\221\274\371R\014\275\206\205\312=\361L\n>\261qO\275\n\000\n\275\n\023\300\274E\356\213=\261\354\005<\255A\031\275c\262\017\273Z>\266<x\375\372\273Q\335\375\274K b\275+2M\273\375\310\273\274g\030\216\274\252\320\343;k#\002\274\332\243\255\273\336u\342<\347\262x\275\342J\310\272\333\024Z<\250-\216\275\334\224\030\273\361\352i\274\233\303:<\347\'N=\260e\201\275A7\336\274\017\257~>\016KE\275Q/\331;\006\000\366\274\346\377\003\2750\206\321\274\355\327#=\205\026\257\274\235\013\r\275\257\242\310\273\206z\260\275-]\220<\367;C\275\3567\024<)^\365\274:\177\330\273\263{\206\275\2278\020\275J\004\216=\311\300B\275\372\330\301<y\342\022\275\241 \035\275\030\005\343<\214#\262\275\220\002\232=\326\244\027\275\223\271:\275\013\207\303\274\353W\022\275\235p[\275\264\253\370\272\340+\'\275\037\270r<\375l\025<\201F\350:>\315\360=\325] \273\337@\274\275O\276\226>\365\037\37790\353^\275K\337\035=\310_\034;!D\327\274y\r\017\275\334$\242;\330l\035<nA\222\275\216\212\343<g\'\"=W\006\220>\030M\003\275?w)\275\347\244\235\271P\227\021\275\371\310\205\275l\000b=\254\266z=\202%\033\2752\244M\275\007U\243\274\261x\240;\217#\023\275\226\036\375\274 \347\024\275=)n\274\327\324\343\274\023\327-\275\261r\261\275\313\343\366<\251\205\210=\230\237\207:N\017\275<\214\246{;\324\336Z<\232\337\r\275}\017k=\262\331<\275@%\035=\206\017b<\230c\200=\235c\247\275m\023\202\274\364\265\'=\277\336\242\274=\343\237=^+\037\275\34771\275\371\255\254=o\270\217\275t\223!\275\'\010\177=0\3401\274\225\247\313\274\254\223\310\273\3245\017\274o\340\270\275(\371\000>\036#s\275\036\306p<EI}\274-\326\214\275\372`\354;m{\205\273LP\006>\374\254\201\275[\017\314\2757\260`=A\276Y=\013\350\215\273\335\316:=v\237\220\275\036\200}\274\177/l=\316\337\216\275\371-\001\274Y\035\217;l\016d\275\203O\3118]\001\330\275Y\375\274\274\346c?\275+|\257\274a6U\2753\320\237\275\302\225\304<\377\232\'=\330\365-=B\234c\274\373\t\230\274z\370\306\273a\000<\275\360\220\017\274B\350\273\273~\222\340\274,\3556=\235\314D\274%\017H=\004\226V<\205\251\024=\352\030]\274\206\264%\275\304\327\031\275Hh\353<%\021\362\27428\275=\23716=r\030\001>}\313\345<\003\r\260\274\021s\341=r\317\217\275)\342b\275>\334R=B\365d\275\341\007}\2756M\336\275r\n\263\274_\221~\274/\016\301\275\370r\360\274\031\326\341<\374\371V\275\t(\254\274\333\t\216=\226\332A=1i\010=\376\250\341\274]^\237\274\277\025\351\274\233\336{\275o(\270\275\324\206)\275\332\374\005\275\215\351T<\030\305\255\275\237&\364;\002\250\303=\352\264\035\275\003\231\267\274\262\222\270:&\206h\275u\361\273<\330\022\244\274X~\216<\270\212i\275\342\274|=w\346\034\275\230>A=4\235\373\274N~4=ug\241\275`[\227\275u\030[\274\303\207\250=\030\022[=\244@R\275`\345B=\235\036R\275)#^\275;\346\310\275W\376W\274C\331\250\275_\017v\274\3674%=\251p\260\275\332\356\267\274\253;\220\274\352\263\221\275\352>\250\275\314\354\336<\3729$=\340\325\335=*Ux\275\255\014\341:\207E\221=\242R\322<\301B/\275\307\201\306=\003S\201=v+\251<ll\251<\263\002\243=\246\025\225=Z\017R\275\356\0061>y\244\t>\331\360\"\275\351Vh\273\030T\205\273h\016\302\274\356\177\360\274n)\261<^\300\200\274,\222v>\n]\243=kf\262<\226\237\030\275\232,9\275\374\324:>}G\212\275\034+[\274\272n\200\275\276\220I>\364\225\334:\267\311&>\210U\241>`\370q\274W\346\212\275\314\207\327=\242\340Q\275\253\013^\275xX|\275\313\261G\274\336\300\205=\206\314\"\275,,\227\273J\013\214\275\340r\023=\246\340\035\2750\231\010\275\370\353\261=\241\274\213:Q+9<\275`\323\274E\335\350\275\313g9\274\261\376\365<x\314\216<r\274\251\2731\367\201<\212y\225\275\r\316$;\321\264\312=\371h2\275\027\343\305;\204_\007<SBi\274\242c)\274\234Y\243\274$D\206\275\261\345\227<\371#u<\204\2049=\213K\036\275\245C\373<\236_@>\ns\375\274\377\276\370\274\347\231\034=\'\231t<\023\315\232;\257\232e>Q\016A=J\253\244\271\365\274z\274\243\325\372\267W,\255\275\364\223^=\261\370K<\244\204\231=\346\247\\;?\021P<\305\267.\275o\004\303\274\016)z<\307\266\360\272m\260\257<\203T\211<x\203\252=##\275=\373c\177\275=e\254:\n\235\273\275\006\247\255\274\350\320t\275j\301\232\274\000\357=;\364\215\035>\232\320\364\274\030\024\245\273\276b\330\274\0363\300\274\025\372\027=\325\016\202\275y\370\021:\003\206d\275\264a\257=H\177\206=n\177\032<K%\367\274AqD\275\302\217\226<\354\235\366\274\033\321n\274\330S\220\275\255;\253\273\226Y\200=\346\333\337<\246\306\370\274\004\361\350\272{\335\336\274;-4\275\034\265\222<\344\324\243\2749\357?\275\000\351\000\275\234\3047=?)o=\270\300.\274>\257Z=\305\002-\274yq\227\274\027\006Y\275\325\321v\275\206\370\210<\253)\250\273Q\035\270<{\351:\275]\271\236<\336\346\304\274D?H;\225]P;D\016\331\274\030+D\275\324\270\305\275\023\023V>\006\231\356<\327\371\215\275;3]\274<\3006\275?.0\275\305)\355;K\302?\275\344\255\203=QG\017=9\030X=\332|\203\274\306\214(\275P!\347:\327\271\267\275`Z\016\274\350\026l;\3316\301<T\227\252\274x\230\021=7\013\343\272\017KQ;\230\301\213=s\242\234:Y\377)<+\023T\275\324L\325\275\221Sp<\305\375\240<R\364\311=\376\303\230\274\335\364\034\275\317\2206\275*\026\220\275!Iu\275\261\3457>\215\347\203=\326\326\267<\022\343J\275\253w\215\275\301G\373\273%~(=;-\014\273\345\"R\274\277\306\355;\337/v\275\201\364\201\275\002\244\320<\004\331A\274\375F8=\2568)=!(\307\274j\354F\275\240\261\273\274\365\013A=Y\037\231\275d\276#\275E\312-=D]\t<\353q\361\274Y&\r\275e\272\006>\322\211\303\275_\347\323<[C\351<\023\203-\275\260\345\234\275w\205\235:\006\215\342<\340m%\275B\265\002\274bN\240\275\236F\206\2743!\024\274:\031\"=\372\3000\275\22721\274\257\013\326\274\212S\352;\374\244\367;\300%\231\275\006\334\311\274\213*\210<\026\326\033\275\247\237R=\246\225\002=!\213\003\276\003_\013=a\247\243\274\266\256\200\275\026Hw=z\367\355\275\313Z\010\274Q)\305\274e\0029\274r\3511\275\n\005,<\352\324\216\274\026u\010\275\356\360\014<\343\375\"<\304\350\357=\r;\203\273!\214\\\274y\344\204\274a\006I=4Y(\275\202\302\253=\215G\204=\306\311\234;\326H\315;\004%k<\224\021\366\273\220\271,\272\334\006x\275\364R\211\275\013\372;=r\220\246<\375-==^\306\355<>-\255\273:5\023=C\375\315\275\260.!=\002\367\r=\261+\001\275\253\233K\275\001\373\212\275\r~\376;\263\317%=\204\312\244\275\212\3607\274\364\235\305<&\t!=\243\220\207\275\016\224V\274\273\007\371\273\350o\243<\000hu=\323V\033=C\334Z\274*\305\203:n?\035;v\365\242\274\222\242\237;C\036\242=e\301\213\274\323\236\233\275\312\223\222=\215-\224\275n\346\257\275\014=\350<\256\221e=\300Z\221\275\244\376\246=d\001@\272\320$9=\235A\323\274\363\312\332\274\357,\303\274(\t\225\274\216\020\033\275\233P\243<\364\244W9\221\226:;K\242}=\325SA\275\367\271#\275\373BH=.\024\222\275s\002\243\275\002\365\217:a@\035\274\013 `\275~\"X\274gK\313<\366\014=\275#\373A\275C\345/\275s\324\233<\313\301\333\275\305)%\275\340b\213\275\342\355\240<=\212R;\262\234\247=OG\202\275!\220\206<\305w\002\275\310\031\343=\005\345\013\275t\221\247<g-<=/\220\213<\271\250\240<J\345;=\315l\217=\372\302\315\273)@\270\273>\223v\274\237o\364\274\321<\311<\224\251\215\275}\231\212\2757\360t<\317\200 \275\267\213\361;x\200q\275\022\226\'=\244u\206:\246\353\210\275\017\344\374<c;\217\275\327\334\240;\017L;=\331#L<\2011\211=\215F+\274!\223\214;N\302\344=C\322\202<l\215H\2749\033\023=y\331.\274\367\201|\275\372\004\276=\272\241&\275\\\364\222\274F\3253=v3\222\275\331\2307<\373Y\333\274\312\023/<$?U<{\031_\275k\035c;!\210\013\275\203s+<\360A\006\274\014\247\\<\350\376p>j\317\024=\370\226D\275a\016\253<\267\232\233\275\376\3421\275\362|\350\274\234s\013=:~\271\275?\016\211\275\243E\221\275\206F\264=\\\370\036<\032\203\202=\301\214\201\274j\010\312<c\365\216=\364\251\324<\316\rS>N\217\016\275\335\223\273\274%\036\236\275\030\354)\275\266\336\237\274\241\226\335<\322\367\007\275\273\251\202\275\242\365\220<\3743\023<\241\232\361\273\315\357\007=\":\312\2732\363>\275\330\315\273<\237\340h<\300\177\005<\212u\334=L\332\031\2750U\030=\273\324\252\273\211\023d=\257\355\t\275\251F\317\274\017\202\016=\001\232\027\275\025\2240;\336$):\003\"\007\275\026\223\016=\270\t\364<q<+\274E\200\274\274\276\264\030:\200R\365\274>\306\235=\251\033\240\275\375\352\014>T\344:\275\020B\310\274\203\335\301=\214\235\333\274\263~\326\274\r\324\310\274#\2618\274a\376\341:(\2766=\226\323\274\274q%\257\275\272\377\353\274(\245\037>W\321^\274\034Tu=>\237\344\273\206\253\346<\327\231\032=\247\031c<U\010\236\274\365\335E=@b\036=\253\034\217<b\0353>\005\010Y<\342\241(\272E\032\020\275\351*\373;\022\010\016=s$.=\013\370 ;\022\\.<\010\000\374;\371Q\001\275\251%\206\274$iG<\224\356\36678\177\003\275\265\001\311\274B\272S\275s\007\'\275Q\220 \275\032\225#\275t\027\367<\252\032\274=N\321`\275\330\200\205>\017\277-=\324\222s\275\241{\030\275\304j7\274\275?9=N\260\316\274w~=<\002\331\215\2756\201x>\376\204\270\274KI\010\275\010\210\314\2734G\206=\364`\201=c#\253<\264\313\236\274\234W\274\275\'H\341<\326\321-\275\364\373@<8 \201\275\000=+\275\007\013\225\274\210S\273;\3267\311;\220\265\331\274\305\030\253=\314g(\275\317\",=\345\233\240;z\017\327\274\241\330\006\275\360\'\004\275\243\025v\275b\222S\275\2011\2358\316\354\303<\003~&\275\027\301\210=\273\363-\275\360\241\231:\030\236E;l\022\242\275z\370\375<\020J\204=\272\362E\274^\363\250\272\254jq<\317\0059\275x\021\267<\244+\001\275/#u8\347\212\213\273\372Y7\274%\037\362\274.\254i\275X\032\216=\360\\a\275\307\210 \275\237^\312<\3179\250;\007g\235\275\255\231\204\274\210\256\202\275D\031\374;\224ZH\275\324\261K\275ID3\275\031\035\362\274W\3400\275s\032I>:\003\n\275\003\332\336\275\374+ \275\201\273\253\274Os\347\275j\005\272\274\010\371 \274L\224I\275\226\360^;\321\213\r\274I\351^=\371\303\350\274(\275:<\262\345\233<\307\007\213;\241\303->\010BI;\367\001\347;\275\rv=\356\247D=F&_\275\342\346\215<g\321\264\2746\027\005\275\246c\022\274\371\026\260\274\016W\340\273\0232\201\275\226\221\205;\010[C\275\007(\202\275\217\355\370\274\034|\2719\035\260y\275\364\023\232<\301\277\300\273\005\007\030=-\023_;}\231\304\274\343[f<?:^=\032<\005=e2\331<\3321\234\274e)\032\275\355B\256\275 dk\275M\344\330:\234\366\357<\013\037\005\275qd\235\274\n\355L\275\325$1<7\202\345\274\360\251\354;\300n\020=\315R\263\274\250\025>==\334\300\274\010.\r\275\332\313\320\274\037\327\375<U\"s\275\030\354);\266@\351=!\337\266\274D\035\352\274\215\225\377\273o(\014<:e\220\275\345h\351;t\276\234<\270\315\222<k\212Y\275I\277Z\275+fL\275\251B\267\273\374\375\233\274\035\314U\275\342\031\374;\030\212\235=\322X\250\273\240\267\207\275\317h\305\275\033\231\242\274pJ@\274ye\320\273b)\220\274\251Fw\275^G\214\275\345\236~<\362\"f\275vH\t\274\016\375\315<\010\265\227\275\311\2356;@2\305=I\037\244;\264\n\231;b\231?>\025+\033\275\243\304*\275\300\225z\274.w\344=\nr\332<\2634\303=_\\\354<\037|Q\275\272\267\022=\256B\204=\000\353\277\275\340\017Q\274\301\213\232\275,\262\335=T\225\232\274U\2206=\236\025\310<\251\266\203\275\216\022\274\275\277\221s\275\333\220\007\2759\271\016=T\246\236\274\005\227\230\274\335\022\242\274\237b\'\273\002\262\035=iI\003\276\025\341\243\275\304\351{\275q\306\330<u\346q\275\333(\223\2732\371$\275\341\217\262\274\301&\313<\253A<;\325-J\2754\360\267:N\221\351\274\264\2713\275q\020\274<\250\260\221=V\322\205\275\370\203\366\274\361LT\275o\200$\275\346\354\355\274t\001\014\274\312\260\270\272\031\222\361\274]\365\255\274\224\026\210\275\037\353)\274\376P\246\275\257n.<\336\275\016>\245F\002\276n\220\014=iB\344\274\005\'\264\274\217&\212\275\375\231\300\2747]\240<\3257\024;d\367\232<~\350\237\274\352Q\201=L\351\224\275\227K\030\275-\270\217<+\030\254\274\312y\213\274\000\006\335\275\010\375\177=e^\016>\000C\'<u\366\007=\234m\260<~9>\275\305`\314\273)M\271;\206\311\224=\315`\206\275\270\000`\275V\342&\275pr\334\272W\304\227\275M\324K\275\301\r\231\273\316\2617=\212\264\022=7\346\254=\024\177\212\275\227\236\234<\271\307\216\274\311\000N>\366\256\374<O\303~\275&O\266<~\027\n=\2210p=X&\003\275\024\236\260<d-E\274\002\355\027\275\206\267\2659\263\363H\275\305>\363;\016\3704=}\2378\275PZ\010\274^W\245<w_\001\275rt\312:\362\023B\275Ne\206<\021F\341\274\344\023\024\274\206I\264\275\3271\020\275m\340\201\275\255E\007\275z\265\014\2756\352\017>\334$\030\2759\262\\>\225f\355\272\'f\253\2743F\252\275\274\3046=\304R\212\275o\020V<S\341\016\275[J\375\274Es\261\274\036>A;d\036\303:\003\364`<\270&P<,\20229\344\360\021=|\324\253<\030-R\275\256\230C\275\t\365-\275<2\336=P\024\031=\306\327\212\275_\307M<\004\023O=o\250\212>\213\265\330\274\330\007\366\274\262\241\256:\311z\305\2747]\r\274x\013+\275\032o\201\275\006Yd\275\256\333\034;\226\023\263=M\2332\275\267=\206\275\252\263\017=e\211\331=\323C\231\275\177\352\030\274\237]\275\274\266c\263\274\022a$\275\260\027m\275$\022N\275\316\372\362<\235\022\206\274\331P\353\274,1]\274\030\314q<\000f\332;\242A\375<])`\275\350\246\212<n\204\241<\034h\005\275\263\004\265=\005v=>9\313\245\274\237\344\266\275\333\247e\275Ae9<\010?\231<=/\027\275\256\202\022\275\351{\376\273R\324\317\274\365\307g\274\371@\271<\2666\252\274\221r\344<gi\206\273\317V\226<heZ\275\345\240X<\006P\265:/\263\300\273\212\206d\275zq\031<0*\004\275\035\177\234\275i\243t=9w\005\275\331\221\005\275dr\036\275z\005\2429\331xD=3&E>\016\\\033<\370\n\235\274\241P\301\274\341\361{=\201\2720>Q\2131;PR\356<\364C\257\274\205\347W=(\227\330\274\306\300\241<\016Zp=\3670s;tQv\275\311\232g=\354\t\306\274a=\2449\313\373l=\031A\224\275I\334\215\275\305\223\364\274\241hH\275\375H\264<m\302\3159\361\023(\275\203<\306;\016;\260\275\236\356\244\274M\263\n=q\220\204\274\221\005O\274\362\026\250\274\335\003\271:\225\035\017\275J\013\252\274!\025j=\220F\370\274\001z\211\275\275p\023>\353a\236\274\3611(\273E\313\343\274\317|L\274\233\033%<\231\267\335\275Z\364\002>\034\006\331=\010\321U\275\300F\'<\316\300\226\275\250\361L\275l\340I\275\260\n\273=\226\214\251\274\225\343\346\274MSI=\225\221\263<4\311\321\275w\251\241\273\"\360\r\275kmi\2737\231z<\213\221#\275n\262m\275be-\275<bZ\275\364\214\204\275\314\021\371\274:\304\211=6\316R\273\350l\025\2758\320\240\275\22704=\226*\010\274\256[\307\272\370\304b\275\033\033\021\275\246K\250\274\212\367\210<yh\331<BGP<\205\223\026\273D\342P\275\206\333+\275\3207!\275\016\330\251\275x\350\201=\315=\300<D\210\020;\357\001\341=\330E\344:\262\324\005=\340\237\215<\275a\200<\035\3408\275\232\242\\:N\213!\275\200u\207\275\307\276\302:\205\177;>\257q_\274\250\202\255=\227\324\321=\265}=9\375\321.=Bv\311\273\263b9>:o]\274-\322G\275\335\200\021>z\375i=\206\262\036\275\352\325\200<l\010\016>F\333\312;\362,\277;!\025\':\372F5\275\327\007\001;M\262l\275\370`#\275\277\242\324<\276o.=\250\341\223<\217\004@\275n+R\275\245;\202;-\210\000>\365@\264<\201\227Q\273\236\212\353=fZu<8\307\247\2747\3228=!\030\224\275\330\262\336\271\223\035`>\'B\030\275W$\'\275\217\3074\275\360g\263\275\207\301\345\275\023V\030\274\360za\274:yl=\266\227K<\333V\200\274\361BO;\206\225\350=\2322\342;6?\037\275\241\007\231\275;V\314<\345\032\227=\235\302\255==S\204>\202X\017=@^\232\274\340\2636=\010^\002=MQA\275rR\023\274B\360A=\374\"\221\275hCo=\201\330i<\362\321\256\274\324sE\275Z\241\366<t\341 \2759\3662=\234\037\337=o\350N\275\324\370\310\274_b\022\275;\220\256\274\010\004\034>\211\221\236\275L\241\261\274\265z\226\274\222\321q=\221\237\023\274\300\325n;\032\205\351\274@+\256<P\"\226\274:T\216=\3214\367<\345\360\300<\023\271\262\274[ *<\013\037\304<\320\263\272<\311\025 \275\212I\316\275\025\352\265<\330\376\237<\035\355y\274f\216a<\251\355w\275\323\277/\275&N\016<\215\265\003=\361\243\030\271)\344\204\275\363\365/<\003t5\275\333\010`\274k\350=\272{\221\204<\251\261\303\274\313\226\266\274\333\302~=\346\303\321<\226\034\r\2752\0008\274yn\366<\261\255D\275\337{\207=\024\324F:\2053\024>\257E\3669\257BG=\\\314\201\275\236hT<\341\022\226\275\203t\344;\261\027j\274\317\230P\275j\216\235\274#\365\027=g\210\265\274W\261\310:r\356\035=o\210\367\273\307\253\016\275\227{\004\275\345]\"=\241\201H\274sB\202<U;\034<[\024\204\275\202r\276=\021B]\273\221\312\242<a\303\240\274\265\301\220=J\323 <O\366`9\033\351r=Y|\355\275\243c\017\2751x\330\274\021\353\313=c\245\241\273\026\231\336\274$\243\021=\264\263G\274\222<\327\274\014\237\255\275m\261\201\275*M\004\275\022\330\005=\355T\375\274\363C\005\275\311U\323\275\235\311\213\275\350\242\350\274\206>^\274\335o\301\274\267\001\276\275s#\243\2727\324\232\273\031%\376\273\022\341\272\2733+9\274\271\274V\275\376b\330<\032\217+\275i\273\237<q`R=\2206|\274?\302\021=\261\216\005=\270\030\241\273\336\324\223=\355\n$=3~\036=S:\260\274)\036\236;P\374\376\274\364r\232=4\006l\274T[\247=Z!\226<X\242,:6b\323<\017\244\243;\353\266\274\274z\362\035\275\330:-=\320\266\257<\244w\213<a\200\030<i\277\036=t&\257\271)o\226\272\353\021\340<\356M\214<\350\030D\275\251\036\231=\363\024T\274C\215\210\275\220=\244\274\003R\200=\t\360S=$\316\225\274k\363\332\274 $\036=\3425o\275\'\215\256\274\245\351\006\275\344O7=\\\252`\2755\242\316\274CZ\023\2756\325<\274a\332\001\274G+\362\274\356Z\3778\333\014\025\273sR-<\253\355\200\275\202\006/\274\037\213\233=\021\365B=c1\"\274\2409\006=\241\247\030\275\216\317L\275\034sb\275\tY\022\274\336\364z\274\347\024-=\204P(=<\314\"=\316\273\034<\036\346\341\2745.\255<\033\303\337\274H&D\2745`\224<S\254\320\274m\363\202\275\034\324\353\274M\351\213=\330g\004\274\371\262\202\274\274B\250<\244\342\n\276\320\375.\274r\374\025=\304/7\273 \r\217\267\000)h\275 \264w>\323|0\275\206\027\211\274m\004\356=j\034\355\274K\035l\274\351\205\021\276;\230\246<\270\002\006\275SF8\274H2\270\274\234\344\344\273\226\323+\274\230\246\367<S3\204=\370\345\021=w\315\032\276\357\004E\2759`\320\274.\246\226\275\373\324L\275\ns\255<\361\316\031\275~\006,\273\302P\030\273r\274\225;\017\004\277;D\356\034\275\274\356#>\232d\277\275\341c\234<\314qL\275\250}\245\274X+\024\275@8\267<n\334(\275;\357\246\274\276\260\220\275\257\312z<\320\324\212\273r\016\267\2745(\272;\373\354{\274T\364\264<_\263\371;N?W\273\226@E\275\254\024\014\275j\220\203\275\221R\215<\351\030\367\2734\361\230\275\267\0223\275-H\022=\355\240\331=\375\355<\275+rx\274g\014\337\274\336\236\216<-\2056\275\314r\261<\226\017\210\275n\226\245\275`\277p\275{\232\327\274,\333\021\275z=\n\273\273SI>,\320\260<\007\026\374<\224\310y\273E\272K<\226U\354\274\026wu\273\022\377\226\275\323\263\306\275\022\364u9)\332z\274>p\322\272\214x >\t\270\374\274\022\034\204\275_\262\364<Q\311\274<^\301\270=\373L\217\275b`\200\274#\001n\275)\035\354\275\032\305\222\274\r\317\250=c\2670\275W\216\000\275\245\033\337\274\314\350\323<\267[\220<6~\251\274\335L\216\275Cif\275\304>\253\275D\270U;\356\227\333<\241\322A=\312\254:\275\334\235v\275^\2430\275\325\367\300\274\323\270\352<g\267;=2\3423\275RN\315\274a\366H\275N7\216\275\350n&>z\223\016<\013\351\232<\252\255\005\275\262\373?=\356\354\364\275\007u\331\273X\032\324\275\213\211\265=\323\364A=#((\275\036\231\016\275e!\247=\022\373|\2744)\037>\347\275\350<\367q\271\273\263O\216\275U\306\003=\266\000\376<n\257:;\252\353\001=:\020p\274\251+\214\273\3162\t=xa\210<\256`X=Kr\232\274~\243\001\276J\204\202\275\375\323\365:\310\365^\275\227\310\003<\035\344\223\275\314\312\265\275\366\330\237\275\234\233\273=\340\\0\274\277\002\277\275\300\024\332\275\344\355I\275H\236\r\274b.\031\275\205/m\271\233\236\232\274\002\020\333<m6\231\275\220\214\036\275\370\n\014>\000\327\010\275\245.\242\275\371\316\251\275g~D=\374\340\000\275P\220\211\275\257ey\275`\t\312=p1\264\271,\224\251\274\306\266\024\275d\241\237\275\320\373\343\274t\\\240<8\031\030\275\026\220\264\273\"\267\234=\344Ne=\356\265!\274\300D\210\275\252\3342=\202Ib>\320w\266\274\2624\022<@\222O<[\302\033\274\377\373\030\275\014N\232\275\031Li\274\030\364\370<\3516?\275!\307\312\273\007\t\317\274\201U\261\275\037i\303\273\375\005\376\273\343\2025\275\240\355\260\274D\023\364;\357\224:<\017\304%\275Ge\347:4I\346<\2274\227;\323}\357=T\376\231=D\306{\275#\352\321\2730y\032<\374|k\275!\035\363:\266\022\305;_\300\326\2747\214<=H\321Q\275\213N\223\274\016\341|\274C\002\201<v\205\317\274u\244\376\274\017\002G\275j\227\266\274\3740B=\222\017$<\310\232W\275\376\325\340\273p\235\222\274\252\316l<\372Q\\\275\2014`\275E\000i;\3552,=\254z\202<\301U\202\275\234L\343\274\261\230\361\274\027\224R\2758\250\267\274\204\030B=\235\224\037\275_\304\353<Q\346`=LW\201\275!\343\215=\216\340\254<\345.r=}\007Z<\343%\216\273z1\223<}C\203\274\002\336X<\370%\233>c5\305\274\221\330c\274J\021A\274k+\002\2758s\234>\257jy\275\017/\030=D\360\332\273\250\253\265<&\376\233\273\216\305<=0IK;\277#O\275\020N\\\275\327fX\275?\005l\275\266ZQ\275\373\t\241\274*V\270\274\314B\005\276\002{\'\275+k\310\274b\314<\275\2542\312\273#\2275\275\261z\276>\013\344*=\264\021+\275|\370\240\2758\335\261\274F\370\274<&\014\014\275\325\'K\273\267>\257<\023\243\212\2720W\032\275\3527\321=0\032\333\274\335\371\020=O\200\371<\260\373\360\274\260\"\231\274\302\327l:\316s\271=\007\225M\274\375\200\236\275\014\224\324\2741\234\032\275\327\323\237\275\2278\311=t\026\005>\010`\007\275A\264\207<I-\353\273\036\274W\275\274\t\266\274\262\234\250<\322\013\273\275\221H\035>4S\277<]\204\224;ZkL<\274n\222\275[\245\n>\221\247\264\274--<\2758\240f\275\247\347\027\273,\265\236=\366\">8:\317r\274\212\033\033\275\002\243\340\274I\330`=\3153b=\212\t?\275kN]\275j\367\t\273\241\006c\2755\217\262\274=\233\303=\2373\272\274l\273\200\275\242\261\314\274\245NF;J&\036\275\271\263\313\274JC\265\273GT\257\275\213\002\266\274\3254`\275\340\270m\274\226\275\206\275\312\273\227>\340J\243\274i\314=\275\277\311\307\273-\245\027\275\301\315\251<\200\234\340<(po=v\3416\275@\222\243\275b\261]<hm\340<\315c6\273F\276e\275\224\326\260\274|I\230\275\356#\024<kBN\275[~\022\275\371\345\302;\027Z\320\272\036\254\000>q\253\306<\370d\234<\224.\260<gI/\275\337@\351\275-\357\332\273\257&\245\275}+\322;\206\246O\275\215\006R:\025\355\233\2742<\204\274\262\331R\274+\356\030\275.\334\321<\303\323\200<\3228\205<^\204\333:U\307\344\274^\250D<\021\370>\275\330A\255\275\216\325\334\274\222{\233=\031\347\210=\"\346\025<\233\215\323\275 \002\010\275>W/=[\313\207=\330K\205\275i\246\\\275 X\024\275\323Lk\275\371\016\263<\010\347*=\355\n\022<r\276\326\274-\261\213=\307\263\013\274\203\025\000=\033\346\235=\036E\314<\"\032\010<\303i-?`\032#\275\275\":\275]\315W\275\275x<=f\221\036=1\007\262<\177\002\001\275gw\341<\275\226{\275\262\201A\274\230\240A\275\'\3655\275\372\233\323=\247:\230<\372\210\005\275]N\232=\024=\264\266\037\237\326\274Jdc\275\034\031\005\275N\360m<\355X\007<\036\010\223\275\240\352a\275yG\241<\tY\213=\037\340\204\274\326A\244=\030T[\274\364*Z\273$\267+\274\277l^9\201\355^=\305\227\202<\336\247*;\374\333:<\251\000\017=w#\210=q \211\275T\253\336=[\320\314\274\244HK\275E\177\206\275\222==; \311E=;\002\024=\306j^\275z\274\367\274\303\236\177;C\237\210\273\214!\227<\307\001T\274x>h=[p::T\306\221=K\255\220\275\361h\034=\351N\250=\300\374\016=.\233\235;ty\006\275=\365\225=@\025E\274\213\251S<ji\265<\260I-\273\021\032\241<~\314\254\273)\014\353\274R\256O=\005c\303\274F\204\263=0\027\264=r\330\201=\216\311\353=\261c\354<\372\326\270\272b\2763\275\220q\362\275\034\353\232<\234Mh=^\366O\274\206\215\201\275\340\255!=\005Et>M\255d9z_\274\273\362\035I=\203[\260<z\267\017\275\352c\247<\272\240\000\275\354\302)\274\315fG\274\230\326\316\273\372\246\177\275f\031\200\274\351!\007>\017%\321\274\375(\356=\032\337\206\275\277,\236=i\222\244<\321:\233\274\357\370\356<h\233\226\275\242\203\311<b\221\317\275ew9\2757U?\275.ah<\337\366L\275(v\224\2733\312\031\275\215a\2126F\345W\275\255\233U\272\223\0045=Z\306\t\275\375\350\337<\005B\220<\267\006\034=\264\352\001\275\034\275\320\275\317!\206=\310\304\032\275\343\321\361<\231</=*\306\000>\036\253\327=\213\177P\275\240\317\016\274x\026\347<\242\323\177\273\274d =\307\020\203\274\312\266Y\2753\007u=\226\216\"\275B\000j\272\312rC\275fu\362;\"\235\"\274w\0026=M\331t\275\223\210\020=-%\213;~\266D\275O\242\323=\266\201w\275\351l\301\273\302\275\361=`l\033<\204\336\027=8\240Z=)\303\216\275\346\215\021>Sk\210\274\026\221\\\274\360#\231;|\020\326=\243{j\275\303\351\373=\316i]\275\377\010\022\275sL\342<A\354\342<Ju_\275?O+=nR\334\273&\215}<\264(\221=G\300D\275\317>\023\2741\233:\275\242\261\255<G\336\260\270\362\272\004=GV\204\2758m\002\2754\255\337\274G\356\274=\331\022\235\275H\233\026>hv\177<D\232\003\274\004\230q\274!Z\265\275\271Q\013\275\266{\251\274\033\370\222\275\260\273\177\275\351\024\213\274\220\375`=\265W\217\275\372\316}\275\277\303j\275\305\202\354\274\3751\263\274\036\243\227<\274\037\367=\326BD>\210\216\023\2741\001y<_[\031>GqG\275\276\235\213=\205\031\0028&M\201=\300\327\"\275\227Ui\275M(a\275#\336\027\275t\023`\274\313|\204\274Hs\311<\320T\r>\025\217\003;\3360P\275H\225\213\275\324\265\231\274L\306\3639\254\'\375\274,L\007\275|!C;\3673\307;\354\234\274=\241\204d>\324%\304<\031\334\016\275\035\353\230\275~5\004\275\327\244\236:\026\030\300\274v\372\262\274\212\317\224\275\216\022\235\275:\366$=\226\360\033>\006-8\275[\314:\274\351\232\204=j\237\206\273R\275\246=*!\246>\310\016W\275\006\216\304\274\224\357r\275\362\326\315<2\035\210\275\360?b\275<\374\267<\305&\253=$\r\003=\202Y\254=\342\006K\273\322\211\323\274\035\003\021\275?p\007=\014>\270\274C\034S=4\007\325;oK@\273\324\241\t<B&\231\275v\213\004=\004\333\235\274\2113\300\271\177\270\205\274\226-\236<:/\264\273\000\225\246\273[w\356\274\351K\276<\024\335\240\275z\357M\275\225\256\362=\314\367\335<wJv=\030\362!=\202\256\375\274\331\320c=L\006\202=\243>==V\237\037\275\374\371x=\347\246+=\320\"\306\274\365ha\273\203H\230\275\3121\252\273y.6\275\241\364\331\274xy\257<h\340+<\006\221\243<a\\\001<U.\005\275abv\275\276p\340=\271\031g\275^%^<69\243\274\\\317r\273\231|\001\276\276[*\2747\t\030\275E\030\256=\315\256\021;\350R\223\2747\351\014\275a\311B<\351\331\207\275\336`#\276N\351\201>\277\010)\275\25234\275\002\366\300\273%SZ\275\350\263\265<\253\300\025\275\357\315\242\273\342\256\200=\023|\357<G\023#\275\211 \217\274I=\025\275\243\305\264\275\350\031\023\275\256\263I<y\234\377<\355=1\273\224\373\276\275\r!&\274mJ\354<\323\017v=\302VU=\255\353k;\324~\347\274\367\331X<\266\256n\275rV\250\275\205\204\023;D\246\247\271^{\360\273\237\366D\274\377)?<\325j\221;4\352\014\275o+ \275g\376\'\2752\227\264;)+\203<B\200)\275K\212\271;\335\240\355<\365\315T\275\345\275\201;\356\3110\275\264\331 \275\306\303\207\275Ye\303<C\"\036=3~\220\272\216\000\227;M}[=\031^]\274\322\246<\275p&\235\275\365vj:/\223\366<\313\\\203<S\036\310<\310Y\237\274\324}\347\275\321\226\331\270\200\3773={h\010>\300\201\271=\216\013\325<\377\233V\274I75>Z U\275\316\004\365=\\\206g=A\271\324\274\301\360\337\274\035\"-=`3\024\275A\301\225<\237\030Y\275\260C\014>\251\035\241=\235\034\371\274\317S\246<|:1;\307\'\013\274\200\010,<P\3250=j/\317<\264Tq=}\t>\275\253\034A\275\361\r\203=\376u\256\274\007\032\263<\323\234\260;\235\266\205\275\030\274\332<X\344\305\272~\376\277\272`\177@\274\277G*=\275^\016=\\\254\177<\035I<=\035\376\241<*%\'\275\236\001\206=\307\332\351\274q\022B\275cu\307=\376\376\301\274=F\275\274\223eL\275\274\330\253\273\336\r\236<\016\311y\275Z\335\030>\274~_\275\361\251\313\274\242\325\010<5\177#;e\320\026\275/\032\036\275\217C\350\273\370\371z=\316c@\2749\262\177;\307\253\317\275\356\360d>\363\306\342<$\345\351\274\314t\023<L\372\207;LI\373=\226b\026>`\213\374<\232\265\313\274\355 \230\275Y\353&\274E_;=\303\025\002\274W\341G7\267N!\275\0241n<:y\000=\274\340U\273\253y\245\274\232\344\242=\321\361\333\274\325\002\361=7\214i\275\357\377\262\274,\373\217<\r\367+\275\201\203K\276\022r\246=Q\346\026\275\037+\220\275\0070\334=\271\371]>\264\024\004>\264\254\255\274\016\242\213\274T\242\221<[\205\361\275{~ \275w25=`-\352<\256H\373\274\004W$=c\244H=\365$\352\275{\240\350\275\201\273\310\275q\255\232\275\026\200\"<\302a\250\275\243g\341\274\\\360&\275\243\243\203<\261\300\375\274)\364\334=\253\020V<-\3139\275G?\203\275E\205\003\275\212\234\354;\275\261\310\273\311-\221=\"9\354=U;\017=\221\343\216>\351\366\202\275\317\274\301\275\025\241\251\2744\030<\275\315~\010\275 \233\000<\242\263(=;\005\005=_u\316<\353\335|\273\254\000M\2752\211\341=Z\350\031\275\332\307\"=Uo\230=\'@\312\275\002\264r\274\262\0075=\353#\233\275\0268Z\275\255\353\020>\235\257Q\275\221\276;=\323\2768\275ik\241\275\2377\234<(\242\210=\277\215\031\275\255\246\323\272~o\331\274\370\214+\275T\342\016\274~\236\341\275\241\341\275<;$\336<\177\374\276<\240\014;\275\357s\177\275\021\343\301=P\216\351;\376\364\216\275\205\377\000>\305\2649\275\343z5\274\200Q\230\274O0\365\273@\215j\275\332a\201\275\023qw<\031\225-\275\211K,>\260\025\343\274u\016\356\274\300\3416\275*G\205;\222\264%\275\221I\2569#\265\024\275\304\253B<\331\273\376<G\347\365<i\326.>\370\334\360=&\231S=\207E\223=\370\232\006\275j\233\331<\001\221\010>\035A\227\274uz\"=\224\332b\275\302\352\353\273\371\204\356=\004\322\306<\324N\262\274\344)\2678|\005\244\274\206c\323<ZS\002>\22386<\035\205\331\274J\036\'=`\317\220\273\301\201\363\2740\362\244\274L\220\306<P\2017=%m%<\307\035\277<\363i.=\'\315\302=\022)\251\275\324\346\025\275\247\272\267\275\016\\\025\275\203s|=\264d\361<\2521y\275\345\361\201\273\217\276H=9\207$\275\372\376<>\260S\265\274L\205Z;y\327g\275\260\036\315\274\273:Z>\272\333\335\275_\376\223\275X\321\202=\033##\275U\354\022=\366k[<BE\326\274E\352B\275\227\3705\275\375\370@;\326\\,\274fy\341\275x\201\005<\233\014(>\333bt=\036\022\032>\\\224\360=Gc/<\214\357Y=dG\373\274\302Q\322=\315\351\245<\024\303\023\275\214\261\035=\363\024\341\274\220\273H\274+\360\220\274\233\332>\275\333\264\307\273\312B\030\274VO\273\274\337TK=\300\204\206<\205\245\210=j1\331=\372E\216=\373\026!\275\\\026\216\273\213^%\274\246\003->\022=\207\273\014W,\275\375\300\241\274\250\305X\275\373\216A<.\3225\274!D\274\274x`:=\324\365=\274\036U\204;}\346d\275\263]\323; \356 \2764\205\370\273i\n-=5\002\365\273\363\275\034\2757`\320\274\303\3619<\351@\261<?\260\355\275I\324F=\330\364\202=\2351A;\240\310(=\232\326\003\275\242E\017\275\320.\242=\005\263\322\275G\226{\275>g\336\275r\0068<f\021:\275\272k\250\275\022\205\204\274\353\342\255\275e\254\310=|\037`\275\006\356\306\274\255\376\230\275J\036\324<\355\270U<\227\213\213\275v\243z\275=\006\245\275\211E!\274\256,l=\230N\251< #$\275\275\031\'\275u.\213=\256\027\323\274\240%(\275ziO\275\025!\255=\351C\036:)\314\r\275\217\213\027=F`G<\036\'\202\274\360\376z<\375\364\217<~\214$\275\256\253\220\275\321\245\005<FE\330=\353\363.<\2530\236\273b\217\360\274\025\302A=\220\023\224\275P\233\244\274\272D.=R\rg\275\003\304\\\274j\241)=\274\353\233\274\371A|\275I1o\275\216A\033>\250k\345\274`Q\235;\033\305R\275\331\273T;\"\325\001\275X\252\030\275\246|\305;\303\375\251\274J\345!<|J\251\272\310*\254\275Us\321\273\010&3=\352\322O\272IIo;K\246\223\274f7>;e\220\215=:\005?\274@t\256\275d\247\005>\237\004\244;\261\021G<\310\311\365\274\023\021\227<\273m\361=L\347\374:\316\006|\275\242\240\362\274\302\343\274\274\025\315*\275\305\230 \275}}=\274S\311\341=\255\327\002\275\277\207\247<Y/\021\274\352.\340\275\267\3760\274\346\023\272\274\326\370o=vGd<\232\023\207\275\355}\266\274\250\363\300<\r\365\241\274\020\030\327\272\207\037Z=\240\220\314<)\334\336\274\243M\005>\275\232\235\275\324`\000\274\037\202\226=>P\263=\255\364B=I\315\023\275q\024\002\275\350t8=p\351\224=\030\010\245<\207\027\321\274F\316\037<\256\233\\\275&\356\"=\204K\000=\215\346d\275t\304-\275\373\212H=OW\321:xa\010\2743\025V\275\t\370\210=\311\017\004\273\3771^=I*o\275\215\272\025=\322\362\253\274\345\002T\274\275\031\322\274\005:i\274\223O\216\275\217\373V;I\006\225<\035\201\241=-&\034\275#W_\275?\335\247\275\035[\334<\r\213\272;\312/\225\274!>u=<\326\230\275K[\265=@\244\007\275\215\367\307\273\331@\264\275\335\031(\275\352=\035\275)\352\257\274\371\332g\271[\r\002:\321\350\346:b\256@=\327P\004<\206\312\362\274p\\,<\030<w=\032Y\305=\305\347r\274\257<\005=\267\253,=]\232\271\274\356\230\222;x\377\277\275&#\355\274\250z\3149\242\233\256\275O\370\225=i\355\351<\330O]\275<5)\2732\212]=\335\333\352<S4\022>\274K}\275,:\225;\370U\001\275\250\3777\275j\342\021=\254\203\256\275\032\377\261\274\347\360g\275\350\333K=\312s\220=;\211\212<{\307\272=CIQ\275\244\371\000\276)\346\027\275\3552\351\273\343\217\033>\204\252\224\274\332\023\034\275-<\037\275?Q\r\276|\322E\275\005\374\230\274\252g\271;\271\264\365\274!\241a=\221\323\326\275f\260n>,\313u\273e\271\371\274>\023\224\275 \326\013\275\353mO\274>B\315<\366\010\247\275\220\013m<+\272\363\267\347\330\335<\262p\022\275{\344\256<\344 \202\274b\342\273<\340\255\333\274\003\263->\3608]\274\373\203\205\274\267\360l\275\374\336\256\275\214mo=\200\220\020\275\303\355\007=\265G\030\275p\377\350\275\034d\232\274\271p\206\274\272-\256;9Q\030\275bN?=a\344\036<u\2437=\220\324K\275\342$\316\2755z\"\275\016\037r<u\277\006>\264\316\206<\360\3270=8\254\230\275\002\341\204<\003\021\220;=\257\355\274E\375\371<\350o\243\274\r\005\323=\220\327%=&\3619\275\237\276\003=v\262\013<\355a\244\274\222m\364\273N\351\241<\305\207/\275x\036\365=!\265\026\275y,\215\275\363\247\n\274\353\215\231\274\327\240\003=*\365}=9\0060\273\316n\217\274/YK>\236\351H<\336,\010\274\341\344t=\030%\342;\204U\363<\274!\216\273D\273\225=C\370\003=\215\344\215\275\312U\255<ar\267\272\360\244\007\275]\214\026\274\214o\014=\355\270\210;\326!\004=\2212W<\017tD<\247\364\r\275\346=\371;\236\313\201\275L\274D<\241\231\302\274f\355>\2758G\025\275\023\333\351\274/f\210\275{\2264\275\316\312\016\2755\331\256\275\361\271\275<\254\021\264\275*\005z<&\226W=\276\345\230=\035B\276>\224,\371=\'\205\335\274\224WK\275R+\216</\235]<\353>\307\274\216 \361\274\203\001\343\274+\331\032\275\\-\010\274C.F>\303\245\273<=\351a\275\202`\206\275!\261\332<\016\0373<\204\266\270\274\177=j\275a\344\311<\363rT>\035\357\356\274W5\265\275S#\322;\274\316\300<=`\347<\347\272\323\273\225^V\275\253\343\273\274V\0272=u\303\255\274+\367\230\274\233\201\252>\250\207\246\275\361\2122\275\331\231B=\373\306q\275\263>/\275\035\362\244<\330(\361\274\004\007\206=\315\355\373<g]*>yy\251:\007|N<1\314\225<\323\341\255\274\273\234\311<V\2049<\256b\224\274 \223\203;\305\342\224\275\023s\303<\006y\200<U#$=I\314\246<\277[ =\241\263{;2*\374\274O$\202\275)\234\253\274\302\025\226\275U%\310<\333\257\213=\026g\342=5\3150\275\233\370v<\014\232c\274\221\256\201<\252)\r\275\357\256J\27526\313;,\027\320<\240\265\020=\2740\223<\244\316\343\275^\177\002<y\036\214\274\265?\373\274\2034\350\274\300/F\275\232\253\026<$\210m\274l\376\265\275\035\237\244\271(r5\273T\202\256\275\216\351\361\274\022\254Q<\003;\317<\340\001B>\201\232\372\274\032\021\315\273o\315\201<\372g.<\032z\346:\363\017\346;\234T\216\274\232\376e<?\202;<w\206\217:\032\306<\274Y\320\262<h\347\256\275\336o!=/#\017\274\202\205X\275\322\017\240\273\250F\005\2759\001g\275\242e\t=wh\311\272\255\264\366;Q\254\250=x\244\310\275r\370\315\274vR\214=\020\271%<\241M\360<\311G\347\271O\213\306\273r\366I\275r4q\274rj\252< 1c\274S[>\275/\276\273<\335@\362;k\267\302\275\217\376\243<\306\206>\275\263\373G\270\n\212\254\275\335\276\253<\314u,\275\352\246\005>Z\360\204=~kY\275\326\234\253=\022\373\000\274\000H\271\274H\210,=\362\022\333\274x\355\226\275\276D\036\275\377\377\r>\306\024\030\276\003\334\r\275wQ\216\275r\276\025\275kR\243\274\337\3500\275z\345\275\273w$n<Sn\006\275_\245\245\274\t\352W\274\330<\2218\333F\026>\303N\317=\301]9\275\357\235\016= W\225<u\264\367<\331\374)\275\334H\277;\353\252q\275\263\tO\275&k\272;\371\356\262=eb\217<.\027\275:\027\374X\275|\301\335<\002\205\364<b\235N<%?\236\275o\001d\274\016#\033\273\355\t\275\275\300\254-\275\333N\260=\357\347\205=u\202]=\362\344\272=7\276\272\274v\343\032\2752\375>>\022\316,\2751\037`\275\342\245\031=\017\301\010<[\270\375\272-\370\343<\260\366 =\223Q\247\275\204\tm<up\347<\003\301\223<Q]\304<,\374\270\272|B\350<3f\n\275\014\270G\275\241\313\005\276$\270\r<\321\371L\272\3141\211=\332\2000\275\214.x\275\274\313\330<\032\330\021=\324{\307\275\373\364\022\273rNm\274SG\014=\"\225\307=\337\027\226\274m^\341=\214\252Y\275a+q\275\246\370\201\2734\316\377<q\274\2049\223\377\353<\220\272\000\274\023\261>\275x\320\235\274\330\316\256\270\004\250\315\275j\3642\274\375\246=\275\324f!<C\343H\275\023\374(\273]z\373;\330\022\373\274\212\351\001\275Y\216>\274\370HJ=\316\022-\275M\037\300=Oi\352\274\205\255\007=N\333\032=Sc\230\274wa\242\275n\234 \275\231\006\212;\324\227\355\274\331\025x<\361a\255\273\314y\240\274\332\216\304\273\340\022\260;`[\337\275w\030\310; \354P\275\230\373\263\274\265W\233<\313J\026\275\301m\370\275\324\267\262=\232>\007>[,s=\203>\333\272\006\332\t\2752=\017\276\251\013\257\275\273{\033>Q\322\207<\363\253\215>`\027K\275\207jq=\246^\253<\256\246\2679\240K\n\275N\014k=\256\310\022\276>\022\210\274rl\335;O\004 \267\324\001\251<\3335\020\275\365\225K<\216\337o=\354\337+\274\006F\004=\203H\261\275\324\007\264\274~\264\010<7\345\355<\371P\250<\\$%>\031\260\313;>,\207\275\353\003\212\275\201\225z=\351\002\330:\253\027\016\2759\376\335\273\364\260\035\275X|\337<~h\243=?7\220\275\r#\241=\275o\345\275\n\022*<\240\271\000\275k\313\314\274-\007\301<\361[\243;\241wH\275\270\022@<B;\271<<E\211\274\364i\004;YwI=+k\030;\354 /\275\345\217h\275\3563I\2753\321\014\275\020\352\355\274^\324 \275\271j\343\274\023\250\005=z\"\232\275\252\250\316=\2435\025\275\273\024\030\275Q~\244\275+\351\014=\201\014F=\331p\364<\263\252\201<U\n4\274!\246\021<\333rJ\272\355\362_=T\026c<\037\032x\275\363\321\256\274.\305T\275/\232y\275\343:\332=)\325\005\275\345\024c\275\312*\007\276u\220\366=\033\265\262\274 _i\275}\370\032\274t\030\026\275\032\275\222<\215\253\327\275\3120\361\272\306C\261=\221W\300\274\237\326\304<\274\354\200<Uk\301\274\277\3015\2750\023!\275m\352\257\274\221J\037=\211\037\014\274iVX\2752\245\356\274\n\2250\275\035\222\360\275\272\307\014<\214\3260\275\2133\005=\035H\377<tp\257=M\202+<M6\306=\376\352\272;\201\021/\275\311\342\\;@\215\266\275\243\213\232=lVq\2749\256\207=\230ot<\335\336\200:!6\350\274v\314<\274\255:\202=\t\274\266<\261C\305\275U?,\275\271y\227;p\370\202\275A\242\026\274i\324p=F\220&=*\225};{\371\264\274\347\224v>\261Dy\275\337\232\362\275\025\223{\275\034\213\203=\300\032H\275\276\306\336\274\034\357\312\274\340dS\274\234\334\001=\005T,\275wH\001\275\225\367\023\275u\224(=W\321\024>\'\'\210:<\031F>2\220H\275\214\023\332\274\377JY\275\346\353\331=\3359&\275\264\221\233=\370\213[=A\000\207\275\022\2249\275R\023$;E\321\225\275\352@1<\346\246\020=)\314\251\272\346\257\'\275d\016\216\275\\S\273\273\361\270:\275e\010\227=\243o\035\275\037\225\301>\264th\274&\342m\275\3645\234=w\320 =43\216>g\313c=\316\010&\275\3517\264=\002\0268\275\002&5<>\267\234<Z\272\3377\212\"\217\275;\204H<\371l2\275\316\200\231=\334\250\222<\323\304\251<C\306\017\275\367\314\255=\200)\357\274+-\034\275\210\342\215\274\271\3666\275Z\307\324\274\241\257\263>\351IU=<Te\275\222\216\361\274I\260\263<\331\257\250<tm\031\275:\177.\275s\265\004\275\177\2604<(\020\354\274*2D;|\374k\275c\315\303=c\267\211\275\n\324\032\274\031\330\022<\310\212\344;\252PA\274\245\322\252\274\246\365\274\273\302(\374\275\250\304>\273\243\014\235=\375\277\245<\2727x\275\255k\362\274\373\202)>\214\235K\275\336Y\275<\236\240\265\274\031WI\275\222\377\203\275\372\300\032<7\377\234=\2724\005\275\303c\342\274:F\200\274\272\317\222\274\253\226\352\275\314\364\347<Y\312)=\244\371P=\233\r\213\274n\337\236\274;tq\275\216\260\033=\221\336\233>\214\024\n<UT\n=\370^\200\274\010\007\265\275\023\r\003\276\204]\236\274\0340\220=\265\374\321=\241-\301\274 \272\353\273\024\303\224\273\262\212\024\2758\201\033\275L.\025\275\022\375&;$\\\271\2748q\270\274\023.\003\275/H\035\272)\342\234\274\000<>\273\025\201\245=?\rJ=\033q\206<\016\022r<\032\251\001<\326\253\343\274OE\022>\315\007\020\274\335K\237\275\203\374\207\274Y\257P\271\370\221\017\2757w\203\275\244\376}=\344^\225=\306\223\201=\240*\334\274Z\325\334;\026\030g\275\350v\r\275\245\253\205\274\'\216\277=$\262\226=!o5\273>\322\351\274k\224?\274F\232q\274.i#=,\025@\275\361\206\351<K\355?\274\024-\227\2745A1=^\2733;\033\327\201\275T)\266\274\014\235#\275b\305\241\273\252\314G=}\324\237<\330^T\273v\276\251<\343d\301\274I\202j\274\020\020\235\275\333G\324;\2478E\274\204\343\243>\027\016\227<\256\022+\274W\221\232=\217Q\026\274\006\345\t:\361\261B\274#9\026<\342A\342\271\352\r&\275\037OR<Yp\001\274.C\267\273\237\370\236\274\316\037f\2742y[\275\3465\223\275\013\335E<\250\346\216>7\210\202\275\274\367/\275M0\235\273^\372\023\275\036\364\033\275\242\t\364\272\260\221Y\275Ml\n\275\307\356:\275\361A\204\275\220\022\270\275\021A\033;\202Xh\275\005\264(\275j\360\311\273vg6\275J\017I>\233\263\215=\350\265\212=\246\215\030\275\316\024S<\256\213\310\275\334\326z\275\273\321\322<\200\353\224\274\220m:\275\305\220f\274\3110p\2720uP=\277\256\016<\266\263\033;y\227t>a*.\275\376\2154\2752\310\037>\271\030\031=\343J\246\2739\300p=\001\201\253;\341\214\213=\027\022\360<W\241\010\276>\237\330=\32628;\257J<=\377\220\207<\2235\205\275[\"\301=[\303\300\274\307\216n>h\264\213\274&\370\211\274\033Y\220\275>\272\357\274\026wF<+\237\247\275B\377\341\275T\020\245\275\035\010f\275\326\353\303\275Z\2737\275\230c^\275\322\275\225\274`!k\275CJ$\274\333\335\346\274\245\330\355<\233\350\364\274\n\255\033\274\243AV\273hz=\275)\203\225\275\363\353\211\275\001\250\347\274\000N\251;\313\303\275<\244/B\274\372\247\250\275\035\317\310\2737\270\230\275\221\246\251=\366\371\002=_\350!\275`te>\367\000\023\275\351 G;+\230U\275<\\\277<z\030!\275\370\264\370\274C\213\203>\022 \357\272\'\305p=3\345\205=\365\312%>\312\347<=\'\222\262\275GV}\275\240\220\276<W\241\311\275\273c\331\27405\230<\210\005$<\320\330\242\274:\272\267;\347\317\362\274\350\302\220\274\370NZ<\032@\'\275;=\243\274\024\335\006<\006U\212\273\376X\254\274\035\232z=\221Y]\275\360\\\216<\212\272J\274L:\223\274b\334(\273\354\261\215=\271&\255\272\006\225\206\274\274\245\200;\272\244,\275\232\361\210\274ZJ\255\275\010\327\330\2745\026\205\274\256t\204\274;[\000\275\330w\'<\265\036`=\347N\005;C-\360\274\032\311\374\274\326\207l\275uv\325;\326\331\250=\313\276\213\275\355O\002\275\226a\037\275>\256\207\275\264[o\274\371\276\036\275\310\340\212\2749\372\225>\225\001\320\274;\230\276=\375\233]\275ig@<\317\360\027=\262\313*\275s\223)\275\360\023P\275\322\246P=\242\240\014\274\263\033w\274BY\224\275\266x\342=\316\2233\275%\r9<r2\273=\311\314\316:!l[\275\361c\375<\346\260\242=\357\313;\275\231\356B=\271\306*>\033\367\016\274\342/[\274e\0042>\035} \275T\222,8\203\215\201=\"\037\313=hY\301\274\254\223\201>\364?S=pY6=\036~\020<\235`,=9\177\"=z?\357\273^i\327\274Srf\275\311\017\370=t\006\215\274\217\221\031\274\001R\225<%\252\023\275(L$\275e\2554\274\343\344|\274V\"\307\275\003x\270=\324.\317\274\004\220\350<\010v\276=\224\343[=\2066\264\275\211\311\323<\216M\354\275\030\224\253\275X\324\032\274\310\210X<\330ht;\0101\242=\211K\025>\266.\316\273>Y\261\275\265\277\334\274IZ\315<\243\261z\275f\301\213;7\254\001=\024R\032=\324\360@\274\2549\010\275\017\"W\275\t\346\334\272:\255\215\2753k\231={\233\266\273\304Yr\275*\372v\275|@y\274%\300\316=8\310\242=p\307\372<\217\010\352=\202\270[\272\216\225\234\274\307a\321\273\252\212\236\275\026\243\205\275\241\211\303=y\362v\274\237\000\317\274/\202!\275lq\327\275Q\300\323;-\320J\275\010\214\230\275\205\'_\275\324\355\346<\204$w<\310P\366>\310/\232\275S\312X=\rr\034>:\366l=).\311\275!Q\236\275\317\025\023>\324\275\301\274c~\016=\213\221I\274\225\311Y\274\r\201\"=\270\177m\274\266\177a=\273\007\034\276\257\003/\2755)\244\274\250f*\273\234e\253=hk\271<\033\026\215=|m\201=l\254\010>\3052\275=\205N\264\273]XZ\275<k\t<\001\277@\275gdC\274\357\246s\275\350b\277<K\304\327\274\004@\266;\024\367\333=\n5\362\274k\340\357:+T\375\273\364\030\216\273\330\001A\275\313\370\200\272\242\371\212\275\364\241q=\273,c\275\200\340\201;5V\233\275d\350:\276e\356(9/\221\266=\306\357T\275\342\207\262\275\377s\\\275r\266\207=t\343l\275hT\226<U\2731\275\3512\367:\304\232F\274\201\255\022\276\177&\310<\265\221\030>\26707;H\273\007>B\317\312<d\332\260;\\\002A\275G\243I\274\207S\241;:\212>\275~H\004\275\335!\021\276D\325\252\274\025\317\323\275\335\306{=?g(;!\021\246\2753g\273\275\343\224\014\275\203\277\230\275\256\356/\274\367\306\211=\316\233n=\362\023t=\036\010\337;h\356\376<R\311\020>\270<\006<A\251\004<O\334r\275\n\002\017\272\213S\230=\370$g\275b\267G\275.[\334\274\3075\206\275F-[<\204\323\222\274\351{ \274\t6\326<\276\177\212\275?\350J\275T\242d\275*\210\212\275\310\357\342\274\215\237\331<3MJ=Z\200\t=\325\351Z=\236\226G\275PM\014\275\340ce=\371\026-\275\"\360\034<v\032\275;U:\262<E\035r<\241\013\353\275\270H\200<\2346\316;\311\337\222\274\025\277(\275>2\305\274\201\016\177=\232\301\016\275\2047\324\272{\215\321:\001\032\371;B\316a<\236\360\036\275r\264~<\230\014\354\274`\220\211\275_\327\216\273\342_\203\275\327\000\203=\035\325\232=A\\\215\275\263\363\252<\340\356%\273\366GR\275\326\304\227\275\365\036\204\274*\307%>\032\n\246\2750\206n=\264\020\n=\323\302(\2752\241\336\275\301\210\202\275\271\'\263\273Z\221c<\256^J\274\r\254\242\272\310z:=r1\267\275\037\227\023\275\221\364d\275\365p\334\274s\225d>\035.\360\274N\254\326\274\216\263\205=\367\326\342<P\253\035\274\301S\035\275\356\213\260=\255\020\355\274\025\031\001\275\317,\216=4\346Y\274\213~\305\274\020\332\231\275\272\250~\275\035\250\223\274\234\301%>\0211\006<\355\320B\274\354\'-\275\'m\252<2n\200=V\245\016\275T\343\246\275\314UA<\013i\201\275\344h\341\275l\200c\275gQ\321=\364;f\274\r%\001;.\321\"=WH\314\2758\t\031<\\\0233\275\340\210\002\275\2466\321\274d\005\266\274U\343W=Qw\214\274w\000\303\274\225\347\371<\325/\220=\0243\305<\345H\311\275\253Li\275\236J\033=\213o\313\273\233\266\272\275\351\236\314<\205\250\205\274.\251\250\275\034A\320\274\021\262\216;\306\226\2129\260\3502\275{\002E=\302\335#\2750m\250\274y\367v\275\373\237\356\274\007L\312\273\222\376\022>Nz\220<\317\001\010>\'\317&<JO\216\275\366_J=A\247\t<|\323C>x\327\225<\236OE\275\254\207\014\275%\371\221\275\307\303\261\275\206\\\215<\315\227\363\274\037he\275R\035\217\275\202h\245\274\264~?\275\0050\304\274\265Mw<\367\304\371\274+\270\345\273\274\306#\275L6\325\275-\022Q\274fp\237\275\016\325^\275\024B\305<l\022P\275\317nx\274\260\322\206\275x\241\013\275\333\372\366\273L\250\241<\274\300\007\275\3035)=\352\245\022\274\256\036\265\275\274\026\244\274\3251\030<\203\324U\274\327\304\376<\256\321\263<\016\025\263=\212B?\275\331\252\255\275\270[g>\357\253\232;\307\204\233\273\021,\240\275.\216\221\275\204T\236\273a\335\021\275!!\265=\243\320<>\031\330\347\274K7\207\275\276\320u\275w\004\220\275\324\212.>\005\246\337\274*\340\262\275 \356z=\210\202I\273\2571\002>A\016y<\013\367\301\274\'m\205\274\'\003e\275w#d\275\002\334\221\275\245,\217\2753(#=\202i:;_%l=[S\310\274\251\204\225\273\230>\025==\215\225\275Z\230^\274\325\346!= \364\210<s\314\227\275\016\265\207=\332\337\n=hqN\274\021\\d=\243\304\242\274\022OI\275M\271\307=\215\004\225\275u\020s\275\237\002\266\275\216\344\332\274\300\333\010>\t\340\275=\264\242\202\275\303\033C<\'l\337\275)\372\313<\305A\242\274\2644m>\233\000\031=u\322M=\340\261#<\250>E\273\227:D<\344\326J\274x\344\236\275u/\027\275\005rg=\335f\322\275\307\264\002\275\006]\232\275o@*\275\330\252\267\275?6\277<>\302b\275\337D\206\275q\236\013\275\267\333\272=s\356T\275/u\251\2751\025\265\274u\014\361\273U\020\246=:\343\025=^+(\275\316^\027=I\272u=3\370==\r}\017\275^\251\265<\376\217<\275t\337\031>\236\276\332<\313P \275\356El\274tJ\272\275\013\225(\275X\271\345\274\3470\336\274\256a \275P\355\221\274\021\037T=\256*\347=\304x;\274;\215\3359S\307\255=\344\240r;\0227\016>^O?\275\230B\332>\252\220N\274/\354\363<\217\2560\275\330\032S\275r\216\301<\247d\363<\306\256\331\274\023-\354\274\204\037\303\275\036\211\360;\367Y7\273\032\202\216\274o\2640\275\272G\217<6o]\273,\312\212\274\324r\213:\231\347%\273U&\366\274]\035\013=Q\251\376<x^b=\274F\007\274\2314\031=\334Q\310<\275:\327\273A\330\252=:0:>\345\257m\275\276\327\002\275Vl\206\275\271\014R\274g\201\222\273\342\006J\275\312\017!<w\243\274\275\247\350\t>\210\034\336\274\246\270\336;\026\3777\275\n*3=\322\337\233\274\300\300<>\037\225\004=\3255*>n*\007\275 M\341<-I\322<c\020\331\274M\341\323\274ePX<)\222@\274P\254\007\275j \212\275!\371\227\274\032y\212\273\315\005~;\357\365\261=\002\256\227\275\340\016\371=\355JV\274\377\350\033\275\026\207\223<(8\212;>\" >\330\005K\275|/\362\274\271c\202<u\003\312<\277\r\257\2740H\206\274\261\244\211=8\303+\274U\251g\274\360\364\352\274\004\256W\275\234<\007\275\314\330>\274\253Q\r\275>\217\363=\212G\261\275r\272\226<\247\n\231\274x\377\335\275;\025:=\264\233\030\274\240]\006\274\201\325t<\022e\211\274\355,A\274\255\367z=\177R\372\274b\340\237<\001\314\010\275ek\t\274\254\020\003=\376\272\332<\350l\224\274\343\216\341\274e\365\227\274\326!g=\206R\347\274\027\217m=b\200=\275\013\227\214\274(\343\365\274\345\257\234\271\215\216<\274\310[\243;\354\013j<\216\277-\275g\'\006=*\226\236\274\0220\232=\304\030\n\2749\336\037\275\303\346\300=\027v\316\274\'}\311<\324\031\032=\313\002\307\274J=\246<\037os</0\222\275s\026\026\273\350\307>\275w\321\241\275&\314\321<\233\016\225\275\024r\264\271/*\255<pk;<\251\252\245;\005\363]<V\r\277\274\245\206\025=\252\227\217=s\376k\275,\177\t=\343W\251\272\303Q\203=\r\344 \275R\222\221\2740g\000<DMG\275^&\022<\211\360j\275\022\316n\275\250~q\275\370\331\177\275\303\230\355\274o\'\206<0u[=aN\032=\375\364b=\247\331^\275\231\363\2629\325\304S\272t\315\251<\003\226\265;\330O\211=\307 \002>\004\325\374=d\2179;\342:?\274\006O\354\274[\320\245\273\023\"\'\275\000m0\275\333K]8.\204\314;\002W;=\372\3549\275\016\225\004\275\355\t!\275\371\277\211=\211l\227=\035Y\316\274n\001\355<\340R\311<\3060\354\274z\r\237\27450\035<\265\2772\274\025E\232\2749\246Z>Nk\356\274U\027\271\274`\030\310<\362\221\226\274e\035j=\302(\336:3\347\313=\235\246\355\272\3351\371<~\326\232\274\334\353K\275_\005\306\274\005c\020:\0234\375\275\363\025\307=\371gx; W\213<\267N~=%T\303\274\233]u\275k\313\007=i\324c\275\n\353\\\275)\325\323<\303\354f\275\360\t\223\275F\035\010<\363\004\216\274[\357\217\275@\3609\275Fy\234\274\273$\245<\335\034\"=G\313\031\275`\270\323\274hOX\274d\035\251=\",\257<\00219\275`)\232<zU\333\274\2569\277\275.\205\333\274\267k\001<\271\252\330:\202\225\035=p\231<\275cR0=S\215\213;j\027\000\273\275\325\007=\315\267\211=\001>\253\274}\000,\275\335N\246\275\236\017\002\2752}K>\236\362\347=\251\250\351:\227\344\342\274J\3057\275\362\2009=AK\255=\357\275J\275Dm\376<\2273E\274\241U\365\273\004\360\346=\033]\270\274\002\325\221;Y\357\304<v\031[=\260\014)>V\334\203\275\247\320\232\273\270\\\305=\347\275K\274!n\265<k\025\241\275FID={M\271=\260NR\275\2448K\274\001j5>\301Pq\275u>\340\274\037i9=\340x\333\274\232\240\027>\005[T\274\036.7=\303op=E\177\217\275\226r\305=\214\020\272\275o\336\226\2749\013l<\315\367\276<\005\376z\275\376\3337\275\307\207<\275i\365\010\275\025\002\317\274m\210o\275H\312\206\275VvJ\275-\231\333<\220\344\335\272\336%\026=[\3100>\2204\245\274\242\255_\2754tI\275\263\241\204<5U\254;\361u\010\275T\241T=J\330\253=9\374g<\201\355M=\227\350\376=\240J\341\274\277\247\347<\334\211j\275\243db\275\035\251\231=\305\254\204=\326\366B\275>\007\266\274\320\365\232<\312L\220\275\215\007\226<s\367\234\275B{\243\274\371\322^\275\357N6<\275\305\n<\263\032==\232\032\241\275qb\240=\240{\250\275\313CF\275\025h\247<\300\330\215\275\3024\352\274\302\304u\274\315:\231<9\224\355;\250\272\312\2752w\206\275\243\215\224=\3608 \275\313}j\275}l\267<\375\002\"\275$8\006\2739cN=/\272.\275H\306\222;\2657%=\221g\201\275l\337\t;\260\3178=\033f$=\300\017=<\234\351\234\274^W\207\274!#\322;$?\246\273\315\264 \275\256\350\013\275\nsJ\275\325\235\001>\322z\201\275~V\000\274\203\311R\272\340\363\344>\371A\216\274D[\234<\0310\366\273\316\362\002>\354\222\212<\024\330\002\275\000$\204=\353\234\263=\307\024\220\274\323\373?=Q7\267\274\203S\350<I\362\362\274#]?<T6\036\273\352\303:;\371+\235=T\210\252<&\343\257=`\273\302\275\354 \240=\211,#\2740\372\'\275\324d\342\272\035\0060=C\213\314\273\036\357\325\270\2074\037=K\023\265<\220 ?\275!\247\037=\336A1=\337\241\204=\275e1\274\327\331\213\274)4\261\274\257\302\364;\024\242\304\275*^\375<\034\177\316\275\003\017\004\275\274\017\372:\201\362\215\275\233A\205\274\215\030E\275\003\317\200>\020\226\276\275\026\"\003\273\3312q\273>m<\275\3236(\274\201\222%>\035\025\234<\270e\220\274\346)\235<\205Q\227\274Q\017\224\274\3467c=\006\360C\275<*\t\274\204\272\217\273\361\376\017\275\361\245\035\275fV\020\2750\023\025\275\n\263\\\275&\272\010\275\266\223z=}`\212\275+^8<\367\267e=\324\236(=\013\227\367<)m\036<\373K\260\274\351\340\241;\234\307$<i\177T>\261\323\272\2717E\014\274i\000\202;ul\276\274\032\1771=\333e\024<jw\204=\036\230\007\275\327z+\275\203\332\230\275hI\204\274\323\tF\273\272\343\036\275\022b\010=\234\353`;\025\237\324<z\374\037=\332\377\022;\3535\203\275\244\310\031;\313\375\r\275\202\022\356<ca\206\275Z\026\327\274?\tR=\344\006\203\274\000\366!\274\371c\230\274\236\376\265<\341\022\016\2751\307|<lB\204<qZ\207\274\211\310\023\275\202\354X\274\324\271A={\274\005:\251\263\262<\364\004\267\275uU\233<(\001\363\273\206\253X\274\021\364\251<\014x\204\275da\327\274\334=\317\274\340\216\364\273\205\271^>\004\237\235\275\375!F=9\245A\275\216\304?\274\010\305\207\272\354\246\321\273\323\334G\275>\024.\275\020\023*\275\344\214\3559\017\027\357\275:\312\030\275\223\207\323\275^\244\235\273=\301(<\211e\026\275\205|+\275C\374\244\272[\205%\2754q\231\274\000\031\316\273\0362\026\2746\0214<\347S\212\274!\224\t\275\2626\010<\217\275\177\2739\246\225\275\313+*<.\326V\274U\236\274\274^-\000\275\210?\363={\024\312;\"Qa=\"\2419\272\251\2516\275\253\034t<\330z\036>SI\214\275\335\321U\275L\306\023>/\353\202<@\276\331<_\006S\275\370,\302\275\312v\273\273\362\274\336=\301\003J\274\273\230\363;\204\231\264\274\3254\017\275rru:\005\224\365<\240\001\303\275\210c\321=\271}\016<\351:.<rr\010\275\227\315\243\275\273:\342==a\"<\211\177p<\013\341\236\2725\223\323\274\320\373\000<\255\253Y\275\332\205\335\274\036\343\014\2740\000\215;\013\365%=\227\205\207\274T\230\200\274\204}\024=\247\177<\275\316f\212\274\215\364\200\273\237\224\013\274E\3374\274\024\303\271\274\325Bd\274w\273X=]\360t\275\224\276\022\274\213J\267\275\311\362z=<\210O\274\237\302\202\273DE\215=\253x\366\274\003\325\350\274\021L\331:_\252A=\177&W=\325\272\236\275\230\007\000=\022\243F<\'\205+\275\200\026\362\2746\200\241\275\366\372\376\275\221\t\266<\270Z=\275n\215u\275\362\n\342\274\206\251\323\274%\241\003\2755J\316<`7p=\246P\367<\345\"\247=/Vj\275h\270\t\275\242\263\235=<\255/=P\tM\275aA=\275\233/ =(\206-;\335\362\034\275\3377\213\275\307{\236\274 E\313=L#\307<\200\\n;\030\216\312\274\316&;\275\360\251v\275\312<\014\275\275\243l\275A\213\016=;,i=>\r\"<\322\377q\275\n\247\214\275q\272\305\274Q\375 \275\010\266\265;w.\306=\312<I<5\332\032\275\272_j\274\333\316\277\274D\021\014\273\247\355\356\273\271\013\270\275\217<\221\275\277\323$<\370\247\031=\026\330>\275.\032\267\274^\203\230<6HV\275x\263\200\275\372\234b=\362\333k=\300\006\261<\246^\330\274F\245\350=\022\321B=\024F.\275}\353H\275\303\254\'<@W\007\275\225\217B=\371\343\013=\315\341\331\275\202\034\373=\203\361t\273\233=\313={c\336=\036\365Z\275\270yJ\275\334\362\t\275\307d\355\275\021\343\241\274R]\365<Q\302d=F4\224\274I/\317<\317\351\331=\355&\231=\237]\276=\3541C\274\276 \244<\034H\337:\201\255\263\274\033\305f=5\273\230\275<b\320;\206\236\025=\341;\322=\2034:\275\224*\017\274\215\031\217<-F\256<\274\021\014>4\245\"=5\365\016\275\201\267\215<\205\347\024=\277`\312\275(\030\037=3Ft\275\331\235\370\274\235\357\302\273c0\241=\224x*\274$\352_<bI*=\344+\014=\321\273\177\274\342\371Q\274h\231~=\305\002o\275\340Y\371\272-\020\215\273\222\031\331<\241#\221=\316\371\'\274w\320\311\274q\016\316=\021Y\306=\370\376Q\275\021\214\002\274\007\353\343\274s\177U=\304\353\214=\204{\230=\335=\352\274\361E)\275\027\353.=\211Q\026\275\302\2244=C\221:\273\245=\247\274\341\322+\275\\\277V\275\274\251\001=U\026:<\262\333\320\2746\275\377\274V\301q\275\331\023\246<\256\270\247<06\237;\330O\252\274x-p=G\274P\274v\354k\275]!\001\275H\177\212<\301y\371;\231\001R\273\372\346y\272\353\373t<f\027\021\274\271\214u<\241\312V<\241\265:\275\366n>\275\365e\331\275o\tG=^\357\017\275\020V\206\275\035!\332\275K\312\024=\326\001(\275\330\226\275\274T\027\204<q\241\233\275g\245\213\274\311\237\310<\252\3636;\334\263\312;\007\303\342=S\200\233=\027\3311\275\276\360\004\275,\016\306=\254\213\347\275\017\367u=\233\315\311=P\001P\275Iw\331\272\252@\036=\032B\221\275\304\214\264\274i\021\t\275N\247\200=\003\345\201\275\000^\234=n\005\215=\352\263\332=(\271\202=HU\205\275i\240(\276A\365\257\275\237\177\253\274\203Z\006\276;\271H\275\253\212!\275\022Hx\275/\274\257\274\365k\237\274KS\212>=\264<\274!6\203\275:\346\224\274\202\223\307=\215Y#\275\266P\320=\032\367#\275\022\257\302\275\216\374\016\275\340\266\322\275\221N\233\275\237\037\247\275\324ra=\265\265\256\275\025f\336=\027\233&\275:\030+=\360b\234<\211\275\365\274N.\024>~\365;\275\"A\215\2742z%\275\275dJ\275\223@\001\275X<K=J\315\301\275G\';=\324\241\315<x\262\315\275\372u\203\274j\333\t<b\227j=\002p7>`\215\320\272\022\373h<yW\026\274$\377\313\274o-\332=\327q\234\275e\377\323\275s\212H<\334\014`=\025\333|\274k\225\000=\017$\020\276\226\004\277\273\255\245m\275\211u\004=\230\371\372\273xB*\275\266LF\274\016K$:\333\214%\274(\311\335;J7\247\275G[`\275O\357\372;Y\355\236\275\373\271\034>\313\371\266=\247\222\036\274\204\262\370\275\037a\210=\350\275\275\274\034@r<J\327~\274)\3619>G#\300<W\252\373\275\346\216\262<\372\030K\275\307\'\213\274N\366\205=\271\201^\275\352\201_\275\307!\001\275g\374t\275\213\360\231;F\261:<:\023L\275}\332\364=L6\306\275\217v8>n\3323\273MK\231\275\257\002\014\275\3070\276\275\215\260O=\320\r\344=]\266\236\275K\3664=\023P\302\274\360\276\306=\374\316_=\000\260\350<\'\022\305\274\203v\n\2766|\n=\005:O\275\030N\273;^\257\272=\216\013\032=\332\027\313\275\311i\233\274\014\256B\275Bd\035\273\026\001\242<+\244a\273<\322\277\274\333w\334\273\001K\317\275P\362\314<\337\231z<\272\346!\274\032\007E=J,!>}\2673\275T\023\220\275\001\216\271\275\250.\002\275R\3227\275\253(\235\2748\377\341\274\256\034(\275o\234F=\367\365\322\274lNH\275\032g\240\275\221\0247>>\237\004\2741H_\275\276`\347;\226\027\254\270s\315L<vh\276\275\246JL\275\023Y4\275\307\227\230\274x\2500\275\250x\036\275\353\013,>/\306\373;\315\2710=\326\014\215<\200\3449=\257\225\373\271j\273\374=\316\351\177\275\374\270\241\274\356\216\375\274fK\032<\227)1\274\034\tH\275\301\027E=\352\256\271\2755JF\2739R\262\273\007h\035>\022\037\357<\322\n\275\274\027\361\240=\321=0\275\214\354\230<+\376\t=|\004\257\274.\327\013\275l\245\214<\355\216\206\275w\315T=\002\'G\2751r\350;?\214\314\273\216\371N\275\326\026\332=;\303\207<n\264,\274\2414\377\274\010j\362\274B\217\026=&\023\260\275x\221\252\275\252~\273=Khe\275xt\000\274a\360d\274\325\037.\275U^\313\274\222v\343\274#B)\274J2\251\275\370\363`<\250\037\017>\034\265\270\274w\335\t=v\266\270\275\254\246r<:\302\201\275-T.\275\364\324Z\274\362\235\005=\366\342L\274,v\007\275\302\336\211=\277N\365\272r^Q\275\036\354\213\274Oq\227=9f\227\275\207i\360\273\262\203\014\274\357\344\342<\201\250u>U\014\347=\345C =\030\020\222=+\023)\275\0274\251=\244C\201=\260v\023>\217\"m\275gj\372<KF^\274\204\t\207=\360b4\275\363\377\034<\357)\032\275-\317\230=EHY=\024n\374\273\004\316k\275{J\253\275\303\373\272\274\270\246u:\211\206\024\274t\253\304\274\2412,\274,\323\024\275\003\265I\275\270}\204\274\266;\370\274\004S\263<?\207\364\274\242\261b=\036\321[\275\205\353\355<\322 \233\274\305\234\236\275(9\250\274\236\2208\274\024\374*=\336;\357<\201\035\335<\034\320\226\275\246\244;=p\243\274\275E8U=~\323y\274\342\350\031\275\r\010\277\275a\324%\275!\217\270\275\n\360\234<h\335{\274\312\202\235=\224C\217\275\305\247\225=d\013\211\275\200Z\377\274\2102\032\2753\333\246\275f\211\364=u\354D\275G\277z=\306~\014\273\263%a\275\003\357\302\273\342\346\371<\304q~=\252\270\311<\021\201H\275\"\264\360\274\321V\343=\345\014\332\275\307,{\275\033\276\n\275\366\\\016\275\036D\200\275[\250\353;\275?\177>\000\270?<\321\020!\275\031\017\004\275\224\221\272\273\000E\010>\2415T\275\300C\227<s\037j\275\243\342\377=\017L\323; \026\026\275\361\201`\275/\240\034;\177\256\021\275,\020\263<{)\200\275-(\241\275\274\306\206\275g\316\247;aUZ\275\027\222\340\275&\210\031\274\0168\251\274\327%\335\2741\177\234=-\'\211\273\204\237\377;\364`I=\001\2032>\324\242\035\274\177&\300=\272a\000\275h\236\241\274\355\243\227\274$k\020>\301\351\251\274W\030\033=b\225\013<\360\234\352\2744\025]\273\270\344n\275M$1\275\321\221\321<\rj\205<S\341\225;\242C.=\345V$\274\006\r\261\274\227\217U\275If\227;\341\302\210\275\223\304\205\274/\307\217>\265W\227:\302\014\244<\n\277\003>\353\372\001\274{\217\301:\214s|\275\270K\343=\362~\236\275\253\362\336\274Z\200\247=\226\007\020\275\316\267S=\020X\253=\253zW\275hj\206;\305\026Z\274\330=\317:M\t3<s\031~\275\263\363\230<\277\331\034\275\003\303\313\2742\035\376<\311\236\202=~ (<S\211\245=\026\311\006\275[J\324=\207\310%\275z7\306\273a\335?\275\303A\r=\307\334\014\275{\373}\275\341\262\344=F\031\337\274B\201\352\274\205\034[\275B\310\370<\267F\007>7\354\355\274v,\270>\023T\311\2743\351a>\257[\210=u\027c\275\035\375\236\275\014\007\327<\366\332\266>p\327I\274\274\276\031>\231\375\276\275\3763$=\325\263\265\274\2027\252=\277\031\375:\333\374:<8\375\316;\270O2=\206\376><\271A\255<{\312\025\275\271\340\025<s!=\275\177\252\261\273\357\312\241:\262Q\016<\337\035\236\275\306v\201\274\373\312\216=\351P\307\274\372>\204\275\247\007D\275F\017\246=\230n\311\274\260\313\254=Ar\323\274\262\217\354=\262,m=t\210\227=\306n\245=8\010\265\275+~R\275\331o\213\275\243\324\034\275\355\273D\274\336>\376\274\224\207\263\273\270\325`=4@\023\275V\232e\275E\246\354<\335g\227\275\206\354\227;\307\310\342\275\347\270\020\274\001\237-=\024\234\005\276Z(f\275|1t<\235\237\245=\204dX<=\245\335=p\245^\275\014\330m\275\311%\367<\211\205\231<\305\034\007=U\030\234\274\250\257l\274\006`\260=\264\357\005>\216J\225\275\243IB\274\361j\201\275]\023L\273\372\210]\275\344\030\316;q\310\255\274\004 \342;\350\311\251\273c\270\235\275\\\274V\274\223\266\225\275e\213\014\274\360\353\314\2744\357+=\370_\353<I\314\t=\026\364\027=\014\257p\275\271z\354<\377\312\206\273od\254=ZT\331\275\262p\013\275\266\237g<\233\204\003=\267\316\322;\204t\337\273h\326\025\276\276*;\2757\355\306<\332\355\216\2752\243\2639\361K\007:\350\367\200=-\223O\274}\335\356\274\221\030u\275\201\250\260\275\234\341\025\275C*\265\273\034\305\377\274\013\246^\27502\275\274N\033\336<W\235C\274\223\2432\275a+\200<\310\223\003\274\326.\036=\360w\313<\013\035\370\274 1\344\274\037\374}\2759\274\013=\027Tz\275\221x@<\253\214\217=\204V>\273\315\361\241;\352\204-\275\\\237\030<\317n\217\274\363c\177\273\304^\321\275=\263`\274{\226\"\275$Av\274\2725\020=\010_\301\274v\356T=\027p\355\274\250\250\211>\'\362\213\275\251@\302=\366>\024=\275\327\264<`\356\223:W\0106\274K\\<\275\254\247\365<\004A\224\275\211N\001\276w\322\201\275\206*\230\274\023\223:\2748\362\206\275\317\307\305<#\200\343;\362\"`<*^b\272]\372\001<W\355(\273d\246\213;\306\346\340\274(UV<[c*\274\376\313v\274t\267);mX\010=\224\277/\275\211\225\032=\345\207\014\275\261u:\274\355n5=\023\216\031\275\316K\026\275\007g\235\275\223\000]<\006\311\246;\251\230\300\274\205\275!\275\356\361\346\2743\344\030\272\263x9\274X\t\200\274=\214\203\275\354\326\017\274\216\205\277=\261G\357>k\334\257\274\262\322\371;\374\363\266<\211\270W\275\001\253\'\2752\346\000=\030\001\025\275\370\324\266\274\r\310\250\274y{x<\366\356\337\274t\243\3119Ou\014<\273\017\001\274\244\240\337\273\201\245l=\274\342\t=\010\002\023\275\023\t\013\275GV\255\274\302D\373\273e\370 \275\207\245\350\273\236\243\346\275\232\342J\275\273.\212\274\313\277D\273\360\007\372\274M\260\231=k\373\n\273\020\200u\275\024\374\010\275K\215\\\2757t\340<\220gz9cDP=h\365\323\275\253H\276<\336\270\267<5\201\033>a\243O\275\334\2462\275\271\362\313\274\274\226\014\275`\303\321=]N\242\274>\005\223>\"l\344\274?\226j\275P\323`<\244\234\265\275\307zK\274\202\004Q\275\351~)\273@\214\017=p\365\232<s\017e\274\336\032\351\274\274\317\275\274\351\261\301<6(\234;^zh\274~6\347;\335\334f<!\006*\273\027\235\207=d\371\233\275\314\036\306\274\217\204\235=\333oG\275%\373\357\2749\244\222\274\242\005\326\273])\265<?\030=\275\031\205A\275\240\312\025=1\277\333<\232v2\274\027\344\332\273\226\202u\272\224\363\264<\357o\200=\r\271\261<\372\204J\273S\225=\275h\021L\275#\1773=\276J\316\274\257\361\264\274B\032\241=?h\356\274\263v\004=9\303q\274\2615\014\273\242\222b\275\037\202H\270fY\035=\021\330\227\274\035\t\277\274\256O\021=r\361\212\275\214\257\370\274\234\325\254<}\333\255\275\304\244S\275\243/s=x(\241<\372\356\312=\365\001\360\274\342\357\231\275\231\356\310<\311\316G\275*\'\363<Z\271C<\362\352\2169\362+\216<b\305\363\274\307\372\026>_\245\217<)\273\220<\304\315u=\321V\233\275\022\037\244\275\301\025\207\273\3660l;,\252e\274~;\222\275\351\333M>\000-C=(\260\326:\372\373\022\274\021\265\310<\213\370\221\274\353\004D\275\010\216V\275\332\313=<\321\305\241\274e\364#\275X\373\303<>.\014=ig\316\272\376\302\335\274\262GY=\rq\204>`\002\312;\034\034\266<`\257u\2742.\361\274\327\307\366;\230B\316;Y\202\264\274-\265\262=\276\225\260=\360uj=e\276p;\301H.\275{\025\003\275\357u\331<E\003\344\274\n\376\373;\032\360\306=b\347\300\274\311\321T\274o+\253=U,\202<\3507\217<g\262\364\274\243\242\311=9\322\225\275\027y\350<?\016&\274\270\365\006\275\214v\223=\037\347\013=\202\340u<\264\262\374;\021-\n:\036m\322\275\010\202@\275s\025\026\275\270O\350<\206\2627\275]\317N\275\253\305\271<K5\227<\340\213\274\275\034\367D\275\034`\267\274\201\225\243<\211\343\021\274|5]=\263!\025<\\9\272<\013\330\352=0\370\241<v\335\271\274\260\207\343<\245\213\343<\030\244\352\274\214\366K\275:\211\t\275s\221\244\274\226\327\022\275\032\374\257\275\232]\332\274\022\206\314\273\277X}\275\022v\226<,8\027\275\014\003\016\275\361\376\265\274\226\033\022\275\234\374D\274r\031\341<\224\262\227\275\240r\233;bg\337\274z\265\364\274\231\260\213=\017^m\273>\014\177<kt\207<\016\335&\275\037T\227\274\206\267\262\274\037\t\272<\017\271:\274\203?D<\200\202F\275\234\032o=G}\347>\251#\204=0\005W\275\376E\303\273\207\035\022\275\3718\026=j\022\201<3\253W=\366(\334;3\254\262\273\030\217\213<\277.\373;G\204\346:\265\243\233\273\206Yr\274}\002S\2752n\240\275\377[\005\275\257%\235;\260\027r\274]\220W<B\237\276\274\213\023\204\275\211!#\275\201\241(\275\372\200\234<2\326\006\275\332S\220\274z\030H<\"\261T\274\224\240\"\273\300\327\313<\r\037\"<&\271o\271\222\305\237\275\r%\207\275;(\031\2757F\230\274/H\265\275.\301\226=\"\231\212<R\312\025\275\2418)\275[\207\303;#\216!\2754P\005\275?\301\001\275$\265\350\274\235\325\\\275mX\036\275\027L\255\274Z\372J\275\035%\270\2741b\247;J42\275zC\213\275\333m\322<\210\227\241;\372\252\030>\233\006\212\274\230\311\010>A\351^>\025D\314\274D\213?;\000\007o\274\033\221\264\274nT\305<y\2039\275\022\315;\273\010\224\254\275J\271\305\275,\2001>M\021%\275Q\2537\274\2600\'\275\007\023\313<\246\357\025\275\350\272w<P<\301<y\027\351\274\366h\241<)|\261<\237D\304:\014\322\321;:+\257\273q\001\275<\237`U\275\324\3410=`\262\356\2758\023\031\273f\266y\273\247?\000\275\r\301\355\2745cX;4\\\352<\345\003\037\275\224\227\236\274\255\"\253=g\356\366<\352gv\273\200rF\275\003\337K\275\201\032\260\274\036\365\263\275\305/`;\342\031\313;\340\022\016\275nj\250\275\225\037\006\275U\374]\274\321\205\340;\316\336\014\275&\365\025=C\317\326\273\351\177\337\274&\035\305=\224\264\013\275\002\021\302\275\256\315\232\274\313\366 \273\315c\377\273\024\300\323\275j\251?= \312\013=\333\215\266\274{T\236\275\224A\355\274\331\330N<\363\237\207\275\204\001\206<\247\027\353;\277J\373;\t\207\\<Ac<\274\204h\300\274\274\201\377\274\352\351\\<\224\017)=\272\n\367<]2\240>\035\267*\275O\016!\2750dw\274\226\325\267<\307\256\223\274F\332\301\275g\304\222\274m\227\t<\020\257\246\274\031\363\023=\227A\205=\3663\201\275\332\222\370\274\037\t\311\275\340\334\357\273\347\2454\274\333\346\324\274F\354\006\275~\0145\274N\2412\273!S\003\275\325l\221\275:{\265<k\022\010\276\243\r\257>\007\033\016\273E\027G\275&\272\204<\304\220\034\275rhx\274\316\363Y>\\\037\305\274\346\r\217;\234\026V\275\356\3651\274P\221\203=\377\243\022\275!\352i=\212\030\005\275o\232\300=S)\341\273|\001\242\275\2304\241\2752\023\236<\3427\210;\224Z.\274\345~\277;\016\303|\274\373\332!<\260\210\317;\233\230!\275*6\223=\237\220A=\313\033\026\275C\205`\274\230Vh<\0326\377\275\3035m\275i\010{\274\241\255X\274\253%q\274\204X\037=\024x1=G\0047\274g9\313=\210\242\314=\222Kr=\232\337\304<\345\236u>\355\373\031\275\003\330\r=\250\2540=\010U\324\275\246\351\247<~\366 =\302\326\325>\371\0162;\240\372\002\275[EU<\207&%\275\206\"*>\263k0=H\366]\275 \333\212<\365\310h\275\0266_\275uO\316\274\003\336V=\333N\265\274m\315X\274\335\252:\275tl\226\275Y*\r\274\315\272\351\274\235\n\226<\017\313^\275\365AM\275\227\336\314\274\230\342\237\274\373y\003\275\005\302\214<\254Z\242\273\001K\301\273;zU\275\2268~<h9\317<\375\376\025=zC\341<,\366k>\027\342o\275\013\"\341:\371\266D\275\246\242\214\275F\025{\275UU%\275f\021\214={S\222;\262\255\314<>\316A\275C\215\256>\355I\021\274\375\375S=\233\267\000\274s\310\010\275\342}+\275\206\325\232\274\245{\337\272\206\002W\275\3068x\274e\367\305\275\311\322\243\2755\006y;t\234\243=\351\256\016\274YET\275\t\251\007<\372{+=\375D\177\274-eY\275H\372\365\272l\260 \275\0135\246\275\213e\035\275s{a=\263\256j=I]M>y\246;\275\2441\274=\221\201\251< \017\017\275Pv\251\273\337\224\t\273y#\241=\225\310\203\275\002K\232=\204^x:\370\r\352\275)\223*>8\006\003\276\325\r\010\275\314Ki\275F\225n\275\374\377\177\274\203\3619\275\3438\006\275\372\331\272\274\266\0022=\367#)\275\213\334\251:CY\341\275\001\332p\2754\303;<\021\253\256;\370\025\230>?\224\352;\322\323\204=\007\253\007\275\372b\r< \375<\275<\000n\275\243B]\275]@f<Vz\010\275\335+\232=\316t\337\274\320,\230\275\034\021=\275\2366\000\275\356\022\237\273\375\256\024\275\004\215\315\275\376J\257\274\025\334(<\216m\236=\337r\256;</\207\274\353W\342<\000\234\226=\206\214\270\274\266\341\244;Gx;\275z\204\241;aj\231<\223>\241\275\375\342\307\274[s\372\272\017\002W=\014Q\215=\276\324\226\275\007\277[=\035Rn\274\255\205L\275\356\275\003>\373\212\253\274A\271\312;=X\031>\025\220\027\275\250\217Q\274Y\344\207\274\242*\324\275\241\352\262\275(%b<b\276$\275j\026\t\275(=R\275\3466\017>z\371\317:\024k\202\274\234V%\275Sq\225;\354\033a\2731\024S=\277\316\225<\327\034&\275(5W=b\032&=\003\034\227<;g\350\273b\372\214\275f\215\274<\251\245\266\273Gb#\274\223\355\331=`\207\267\274\177\240\265=\003\274\020\275\341\227b\275\267\333\242<\3717\252\274\245}\226;|\244\014<C\243\r>\364\261\222=\320\330\026\275\375\301\316\274\332)\035=\250H\213\272V3\322\275\377U\255\274]\027\322\274-L\231\274p\031\200\275\005\317n;\000<\245\274\304s\317\274$\2647\267\224\324J\275\261\222\022\275@\0212<3\337F\274\207\321\201\275\0167$=\'\266;=|Tq\275\2109F\273\3131:\274\001\233\300\273\313\235(=\260\375\030\275c%\352\274\376Q&\274\222\221\371;\307\330\010>\200!\316\275/2B>xAl\275NO^\273\370\205\005=\r\'\242\274\313`s\275\tC%=C\221\351\273\240\t\237<\312\303\374<:\321T=:d\203<k\303&=\017P4>H2 \274\260]X\275J\332\326;\227\010\221\275\212\201\255<\306`\250\275\321\300\224\274\203\366\215\275\235\330@=\013\376\003>V\344\003\275\267l\355\272\257\255\314\274\"\'z=\215\252\236=k\227\273\274:\340\024\275\254\035\240:\200\214F=]>\">\361\250\013=$\357\331\274\301\250\223\274i?i:\206\240\202=\355\n\363;O\276]=\000V\210\275\031\\H;N\323a=+7\344\275\264I\333<\010O\353<c-\374\274\217F\356\273Q\247,\274\356\362\277<\032\375\306=d5C=\273\271%\275q\tZ\275\325\340\236\275FR\003\275\245\373\306=\"\235\215>\211\360\235\275\265u\256\2748\354X\274|\022\375<\320W\007\275\307\241.\273a\265b\275\243\375\336\274\336yH=N[\254<\313\213\'\275 \027C\275\246\3160=\375KH=:;\212\275\317\226\377<\315\026}\274\301&3=\356\315->\025\327\001\275ME\372\274r&\256\274\366\330#>q\221,=\2556~<\276\226\001\275\372\320)=\322\350\336\273\365\252\377=[+\200\274\255\361\200\274ud\014\275\310K =\333\327\202=9_e=\257\006\236\274_\305\344:\233\024H=\362\230\036;\3438V<\245\363F:a\013]<\331:\373;\016\244\346\275GJ;=.\010+<~\223O\275\361\235\016=~\313\023<x\207u\275x\031\353\274\312\305G;_E\257<\001\321\022\274\243q\316\274\037\256b<\343q\032\274\365\034\251\273I\231\272;!d\212\272\313O\217;\213\014\377\275D\337\317\275\251\217,\275\347-\304\274\360b\226\275u\004\262\274G\302\024\275T${\275\007V\261\274|1\017<?p\202\273\344\003\321\274\005\264\005\275\370\r\277\274\357\'\251=\200(\251\274T)\221\275\"\260\003\273\240w\237=\312E\017>\355.\321\274\213\362\033<\351v\236\275\216/\262<WE\033=\206n\227=\314#\005\274\234\217\001\275s\330\333<\370\0339=1t\037=W\"D\275\213w\211;\307\333\313<\343\032\250\274\317\326\274\274w\301\237\275\352\3664>\030\3733\275\205\334\212\273\263/z\273+px\273\035\210b9\260\026\321\275&z\033;\327!\221=P\237u\274\273\271\262\274q \244<\270\354+\273\021l\262>\352\237R=\223\373D\274\263\252\216\274\036rd=&~\344:`y\220<\246\n\036=d^\270\275\030Z\231\275\303\025\\\274\033\202\032\275b2v\275\'\266\251\275z\033\247\275\364\212\034>\236U\256\274\366\274\275<\201\274Q\275\177\247\210\275C\260\032>\357iq\275:BP=9\005\346\274%\273\323\274$j\230\275x\370\010\275\215$K<\177#\006\275\234\325q\274\300\315\005\275xC\025\275c\202\205=\333\260j\275R\024Q\274\277\300\302\275\207j.\275&\2056=\371\222\234=K\272\342;Y\356\222=\203\260\211<KSo<\366\327*\275EX\000=\237un\275\274\350\220\274\253\216\302\275G\303\232\273\353\322\020=\367\223\021=\233\303M\275&\310N\275\342F.=Hf\033=\352\331\265\274\256~\323<\252\025y<\353\343A=\3303R\274k\000\004<\252\316\333<\"\010\314\274\274-1<\273\263\241;\217>\241;\002\023\034\275Lo\r<l\314\003=V\227\217=\020\021\013>\376\033\231\274\254b\003>\321\271\300<\366\213\225<\377\003\236\273\017f\202<\311\007\213\275\216#\017<\316\307\206=\374Z\225=\362\277.=\342`\n\275\342\371c\274\221\340\036\273\343My=\211\341\201\275\254\361\365:\003\275\214<\273Z\'>\214\332\2718\347\326p\275\317P\261\272)\231\214\275\371W6\270\236E\'=\301\010\242\273\325=\234\274\032\331\226<=\277o<\304v[\274U\0355\273\0322^\274p-s\274:qv\274\340N\006=N\271j=\365\203\177\275\273\014\013<\300\335\366<\316A\262\275\005\245\332<\200\"\264\275E\351\216\274\310q\220=M\352\277=\315\342\022<yOZ=R1\316\27404\215\275\364f1=\231\251\032\274\342#\240<\374\264n<\371f\253\274\261\200\225<\354\350\314<&\016\333=\267\025\021=\331VC<5\365,\274q\211\215=D-\357=q\277\t=\235jp=\365(h\273\t\234<\275\003\027\374<\265\366Q=\346Y\017\275\251\001N\274\000^\205<\024\271\256<\244M\227;T\252\276\274\246H\235\275\264/8\275F\354\341=\264>\246>\235Tf\275\031\227W\275\360\'\262<\252\177\036\274\272\353\356\274\257\241\322<C\241\330\274+d\322\274g\247\336;D8#;\332G\224\272\362w\377\273v\246\352<\31135\275\227\341\372<\034\027\345\274\005V!\274\327[\267=L\234\211<\267\343\014\2750\035\013=\267\275\036<\227\351\236\275I\214\031\275p6Z\2756#\001<Z\303\226=\037\335\206=\320\231r<\017\231\204\274g\001(>6@\345\274YJ4\275G\242c>=\227g<\213%\013=D\nL\275w\236\033; J\t\275,\347\027;\363Wn\275\\$9\274;99\275\000\312\231\275B\034\234\275\314\020\302<>\226\235= \177!\275eg\354<\010\234\022\273\335\301\224<\033\n|\274q\354\022=[\2552=x\357r<d\021\205\2749P\334\274\205\203U;JRG\275}4\233=\346\004\231\275\233\245\037=\254\300\034=\n\213\002:\236\361\350\275\301\231\313;Q8\020\275\216|s<p~\r\274\2745T\274\311m\206<\244\034\240\273X\301\205<\301\206\300\275\225\322\254=qML=\013\211\"\275\362\253 \275nlw\274\344\321\022=Xo\203\275\202\303i:\022l#\275p\313k=G\'\035\275\366\217\354<\002\250\035\275\377_\246=\027\247\320\275\220\016\226\274\010\233\210=\nL\032\275\350/\347\274\255\022S\275\202\014\250<YT\215\275\235G\265<\000A-=\251\034\030\275\234\374\216\274z\314\312\274\222Z+\275\253\346\303={\022w\274&\257$\275\261\223=\275\246\222\322\275{^\033=\022\310r\274\230P(\275:\300\253\275&\340\300\274\253\tP\275\035\243\230\275\362\274\377\274\034\375\272\275d,d\275\2675\271<\364\022\204\274\274\230\355\274\377\352\367\274n\254&=\313\245^\275N_\374\274\211\265\023=\204\251\201\275J\237\350=}\315\364\274\311@v=G\226\234>FQM\274\316\3026>W>\256\274\013+\206\275\331,$\275(\340@\275\360\225~=\350\252\212<\272q0\275\305\236J\274\0107F<\321|\021=\301N*\274\265\036H\275p=\233=\337\004\304=q\371\224\275\314\332h;\306\343\375\274\373\247\371<\352sS\275\325!\033=\253\025f\275\210?\221\274\362\356\t\273\022\340\317\274\034_\351\274\332X_=\252ri\275,\252\0068\032\360v\275r\377\024=r\017\340\274\375!?;\344I\205\275\310\276\302=n\207\252\275K\371*\274M\227d\275\014\'\305\274\257\350\200=\207\200$=/\245\243\275H@\374\274Q\234:\274\3674?\274\255\303\033\274{L\023<\377\271\274\273\031,.\275/\2616<\202\177\333\274\215\352\372=\035\024\301\273\315Pi=.\216I\274\232c\253\275!\030\234\272\036\'O\275\200\210\006=\200\rZ\275a\013\311\272&\014\177\274\026\n6\275\251?\273;f\016\023=\362n\246\273\247\035\217\275\363+\t:vy<>\300 \201\274\202<\217\272\250\331\362\274\021\346|\275\006\247}=yy\034\275W\365\r\275l\263*=\037\345X=\210u|\275D\007D\275\214\220\032>\304rN=J+f>a\036\276\274%\216b<\370J\272<\333h\254\275\371\341\277<)U\260;\316V<:\317\027\342\2746h\375\274\3030\023\274\341\006\215;\275\3264\275\226\243c\275\321=\020=\005\376\311\2758\264-;_\017+\275\260\033]\274gS\277\273R!\207<\036d\343=}\367\244\272\337[\201\275\231J\215\275>\252\031\274\226rP<\035\231\253\274\035\257\225\275h7\306<\274\254\n>>\324\235\275\343\210\315\275m\317\014\275\234\003\\\275\231\306\205\275[QT\275\243X\305\274\230i\235<\ru\217\274\225\304\n\274\025\220[=w\\\240<\'\363\245=*^\234=X\246s<\340\362\340\273WRj\275!<\301=\213H\347\274\235L\235=N\251\363<V\301n\275\014\215@\273\'\3623\275\243\332@:\226\273\341=\277\'\215=\034\023?<\236q\237=\273\226\003>\'W\363\274\263T\007\275\2108]=\357>b<\334\334\352\274B\177\365\274\274\000\204\275G\022\374\274\206\330\241\275Qw~\274D^\025\274\272\276i=\307C\025>\204\205.\275\255Q\307\275\346\304V=)\336\006\275\303\372\010\275I\334\265\275\2251\343=\027\021 \275\317@W\274\327\314\010\275|\251\335<[UI\275B\256\305\274\360\363\334\274\271\005B\275\364\267F=R@\013\275N\267\302\275\226\234\260<HB\360\274W\304Q=\005\006j\275\355\266_\275\315\327\211\274[&\323\273\031\023.;n\303\025\275V\016F\275\307\376\177\273\330X\006=\222\200\n<\021\373,<\371\200X\274\315\325(\274\264 *\275\222\001V<\300\255r\275`\023T\275\326\351\226=\020\271F\275\224G\214\274%\226\030\274&\247\337\274\343\360\276=P\010\035>\221\024\340\274\300r\353;\256F\255\273\323\210\235\274>\251p\275\361\276\004\274\324\242\200\275\256\230\257\275\344\363-=67\025\275\021\362\n\275d4z\275\355EL=\375u?\275x\321\267\275\007N\035\274g\030\033\275\303\027G\275\317\335\026\274\"\374\014\275qD\r\2754\025\033\275\216\303\211\275\207&\307;\371\002\247\275#)\"\275\365M\020\275\247\261\t=\017\327\t\274\362\243o\275\025X \275\272g5\275\n\217\001\274\301\255\212\275\034\237\203=\240+\252\274gx\362\274\004\340\377\274\227mE\275\370\244l<\022\177\002\275\377\226\004>2\257!<\260\233\351\2747H_\275\334\024\203\275o\270\022=O\'\343\274\013\002\364<\204\235\321\275\246JY\273t\374\237\274L#S\275B\001\373:w\377\364\275\201\247\034>u\005\275=\251\3530=\344n\r\275\277\333!\275\232o)=*\2212>\216R\032\275\220\177\303\275\035\020\305\274\204\332\032=$\233S\273\337\307b\275\347\304\361=l\035\335:\177&>\274\031\373\253\274\261\325h=3\207\323\274tKh=\374\301\274\275\374ed\275\306\223\204\274\341\371\353\2759c\034\275\021LW\274f=\220=\220\261u\275\276\313\244<\016\3674\272/\332l<l\001\235\275U8\240<Q\246\366<\273B]:\347z\263\274\272:\n\275\036\201z;9\257\220\274\325\224\345<\340\325\201=\206=\303;mS\205\274\003\004\245<*\272t\275p@\221\274\376\177\020\275\262+\224\274T\342\021\274T\321\332\274\200f\337<\353?\350\274\233\363N;\tv\250\274y\343\334\274\373\007J\275\346om=5\021\321:\341@`\274\337v\312\275\360\327\210\274\275a\304\275\314WT\275\016\265e\275j\251,\271Q\224\r<T\354\255<X\203D<\014)\214=\346\264M\275\211S\025<S\325\242<\350F\225\275\215\275\361\275,s:=&+i\275a]a\275\267\254\214>\342\344>\275\251q\252<\"-\367\274l\365\240=F\370-=\004\334\226<\213C\035\275\373\354\211<c2\306\273q\035w<\257\331D<8\275\031=\342\'9\275!g\320\2743\t]\275t\226/\275\203]\205<\362\315\t\274\207FP\275\314\367\277\275\325\337\r\275p\260/\274\314\255,\275\n\177K=\270\364H=_\314G\275uiF\274a\254\262\274y\345\332=}s\272\273\316\351\036\274\310N\355;yJi\275~\177\205=D\200\322<\231<\305\275\212(2\275\\\023(\274\376\224><\277\336\010\275\344\220\t=+?y\275\333\t-<r+]\275L\345\277\274\3460\026\275\214\322O\273\266\340\375\273&hT=y\221\225=\221\253\"\275N[K\275\253\272;>e6\346<\236\263\251=\313\266Y<\242\342\200<\335J\233\274\202i_\274\3569Y\275\352\3612>{66=R\2611\273\2343\013\275\263f\031\275\302%\215\275\210\212\354<\221\224\250\274\237pN\275\367\304\304\274X\014\024=\3636\243\275\307Yz<\342!\250\275N\014\344\2747\326\322\273\235\216\261\274\t\201W=5^~>\317\316R\275\010\244\377=\372\372\260=\324c\227=\316\250\332\275U\365\230\275\347\344\313;4\256\311<+\004\001\274\271\034\031\275\353\271h=\252\351\252\275\275\372k\275\206\251$\275\236k\201\274r\343O=\260\277R\274\200\260\336<\244we<\242\373\332\274\251RJ=\004\211*\275c\234\337\274\223T1=\301KW\275\217\303\332\275\305,\363=\316\3567\275\036\201`\275\322\373A\274\303\246\003=\352:\303\274\301\224\350=(A\270<\222a\022=q\234\234=\343\035\327\273\216\272\351\274\224\375v\274\212\204\232\275\373\037\025=I\354\231\2747\031\240=\245R}\274e+\270\275\221\207\215<\377\233}\275\213J\222=n\275T=)Z\r\275T\r\326\274\264\360n<\300:\355\274\025\337!\275\202\376\216\273\341\312\222<\300T\302=;3\211\275\202\222*=\231\2071\275\r\203\331\273*\345\006=@\306\315\274\354\373\243\274\326\n\221\274-&\354;\252A\370;\320\201I\275\301\2207<\374\355.\275\327\326H<\233\246\340\274\331\320T=\246\010\016\275\367%\356=$\n\036\275\001\346\022\275s\332\033=\000\256o\275^\212\014\275\025k\215<\247\345;\275F-H\275L}\275=\243ie\275\303aI=odg=\222\222u\275\230\327\204=0\303q\275<\226\221\274\334I@\274J\224\233\275\004\030\177\275|\007 <\370D\261<\263\255\350;\235[\270=\310]\272\274+\021\201\275\026\257\263\272\211\201\005\275N\001{\275\366\000\223<\000\253[\274\334<\344<\242\031\344=\037\0029\275\335\372);j\346\273<\377\346\251\274\357\021@=\256\1774\275\302\3376\275\336\251\211\275\377\0355=\277\307\365\274[\035\177\275.x\216\274DmE\274\024E\302\275\002, =\276\267\207\274z\236a\275\271\\\022=\275\025\300<HK\214\2756p\226\275\316\"\341\274#\217\371\274\373\230\253\2754\214I\275\034\325n\274\310b;<v\352\022>2E\206<\231z\331\275M\337\242\2759`;\275\246\316\271\274\307\241\035\275|I\244=O\254$\275\245\321\335\274\317=\330<w\355\206<\374\"\373<<\333\336\274PG\300<\214\0335\275\032\307\373\272\027\034@=\343\007S<}\3731\2759\227*\275\232~f\274,\256\335\274\204\330\260<\242\004s\275\177\211\203=\021R\343<\305\303\276\274..\332<+\t\006=\207(g=<>:=3\260\262\274\243Hs\275\246\004I\275\224r\332=\031\210\273=\240cb\275\354\202\t\274\'\364\243\275\237\374\007\275\330D\340<\220\253R<VJ\256\272p\321\\>6]\337\274\243\033?\275\265l\245<Kl\216<\231\013\035<\236\262L\2758\314\262\275\'\376\366\274\013N\236\275\277\\?=\310c\260=%\t~\273u\334\366=S\333\340<:\234\236<_t\360=G\321\211\275\323)M\274\217\226\\;v\240)\275H\207\207=R\310\033\275\211\314\207\275\371\234\206=\003\323\341\275\364n\320\275l\3032\274\321J\333\273\226{\256\275\353\225L=+\027\016\274\035\203(<8\231^\274\355\363\264=\313\013!\275\215\336j=\231\277\277\275\3616h\274S\031\253<\375\351\325\275\263\337\377\274\245\270\210\274xu\370\274+\302\253\2740\005\264=T:\300=\371o\216=\322\021\255\274\225\216\307=\241\020\035\275\356\202E\275\374\\\\=\r\241\315=\017\342\315<w\322\263\2743\306\232\274\033\250\352=q!\323\274D\004j\2737\353\214<Ie\352;\211\236E=\035\343E\274\325;\035>J\376\337\274<\277\005\275\371\226\266\274\026\215\310\273#t\355<\355\320&\275\310)k\275\313o\000\275QN\341\275\346Z?\275\343(\025=5\007\222=*@\300\274>jW<\270\'<=\026\030\331<\271D\010\274\272V[\275\275\022/\275\325\337\210\273\220\307\202;A\030\264=Q[c\275t\2222<\376\273\366\274\334\035\206\275@Qo=QO\036==\375\246<\322pg\273\275b\022\275\374f\017>\251\214\244\274E\226\213\275B\031b<\006\006\221=\223\250\337=\004\357\260\275h\354\216;u\241\370<\307\026E\275&\026~\275\032\353\177\274:\276\361<\233u\r\2752\232\276;\263B\212=\205\343G>\327a\335=>,n\275\036=\342=\321w6=\203\305q\275\306\257\300<y8\201\275\002\247>\274\367\341\251\274}\355\320\274a5;\275\305;\024>\r\331;\275\376\232>\275\323\376+=\266\021\005<\314\326f=_)\221;?5\025\275\234P\267<\277\261\025\2759F\206\2759k\215\275\0161\324\274\241\2027=\256\362\260=-q\216<\201\372\342>IC\253\274\270\372\302\275\332\216\265\272\364\024\n\275\001#z\275\223EQ\275\342\372\214;\241\221\004\274\033\256\261\275\355&\203\275S^3\273[\220\254<\\\0105\274\316\346\210={\034r=I\327\372:\237\232\031>m\253\320\275\232h\240\274i\034\000=b\224f\275\240\014\020<E\312\224\274#\226\340<7\r\366<\035\324\375\273\345\025\343\274\325-\314\273<e\207</\276I\275L(Q\275|\020\225\273\252*\203\272\014\2253\275Z$5\275\2177\210=\215\214\332<\374H]\275_\230\036>\304;\207<\372\177\205<\266\340\344\274\314\337E=\235w\265\273\225\003/\275\304\220\336<\246\345\014>u=\202\275J\207\r=\310\331\200;\306\322\236\275.\322\021\274\000\203\033>\t\016\267=)\026\226\274\345x\226\274[\310O\275\324\020\267\274\315XS=\365\255A\275u|[\275h!\345<\343\370\r\273\276\326p\275\341\0045<\202b\217\275<\323\274>\r\177\025\275\223W7\274\310*d\275\002lC;\332\223~\275\007\220t\274\023A\300\274\036?\000\273\366\372\n\274\310\341[\275<)\\=\365P\300=\026@\035\275\026\207\2609\343\241\232=&\010\346:JU\367<0\375\\\275\270\300\022\274L\200D\275\234\007h\275\316S\326\274\362it\275i\303=\275\223\235H\275$\272\261=\t#R\2740lN\274\263\"\222<\037\233\257\274\252\003s<q\304\327\274\274d<\275\023\300\245;\031\377\"\2753o\006\275\274O\257\274\234!\224\275;\310\t\275\257\262l;\266\267 >@\373\300\274\016\264\254\274Z_\000\275@7%\273\304<\262<\374\304O\274\336H|;\316\220\235=\363\315G<\345\224\376\272\336\264\034\275J-\211\274\236;\334<\357\200\243<Ks\302\275\016\232\361\274\0142\221=\254\021\245\274\305\rR=\344\356\241=\3734\222\274\255P\314\275\265h\027\275\301\233\362\274\262Oo\275\013\231\r\274\332P\277=J\267\322\274\321\241\317\273\345\345-\275\211\353\020<D\266\215\275\314oC<\244h \275\363\355T\274\237\023=<\235\276\304\273%\235\023\275\311\3264\275\177\rI\275\030\336\305\274\007P^=\305\310\222\274\3303\243\274[\322\236\274\034\001\317;\"3\006=c\014\031\2751\206f\275\372@\001\275\224\315\370<|\037\017\275!\261\332<\313\307\'=\206\266\241\275 j\n>q\025\013=\000 \200\274q\261\205\275D\204\t>\300\366\221\275HT\245\274\t\264\227=[\023\360\274\255\225J\275C\237\331\274\375\343\005\275H\236\227=\311\030\221\274\225\030\374<\233*-<\356}\366\274\252\013\t>2\263\031<_\r\021=\353{\"=\032\250+<Yy\274\275x\344\232\275D\366?\275\030\024W\274\241\273\351\274f\n\212\275&\212\352\272\370\334\232\274\002K\276\275\361=\264\274lV\t>\302\315\347=n\356\266<\302\235\346\274\010\333C=\027\207\217\274\240\2610\275\207 \303\274O\360\207\274\372\243\223\275_Pd\275t4\264\274\315o\t=9Y\007:b/\217\274\277_\257\274Fq\027\275Ou\006<Wo{\274\303U$=\207\350\325\273\304\237!=6?C\275\316\344\321\274\nO\373;\245\327\254\274R\034*\275N\355\035\2751d\334\274\206y\313\274\010\345\317\273J\354\026=s\356g=\3320\341;\274\377\353\274kQ\037\274h\256]\273\354\347M\275\223\324~\274\362.\372\274\227\245\371\274A\305\251\275\027t\201\274L\363\\<\316q\031\275\365\"\261<\\\034\370=1\224\241\274Y\305\202=\t\252)\274\255U\216<\256HX>=\036\257\274\214\257\250\275\n\017\033>\342$\243\275\244jZ<\r+\355<\036\273#\275\375\214\242\275`\307\216\274\364\275\260=\255\323\013\275\267\"J\275\3554\234\274rc\303<\342\240\266\275w\375\231;\006\033\244\275b\301/=_\321\300<O\200\205\275s\3009\274L\314\307<T\016j=JJ\t\275\r|\335\274\255zY\273\324n\312\275\330\275w=\365su\272\336\304\177=t\363a\274S\246t\275Y\215Z\275f\271\236<\326\036\013\275\022\316\220<7?A>\001|\357;\312\267\021\275\243\022\241=+\332\342<\213\336\373\2743\321\260\272Z\221\013\274\375\356\023\275A\'a\274qF\270<\342u\023=\\\t\005>O6\375\274\347\252\271\275\270\330\255\274\027\264\270\274\275\254\202\273\232\002\217=e\216\336\274G>\326\274 \n->{\005\006\275\2613/\275\362\364\352:\215\372\020\274-\031\210<\267!\210=\3235\200\274\351\371\201\274W\363\263=W{\375\274\342\032\016\274\252\215\257<U,\'=\021\305\204=\\\304s\275U\321\233>\372,4\275\003l\352<\251P\350=6\035\004>\266i\320<\000NK\275${A\274\313\n\327<\273A\352=\274k\000\276\217\333M\275\353\007\211\275\314\304T\271p\305\224\275\315Nr=\002\241\211<xZ\007\274\271\346\361<9\241\357<fV\212:\017~\336\274~\333&<\322\241\330\274J^t\274\312\203\376\273\265K?<\234W\212;\225R\213\275\214\343F\275\327\207\255<\3302\354;\313\333\220<\022\330\203\275\311\212\357\274\354\361\237\274\277\252G=\221[\005>\233\006M\275\375\273F\275g\311\202\275\323\013R=\216j\374\274\350\342==\316\304\234\274\273L{\275\'\232G\2755 \200\275\253\273S\275To\270<\374HH=\324\357\'=\2479\274\274\207Eq\275\":\363<\033\370S\275\345Q\256\273t\257W\275}\272\321\275\305\320\207\274\223o{\275\361\220\224\275\234\300\214=\"\357\002\275?w\021\275\216;\371;/]\344\275\376:\217\274\227\377 \275p\344\250\274N\343\020===\211\274\367$\027\274;v\205\275\204^\203\274s\354\005\275\024\027\205\274%\005\301<\024\007g\275\234\340\273\274\350\r\212\275\0048{\275U\243\267<\210\220v\274\305\355p\275\3179a\275\3251\024>\252\031\367\274m\240\017>\0320)=W\010\371\274(_\032=\302A\357\274\242\025\375=\030\236\216=\350\031f\275Y\250\263\274\351k\230\274s e;wP\324=\231fa=\241 \326;8\"e\273\343\271\263;\200\301p<\213\022\022=\2757\305<\302\311X<d\014\224;\023\031\031\275{\221!\275\002_\274<\355)U<\231/\347<\3073R<\203U\377\274F\357~\275\326\375\023<\306\230\221\274\234aq\275\254\024[\2736\000\207\275M%\223\274\223<\256\274\305\3359\275\335\201\376\274N@\310\274x\006\325\274\350\3652\275\362X\003\275\31072\2758t\254\273\372\323i=\200\326\327\274\310\236\000>r\277\020\275Rzn\275\221z\256=\270>\177\273\2058\025\275\240\270\251\274j\327\016>\231\217*\274\016\324\037=\255\303.\274\032\006\032>\371Z\016=\235q\177\274\356\351(\275+fj\275\3049\306=\031\343;\275O\275^\274:V\305\273SK\273\274j\2359\275]\225\024\275H\010i\275\351\201\316;\353\236\2309y\260D\275\200i\'\272\243?,=\006Z\030\275\276F\014;\215\363\016\275\212\300o\275\020\"\035>\352\327\035\275\032\326K>X\240\340=\311\327\025>\246:\032>\304\320\206=\220t\003=4\310a<\346\177]=\033\212\002\2750\356\212\275\271\000\245\274.\026\333:4\342\341;;\266\217\275K\n\010\274\313\347\265\274\261(v\275- \025\275\313\356\226=\005N\032\274\030)\372<(c;=\036$\2277o\230\201=\250\206\\\275\3618\223\273:\027\373=\333K;\275\375\326\211\274\002<\215\275@\321\032\274G\254\340=%Gt<Z\376\261<\206A\224\275\355\300\264\274\346W\274\274\343\354\225\274\220\334^=.T\360\274~\301\220\274\300Q\007=\355\374e\274\033\322\225\274}\326\n<\302\"V<\r\202a=\307\316s=8R\353<\305\252\371=,\206P=\230\346p>\340\340\217\275\023\276}=\030s\235<d\303\224\275\017M\016\275\307A\r\275\351\303o\274\"/\325\273\217\007\263=\037\303\264\274(\203m\275-\321Q>\311\013\201=ky\235\273\026\335\n=\264\267\007\275\222\237\210\274\024f\014\273\250]\221;\267\000-\275\177\245\341\273\261Q5\275\205\326\354\275\361\027V\272\367S\227=\022\332\312\274\\Q\252\275\234\'\357<\352\234\352\274m>\303\274e\201\035\275;7\212\274\311j\202<\222jz;\026\023\002=\033S\034>\366q\002\275\235\006k\275Z8\241\274\275\243\033=9\313\303;9\370\226;lv\211\275\274\005\227\274\013\204\200\275Q\252\241\273,*\204\275Ey\233\274,\231\026\275\301\302T=)\367\204\274\325@\241\274\034\021\r\275\014\364\206=\n\371\027=\357\310\344\275M\033\026\275t(V=\314wr\274P\341\226=\033Ju=\344M`\275u\030\243\275\330\274e=Qy9<\026\355\222\275\353\316\021\275t\261d\274O!\016\275\\\253G\275\2359\241<|P\221\275\205\376#<\217~\004\275\202\310\027\275^q^\275\310~P\275Tf\272=w84\274\215\001\020>\260\026w:\202d\225<\235\2323=g\370\241=\247\000H\275U\316\017\275Z\224\266\274\026\361\330<7\036r\275\016F8=2N,>\t7\223\275\363\361\035=^\272(<\205\\:\275\377\330*=,\330g=\220\"\243\274\3211\312<\324\311\267\275\215\3045\275u\026\316\274eb1;\016\376\267\274\257\021\204\2751r\266;\3339\000\275^\020\262<\300\332\344;q\343\313<N\032\352\274I[\307<.[E\274o\024\232\2748\2635\275\246\247\243=\267\311\215>\035\256\332\274\034\334\272\274\300\223\036>\300\320\214\274/\267\006=i\006.\275\365#\373;\007\000\"\275hG\021=\324\r\263;\023a:\275\010\005O\275\037\210W\275\004,9\275\004\2328>\230\345\\\275#\262\233=\343\314T\275\220P\352\274\037a@=\272\030\353<\2046T\275Sh[\275\377\005:\275,m\240\274\366\251C=lC\302=\2052\252\274\332\201\353\273\271\326\217\273xo\222\275\215\336\037\275a\345P\274\032n\374<\275\371a;j\327\r\275\245\225C\2749O\267\275d3\343\273n\002\032\275\266\034\246=\360\300\237\274\035\0336<:3\262\271\205%\245=\004ub>\357\271+=\243\233\205<mP\366\274\270\000\202<\032u\300<7\327K\275H\375#=l\0377\275C\255\247<V\274\220=L\237H=\205\327\213\274:3\276\274n<\211\275\315\334\275\275\223\313\265<\256L%=\200\023|:\324:\253;\335r\227\273k\310\033=\200[.=\t\326\033\275\023%c=\324\3743\275|\"R\275x\354\377<5@\360\274\222[\246<6\n\032\273\207\265\335\273\216\255\203;A\3579\275\354\327\031<\344\272\n\275i\242\211\275,\2423\274N\266]<\211\246T\275 \261\322\274$Z\006<\024\302\226=\373HK<\206\037F\274j\356\244\275\270\262&;J\223:=\310wa\274F\t\205\275\324r\204=8 m>\201\277\204\274-\016\227\274\241\314\005=\333|\007\275\211OX\275k\270L<:@y\275\344\216\327=\276\030\372\274}}e\275s\330\207\274\330\274T=>50=\347\3258=g<\026\273\261\304p\275\277\252\276\274\345\r%=A\357\252\274g\3448\274\016Y\344\274!\371\202\275\235\377\240\273\213\016j\275\245\376o;?~\316<W\222\223\275\260\223\227\275\245\\-\275\343\352\005=\344\207\222\273\010\227O<t\341\267\275\200\273N=\037\260\333\275P5$\274#\336y\272\234kE>\360@\213\273\234\332\316;\324]@<\034|\254=\364\277\":\272^t;`\014[\274\216\233\370\273T\321\032\275\227\023v>`\242<\275A\022\034=\n\215\356<\342g\013\275,\271%\274\342T\217<\001\267\200=\345X\n\275\261\212\\;\364\327\035=?,\265\274M]\221\275\314-J\275\377\201L\273\235\256\227=<U\327\275\266\365\016\2751\225\226<K.\016\275\024>T\275.\247\017:\025cf=\257?w\275\355f\350<\271\023P\274\202 \023<M@\230\275\310\226\222\273)c\206\275\335\310\327\274\335@L=\244\353\221\275\230O\270\275\300\340\352\274\215f\302<\324i\224\2758\016\245\274c\207\217\275)\300\036\275\002\202\357\274\302z\315=\005/\350<\033\227\257\274oq\020\275A)\004=*XY\274q\351n=\036a\021=[\003y=\313\013i\274Y<\220\274L\215\037\275\247\003\\=\372\022\255\274\212\010\203<\237V\220\275\212\252>\274D\017Z<\244\254\245\274tk:\274\t\213\027<\3427\037\275aL\033\275C\231\336=\311\\#\272\373T\237\274\337\320\243\275(\240\361\275_\277\277=\034e\230\275\365\276\302=0>b\275\231\003\002\276gUc=\312\2651\275%\210O\274\014W\212\2742\202O=\245\342\267:\224\376\206\275\010z\270<0\364d<{y\037=\262j\227\275\231\227\007\275\030\007\275<CM\362<\252\212\321\274{\375L\274\021N\353\274p\025\307:4\377\032;\271\236p\274\031\360\223\272\347\370Y<&\260\361=\206\332\240\273\371\350\225=`a5\275\250\255M\274\260\326-\273\214$\343;\317\374\025\275P\241Q=\360\t.\275\245\246\251\275k\354a\275\335(d\274\361\320W<E\361\263\274R\026\215\273Uv\315\272\016\353\272=s\336S\273\340\304\227\275z\200\336\274x\364\314\273\323\334\324\275d\235\r<\262f8\274\267\215\312;\230\214V\273\313\331\203<\345\233o=\260\235U\275%\001\245\271\0268!\275\345e\r>\261\317F\274\255\325g\2759<f\273\224-\360<oS\021\276_\327\207\273\363|\030=\201\216\274<\001\367\271\275\351K\001>\330\333\022\273Zb\222=\207\327\306=\032\356\035>\r\222G=5a\223<\034\263\204=i\376Y=zY8\275ZX\214\275\341\262@\275\375\245\313:\203D\367\274\361\303\253\275<\230\017\275\246\251\222\275\351{\023\274\265!\261\275,\302<\275c\302*\2756A\235\275\220A\272\275\312We\274\010n\\\275\r* \275>\315\240\275I\340\333=\321_\316:\372[e=\203y\333\274\263\300\263:\031um<\216\rD=+\007\304=\235L9\274mP\'\275V\345\363<\232\212\251=;5\013\275\203\360\002=\363\350\027=\300\315\220\274KQ\000=\251\212<>\322\271\333\274\346\340\206<{\341i\273\271w\374\273\251\250\314\274\356\232=\275\214\204\t>\3528\223\274|\014\267\275\341\230\035\275r\362\240\274=\201\313\274\021\211\200\273\302\252\322=t\207\324<\252H\201=\027:\326\275\\\321\366\274\311s\322\275\253\242\003\275\206s[=\221kn<\270k\010\275P\273{\2742B\r<z\n\302\273\277\315$</dt\274\240\271\216\274B\250+\275\034\323B\272\251o\213\274\217\362\346\274_\356,\275;k\376\274w\025\004<\253\250\025\275I\342\216>\226\216_=\243\337\017=\2728\236\273\217\217A\275\224\037\260<\0351\243\275\003\034\203\275%6\r\275\000_\223<\241\253l=\261\262\203=0\2705\274\t\376\377<\005\215n9\267\360\220\274\200K\247<\035H\320;A\263\366\275`\272C\275V\017\242\273\227\266\375\274\235\275\026\275p~F<D\375g\274\333\217p\275\300\024\250\275\213l\214\275A\211\207\275\250\177\030\274\025\343\362<\007\033\2259\023e\315>X;\211<\246\271\017\2750<\215\273I\020\337<\250\3446=\270\361\220\275h\010g<\224]\013\2768;\205=\026\245i=\345\247T\2753\355f=2\000]<\253\215\213=\242\275\321=\376\230&=\002,\227=bs\377;\253m\345\274f\301\375\274\217f\203\274\007\375\226\271I\n\255\2758W\000<\215xP\275D\0252<9\t\224=x\323 <4/\016\274\367O\314<\002\321t>\242x?\275Z,(\275\217U\341=\304I\370\273P\271\005<\031\271\242\274n\353\337\274A\265\034\275l\2555=\250\320\210<H7!>\374\363\251\2732\030\230<j\312\302\274\350\377t\275Ba\345\274$\204\217\274\021\307\251<#\333\023\275J;\005=\270~4>\202A{\275\243Pd\275\236\236\220\2757\022)\275\203\313\013=\307\3527=K\327\262\275>\021;\2755^\365\274\227}\277=\353\222\325\273b\366\373\274\026\262\342\273\367\347\215<\347\341E=\313.\"\274\327j\204\275\356\006\203\275\304\344\252=tle=\225\201.=\216W\214=\201{\014\275\223\361\'=\253\273S\275\342\023v<\033u\275\274\177\355/>2C\022\2721\"(\275\0104-\274#\367\367<V\340\t=DGA\275+\275\226\274\357\377\317=q\325\r\275\275\320E\275\352\223\t=|D{\274\270\311\030\275\211VF;P\211s\275\200\355\032\275T\244C<\027\234\"=\365\030\350=\251\335^\275x0\013=\206G\033=@\322\326\274\346{!=\020\335\007>\225yY\274\372\2763=\326\013\360=\206\177\243<\002\005\314\273\352\274x=K\370*\274\34117>I\267\010>R@\204\274\254\254\334\274\2172h\272\030\347\330<bp(\275\236\356\313=\303\032$\275\323\261\250\274a\256\\\2742\234\204=\234\331\225\273>\364\260\275\272YG=\302\372\327;\345:*\275.p,>Yd\202\275(\335\003>\347\373\223\275\236\2309\275|qm\274k\226\222=xl\320<\274\3660\274\347\355\205\275\227l\270\274\207\325\310\275\336\014T=\217/\267=\032B\030\275AZ\214\275\030\356\017\275\277\345\035\275>!\211\274|\310\350<\217J\362=\377\247)\275{9u\273\365r%\275\306\332y\275\275\336\023\275B\363\213\275\215g\364<\373$\241\2759\2144=\225\347$\274\313\357\221=\216\254\376<\000\310\275\274%\275\007\275O\271R\275\232V\002>\244\031N\275\n\254\021<J\272\224\275\247\337\315=E\370E>$\237\021<)\273\306<\363\007\267\274\310\233\000<\365\020\347\275\257\346\347\274z\330\036\275\363\324\365=b\237\200\275GI\274\274h~\020=K^\300;X^\377\274[\374\020\275\240\213Z>>7\304\275\273\213.\275\020\324\221<\325M\353\272\016\371<\275\371\235X=u\273\347\274\245o\032=\366\222\243\275\261\330\314\275\025\035\022\275,\262\255<J\004\315\275S\006\265\275a\001\014\273`;#\275\273|O>\277,\014=\021\364Y=\343\217\332\274\330\2741\275\2212\225<\372\006t\274\333\301\247\274\024\267\215\275\227e=\275~\276\256\275\354*\032\2755\212\365<Q>x=\325$\027;\353r\315<\262Iq\275\336\220j=)t\000\275\256o\351\273-\322P<\260\332?=\335\273\232\275cJ\n\276\010i\202\275\250\021\311\274\222KR:j\225\251=\244\315\231\267\367\240\245\275y\237\212\275\233\355\231\273\216D\317\275\033@5=\n *\275\264\022\365\273\277\325\213\275iZ\211<\255i\013\275\025\302e\274\324[\010\275h{\013=\222\223=\274\207\326\026=\361y(=\037\363c=\236UP\275\344eJ\275\356\255p\2742Kz\275\004\336\014\275\374I\273=\363$\027=\265\310\027=\270\036\255<\206\333\255<\202\350\226\274SC\325\274l\304(\275\331\216i\275\244\256a\274\223\263\007\275\242\377c=7\257\334=\252&\203\275F5K=\365\372I\274?\251\370:\310\363\375\274>\370k\2752\005\311\274\230\030O\275qg\217\274\224\337\035\275\230\216\023\274!\347\327;i\240\021<\321*\240\275\005&{=\246\013\220;\033\002?=\235K\017>\257_\301=l@\t\275\347\347\231;\310\033\256<\017\214\302\274y+D<UP6\275\001\312v\275\347*\365\275\336\273\030\2732cn\274]\336<\275\326\207\230\274\203\022\237\274\030\0306\2745\243\027\275\256\350s\275u~\275\275e\257T=Z\367\021\275\006M\000\274h\202%\275\207\247.\275\242^X\275lzV=\204\325B\274!\274\212\275hD =\007X8\274\354\337%\275\203\274\207=\tH\004=ZeZ=\036\372#\274+\017o;[3\375=\302:]\275\t[\366\274\326-\177\274w\253\236\274\315\255\003=^\326E\275G4\t\274\341\245\314=&\2738=\010\006\247\2749\200\326\275\202m\017<\262\304\336\274\227\372\035\275\360M\023>\033@)\275\006r\316\272\207\357\273<\013\333k=\253\350\t<\300\271\375<IC\326<-\001\306=[\225\035<W%\350;\256\0000>*7G\274y\302O=\331R\254=\330\311\334<\274\356#<R\246\r>\314_c\273\343@&\273\242I\271:\221\357P\274\344\361\023=\364\367g\273\240\237\201\274\363\303\241<\277\342\375\273\310\3624<\311~4\273?\373\362;\237*h\275\010\252\255;\233\031P\275f\020\253;\274\021\201=5}\016\275 \211\332=\233^\323\274\236\377\316=\004n\245\274\024\251(\276\351?\t\275\tG\216\274\267K\021\275\374\231H\275*\355\006\274\312qc\275n\273\004\275<\214\272<\265-\265=\250\240\325\273X\226\244<\013\350<=r\316o<\267\247\220=\366\302\025\271\327j\227=\267M\217;\024\204\254=\241]\232\274]:_=\236=\001\275\205\\\257\274?\353\225>\250\356\203=h!\017\274\256\'\377\275\207\374\336<\332\253\224\275\2178\201\275uE1<2w\266\275\354\234\377={\346\234\275\241\016\241\275\007\271R=\322f\273<:\014Z\274\360\321\235<(\310N\275+\020k\274Qv6<\'e\002\275\330\016\372<\224\367F>\375\354\003\275 \213\002\274\274\357\243=\204k8\275\260A\020<\023J\345;\377\275\201\275\226\025}\275\241d~\275m\236R\275\364\3618=\273\267\255<\007&\337\274\351:\225\275\207\205\276\275*\253\323\275\014\215\327\275\367\032\366\273\232\\w=\231\345\326<\205\311\324=\230\336\223;!)\266\274 \220 \275(\302F:\246\026\262\274\273-\"\273Z/g:1\272\005=bU+\275\270\235G\275\316h\260=\346\201\217\275rk\267<\357\324\030\275\223I\241=\266\345a\275%&\222<6q\245=$7\361<\245C<\274\323OL=6dM\275yUj\275\343\267\261\274\322\373\256=7~\214\275\202\231\254:\315\"\251=\017\343\t=&\306\263\275/,\020\274\373\363d\274u\0163<Xd\350<\326\222\334:\327p\312>\202P\242=\342\203\024=\235\014\231\273\231\035\\;\345\207\t\275e\346\210\275\221\000\300=ff\372\275\tN\026\275\tD\017\275\361(^\2759\353\200;\353\203\"\274\253\360\244={i-=\362\310S;=\345\034;\361\202\214=v\245\302=\320\317]<\317\342)\275!\230\347\274\223\311$=\235\001\215\275aOn<\360\025$\274\320\352\033\275\255\217\356=x\325\013\275\025p\n\275v\252\361\274\235\334\363\274 \315\'\275a# \273G\'/<\254Y\263\273\325\353\233=\345\365\267\274\356i\202=\375\2151\275\303\334T<\220g\034\275\005\027\216=\356,\021\275\245\246z<\202\023,\275LN\233\275\310qZ\2750\007C\274\203g\233\275p\016B\275\341\202\312<0\206\246=\306U\311<\262\023\367=>\014\204=)`\216=hz\303\274\036;m\274\303\302V\275]\354 \275(\227\335=|\351u\275\325\303\230\273\034\241\272\274\234(\243=\032U\227<\301!\320:\030C\027\275F\334\307;\324\261\024\274\243\232\221\275\332\035\352=\037\226\343\274\302\350\303\275\307\372\010<\0007\303\275\365vx\274\316\367C=\316}\013=\374\333\221\2712r\n\275 \'o\275\241m\n=\224\261\213\273\271\370\245=9u\223\275;H\247\275gD,=\326K\203<j\250b\275\264#h\275\"\r0=\350\245.\275\222\316\275\275OW\273\274\2662\275\2743\223\033<\007\353k=\326\347\236\274\001b\002\275\207\240\313\275\226qk\275$J\t>\331\360\273\274\345\r.=\257\310N\275\331\372\204\275\353\237,=\360?\232\274\303\215\005;N&\255\275,1-=g\033\203\275\242\035\036\275H\332\300\274\031c\241=^%\034=\354@\212=\305\264h=\357y\326\275\037\203\371<\375L8\275o\344\347\274\035!\"\275\364\257\354\274\034\022@\275\013m\227=\002!\207\275\007j\346\274\254L\304=\265\364\233>h{\000\275\327\322\211\273\263\366\267=\364\255x\275\261g\237<G\244\216\275~\020);\240\223E>\254\325\213\2750\357\363=-G\217<\001\366\t\275]\325l\275#(\246\275\261]\277\275\247+\220\275\0378\025\275\360\242\224<D\320\212\275\245\035\232\274\320w\243\275&\016;=\004\244\\\275k\022\177=\307\304\014=\300:\355:\344(\264\274\022,T\275j\261\216=\222\313\312<\354\007\262\274\370UN==Z\022>:^:\275\211\215-\275~?6\275\370ri\275\2203\"=\215\365\200\275\023\016(=/|f\273$\240\331\2731U[<\360\201\340\274\371c\232\275\216\265\006\275\377^&=\266\227H\275\\/\002?\304\033&=2\311\033\274f\266d\275B\361O\275\000F\026\275\2118\204=\036\374a\275\220T\242=x0\272<*\334\n\275\\\312\353;j\304A\274\374ky\275\256-\314<\\\223|=~\267\235=\255\236\337=\377\n\033\274\303nX=\177i6\275\3366\227\275C\260\206\273=\221\001\275i\263\226=\210n\021\275\301B\267\275\245\371z\274#\271\302\273|\242H\275{\215\037\275\007\334\372<?a%\274\320\001w\275\235\253M\275\030 \036\275^\034\n<\030\000\013\272\207)\232\275+\343L\275\313q\r;\215Q\337\274\t\251$>{K\237\273=\n\214\275\231T\316\274\303k><\370\332\\\274\210\021<\275v+\260\274\257\031K\275\030Z\340\274\234\220\305=E\232\317\274\014p\231\274\241\326\227\274\227\331e>\326\207\352;\030\0164\275\342\322\374\274\023J0\275\337K\001\274\033qL\2740\2132=(N\256>\211\216\355<\246\243\t\275\241[u\275,Q\311\274S\304\001<\216\324\t\275k\177\025\275\3318\266\275\360\300\232=\332\3666\275&\204\331=\tl\315<\016l\r\275\327\306K=m#a\275\316\316D\274e\344\027\275\237M\217\275\n\216\232=}\253$>BN\376\274\253un\275\255bO\275\031\236&>\000\352E<E\t\210=\236]\305\274\220\016+\275\014\326==\301\361\366<\023\245\301\275\025\374\325=\374\330\005<t\247\017\275pX\213\274\333I}\275\2222?\275\365\357\273\274\324?\317\2752c\005>\265\245\024\275\204\016\307\275\275\206\320\274\034\355.\274V\250B\273\374\270\345\273\206\342\216\274\037fp\274\243\207\211\275|\242x\275\021\225\r\275\230\277\002<\"\363\200=\254\313\211\275q\355@\274\242\245\240:Hs\372\272\2602,\275\032\345\021\274\026\t+\2751\232u\275\357\300\003<\255H\273;\023\300\n;\016a =\226\2376\273\2702\263:\320\353e\273Q\375\216<\264^\265\273\307N\'>X\013[\275l\274\245\273\231\361\007=g \020\275\312\213\337\274\264\355->L\200\225<\220\013\306\275)\227\020=\r\3771\275\311\343`\275\007Rf\275|\221\017\275u\035c\275\032W.>\310\032*\275\310\335\036\275\321\264\341\275\226\215t\2751i\020>\222\207\020<mw\373\274\316$\004>\253,\334\274\007\276\035>\301JJ\275\024D\376\274\347y\213=\363\233`\275vZ/\275\257\322\257=\370#\262\274\254:\241\275\002\220\345;a\331\237<\320\361X=\355\r\300\2735*\272\274@,\312=\355\306\030=\237\213@<\334{\204=\310k\267\274>\251\271>\346\236\311=\207\325\252>\275\240:\275x\3079\274\342{\025\276\322\317\266\274\273E\033\275*/\353\273\r\206\330\275\231\274\244\275Y\242m<\373\211\023\275\270*Z\275\326\325\306=%\326F\275f.\006\2755\037\010;;\001,\275\3316\213<\210\314\235;)D_<\251\200\353\274*\337t\275m\360\035\274\246\3030\273\235\331\371=\334\3101\275FZ|=\243\226\212>Oot\275b\317\300<W\343o=\365\237\220\274\030\302\203\275\343\324\'<\273\243J\274J\035\307\274\005\027R=\230\312v\275^\305_;\n\026T\272;\"\322;\262\365\343<Q\367\223\275\304\316X=\326\342&\275\021\230\314\275*\324\274\274D\271&:\356dv=V\322\305\274\235f\036>\3157\340\274\2429\334\274\254=-\275\343\023\344\274U>\255\275e\323\320\272\017h\030\275\230\346+<\342\021K=\236V\005<\220\351\304\274\\G\316\273\3039\244=\"\350\366\274\312\002j\275\276P\260<\255\315\230=%\256_\275\315r\217=\341\317\217\275S*!\276\255\360\010\275\024-\240<u\033\370=FEm\274\223\202!\275\247\346n\271\243 \213<\222W\224\275\025\025\345\274\352\321l=\211r\004=\364`p=s}\013\275Q\302\323<5_\211\274w\035<\275\374\306\344\274\364\361L=)\2472=\374\2277<\243\240\002=\214BL<\341\312A\274\205\234@\275\342\330\212\274tt\313<\246&)=\353\364\317=w\010\367<[g\265\275O\341i=\320\260\004\275\026\361\237=\225\222\253=3\203\276\275\371\376\313\274?\030\235\275\'T\242\274\252:|=\t\243\203<\341\324\014\275r\330\246\274h[\222=0;\221\274\212i\337<\253\006r\275\253\376\304\274\270[\251\275\237\007\031=t\320\032\274\313\177\263=O\265Z\275x\202\033\275\3335\270\275\000\2456<`\206=\274vp\251=\246\254\025\275!\300\020\274\321\225M=\307\303\254;\276\273\364<\"r\001\274qs\016=\267\375\374<\010\t\203\274\271\232d;\ns\326=\331\245\372=?9\030\275t\212\334\2742\241\013\276\350\333\221\275\"%\000=\267Ba=j\222l\275\250\266\231=\260-\226=!\204\256\274<G@\274\226\004\363\274H\322\234<\340\225z=\2168#=.\337\250=\205J%;^\014\320=\rGn\274\200\004H<\226\376<<\347\201i\275e\231\362<cA/\275\266|\314<\001\372\234=s\216\343\274\313\304W\274Q\357\201=U\265O>\027\377\013\275_\260\367<\302\223\377;\010\037\307\274\01695<\253\177\036=\356\247M=q\021B\275\326\n$\275\252\216w\275\246\031\274<\260\200j\274\337K\266\275\301tL\274\317:R=\003\373\204=l\001\240:\344\273\002\275\224&K<+\350\221\274\247\240W\275e\0070=[\033\032=gj\314\271\300\270F;Y;\000\2754g\306<\014|\362\272\\\207\350\2749~\205=J\274Z=\223X\"=\306\262\365\274\240\325\260<=\330\216=\025\261\223=\375t\234=S\366;\275\340\344\033;\245&H\2754\337|=\241+\364<{q\227\2744\234+\272\273(S\275\013\006\236\275\026)7\275V\241\344<\304\270\023\275\332z\200=\235b\031=\010\373\277\274\304\220\211\273\216\324\243<\261H\242\275d9\3449\373W\321\274\ta\222\274NI\361;_\304!=xh\202\274\002\321y\275\200\001/\275\222\375\336;\237o\030\275X-L\274\274;\370=\334L\213\275\340$\243\274\231\230z>\236\311B;>T\202=\341\026\024\2749#\270\274\350\356\375\274\365\224\253\273\005\336e\274\214NW>\326\t\227\274\223*\233\275O\200\375\274\256\340\301<K\324\321<$Z\263\274\223\240V\275\344\024\270<p\177\324\274\253\316\210<\240\261\264<\216C8=s\252\331\274\346\3268<a\300%>l:\312=\333\021C\274\211-&\273\355\367\352\274\362\003\037\273T\230\257\275-j\203\274\316\223\373\274\032\347`\275v\007~<m\313\025=\216\3648=\302\362\202<I\366\257=)q\3639\0273\314\275W\014g\273\357\335T\275{\035\310=uN\007<>\316b\275\006\233\227<g\025-=l\252\313<\371R\'\275\347\252H\274\317\270\206\275\352c+=\236y\337\274\364\331\007\275l\350\273<<6=<\251^!\274\245\363\000\275\335\327\224=\242\'\276\274\304\341h\275l\\5\274\006\375\004>\326\203]=\'\205\307<+\222\022\273\3378\002\275\257nt\275\332\347\207\274\361\251t\275\025\317\316<\362\300\037\275\177\364\010\276D\221\035\275#\024\272=Q%\305\275\323\003\336\273\014\014\013;\367MR\274\346s\'\275\334&\005<\'\304Q\274\333\310H\275\021\010\022=\256\312\004=\331>\372;\352\023:=E9\246=O`\235=0]\260\274pzs\275\'Wn<\274\030\212<m\343\342\274\215\260\207\274\004P\254\2746Z#>XJ\325<\300\256\234\274\031\266\324<|\270\032=\227\277\232\275\307\373\005\275\267_\261<\025\222\301=\275\211\373=$XE\275G\265\024<\311\327\354\274\025e\301;x\200\376;q\344\243<\'\315a<O\300<\275\233\252^=\357%D\275\005\261\213\274<\244\330<6yk>\364\373\005\275\246\321\354\273\373nB\275\021\260\275\275[\216\336:\251)\212\274\342]x>\226m\267\275D\355~\274\356\252\345\275\327\336\'\274C\260\260=\320 $=\315\372\272=\346:\273\273\365l\207\275(\023H\275S\027\234\275\343`\257\275\320U@;KpU\274\206\326\261\275`A\016\275\r\250D\275\"\326\235\275k\250\225\2753\247\363<\246\3238=\205\004\035\275\256\367\211\275\003,\277\275X\272\356\274\026B\233\273&\030m=\263\214\211<\241\370\214\275J\203\225=[\244O=o\317\241\275\315m\235\275\"\337\225\275i\217\214\275\353p\371;\350\217\207\275ZRm=\316\343{\275\372\274O=\220\256A\275*]\023;\301$\357\275(\3679\275\251\225j;0\205\320\273\357\322\272\275\375\036w\275u\217M=\014\242\006=(\r5\275\'R\010=4ug\273Y@\263<\002QN=\315\341E=\242\376\311\274P5,=\024V\003\2753BX<(\261r\275\3637\253\274\246\206y\275`\256\215\274\"H\017<?\255\243\275\324.\237\275\262\323\225\274-\002\230\274c\3452\274.\321\241=\354\311\010\275\305\242B<\260\333\321\273rh\311\274;J[=(\321\002<\013\035\254\275\236\331\200<\261\345[<\372\215\356\274\240.\243\275\234\007o\274\006\202\202\275\227j\315=|\310\014\2757\321\016\275\365.6\275(\2547=\370\'g=\332\326_9\034\2628<\236L\264\274\345b\365=)\302\307\274\'\362\017>\027}\271=\020\331\014>ya\220\275\337\224\277\275J\310Q=\004\202(\275a\350\342\274\247\276\273\274jdQ\275>\366\316\274\210\270\271=%\352\251<-\326\213=\354\267`;\326\010~\275l{\304;D>\361<\217\273\221\275dx\006\275_\371\364\274\220\273\247\275\020\245\226=am7>>iC\275.\007\027\275\314\020\357\273I\242\223\275\030^o\272\273\224\214\275\223\262\002>\225\235\240\275\t\n\336<\027$\375\274{yY\274\203/\253\274bc\210\275*\350\253\274TW\323<\033\214!\273.*,\275\3247\242\275\245T\035\275\375\350e<0\326D:\203\366(<\201Q\316\274\302`\252\274Ai\032=\231x\031=A\266-\275u\206\003\275\006>/\275\224\255\242\274\220\366\260\275\226\255\326\274\005\333\212\274\253\274\257=4\2261<\362\'\332\274\004+\257\273\211\351m\274N\206\311\275*\226\256\274\0239\207<\026@\240<\240l\022\275E\017\014=@)\300\274hwu\275\221\334Q=\303x\216\275R\237\235=D5#\275\347\344\366\273`\321\217<W\273\261=\212\272\263\274\334\327\257<\007\272\366\273\351\251\205\275\277\227\321=2\304\377\274e\200\013>S\257(=\006\243\001\275\020\323L\273\361,\'=\213\204N;\'V\021\275\014\251?\275\330\\p=\313\031\332\274\213\327\232\275W\237\203\2752\262\311\274v\316\226=\275\253\034\275\325\340\374\273 \345m\274\177r\320\274*\307\217=\036\177\363\274\303\\{<v\007\237=\037:4\275\034\200\017\274D@?=\257h\277<\026\342\335=\204V\036\274\002\243<=e$/\275\352\032.\275\277~\320=\034\r\034=\276\'\310\274o9\236\273g\246K\275\314B\311\275\347\0257\275x\240\315:^y=\275\036\237\246\274\272L\304\274\376\352\245\274[\032\003\275\360\257\215\275\372j\006\275\257\223:=f}l\275Tk\375\273\272\212\027\275X\336\335\2747\312f\275\317n\301=x\242.=t#\273\273\255\2325\275\031\307>\275\235 B<w\212\371=/\372\006\276\365\350V\275-T\353=L\334z\2757m:\274\334n@\2750q\273\275\016\345>\274n\245~;.\302\026\275\007\255\206\275!w\207=\006\377\027\275\030\330;\275x\304\374\274\365\232\213<\266\360\241\275\321\005\353\274\353\311\234<\026R\231=\222:\236\275\234Q\210<\311[\357\274#\005\330\274\037y\221\272d\022\330\275\300\340\200\274\215_\345<5\347a<&(\332\274=\024\223\2758\024\300\274\354\204H=\370Q~\275v\202Z;ZB&\275\\ge\275\314\225f\275\024?b<\377s\241<\031o_\275\254\267\273<\347O8=\353\227 \275\325\274\244=\003\201\321=\236\223\254\275YQF\275F\243\203\274*\2442\275Un\033<J\211\304\274\253&\315;\036j\340<-\270\215\275X\217\335\275\025\361\233\274\352\344W\273\305\223\331\273\007\375\226\273\331\240\206\275\211\202\355\274o~\031=\344\237\210\275\nl\000\275Y[\302=,iJ\275\214\232\241=,\3133\275\004\227\330\273\034\004\031\275\242\276\255\274\330\202\205\275\350\335g<\314Db\275fW\351\273\331n\376;\025\317\013\276a\335\025=\300\\\340\275\020\372r\274\337\212\377=5\205b=\0231\037\274U\223k\275+#.>*z\251=\204\346+\273\312\340g=,\033\240;\351\332_\274\t\006\020\275\014\234?\275<>\266;F\276\336\275\352e\265\275\037\006\2109\2579\345:Z\023\242\275\211$/\275\317s\224=M\310+\275\332\014Y=\327\271\032\274\256\230\007=\273\204\250\275i\025\022\274\253C\355<b\201\010=\275\341\210;\n\306h=\316\214o=\3419\030>\220\004L\275?[\007\275\337\260\217<3\267\342\273/\212|\275\246\034\212<\305 \327<yZ\316\274C\246\246=+O\236=fl\2117\007\257\377<6\020s\274rzQ=\001\2316\275X\302\211\273H\346m=\001\321\033=\245@\210>a\307N<\347\357B<\'\302\003=\311\357\347:|\346\007=\324Z3\275=\201\363\274g\274\321\273\242\336\301\275\224\314G\275h\211\030\275\320s\231=u\010\235\275\003\251$\275\364GM=\223\264/\273}\023\302\274u\302\340\274\265`\021\274\352\362\321;\337tc\275\003\032]<\013;\010\275\200\203\323<\267\t\210=\215\026e\275P\302\033\274\177\354\251=\035\247l=*\330\315\273\275\017R\275\017\227\206;\315\362\273\274\2652o\275\352\271\010\275\033\334\224=u\362\"\275<\3461\274\342\034\223\275\273\311&=\023]\026=\304\223\204=\202\002m\275\371\004\021\275\330\034k=\221\244L<\306\234\204\275\331\316Y<^\373\240\274A\240\242;\'\004,\276~\343~\274\352\276n:Q<L\275\327\351\254\275g\027k;|=\211\273\305\\.\275\205p4\275\342\272\226=L\356+\274\370\274\327\274H_+\274\032I\237\274\034K\224\274\344\001<\275\007\201\321=\353\000Z\273\233\026\346\274\223\321\001\276\315\217P<\327b\372:\266\247\353=\r\275\251\275\337\027\272\274\3145\005=\225#\006\275Y\314\322<\024,3\275\324\363\376=\352\214%=eYC=\240z\234\275\004\316\010\275\307+\255<>\335N\275T\347)\274<\337.\275\025\034@\274O\0134\275\024\227\253<QB\013<h\252\215=FV:\275\027\220T=\230c\231;\370K\026\275\374\375\213=\260\217&8\321e\215<\007\221m\274gF\260\274\221\324\242\275\233\251\235=\343\331\000\276\310\'\235=\307]M\275\201\350\205\275\276d\034=pFz\275\320\302\035=\362\030\204\273\276\304-\275g\001\222=\016\267\323=\203\375#\274Y\007\267\274\352O&\274x\271\201\275\342\033\034\274)Z\311<\037\035\334\273\3420\034\2756:t\2751\266D\274p\264S\275\"\017f\274\213C\313<\351\365\\=\321\206\016=}\023\231\273\236D\016\275M5\372<\005x3\274\243\232^<\"\007M<|\351\260\275[&\266\275\364\372\241\275\013\356|=\346o\254<_mU<[\nu\275\230.\302>\242\266\232\275\016\023\323\274d\n\227\273k\213\212:\345v\273\275\274I\364=I\243g<\217\300\265\274F\226\305;Vv\257\274\220\261\345\274:\231\216<\033\004\321\274}[\020>?hT\275\366\262h<epi\275\253\2227\274\334\370;<\2246\333;\275\341\222\274\361)/=pF\202<\207\027\t>\037>\200<\214w\215\275\371\331\220<\320\302%\275\001\031\014\275\210z\316<\014\250@\275N\2130:\333}\324:\313K\254<\274\263\371\274.\262\205=H\001{\275\020\224\240\2736/-\275&\362\243\275w\340\025>\332\335\276>\254\322`=\315O\201=\t\213\002\275\006\240O=x\331\r\275@\037\002\276\023\036\364=\362>\377\275\344\377\312\274\005\013\005\275!\252]\275P\344\004<\373\000H\274hM\267\274\303\212\304:@\331\206\274\275V\037>I\227E=\352\334\371<D\022\355<\036\365\353\273\222?\272:S\330\222\274\212\325\214\275F9\320\274\035\2763<\321x\255\273\2271:\275M\316\365\273\277\201\000\275b\364\246<\375\226\021\275\240\017u\275\372@A\275\212W\372\274B\002\025>\333\322\364\273\315\335\303<\235J\270\274\002\005v=\226\330\331;w\010e<\326`\265<8\354<\274\325\241\261<(<\213\275\261\345Q\275w\3632\275\025\332\010<C\035\213\274\206xy\275i\372\003>\241\324\201>\310\215?<N<\320\273\030\344#\275%[B\275\005\230\177\275\2257\250\274 e\245<c\301}<W\363\222=Z\237\203\275\220+\352<\222i\200\275\267{\215\273\200\")\274\343AR\274<\032\242\275\306)\314\274X\2204=(\021\026\275\217HP=f\031\001=\230Y\311=\375\000\215\275\307\032v;\366\350|=\004#\212\2747\242\225<\231P\003\273\035Zq\274\256_#=\211\337\270\273\323\"\034<a\325O>\372D\214<\'\232\347<Q\353\232\275\370\277|<\021V\234\275\210\3224<\001g\347<\364\335\263\274\244,\003\275U\320T<\203\365\243=A\346\240\274\364\230o=\267\356q>\317\233r<\367\357O\275O\303\327>c)(\275\276B\234=\352\215\343;\252&\311\274G\366b<\240\213\370\274\356\300\356\274\332\217\325;\347\354\317;\361\262\023\275\311g\223\273\373|E\2757\237\"=\026\213\263<\264{\356<%\016\215\275\270\032]\274V6\271=\031\240P=\301\222\325\274\232\266#>\242\202\n={\212\033\275\2374\014\275a\377\264\275v\364\252\274_\303\026\275\026\361\253\274\224\257\000\275\243\345\314<Ov+=\326\320\375\274\213\300\267\271\344\316N;\343\253L<\345\223\024=\033\234#<q\026W\272L\017\271=\362\n\010=\372\025\237=\377\035\360\275\377\005\323=\355M\277<\223\334Z<\023\200X\275\252I\006\275;\007\241\275\240M\357=\303\266R\274\322\025\211\273\'\030\221\2759f\206=$\t\025=\230\3553<\342j\204\275\013\375\233<[\320\220\2749W\031\275T\227\200\275\355\020/\275\347\260\021\2753\364.=\3352\207\2758\203d\275\030\303\272\275\364\235\235\274b\030\312\275#\007\034=\257\270Y=\036S\321\275S\336\306\275\356\367\331\274\017Wh\275a\223\220=\327\275\367=~\254\245<\376\0356>\352N\016=\265e\026\275\2436\014\275\256\312\020\273\216[\001=\303>\023=k\225\022;-A\243<,\376\272=;[A\275\314\334\351<\350,\377:)\212Y<]\330f\275\251\324\265<<q\004>\314#\330\274W%U=\247\314\326<v\252\325<U\016\302<\302m\t\2750\365\177<A\340\240\275>\350\027=Y\014/\274sk\204\275\207\304*\275!Q\356=\207)C\275\345\3513\275Hr\365<a\213\245\274hu\n\274\217\356\007\275\206\232\214\273\3761\300\275\374k\230\275\363\036\232<\246\374\005>\027\237\332\273}\027\026\275\250\361\316;\n/L>\365\316l\275\r\234\267>*qh<\r\026\341=\316`\372<\352\377k\275\037-\177\273\030\215\316\272\364D[\274B\266g\2757\333\001=n\316V=\231\346\022\275b\235\202\274\006B\237:\026\016\027=eGr=a\272%\274\001\260\024=\270\026?;\214\251(=\263\201\252:\324\315\207\274~\216\373<\244Br\275\211\361\246=\020(\237\275\237)\311\274Wkw\275\003\3347\275\0371\351\273n\247\247=\235h\226\274\022\263B\273\361\205\"=\207\261\240\275\211\032\301=\323o\320\2749\362\251\275\233\243\262\272\r\235\230\274?\tR\275\376\2450<#,\202\273_cV\275\242M\216<\231\232#=%C\210\274m\311n>C\203i\274\257\305\034\275\203\254X=\237\022\005\275C\331f=r\004]\275\252~8\275;XF\275\304\205b\275\320|\253\274Xz,=s\006b\275\376\202\236;\364T\272=\225B\276\272\204\253\311\272\200\017\254\275\266J\221<\227\030\265<Tls;\036\267H=L\206\272<\337\363\036\272\314U\345\274\346\217+=\272\232\210=_u\025=\356\2157<\177\224\343\2746[s\275\362X<\275\366\302r\275\342k\263\274i\177*\275\220\335G\274J\3074=\271\365\002\276\2531@>\342Cb=\336\\w\275D\374\304:\206\246v\275\351R^=\346\316\007=\226o=\275\336Wg\275W[\275\274X6\207\274\215F\035=\3373\275\274\340\246/\275\341\237\246:\240\205\005\275\0001\256<\256q\000>,\372\261\274H\263A=0E\320\273\371\177\200\275\031\000\000>~`\253\275.\207w\274d\246\004\275\273\350u=\246\017\037\274#\317\302\274\346V\362<L\243f==mv\275\336\225\334=\247\207\316:\032\236\262\275=5\035\274.\265\346;\272\341U\275clm=i9\203\275\272\033\352\274\251y\030\275Q\nK>\350\263[\275\317\026\200=\t\370)\275\216\0025\275\344\222\362\273\013\324k\275-\316M\271\350\245\035\275\340\030\203\273\333W\013<\371\0368>+#\234\274O\375\264\275\000\364>=fB\3029/\232\375<\235\\\240<\002\206\355\274E\005n\275\326q\243=#\234i\274\363\t%<2\377\033=\310\322\275:\'\225\006\275\274\325C\274\370\343\013=\221\341\243=\343\362\017<\270\363\003\275\345\254\223\274\363\344\230\275\217\254\375\274\271\036\240=\241\030\006\273|\255\311<\351|$=\023Ba\275\307\2069<\255\342\005=l\356\264\274\327\234&;\272\030\000?\327\r\327\273h\301\255\275T\245\005\2740\304`=e\0008\275\245\225\203<\247\215\t<\010\265\370\273\013\013.;y\356K\275i47<X\242h\275J\002\337<\222>}=8\227,=\014\263\266=\2643\231\273\261E\264\275\200{\365\274\205M\032\2759\027Q:\027\222\000\275\333D\223>\223u\260\2750p\325=\257\247\350\273\305Yz\274\317g\"<\364u\353\274/\201^<$R\334<\025U&=P\351\325\273\271\016};\377\243\206;\214~8\274\365\003P\275mr\344<\230*K\274\3574/=\232U\\;\271[}<\327yY\273\236D\000>+m&\274\240\004;=.Kn\275\201L\315;\222\322J\275Q9\327\272\313J\"\275\273oK\274v?\316<\322\010\230\275\035\257\034<\255\037\036=\007&\031=\216\311=>\353#\243\2743[\241\2753T\006=\240\362\240<\002 -\274\036#\303\275t\254\315<\263\312\227\274\2672\210\275\310\317\324\274\333\262\224\275\213=\276\273\315\204\022= \\\026\275\006+\346\274\202\023E\275\253-\007\275\034\321\256<S{\377<5\314N\275\3311\345\274\343h\337=\007\272\226\275\024\353>=M\326:=\367Up\274\327\323\265;|0%\275hl\022\275+\225h=\224Z~;\301\200\326<\005\267\000\275\017\031\240=\213\017\014=\035\355*\275\204Hb\275\231\350\321\273\251h\025=\260{\010=\002_e\275\265}<\275\340\221\243\274\235\346n=\341UF\274\237\007\376\274v\231\004\275Mu\321\274\356\306\242;\204I\n=L2\006\274\274[\243<\016\312\237\274\314\032\370\2733>\236\275\227\"\327\274\263\312\030:\333/\217=C\266\205=\033\277\324<\330\350\242\274\301\334!=<|\002>r\341\006\275a\223\344;\245\273Q\275\267\201\014\271}\230\223\275\006\334\225=n\2079=\361\277Y<\233 ]=\177\232\246=\313\347\005=\225\'\221\274\\\361!\275\254\215\305\274\3256\273<\tM\026\273\373\241\305<\327\036\224\273\320\363r\275\231\307\236\273\003\016\370<\257L\205\274\226\216\026\275\327\307\006=wi\203\275\305\277\030\275#\207^\275|2\264\275\254$\t\274m\017L\275Fb/=\373\370 \275\342\033\276=\237\302p\275+%R=\n\016\261<:&\204=\345\220+\275\016\246\211<5\224^\275\276\217\010>\326\212&\275\204\321\205\274\204/\233\275\001k:\274\245b\216\2754\002\215<;(\334;b\262\t\274\253[\226\273P\027\222\274M\337\261\275\023\251\220\275\006<\212\275z\365\347\274\301Y\322\274X\207)\275\246\336\003\275\341\273y\275\007\013y=\265L\016=\232\361\350\274\\\330\232\275-\310\263:\021;\327\273l\233\200\274hn\245;\227\367\035=\027Z\256=\224\030&\274y\262\014=\326\264\326<\355\245\026\275E\r\262\275M\272\266\274\257\001\215\275\320\353\273\275\273\367\016>>`\330<\242\346U=/\242W<(/\177\275_\304t<\256\236\'=p73=\010\033d\275\273M)\274\357M\005\275\247\366 \273[f\251\274\241)_>\3247\215\275\3414\034\275\004+\023\275\036\013t\274\013\304\262\275\305\023\025\276\322\205\026\275C\260\344;\2548h\2755\226\365\274H\366*=\235\365\010\275\346\346\311=\240\026\375\274N\005v\274y{\276<\361O\337;Xx*\273\2564\334\274zH\023=_\223B=R\363/\273\365\236*<\321\316F\275L\367\215\275\251\313\350\274\256L}<\242\307\344\274Z\224\202\274F\n3\274\2237\344\274\313\311\224\275\271\214-=\377\345:=7\230g\274^\031\036;\214\262B\274\343x\327\274L`\220\275v\3428\275\023i\030=B\336\254\275A\220W\274\220\252\005<\356\366O>\025\252\205\274\363\007a=\t0R\274\263ex\273\310\3323=\244\214I\274\266h\267>\362\224\220\2748\312G=Dvn\275\251\346\003\274\243k)\2758T\241=7P_\275\213\244E<\220K\312\2756\224Q\275\212\254\374<j\202\310\275\332]\227<8\221\223\275\261\003\330\274\224w\2659\213\261\356\274qXg=\031\200\246\275\031\203\260<\307l%\275\276\246_=m6X=\216\351+\275cm\367\273\010p\004\275\'$\243\275`1?=:\267\240\275V\330\3339GTo=\373\033\363<|>\327\274\211\'\264=\031\356\030\275L\267h\274\020)\025<\220x\255\275\2427\302\274B~\220=Y/\217\274T\264\327\275\003&T\275\007\315T=6\302\037<\242#\'\275\360\277\363\274V0\334<\265d-\275]\344\026\274\356\251\003>M\244{<-\027\226=\376)\014>Mo\302=\350\341\375\273\220p\007= \2300=\036\2312\275\213\300\344\274\325\005\264\275Y\204\367=\367\363\254<)b\004<\256\234-\275\206\035\366=^\374\032\276MI\204\275\025\022=\275J\243\247=\336\260\235\275l\333\272<\231`;=\332\271\232=\233\007\035=\274\327\014>7+$=\036\243\034\275\003\207\035\275n`\304\274\204\315\276\275\273o1\275\303\357\230=\014)\277\273\030\336\336\275\3745\251:\276\362B<IEw>\007\320\020\275j\014\220\275\272k\267\275\326\333\230\274\331\223\217=\315\350\230<\207\346-<\364\202%\275\007\350\341<\210\303\246\275\367\203>=\327e8=WW\221={\333J<*\254A\274\353G%\274\373\025\312\274\237\236\031\275\n\3343\274\345\337\207\275\302o\216\275o\270\211\2758N\n\275\027\210\322\274-\232\346<\367\016=\275\233\037\345\273\365\370\257\275\340\007)\275\372u\267\274\017f\260\274\361i\312\271\217\253\230=\304\217\240\275\275\215T\275\342HD\275\221\267j\274\032A\202\275\214\232\022>Z\226@\275\354\253f\274\025\216;\272\355\365\312\273\360\273a\275|#\016=\027it\274\263L\017\275I\215\010\275KH\016=\332\217\031>\002\354\305\275n\254\035>\367#\211\274\300\245\242\274\'\025\032>\r\364\263\274\375*\260>\223\364\006\274\213\265C\275\005\357H\275\003\213r\275\221\2140\274o\224i<\310i\273\275y\036\335;c\306\343<\257\002\033=\207\2247\275-0\017;\027\\\021\276\264\322\246=,\000\263=DQ\224\275\244\024\202\2747,\232;\000\267)=\034JK<\221\304\320<\230\2779=\275An=<}\300\275\3275\023\274s\301\260\273[h\215\275\320\266\220\274u\346x=6\360\020\275\337lZ\275\314\217\277\273\376v\321\273_\026\343\274O\363\266\274N\317\351\2748\371\241=v\234\241\275\003\362\374<\224\003Y=\"\313\246\275\340\300G9\245\025.\274\3103l=\234\206\t=v\177\330\274{\336\031\275\332\336\035\275\344\0378\275e\207\235\275\206:\177\275y\237\234<\177\301.\275wB\272;S\325\201=\235\023\232\275d\302\221<\252#\260=\274\370\021>\324}D\274\252\222\225\274*,\364;\376\273j\274\025\324m=\316\217@\275]<\013\275\3460\356\274\245#@\274\177\321\002<\177\350\362\274<\242\371<\032i\302\275\211TO\273\216\266S\275\225\325\277\275+}\201;\037\n\246;\036\017\332\275yq\306\275!\200\200=\202\322\207\275\346\321h\275\305\252\242\274N\232\316<\363\253A\275\031U\244\274\323\237\210\275r\225~=\351\342\367\274\232\301(\275\372\231\n\275:\356\022\275\320\177\251=\275\241\272=R\336b\275\373\337\233<\337\363\200\273\204\331\035=\341Yn\275`\273\314\274vv\032\275\303#\230\2745<\001=a\306\366:;\005\031\275\0148\303:\251\352\362\273\267\217\214\274\004\"R\275\352\020\353\273;\210\312;\000\010\215>\2350->\315\323\237\272\221WF\275\302\004\235\275\322\224\352:\n\272\224\274\275(\207=\307\010{\275\370\007\032>Y\000r;\27097\275E\341\220\274\213#\346\274|!\216\275e\216\n\275\357*\025=\024\277\n\275\224\276\257\275\361\036\035\275o\214\003\275\346\253\000\275\\\312\205==\266\027=R+\254;\237\313}<\321\367!\275\325\334\301\275\036\006\363\272\2426\367<\361\215\231\273\232\345\214<\361h\327;V\306\232\274\341\305\333=d\261\260;\376\265m\275}\362k=\251\274\232=\032`b\275\243\026\004<\3140\271\274\370\330\320<7\325\247;\357>\200\2757\255\335<\013%\222=\307=\353\274]0\031\274\177t@\274\255\303\206\275\3345-\275wy\220\274%P\224\274\202&\273<\340aV=*H%=nuh\274kZ;<\352X\201\275\222\341W=\213\006\230<\233KF=#H~=bV\003=\326\005k;\001?E\275\314\301\220\275\316\356F\275\335\333,\275 S\342<G\326\274\275\223\207\254\274\255x<\272X\332\r=\362Bx\275&Rc\275\216\371\260<p\372\202=p\233\335:@\306\204\274\232w\266\274;\353q<0q\220>\\\206\336<\253\005\311<bQ+\275\340\037\363\274\245\332\310=\r\000\025\274\267\2471\275\257\342@\275\230c\214<1\'\255\274\3225\275<l\341\204=\374\327\321<\272\334\006=\323\243\314\274\362[\346=$cG\275$}\">Y\006\014\275L\334;\275\227)\314\272\335/\353\275\277\272\206=\267\262A=bX\272\275\321{\213\2752\177m\275\345`\364\275\332\204\022\275\311 \037>\353\223\210\274\340e7<7\240\327\273kR\216=f\316\326:7\033\010=\322\2373\275\020)\317:\311\220:\275s\356L\275\214\0309\275\200aF=\375\252m\274\353X\216\275\210\212\240=\035\324\037=eR\246\275\\\222\354\274\203\n\243<\236\035\026>\266![\275\252~u\275\031\261\265\275\323.\234<\213\023{\275\007\217\010<\340\"\302\275f\260\013<\216\320$=\330\2210=\251\001n\275\021\013\253\275\004\361y;\311/d=A\321q<\371\307\r>\362(R=\2567]=\244H\231\275}\177\273\275\t\253\216<bk\177=\017w\301\275\375!\357<2\354\013\275\305\305\021\275\0276\r=Hr\377<[t\340=\205\336$<#\302 >\253\017I\275 5\2678\330\001\005\274\327\355W=\031\340\241\275\272\273\346\275eS\260;\377B\344=)\374!\274\241#P\275q%\233\275#\231\000\274\007\367K\274\027\213\222>\003\241\232<%\264{=\242\314!=\367&\244;\303\017(=\366\004\303;`zU=D}\220\275\324q1\275\276\375D\272\201\330\203=\003v\001>\370\366\246\275\032~\234<\340\344\251=\231\277\234<@\341\222\275\367d\024\274\002\351\353\274j\347\237<\312\257\207\274\025\310\246=\023\251-\275\333\373\363\274\315H\227<(\340q<\211\332\340\273\202\314\372:\016e\310<\367q\247\275s7\306=`y\247\275?]6=kV\210>\030\003\033=Ny=;\331\333\315;\345\305\265\274\0332\205<{?R=:aZ\274.\264+\274X\321\237\275\030\302\347\274J\244-<\t\212\220\275\3027\016\275|\036\221<\001\005\275\274K\243\246\274i\033\240\274W]\242\274\005oO=\314\350\006;}&\352=\221\201\347\274>\342\373=\320Bl\275\017X\240\273\300\373\013\275qA\314<\231W\367<\277\027\346\274I\242\272<\010\331><\210\336\247\274D\201\232\274X\014\t\275\267\3532\275\326]\254\275\2550\254\274\336_\024=\245[#\275z\205&\275\221}i\275q\253}=X\025\335:zI\376\274\301\\[>^q\356\273\362\225\032\275\375tu\274E?\034\274\236`\267\274\343\2031=6\360\010=\240\237\245\274\250\362}<\307\n@<s\017\n\275.\372\345=(&\202=\276\321\240\275Wx\260=\306J\021=\333\001@=l\313?<i\371\245\275\373\221\275\275\017\366]\274\246\270Q\275\214\332\367\274\327\232\205<,&\245\272\t\342\323=\223\230\366\274\034\005H\275\010}}=\316\303\206\275\341\255\2609^\211&\275\276\264H\275\026\256\201=\302\330\246<H\351_\275\353V\366\274|\347\344\2741\244u\275\213s|\275\326\200\341<\226&\216\273\371\032\215\275\2727\001>\207\003m<\"(\253\274\340hp<\217\007\325<\306\205V\275\004\222\331<\037\211O\273\236\346_<z\213@>J\321\361\274\274n\224\275=!\010\275\r5\243;\311\253\377<\031J\\\274\351\013\267;\223\035\235=W\240\313<\366\244\227\274be\256\274\215\305T\275\023>\223;\334\240&\274\254\264\331<h\230V>\021\274\010=\320\313\321<\001k\177=\304T\257=\333\352U\274XgT\27500\205=kT\352;y\212[\273\027\227\234=\207\247Q>\004$A\275\271O\003\271,4\265=\225\010\232<\261;\265=&%\340\275\237\211I\275\006Rw\274\265l\325</#\341;e F\272\020\362\300\274\354S\206\275g\312w<\250\002\300;7|\225\275cW\364\274<\344\315\274Cv\231\275lO\355<q\316\202\274\211.\342\274\350\205|<e\362\331\275w\231\324<XxT=\223\233\205=\257\347+=\360\361\215\274\206\276\333\273\332\307\234\275o\372\230\275\363\256\363;4!n=\205ph<U[\335=\177\330V<)3?\275\234\001\215;.\227\307\274\267S\000\275\260b!=T\252\r<\256\255\370=4\330q=X\\\000=\257Kd\274>\227\376=\236\t\220=\336\315\246\272t\274_\275s#\331<\354\246\022=\235\200\312<\215\030\265<\366K\262\274\000s\222\275\217\336\216\274#o\356\273\274,\006>\"d\242\275\373\033\211=`\262\315=\\/%>\250\251\317<\345B\351<:\021\016=\235\024\240=\327$\230\274\350\223\334\272\321w\032<:\022|\275\357\214\210=V\211\036\275\217\200\303=\033\211\013=z\0132> M\301;\364hI\275\227\226\347\272\005\240\3149`\312\237\275rs\217\274\332\350\342<U\351\345<\0160T\275\350r\225\275\245f >\323ov\274\270\030\347\274\250\027\025=r{\300<-\3539\275\3478\304\275ln\230=e\324Z=\271;\331\274\376<\330\274\351\036n<6+~<n|\342\274\216\010-<\035E?:6\307A<\203\256\224=l\024K\274+\323+\275\335(b=/1\304=i+\277=U\270\254\274\365p\230\275\203\354n\275\310 \031\275\334\246\217\274\341\025\221\275\252\333^=\342\210\246=w#\336=u\342R<4\022\020\275\232\254-\275\231u\005\274T\320^\275\022\025\232\275\322o;\275tM\214\2752\347\217\273}\202`=\2221y=c\237\367\275\237\357\244\275\356\301\310\275C\335\017=\r\321\255<\005\014\027\275j7X>b\327\227<`*\227<)5\221=\203WE\275\276\030\230<\307v4\275\024\356\370:\361\1775\274\247\364\345:\3128F\275=\021&\275\326\256\223\275r\335\267<\331\237\267<\325u&<\241\206\033=\025\272\177<\241\356\315;\026\013i\275\003_\237\274R9\037\275w\227\336\273~\336\204\275\264\260\200\274\357\025\245\274D\023\230\274\365m\221\275\334\304\001\275Q\314\240\275\345\221\032\275\n\215+=\232}\202=\307\037\306;\026\207\256\274\023\224R\2759\254I>E\262\344\274\2659~\273\303\317b=\356\025\020\274\t\\\030;\206\003\230<D\364\267=\245\207\216;\231^\260\274\325\224(\275\214\324}=\226\260\200=WyR\275\207\031V\275d(\304<v\215\374<\267\300\215\275\310\177:=\346\037\243\274\353<&\275\340\223`=\253\240F\275d\271P=\367\251\023\275P|\246\2746&/=\311\341`\274\370Y\272\274\305U\330\274/A\030\276c\316\235\275\200\313T\275\030\350\034\275\363\303\035\275\333\262=;i\217\315\273\230\276\202=\266\254\326<\301D\212\275\351\312\006>e\260\333=\3145-=\212[\036\275[Bs\275^\t\027\275\013@\214\275\342z\003\274n[\000=\304{\345\274m\311k=\354\322\033\275W\277i\274\342\350\346\273\340u\232<\000i\347\275\255U\013\275\363\262U\275\022\014\024\275SJ\013=\350S\031\273\357f\206=\033\344Q<\302\325\243=\233\271-\275\023\350>\275\206]\263\274\003\203 \275-\234\024\276/\230\207\275s\243\311\275G\030@\275\026\225\203=\016\251\023\275\222\371\021\27493\267\271\025\272J\275\031o\245\274\262s\016\273\201\321,=\244\240\255=\247w\252<\264\362\016>\210\032{\274\240M\223\275\327\010\323\275@\367\t\275V\200\200<\204\241\313<\246\332\n\275\351\'\312\275(\242\335\274\003\t\201\274\007\376\264:\243\224\366;:rz<\345\246\225<\003\315\373\273\277\345\214=M\353\311<<\213>\274\274o\200\275\345f\274\275\320e\027\275+- \2755[\215\273Ft-\275\304\330\267<\251\023\357<\270\037\346\275M\331Y\275)\265\270\275/s\t>\246W\206\275\235\350\201\275:{\265<\324\257g<\237q9\275o\235\267<\203\000\352\273f0\004=\303\333\253\2744\306\005\274\263\226*=Z\010\337\274\215\344\266=\227\2478>%~B\275\030vU\274\251^\240<5\364\004=\306\3315\275t{\037=S\020E\274^N\370;\335\3174=@Lq=\010a\215>\367\372Y=\222{\014=\024\010)\275\031\364\037\274I!\034\275>\316\362\275F\023\034\273w\257Y<\024\252\031\274!\036\307\273\010\035\r=\324_\022\275WO!=\233C2\275\214\010\270<\262<\336\275#\346\217<i\252\302\274\323X\341=!\330Q\275\312\201\234\275\225j\336\274\251\361\270\274\322\226>\275%#B\274\304\366\271=$B\t=\007I\362\275r\305\351\274>\3279\275[\240;<\317\304\010\275\014\264\031\275\261\0065\275\342(\222\275\343a\317\274P4\271\274\023\370\306<\241\3120\274\010\"[\275e^|\274\\\017\267=~\213\327=\372G\022<b\327\020\2757\"D;\372,\306\274\207\3060\275\214F\270;\255\212\023\2747?~\274\347\027\233\274\024\023!=\314J\030\275\300F\027>b\366}\2756\305r\275\321\220\r\275~\331)\2751\355\260<\223fW9\275\264\001\27506\245\274F8\254\274\326>\350\272\347\235\211\274+\177\357\275\005+3=\021\204\203\274I\221E\274\325m\003<?\322\305;\207<\333\274\215/\036\274K_\010<\230\266E\274\337\377\307\275\353i\323<\332\250%\274\223\223\336\273PG\234\274\240(A\275\266\222\020\275\334\032\000;\216\205T\274\014O\346\274\211\331t\275\251\241\251;\200\333g;\356\304F>6c\324=\241\016\320\274m\310\374\274\025\005\022\275J\301-\274\225m\224\275\271,:9h\214+\275\333\355 <\225\272\214\275\232\224\211<\233\374\202=>ZK\274J#3\275.X5\275,\232\357:\035P\362;\342  =\335o\350\274\3111\336;\344\313\233\275\336\245\235\274\264#\'\275\256\351\325\274\206\335\333;\204\177P\275~\307\253<\313\027+=d\215\344\274\0264\302\274M;\244\274\274\376%\273,\034\023=\243$\036>\350a\267\275\366\253k\275$\021\004\275R%d\275\320\r\347<m\014E\275\304\244\205\275\2671u<\312\254\237\275j\364\274\274\2154\213\274\347\016\261\274\353+$\275\341c\316\273\372\331\266;k>\260\274|u;=\340\3024\275MtC\275U\026a<ZO\205=r\355\373\274\025\366-\275\"\341\241;\261\307\001\275PN\276\275\262\3071\275}\231\250\274\253E%\275\202\271\276=5\205\032\275\335^\202<V\\\212\275#\010\343;c\034M=*{\212\274y\204\262\275\342\376\240:?\217\n\275\351Tn\275\023\006\240<\204\367\177\2729\361\207\274\223\200\377\273\240s}\274\272\002\240\273\260\215\200>\007\332E\273\362p9\275/\357\303\274\365\027w\275P\320\313\275\376\272\217;A\037\210\274e\377\023=`\233\026=Y!\014\274Rc\205=\014M:\275\210\n\n=Z\265\271<9\372\367\274@I.\275\025x)\275\220\325^<\033\261\216=\002\'`\275\025x^=\360\350\227\275\274\347\200\274\025\304\232>\341\271b\275\0057\361<H\313`\275\310\262\375<\032 p\274\004\233\004;c^\230\275\300d\367<\235\267\006\275\254\313\022;\002%\357\274\260r\232=\337/\256\274qx\375\272\267\212\371\274\337\336\262\274\357\374\014\271,\023\273=\253\036\351\273\001\264j<\n\356\235\274\r\210\311\275D\031K>\375\033:\275\205\004:=Z\327X\275\004\370:\275A\244\t\275o\210\020\275\036\316X<)P\267\275\355\036\256\275\207\002\335<\341{}\275\0013\317<\217\303\326\275\315[\320\275\370E_=\305\027\246;\020!n=\254\341\233<\332\262d\275o\365\017<h\347\333\274\222\267\014=2\315k\275\211\314Z=\016\231\202\275\301\327\224<d:\232=\257\030\203=\307\337$\275\177\322\325<{Y\252\275\2164\267\272\333\206\033=dN\026>P\270]=\250k\t\275\33028\275\346\350T\275\2474t=+\353:\273\364\014\325\275\214\272\007=\303\244\241\273\261\261\033=\037\261\203\275\360\272g\275\273\272v\275]S;;\356\353\372\274\010\026\271\275g\000\212=q\t\235\2754\024\036=\3562\216\274\251yV=\036]\306\275\310\024y\2755\214\334\275\22770=\014\002\210\275h\234Y\275\225\273\204\275\263|F=\223\324\000\274\240t\216<f\016F<\330\202\027>\274\n\212\275\221*\210\274#r\250=\224eF\275\311\243\027\275\374\211)=\365\222\335<=O==\2425{\275I\316\206\275\330\240^=\027(\212=\304a\225\275P.\205=.\241\377\275\235\272\222\274\212\305\217\275\177\321\316\275\360\364k=\324I$\2751\324\024\275y\254\235=\203\204\206\274bY\236=rt\202<\371\034\r<\200\344$=e\230\274<#\271\224\2746\355\n>|\004\267\275\263\272\273\274\2745P=\200X\224\274,\024*\275\007\027\213\275C\214\002\275\001SB<\341|\322\274\241(s=f=\245\275\321i@<\t\315#=8~>>\252\204X\274\216P\362\273.\2523\2745\251\215\274\340\271\204\275D\335\241;^Bs\275~\327\325\274\021\360\342<\010^S=\035\003M\275\211~F\275xt\275\273\263\365\031>d\311:\275\311\'\216<96)\274\300\250\211=\337Y\202\275\2061\373\275\356\270\266\275\343\357@\275\244\016-<\024j\201\274Z/\256\275\372\242\240=G\224\002=>h7\275c\342\016\275!\010\"=\352W\205>)\031\243\275\270\253\264\274\2453P\275\004\265!\275\370)\327<\205\250\246<\021\266\'\273w\243\020=\301\330\310\274r\324m\275\374 y\275\237:\304\274\332\025\334=\020mA={F\022=x3\304\2745\320Z\275\254\357\010>tV_=\311\240F=\246\337\302\2745\002\301\273\2173/\275\367\371%;\343d\001<y\345\212<7\201\235<\204\322H>\035\366\250\275W\217\304<\032\316\255\274\267\331,;=W\262\275&=a=?.u=\301\330\024<q5\377<\320Q7<\302\261(\275&+\374\274\177\373\236<\260+\033\275\226\321.=\376\234\372;\340\026\216=B\374\233\275\261\025\270\274\246\202\217=\225\315\n\275\262\353U=\237E\025\274\334\n\210\274Q\235\013\275\274O\246<\177\003\206\275\273\340\326\275\000\026\"\274\r\024_<\344\020\364\274y\346P\274=a,>\034n\272\274\027S\257<\372up\272V\200\367=\214\266\"<\336\334\213=q\\\026=fmj\274\226\342[\275\240\235\327;`%W>\242\000\250=\002\027\305\274\003^a=\233\346\331\274\305\036\205=\020\037l\275?\234\253\274@\033\204<\335\272\211<G0\032\275^[W\275\301G\234\274o\r\232\274\301\2234>\315o\221\275]C\234\275\016\273\201\275\336\312\233=+\307\201\274+\353\351\275\032f\312:Sm\017\275\210A\240\274\251\325\341<\3425\346=\373l\215;A\315\240=>:\023\275\341\303\014=\355\036\215\273\034\363{<\304\374\253\274\027A\365\274-\226\267\275\025{L\274)\326\372\274\240\204\351<\205\273\235\274\307\247\227=\260\276\260=\253\2505=\217\214\240<\014\023\222\274l\201\343=\267]\326\274\032\350\016>\256\263\000\275\0301\034<8D>\275\245\2547\275#@%=\277\207`\275\223}\362\274\307\331\205=\353~\375<\211V\236\274\027\261\361;\267na=Dcq<X\243I\275\253u\313<\346\240M>\240\'\026\275n\035*<K\316\013<\221\264\302\275\251\223\206:\327\347>=\205e2\274Y\003\027=\311\372\231<o)\234\275V~~\275\030|\013\275\235\334O<\320\014\201\275\301\246\230;\235_L=\272\010\031=\\\240\346<p\314-\275\257r\220\274-\343\340\274\235\311\351\274\351a\356\274&ON=j\026\266\275H\223j<R\254\371;\252\247\005;8\255\266\274H\234\362\274\351\230\232<\030e&=\257\267\251<J+\275\274\303\003a=\303J>=\354\310\010\275u7;\275t\354n\274\331\224\377;\352\322\217\274\rT\225\274\037\217\004\275\324\332\227\274)\273e\275\r\266\341<\275\031\271:\377i#\275\361l\372\274\314!j;T\344\303\273M2/\275\236\355\347:\005z\017>Gf\270\2741o\207\275\210UD\272p\213g<f\321+\275\202\360\334\274 \323\220\274\231\216\r\275I\177\234\274\005}f\275-\025\010\275,\365U\275\305\353{\275\237\347W=\274Z\276=\325\204~=\211\347\324<\353\260S\274\265W!\275\373;\360\274\\I\212=\317Q\013\275\0241\003>\257v\234=\255.\203\275\005\230\306\273&\024\222\274\347\316\023\273\217\177\304\274\231\322\202;\304J\'\275t\227\314<\025\257\241\270\235x\224\273e\036\267=n\307\010>0\314(\275|\250h=\225>[\275\"\236\234\275X\014\371\274M\231R=\353\017\356<L\363\005>-\214\326;\250\031\274\273\020g-\275\352]i=h\213N\275\310\321f=\347\252\247=\350\006\234\275\tR\331\274\312L\317\275P\206\003\275\317\211$>\'\310\203\274\302\000n\274R\365\211=M(\221\275\221\255\365:&\216\364\274\342\235\031\274\344v\017\275\251\\\216\273_`\206=\355\\@;0w\365\273<\205\372\275>R\201>K\343<\275\351\313\017=\226\305\271:5/\n=pq\333\274\266\013\004\276\304\266\250<Wc\323\275\\\260\200\275\267\017\220\275E\335;\275\345\032\260\275.z\027\275B\t\r=8\307\033\275\236\031l=l\200\325\273\r\t/=\"\320\356<k{L=\202h/=e\376\201=s5l=D\347r\274Mi\231\274\224\253L\275/\254\204=DB=;?!\003=\007\274X\275\273\202(\275(\246E;j\025t\273\211\337~<5\363\253\275\242\357$>`k\004\275\227>\311\274Zo\214=\347_~\2751\235\215\275\357\263\260\275&T\022>n\013\200\274\256\260U\275\330\354\002>&3\205;\001\267\230\275~\3150\2747!\245\275\213\256r=\221U:\275\002yQ=\341\314\306=\017\335\241\275\025 \336\275\023\221\213<\376\252\317\274\207-\333\274\272\252\017\275\321\013\332\274XP\200\275\276\001\363=P\'\335<N1\320\274H3\016\275m\377_=\323U\335\2741x\007\275m\360\311\273dCn=\311fR=d\373^=@\245\353\274\320\025\t\275\305\210A=\277\020\035\2757b\235=f\350N<\346w\251=V\353\201=\361\r\231\274\014\233&\273\206\004\235\274n\321t\275i2\210=y\000o\275S\254\212\275\217\3540=J\246\n=\302\0231=\030H\326\273\221\022\271=Dc\310\275\2300\377=0\373\307=\241o\220<\204\305\343=\016\210\337<\016\266G\273\262$\227=S\370\202\275;?A=\017\255\200>\247\031\023\274,\320\216\2759\256\237\275P\264p\275\310\201\006>\371\001\207\274\240\365\200=\022\204C\275O\331\001\275L\232\351;Yg\240<\001\t\017>\224\226\031\275\276\355\201\275\3354+\275\036\242\213<Y\234)<<\222q\275\211P\203\275f\242W=\034\305B=i\321\214\274a\036\024\275/L\346\275\364\204:=\351\201\266\274\317\014\356<\253\355\355;\332\214\312<5\214\234\275_XO\275\0264\244\274\270\005\276<\246%\024\275;\361==\323\216}\275\274\377\003> 1~>73\251=~\343\300\274W\235\274\274\260a\300=5a\354=s\013\311;\300=\177\275{\226\342=\211Y\317:\247\240\032=S|\367\273\352\217\237\273\323*\303;\353\000==i\026x\275\210\250\233\272\036\'\273\275\t\217\252=E\3411>\213W\243\275N\366\020=\023a[=\226\304\263=R\244\236=\205\246\261\275\271k\221=\316)\232\274c\272Q<\223\333u<\224\317\327\275M\256,\275\250E\007;\306}\316;\367\032V<\362\352O\275\377n\364<\032\301\232\275\tt\013\275Hd\300:\275\203\253\274\030\203r>Gi\371\274\271B/;o%w=\365\276S=\315\215\200\274\004\177\267=Q\345O\2725\014i\274o\236\302\275\323\242\245\274H=\236=DE/\275\rb\030\274\023\330\261=\210V%\275}\377\"=q\3276=\236\r\243:\320\302\322=\344\325\365\271\313\317Y\274m\247\217\274%\337\256=\010\033\275;\275\033\266\274>\334\311=@\036\215<Fu\266<\3438\003:\301\213\023\275\340\364m=\372\305&;\232 T=\024\'\327\273[D\000\2755\320\273={>\364\2744\335\251<l\244L:\363mx=\017\332\003=\326F\255=\002\316B=2.}=z\034\030=\341w\255<)\262\273:\246l\243=\003o \275<\231V\275 \233\'\275\nK\344\274~\027\024>*MK:CI\\=\277\203\206\275\356\320\004\275%\3715=\303\236\250\275i\006\310\274{\314\013<\335h\345;|4 \274/1W<\301\232\003\275\n\177\\<\204\314\230=U\207h<\021\014!=(h==\273[\3579\231O\322<\\\226@<\331Z\250\274b[(\275\017\356\276=I\220\245\274j*\365=\r\316\347\274\227\013\324\275N\2122> \035\215\274\307nF\275\225\237\235<\200,N\274+;\016\275h)\207=!\254\372\274z\242\253\2756\226\"\274\3454G=\335z\344<QD\262\274s\225\202\274\372\314\212\273\313\323\213<\325\216\265\2738K\025\275\331\321\234<\255\211\260<\"\\(<\215\n\234<\365v:=\2324w\275A\231\356=XsH;\327\004\246\275\253\362h\275\n\210\225=\2027h;\n\331\332\275R\203\331\273\034\346b\274\253\306\234\275\3250\303\274i\335\007\275\201\301\022\275_x\321\275\276\361\247\274\3321\341\273\353\r`\275&Z\230\275!\335G\274j]\237=\t\026Q=\256\312\317<E\223\203\275f@a=\370\354l\275\231e\352<\220=\022>\246u\t\275\241V\210\275,e]=k&\325<]\\E<\357\216\266;\n<\227=.\335H\274E\r\\\275\005\377Y\275^\010\252=\371\177\304=v\266?<\250\311\203=\356}\211=ZBE=\262!y=\232\034\023=\033\006\364\273=@/>\365\002\037=\r\021c\275U\027\306\275%\302\216\273\324\340\346\274\316\214\t=|\272\226<*\226)\274\nXE\275m\225\200<\303\372\013>\342\016\315=\330Z\213\274/:\363=O\020*\275 Vq=\'54\274\003F-=\252\n\264\274\257\201\276<\261\314\001=\305\260q\275\0037\364<\303\016\363\275\037\207\342<\222\271\347\275\334^\201\275V\037\215;\316X\371=\323\224\303\2754\352=<\315\317\334\273G\250\307\275\2110\363=W\\L\273\364\337\247=\177\026]<\027\251\003\275\236s\221<Y(\251<\212b \275|\344\241\275S\006\242=\256q\t\275\261;\027\274\245?\265=\nR \274\201\006\206\275\312^\214<\t\025\016\275\024\245\230\275W\263\264\274\016\341=\275\nw\200=u\334\370\272\035\336Z\275+\002\025\275t;\223;\361)\363\273e\200\212=\237\245\320\273\3717{\273\242\340\242<\206i!\275\215\220\202<\344O\320=\276\314P=\253\217\374\274\340\234B>}2.\2740\201\020\2758j*\275\375\371H<\306ZP<\205\004\207\275\235\326\250<\345\251f\275\267\220j\275v7#>\3035\205\274_\377\177\275g+8\275\222\276\216\275\275\337\320\274;\274v\275\026VI\274\031\204\244<f\304\010>X5L\2741\005\334\2740\272\231<E\306#\274\335\025~\274\265\223R>\361\361\022\274U\021\233\274P\022\035\275\304\001\210=\260hG\275\242/\250\274\242\211x\271\316F\357<\032\322(=.\337[=\220\241\212;;my;f\3006\275\272\360\263<\364gX\274\'\037\221\275\340\375:=\231;@\274\340\025k<\322\030s=\235=\234\275k\352<\273A\222\256\2730\036u=\350\\\037=\024\362\014\275\325\326\367\273*q\230\275\346\315\333=l\013I\275LK\213\275\230C\225;\005\313\331\273C~\"\275\274\214+\274^;\347\274\264G\227\273\325#\330\274K\237i\274\233\370s=DY\250\274\275\365\261\273m1~<\272^\212>\242\264\\\275\253>\027\275\331\207\260=\343\010\206=k&\306\273-\212\004>1\0369<\360\363O\272\364\244\034\275 \014:\2758\243\235\275\252&&=QI^\275G\255\367\2733{\277\274o\017\036\275\237\253\354\274\276\274\004\275\310\206\252=\033\350+=$\250\220<1S\003=!b\007\275\005\224\310\273\211]\221=\0138t\274(P\030;\256\020\206\274\022\331\244\274\303cO=\231\0141<\231\340\"\274\035\002\241\274 d\006<z\250\017<\375vR>9t,=gh2\274\264{\215\275\024c\263<(\021E\275Jc\233=n\037\320\274}\035&=\007\372\006=b\227\022\275k\301\207\274-4\342\275\212\267\242\274\n\313\001\275\035\340\364;\344$\237;b\360p<|\251\320\274yif;\326\"\275<\346EV\275\327\360\216\275\246\2561=2b\325\273\325e\013=\250\256\r\275\344\232\372\273\351\327\226<\255L\317\273\270b\254=j\261R\274\"S;=\365\354d\275\010\321%\275Iq\260\275N0\360\275q\323\224<\362w\367\275\220\350\277\272o\317\265=\265H\036=\245$\317\273\277\306\322=LF\010;S\352@>YS\026\275\301\231\201\275\0058\027\275\006\362\"\275\023\340/;\253\227\212<\207\353/\275\335\251\032\275\370,_\275\033\2162=-\335\346\274\307\271;\275G\246\000>U~f\274gra\275\370%\252=W\2762\2752\017y\274\327@\010\274.\245T\2752>X=\235D\272\274+`\207\273E\nD\274\204\251\367<`\363\216\275\004\352\200\273\034\244\254=\204\235\257\274-\333\241=\257\267\221\274o\275\315\275\035\323\315=\265\214!\275u\023?\275\275\370[=\236\241Y<Eo\014=\222Qi<\021\230\030\274\035/\230\274\305\221\257\274\224\332\361=\233[\\</\2762=\265\370,\274\021X3\275n\000,=\312\361\234\274\301\001\262<4\024y<\365\252\014=\243:\305\274oz\347\274\0174\214\275z\335\304;\357h%\275\305t\367\274\353\314P=\344-\007\275Y\234\021<D-e\275\342\255\335<\373\201\000\275\347O\020\275/\276\230\275\254N\t\273\264\253\000=]\201F\275\235\265!=\354jH\275mb\034\275\346\340P\275t\r!>\273\361\032\275\374\256g<\2542k=\317\312z=Y\273\277\273}\332x\274\200\031\233;\002\304\227=\\\267\243=\361*\266\274\211T\246=`\330\221\274\270,x\275d\204b\274\n\016\003=\213\005T\275\276\245|=\340Q==\3274t\275\210\271\036<\275j\233<\200q(\275\\qy=\337\025\006>\346\014>\27311\221\274\'\010\026\275\246\034\234\275A\367a\275/I\252\275\313fH=\3723\374<\r3V\275\363hR=\355\2011\275~\246\300\2759\357\211<\223KC<W)\261\275[F\250\275\325^0\274W\035F\274ia\215:6\010\027<\311\201\250<\327=c\275|M\303=\n\244\373=\216t\240\274FX\347\274\260\305\215\272R\275\316\275\273\222\200=\374\001\260\275!/\261\270A!E\275\2222>\275{\001\324=\364\321\017\275\305VY\274wJ\032>|]\276\274\332c\213\275\204F\025<\253[\027<\260\314\025=k\245N<\367\r\010\275\334\037\314\274R\275\002=\206\273\036=;\022y\275\265\307\232\274b\034\243<\251L\013\275\235\344^\275\360\212\003>\243A\372\275\034\244\206<a\355\222=B\010,=\325\250\214=\2319l\274V\245\252=W\325\226<\r\323\317\274\243\246b\275\373\347\002\272\250\354\234=\002D\270=Q\277\343=\020\272,=\254\211w\275\014\3736>A\347\037\275\366\017k=V\001\313\274\366\230\277\273\224\214(=(\311\376<\300}\005>\021?D=L\034\201\275\246x\225\275\366\032\206\274\220\243\003\275\353\214\234;\204F\034\273y\310$=\321{\345=\245+\270:a\277@>X\354\301=5\247k;\032aq\275\034;\265\274,\201\324=\005\r\223\274\227\367N<\271;\332=&\307\346\274\025\212=;\254\236\206\271\267\364\251\275\315\270\341\274\307\005\035\275[\t\334\274\361_\030\275!\317\336=\257AW=\036o\326\275\242]\200\274\320<\311=ImJ\275\360\241\207<1\354\004\275\302\203\210=L\2672<\000P\031;\361\265\\=\265\340\200\275\244Df=\315\247#=\305\264\003<\343c,>b\362\332\275\267\025\304\274W\261\206\2751\364\254=\360\326`\275\272\3636\274\"\3440\275\330\254\266=%\325\214\275!}&\275+\032\365\274;\'\007\275\350\014]\275l\\\205\275\351\334\t=92\377<\262\315n\275\273b\246\274\341\255\001\275\203Yp\274\374\333\025<\024\030\026\275\212\203\n<\371\252p\274\230\312%=\021S\305\275u\235\025\275\273\355\231=\266\2652<\307\366\016\275\003S\333\275\250\367\t>k\'\372<\2649\206\275d\036k\274[(\217=]`V\275\240\234h=\021\371\023=\271Vc\273\317\227\\<\341\304\335=3\340c<yW\t\275\304\221\262;\3625\014>\025\310\374=\033=\272\274\027=\264<\201\274\253=\021^\017\275\314t\253<\205\3161=\355\237q=y\016*\273\02242\275\325`\223\2755^t<\253\364\001\275\276dt\275%3\200\274\212\233\253<\0348f\275\255<\206\275\231\334\"=~\347\r<^5\251</tA\2753`\014<\262\260f\275G\032Y\275\327\374\221;\361@\034=\034C\010\275\021\327\303=\256\"W>\375K1<P\\\333\274\200\361?=\367}\227\275\010q\336<\204\243\204\274C\327\367\275~]\203\275?t\204\274y\311\037\275WW!\275\374\324V<\372yq\275\016\335\013>\261\013\006\274\345\301~\274S\336\252<\221\234\037\275\306\\\334\274\202 \215>\356I\232=%08=%\315\226<P\321C>\225R\226\272\3468X\275\024\204`\275fM\023=\235\316Q=\033\221\200=\007\265)\275\\\033\363\274\314\313\224\273\327\242D\2746l\332=\0063\341\275\340\031\244<8\326\177\275\321\271Q\274F\304\264\2753*W\275\036\270\333\274\267\024,=\245\202!=p.\256;!j\250\275SL\373\274\256\007\001>;\220\177<\361\203\326\275\232\0037=\212\342\226\275**+\275\232\240g<\310\214\323\272\253t\\\274<\235\211\273\316&\370;\242g\207<\235\233\344=\207\314Q=\250\ro\273CW\246\275HG\177\275W\246G<b\257$\276E\021\027=\272\027;\274\\\355\010\275a\250D<7\243m\275\014\035\342\274:y9\275\226\303\255\275^R\220\274\254*\030\273\375\325\033=\250\034\003=h!\246\273\'\213\212\2752\n\002\275F\213\033\275-\000h=\001z\306=\r\306\202=\337\365N\275]\373\204=sy\207\275\255\002{<\003\315\347\275|K\007\275~2\261\274/\303\323\274\257\311\273=PD#\275b\215\r;b\316\203=\305\236\301\274\236\026\035\275\232\232\014\273N\251`\275h\274\325</\006\211;\331 \301=\\\307\254=\342\370\257=\232{;\275\013\322U\275Q\271f\275\253\375K\274\020<[<ba\233\275\321\222\002\274\237\217\354=S1J\275\263\275w\275Ei\373\274\217\356R>\203\032\027\275\277\322\360=K1y\275@\220\243\275\021\225@\274HZ\315\274S]F\274\202P\337\274-k\\\275\313^\353;\2433\022=\007\234H\275\331r\211\275,\343\215\275!\266_\275$\355E=\036\214\310\274\264\275o<(\256\227\274\342\023\007\273 \272\277\274J9\266=\031\314\034=\231P\'=\314\232\231\275#\211\342\274\312&\001>0=\'\275qo\362<\235\345q<\"\244\316;\306\354\325\274C/\213=\273\361\377\273\014\013*<\236\031>\275)]R\274\316\356B>kwD\275\317\352:<\020\342D=\366\246\221\274*bw<\266S\220>\233\320\006>\226\"\263\275|\203\231;\362\362B\275\336\232_>\302\t0<\003\005\034<}f\t<\24637>\343\316\343\274\027\016\273\274C\320\224\275\303\373`\275\306\367\t\274\177jh;\275\350F=As\001=\245\237\227\275CD\340\274t\332\205\275MUr\275\324S\213\275V~o\274\210\363\200=Ct\004\274!\330\020=%Q\226=Y\356\230\275\231A\264\275\327%\322\274m\014\332\274\227)\235\272!\r\344\2745\365\277=\345\314\323\273\022k\036\275z`\001>&\026\356\274\306:v>\371\375d\272\241.\344;\266\003\025<A\024v\274\031\276\227\275@\324\212\275b\235h\275T\035\235<\225D\010\275\217\373\231\275\202\345\202\275\017\333\217\274\216(\303\273w\326\033\273\005\333\032\275^\356\343=\275\r\367\272\303\036<\274\227\274\207\275U\354\340\274n\261_\275\207\301\301=Mx\264\274\034\336\247\274x\207z\275\205\336\036\275\3131_=6p]\274=\2250=/\323\030=\303\025a\274\320<t\275{Q\244\275g\252k\275\335\235W\275\005\351\205\275.5\215\275\321[4\275\014\361:\275\363\0043=\344-\206\274\314\300\301<\207\027e=v\237\032\275\243>5;\300\210U\2752E\025=/\2515\274,C\303\274N\016\355\274K\231\222\275}\317G\273\236\2578=\242>\026\275\330V\363\274Xd\324\274\343\346\243<\322\003\222\275\257\376\240=\311\362)\275\306\\\233\273\256\t\250\275sU\266\275\257\330\272\273!YX\275\260\223\200=\346\272\232\274(\002\244<(\266_\275v\254f\274V\226\231\272\353\200\246\273\005\355\316\275\247\203U9\313H\205=o\262\t:]\001\331\274Q\354\327\274`\016\"\275\313\276\332\274\303u\020=\036T\275\275\020k\217>\303\310\270\274H\357\205\275\270\376\356\274s\305\243=\005Ok\274\310\374 <\213T\376\273\330\237+\275!\252S=M&\353\273\312J\036<r\371\2479\002\225@=3\3772\275\002\037\234\275\306\031\023\275\264|\275\274\201\351\031=\335\274/>\341Q\314\275\2465c>\262\376\267<\344\342o\275\272\354+\274\236\253\021\275\2359B\275\210\020 <B)%;\031\305)\275\203\345\030\275ZB\217\274\003\227\202\275~\353y=\203\200\206\273\266<z<\356\324=\275h\264\223<\355\204\031\275R-\277\273;\014\343=\221\004Y\275V\307\200\275\233\302\262\273\327Z\350\274\245\035\270=Ue::\013\203\256=ce\210=\337\017\201>i\232\020\275\301%\265=,\352\331<<S\306\274X\304h\274\r\217\304;\247\007\333\273\365)\036>t\246\364\274Ca\020=\233g\314=Y\2413\275\266q\\\275\217\352\374\275D\2615\274\334\233W=\036\355s=\251B\312;\036J\200<y\025\"=\345\213-\275\2713\307\274\216\347y\275\225A\326\274U;4=\351T\\\275\276\247\344<\312]\004\275{\371U\275\240\016\205\275\204c\254\275\3066\232\274R\021\206\274\273\267\262\273\200\026\217\275\202\250\035\274\361z\246<\177B\006\275\021+\010=N-y\275\202wx\274qO\302\272XN\317<\343\360\350\273\026\207n\274=\375\230<\030\221\330\274R\"\022>\311\234\352=d\030\252=\303Q\260>h\322\025<\244>\326=\350\331C\274k\242\226\275%q\241;\311\0215>h\377\340\271s\353\351;\243\327\025=\303\211\310\275\3424c>\034\200a\274\245\225+<\215\204;=X3w\273\236K\215=\224B>\275\245\370)\275\211\312\316;3I\320\273\013o\356\274\324\305\303\274\261\261\303=-\327\253=\351\200\210\275\2457\345\274\227>\274\273\367\000\210\275\346\305\221<j\030U<\342\031?>?x\337\274\205\216b<\212\034\264\275,\210\007>GDE\275\323\250\265\275\304\024\016=\r\374\224\275\215\210\276\275q\342K\275\203\315\306\274^}V=\215[\214<\374\331|<%B<>\363,\331\275~\002\000\273q\024;=\215\255\223\274\206\204S\275\335\210\017\275\253vO\2748\307r<\033\274\255\274r\374\364\274\257\310\225\275\257\352\277\274\366\031\007\275\036\027\256=\300\333\312\274\314\2613\275\277\004\247<8\207h\275vK)\275\367\305\227\275(]\214:(\021\250=\342\244\212\2748\"\254:\334\017\243\275W\373m\274\346\021\317=\302\333$\275\337v\225=a\271\250=<\360\204\274\242\363\306=\220\225\215=\336^\354\273\026\224%\275\n\236\314\273m\321B\274\r\236\255=O\374/=ms\262\274[\205\017>\035\026\326\274>\\\027=\216\375\252\274u\257<\275\342\324c<\310\352=\275\026\225\027=\303\002\377\275\013{\340\274\n\240\335<b\343\027\275\232Ti\275}&\005\275\221\254*=\224\211\021\274\212\343\036\273W\346\272\274&\2533<\364\001\370<\177\'\3309\024\232\244\274@\224\337\274c\013\215\275\3657\r\275\227\230b<6\267\005<\nH\275\274\026\220\313<\205\002\211\273\010\252#=\027\333)\275.\367\"<M\210;<\332\013\367\272\244\302\210\275\373\323\036\275\342x\342=\300\020\355\275\016n\264\270\272\221Q\275\326)\222\2724\013\016=!,p=\303\037k\275\235\215\037\275\275Zq=\355\324\255\273\306\235\003<\037$8>\023\356\370;\224G\322=\316\374\274<\363\321\277\275u\256)\275\002\202\210\274\017N\202=\1777\372\2747\034\224\275\004\240P\272\371d\325\274\333Q+\275\372\344\253\275N\n\237\275\227~\343\274\356\272*\275y\327\007\276|\335\242;S\023\225\275H\256\010?\357\3238\275\223\\\366;T\006K\274FK\016\274\245bj=\363\266\245\273#\2418<\352\n\006<\0341\024=\364\315/<\302Q\234\274\363U<\274\347b\301\273\253\001\023\275\336D\216:\317\220Y\275\240a\343\273{\231\215=\003{\r\273S\3324\275\214\'\214=h\374\207<\312+ <\212\202\267:\004\277\010=\362+B\275\234\016\203\275\376\345\320:#N,\275\326\325\371\274\253\240\027=8\271\367\273\016k.\274\251IW\275\352-\010\275}\267\357<\372\331\351<\273\275@<?\345\035<\270/\017=\035\212c<Z\'u\273p\002\227<o\361&<\302q\225\273\250\307\244\274j\353T<|\000\361<\210\024\032;\276\214v=g\366\341=\205PC\275\220U$=\315\350\"\274v\326S<=\323*=\211\001C\274Wv\243\275x\341\270<\'\241\315;6\004\'<\331_\231<fy!=\000\345\027=\036\353*=\340\310z\274\253\351\365<\031ZF<\035z\320\275H=\224\275G\373\307\275\023CQ;ee8=gq\213\274\375\335\337\273\006\235\245;\256\317\232<\nm\240\274\335-\263\273|\215s\275t7\032\275\312;%\273\030yo\274\274=\365=\340\215\337\274\320$C<\303\316\320<k\314\n\275\360\314\356\274\336\305\024=\244\357l\275\203\336\201\274\263Kb=\200\343\237\274\226,\240<\336*\214\275\315I\213\275\244(q\275\271\327\023>\377\334x=\363A\037\274\255\374\201\273\"\321\014>\345%\246<\351DT\275Sw<\275\226\227\033\274Q\363\313\274\257\215N\275/\214\217\274\230+\356\273\177\202\033\275\227R\034\275\020\020M=U,A\275\241\357\211;n\323?\275\301\265\227\275\201L\000=\343X\027\275R\244\370\273\212\350\207\275\2757q\275`_f<\254\231\3237\2765B=N0Z>; \207\275\315\336`\275\016\235\315\275\007&h\275\177\305\262:\370[\344<\307\226\354<\327\246\316\273\213R\031\275\np]=I\213\032<\376S.<S1\237=\336\265C={NG\275m\\\275\274@\237\241<+ji\275&\r\347<\225m\211=LS\237<\225,r=\365\3419\274]k\311\274\3130\030\275\313\250Z\273\373V\304\275\311\377\211<\344\234\206\2746\021!\2743.L>\240,$=\322\223:\275z\331\230\275\234\3404\275\030\250\301\274\n\241\345\274\221\001\222\274\007\233\216=\251\376\212=SB\206\272\315g\234<\010\023\261<\3170\016\275<\241\261\275\341\003><\024\202d<\210\177 \274tE;\275\n:\300\273\031\336\013=\271\005d<\016\262I\272\351R\372=\310\036\035\273ni\030\275\211\023\030\274\3469\234:\341\323\245\273\240\356,\274O}\344\274\3066\271\274\251\231j\274\263\316\314;\250&\223\270\242>\321<&=\020>\344\276T\275\245\003\003=S\372\023=p\357R\274.9\027\275\334\323\003\274gj\234;x\354\312\274\312_\331\274\206HJ;Z\370f\272\"\014U\275^P.\274k4\273\273\225\246{<\301\204\014\275\257\034\337<{T+<~\3547<\224V\300\273Os\232=T\nQ\275\1771\001\275,\253\233\273{\267\016=X\006 \274\211\221\273\274\352\276x\275\307\226$\275\364\343\020\275\235/v\275,\031\036\275\"\2630<\302\302P9r\002\335:)\316\312<\362\364\001\275\242\345\261;;O\364\274\314\254\206\275y#Q\275\342f\364\273\362h\205=\214\337\016\275*Ur\272\256\323\3719\007_\n;.\314w\275\224w\027\274\001\226\201<\007\2141\274\211\223\032=\r\030\365\273\335?\254\274\020ia\275H\371\322\274\364K\030=\025UY\275\256L\222\274\243H\370\274\353\3420\274^\360$\275\273\375\212\273(\177@\275d\331(\275i_(\275m\n\030\275ug\254\274X\317\313\274\023\272\277\271\314\204\246<\363\325#=\030\237\341<\227\177\362=^3\320\274\013+N=\304~\006\275\245\356\222<*\312o\274\240\263\001>\2616I\275\222\246\362\274Is\255\274\317\3011\275\357\0265\275\335\254\355\274\230\227\363\274s\364-<\203\270,\275\365\264\024\275\013\250)\275kwU=\271\003#\271\352Y\274<|\334\r=5\342Z<\220\274Q\275!\302N;\274\022\026=\234\354e=~\003\230:\227\303\035>\346\372-\274\037e{\274u\024\242\274.H,\275\'\026W\275\027+\351<\036\226v\274nu\224\274=o\343;\270\217\247\274\321\344N\274\036\271\247=b\350\220\274.\310X<\323\021\303\274o\033\313<Z\347x\274\360\234d\274\031\310\034=\266\254G<Vw#\273\200\207\254;\251\340.\275\202\270\246\274\220\343\232\274\372Y\230\274h\350\031=\270\230\277=\357\270\371\274\322\220\226<\300\372_\2735\034^\275\325UE\274`\325\245<\206a\3359+\352\362;Y[\265\274\325\177\210\275\363\003\010<w\245k<|\3609\274\207\205\371<CDq<\226\326\006\275\201\255R\275d\260\333<I\372\250\274\313\226+8}\331&\275L\017\"\275\330\\l<F\211\216\273\221\322\256;4\312\317\274=:U\2741\034\211\273Y[\270;\326\273\202\275u\257\232\274\245\263\223\274\372\210\300\274\202\'\311=\353e,=Y\366\361<x#\035\275j*\223:\354\022_=\203$\374\274\3060\222\275\024\366/\2754u\217\275\031\322\254\273\315\242\025\274\222\262\n\275\2446d=\371\3645\275\336\036\326\274r^\335\274\240\235W\275\206\351&<Z\t9\275\n[\376\274:=\205\274\026\023\0059\303\274\010\274\367KK=\034\273\304<U[\r\275\023\376\263\275\205u\203=\363\354S\275\217\377!>\256\345\321\275\033ET\275\202p\212=]\310a=\037S\200=\033\226b<o8\262\274X\300\340\274\377C=\275\322\325\3229\305\331~\274\226t`\275\0163 >g\352\223\273\271\224\315<\211\360\024\275;*\257=\257\256\250;\350m^\274\004\250U<\t8\274<\177n\327\274FSr=0G\261\272x\215\035\275X7m<Jn\004\275\276\217\006\275\253l\200\275(\002\230\275\376\344\216\274rUX<\251\216\270=\212\246\203;&\314$=e\226f\275$\222C\275;\242\021\273\210\234o\274\t\307`<.Q\360\273c\3127= t\332=\373-\013\275\215s\210\274\320\326<\275\266\025\272\274\370\337\325\274\311\177X=\020\215\226\273zP&\275QY\311\274C\034\023=S\361*\274\377\2367\275\303\204\233=3\370\305\271m\334\213=\034\253I\274d\314\342;\310v\246;\371\2472\275\334\355\203=8|\200;\242u\215\273\312\001\255=o\362\025>e\347\335\274T(\211\275\252\177r\275@\311\010=b\2672\2748\334\374\274\001\345\006\275\326\265\257\275F\351H\275Z\010K\275c\014\336\273\356\303m<\"m\213=_g\200\275\020\275\250\275\363\004\213:Dd\n\274\t\323\361\273\034\263\241;ig\355=\343\237<\275EH\270<j\022\"\275\356NG=\235\0107\275n5\233;\251\235\204;Q\365y\275B|\241=\026\"_\275\335X8\275\220\244\333\275\330\004\210\275\355\376F\274\374h\207\275\344\'\246=C\377\013\274\220\365\312=rM\024=\275\255\337<\003\265q\274\200\270\266\275Y\000U\275\363\023\022\272\234x^\275\'Z\264=H\323\235\275\331,\237\275\216/\234=\206\257\377\273\027\'\202=\372\270h=4DT\275k\333\250=\220T\240=#\363%=%\327\345=VF\226\275\272\314\t\275\006&Z>\262\350O\275\300\370\342=\220\3331>\033\006\001>O\210\030\275db\030\275\366\031\340\273)\025\207\273\245V\233<*h\177<\336\371f\275o\306\t>\314\014>=Q\203/=I\235\276<:7\376\273Q\320\206\275 c\344\274\024\356\203\275\246\227\276\274 %7=\024h\224=\321m\014\276-\331\230=t!o\275\204\213\007\275\214\261a\275\253\235\222<\202t0=\220\r\";\270{\304\275#\220W\275]\313\377=\244\027\213\274\351z\307\273#\204M\2759~!>\234\370\354\274U\354\204\275`\370\253=\031\272\027>N\314\271\273\312\025N\274\250\022w\275\213$\202\274\326G\031=\311e\013>\\\013\237\274\334\002\206=\"\203\032=Z\037\001=%\347m=\266\376\273<\210\2028\275\031\265\217\275)\324\210\275D\277\232\275\315:\005>\237\016\256\275\350\236\317\271\246j\277\274\217\014\214\275pN\017\275g\323\263\275\215\221\242\275\\\240\240\274e\245\035\275\305\235\006\273\263\320v==\\\233\274\305T\026\274\334\2054\275\371\312.>\244\\\306\275\277\255\020=\363\346\206\274o\351\374\274c<4\275\376_f\275\035\271\003<\t\203k;:\3341\275\371\376\230\274\345\364m\274\347\276~>\177\346\330\273\"O.\275\207Tb\275}!\031\275\222\226\335\274\272\343\027=\314~n=\r\320S\275\236\262D\2753\231\344\275\334~\227=\210\330\267=\023\\\306;\267?T;\252\202\267;*\030\341=\370\3366\271\326\262$=\0371\330\274\342>I\2752\253\360\274\206\021\334\274K\374\310\274\341\2111<F\332(\273\027\036+<O\225\021\275i8\246\273\036\216\253\2741|x<~\177\007<\230\206\364\274\3666~<\265\350\016<\375\211\317<\225G\336=\235N\303\275\305G\336=\250\332\266=\374Z\306;{\266n\274o\312\255\275\202\002V=\330\347-\275\364\270\330\275\272I3\275u,\017\275{\325\246\275\240-k\275h\244\004\275\217H\013\275\300,=\275\336s\"<{\306\345<\365>T\275\254\030\261=\001+\217\274\312`\242\275\250\004\023\275\013\n\332\274\021\323\204\274\301\344=\275\227\223*\275\3120\262:\024q\1779nM\361\274\007\204>=+\361\214\273\274\013\200\275kO\240=\017\201\263\274X\243\264<P\205(\2733\000\177\275\330\235\356\275\021CC<\332\371\025\275\024\313\210\2757\352=\275\177(%=\222\201\315\274T\273\265\274\240\333\221=\215P\310<G\347\223;;a\204\275\257\310\206<\310\245L=\256\2144\274\023\014\311<\226G\337\274\261\227!=\3240\020\273\225eH\275\377Ub\275\364@#=sq\'<=\205$<\006\344A=\332\341\204\275i\206\235\275E\327\254=\221\347.=0\355\374\275%ph;\320p\355\274Hn\030\274C\375\020>\241\216\'\275}\316R\275\237\203&\275\321P\355=\243#y;\014\332\023\275\225\013\340\274\266\t\244\274k\217\376\273\031\202\223=\316\032\222<\341\266\002=-\212\274\275\350\0200\275K\242\002\274Y\340\310\274\024\333t\274\315O\234<!\310\206\275\224q\234=,\271\261\274\375`%\275\214`\362\274\320<\341\274S\"\241\2752\365\367\274WU\014<\tI\243<Q\331\220\275\372^\252\275\256\322\'=\2367\246\27505\001>\217\355.\274\257Y1>F\370^<u&\260<i\256\003\275=\237`<z\235\205\274\314&\243\2740&I\274q:q\274\027=\271\271\210tu\275\363\364{\275/j\312=\272N\254<\267\352\257=\223\325\000\275\244\265\r;\371\027Q<\262\237\301<\231\214\034\274F\261\">\277vO=\220 \304=t\230<>\361\3668=\240`L\273\251@\013\275\017\305\222\275\014Yw\274g\270:\275\0179\215<)\205\252\273\204?\022>\244\342\206\275\237\354g\274\242\325\024=\341\265E\275\375\335\001\275tH\r\274\310\326\210\275\311\223\323\271P\002\262\274Bi\216\275\305\"\261\275a\r$\275i\026\022>\253\004\3079\315\n\227\274\004\253\301\274\247\364\262\274]\201\220\274p\355]:\020S\356\275\274P.\274w\005v\275\334+\300\275.\270\023\275\024\247\025=o\323\202\275=\002\346\275\304D\022;\227\267e>\376\203]\274\320\177@\275\000\317\251\275\027~\020=\253\232\221\275\000\372\214\275\251\272+\275\237\031\343<\200\373\215\275{\027\346\274\276L\273;\002\372\037=\350\273\247=t\333\272=O\246i<\317$\224\2741\261X=\261e\361\274\017\210f\275a\0228\275Ti>=\031\366 =\213]\252=9\340\342\2745\261P\274ZQ\330\274HB\033\275\274\361M<\322\346\237<\314Q\233>x\265A\273/\177\223\275\227\013E\273K\375?=\203\337\236<Y\216\367=l\241\207\275\006\313\216\275W\217\370\272\311\376\024=\022\376><\226K\202\274\0210\177\2742\227\233<hh\237=&\311\272\274\341\260\213>\234J~\275f\'\235\273\340\272\222<\303Z\351\274Z\337:\275\322EZ\275mr\247<;&\021<\243#\2679\365\210\235<\367\327@\274|h\371\274\2439\201\275*\0271\274U\352K\275\247)\323\275\244\244\016\275\003\013\245<B`,<p\247\265\274L\006B;V\264\010\275\267\302g=1\323\024\275?\214\020<\325;\207\275\255\246N\273\31312\275\275\022\000<\204\212`\274\010\325?\2730\"\021=\204t\342\274\321fk\275z\346\336=\037j>\273\306>\031\274\3073\375;%\215\257=H`\242\275\222\206\030=v\341<=,\010\322\274\253\372\257\272\004\242\303\2751Q\362\275\007\3430=\260B\254\275?*U=Q\031\016\275\026\311\350<\373\341$\275\223\202Q;\260#\355\274\354\026\032\275\347\321h\273\022v\236\274\302\'\257\275p4\255<E\310<=\344\320U\274\311t\033>9\235\205<\027\320Z\275\306\310\223\274\003ZZ\275\334\322\020\274)\036e=\306\000>\2759J\333<\351a\n916\236\274\270\320\n=\013$\275\274\241\\\331\274\n7\221=\353\026\222\273\305\260\025\275u\026.=\005\204F\274U\317n\274\223\360/\274\312\201\272\275^\336\016\275E\206\233\2741W\265;\330\207\025\275<\211\177\275\266\365@>\326\342\315\275+Ei=\325\206\256=\241s\271\275#c\256\274\210\257\253<\217aA<7\337b\275*\231\372\274[\022\211\273M\354\034\275/OM=\351\317\177=\360\261\211\275\226\204\315\275Z\374\202;o\003\260\275\261\3421\273\021\322\207\275\022\276E=\024M$\275bc\014\273\227q\324=\230+6>\340\206\300<T\273\224=\274\337\365\273\362\323*\275@\302*\275\034\206;;j-\237=\026\317#=\010\267\314\274\341\265\200\273r\177\301\274\333Z\323\2744\256\255\274D\217:\275\375Z\026\275\277u~\2741\006\237\275\264\321\277<\234\317\n=\221v\353\274~\225o\275\210\370\306<\262\3360<e\314\236<\230&f\275a\004\250\275\221N\324\274U\206Q=\310B\\<^q\26091\372\303\273\331\031\243<\017\215\364\274\200\000\214=\365]\226= \327O=\003\337\231=\233\203\271\274\353\0218>I \311=2\306\001\275\010Z\356;\355\\\240:\026\265\237\275\361\362\317<1/\277\274(\220\211=\237\035\315\274f\317\000=\322\023_=c\363\212\275\2439\226<IF\010\275*\037I\275A\300\223\2751`>\275\211\375\215=\350\005==\257\032\376=m\3730\275\315\212A\275\021\037F=be\302\274\330\"b<\370\036\227\274\271#\225\275\353f\353;Vz\234\275\347jO<\204\312\216\272\3352!\275\303\205 \275D\t\241=(\253+\275M+]\274,(\036\274\227e\260=\204W\021>J\271\364<\371\353j\275\250d\013\275\232\306\257=)+\272\275}\211\033\274\273ht;N\t$\2750\235\026\274\301\276\320<\207\227h<t\203T\275r.*\275\227\252d\274X\230:>\232\371\257<\204\244~\275<\250\224=O\352\245=\207o\223=\373\n\221\275R\274b>\307\312\363==\323z=\253\223\327\274v\373\243\272.pd=+\363\336\274E\"#\274*\247\035\275\234v\341\274\371\367\314;\315\347\274\271\\\246\364\274\307\037\332<3]\222\275\322Q\237=p;\t\276\362\237D\275\005=\220\2759\355\001\275B\235i\275\277\2512\275Z[ \275\034S.:\3077\210\275\217\304\342<\321\353\210\275\2755\036\275\254\316\317;0\243\236\274\033\335\302\273~\022\234=T\233\"\275`\201\370\274\361$\362\274z\026\243<\036{,\275\375^\236\2735\021\246\273\030\217\341;\321\276?>b\301\320<F\001\255<\233\000\203\275\266|:\274\231\330\025>\304\313\276<\037\245\252\275T\307J\275\034\247\210\274\223\014\033<\2701I\275n_6\275\t\344\320\274\206\275\257=^\n\250\275\006n\226\273\232`\007\275\021R\230\275H}b\275b\232\344\2740\006\276<l\250\342\275\271\317\311<\026\034\257=\267S\313=\3253/\275\032\021\000\275\247\230\027\275\260\322N<Nk\006\274)=\3209ML\227=\373A\316;>\'\007\275\375t\323=\020\016\346<G\\\026\275\220\272\006<=\244[=%\237\372\274\317\303A=\334\341A\274\225%\304\273U\016\375\274\022f\211\272\346\274\314<\321\224P\274\200\311\025\275\220\327\332\275<Z\306<\n\0068\275\213g\206\275\313\216Q\275\210\346\315\274.\221\316\2746\366\263=\246\017\006>\001\312w=\266c\205\275A\320\257=4\242\020=\3629B=\237\351\256\274\235\026\232\275*\235C\273\025@X<v\214\030\273\304\217\204\275\321a,;\220\373\344\274<\1777\275\241\363\201=;zO=\025\243\211;\314\306\233\275\032\024\301=35&=\323b\356:^-\014\275\n\226\311;\302Wr\274\365:\261\275\224b\260<vP\027=\361SI\275\036\267F\275\376\315+\273oP\016<\260\346\020>\375\301\'\275\231\356T=\303\000\017\275\024\270\270;\363\030\321=2\002\004=\263\353S\275*\017\224\272Xr!\2752\213~\2745Y \275c\017b\271L*\252=\027\253x\275\225X\340<\020\356\354\274>F\244<\345J\004\275\373Q\221\275w\233I=\206t\037=\360\323\006\275\246\302\271;\307[\366<`\373n\275\231\330\300\274\2163-\275K\325\277\273gk\225\274\362C\001\273\271{g\275\274:d\273\360\t\274\274\021\034\255=\300\356\234<\022\372\221=z\023\361\274v\360\274\2741\361\330\273\235\321\\=\303,\273<\361h\244<&\303\257\274DM,=\264.k=j\216\263<\322\316\215\275\323\226\320<\003\221\361<P\326\256\275\330I\034<\325K\212=\3331m\275\341%\277>\325;\244\275\361\313\374<\341_\303\273\242\022\331\274\372\221\234=m-j=\342\200\t\275c\244\264\274\244\271\307<:\265L\274\240q\211\274\250\3213<TH\365\274P\035\264<e`&<\246y\211\274\022\354\344\273o\352x\275\342$\371<S\220*=\231W\327\274\207nD\274*\377\220\274\272\353\227\275a\274\267\275\234\362\250>m\2169=\275\206\002\276\221#\225\274I\255\005\275jJ\013>\213\251l\275z\352\322\275\301\225!\275Z\337 ;\315\347\345=$\230<\275\032\262B\275R\304c=S~\375<\322N\201\275\226)\304\275\263\260\376;z\325\254\275\014n<\275\363\'\233\275\220\017\225\275\227Q\310\275\'\253}\275\203sF>b,\271\274+\355\247\274z\211f>\317\004\272:\216J\243\274\230\3737=v\301\003<\343.\354\274f)\303\27529=\275h\312\336\272\275w\004=\022\233\261\274X\373\312<\325j\212\275\210\242\302<\212<\"=\207\315\010\2757\254\"=\001\310\035\273-\033\003\275_\"\034\275\2406\253=6*s>\200P\032=\234\355Q\275\332\0323<(\031\261<\226\335\205\2744\360\212<0\247c\275\375!\201\2753+\243>\272\340&\275z\004\032<\320\353v\275\374\031\237\275\2658\256=\270s\362\274\222w\375\275\225U0\275\027G\276\272Q\224\236>*\370\356<\357\n\374\274\037\322\314\273\316\'\366\274\366\243.=\000+\n=\335\203-<\216\375h=\342*0\275jo\335<\222 0<\224\304+\274\206\372f\275\356\235\016=\337(\252;\361\326i\274\006b\227=\303\340I<\n\3234=\302\014\027=\000\203\311\274Q\326\304\274\177:\021\275\034\327b;b\334\'\274\222\311\263\274$\370\252\274--[\274i\303\310<\262\352\247=\000%\225\274\273D\276\274\2139\220\275M\275!=\236\3300\2748B\212\275y\304\307<\001\005\367\274?\"\237<\235|\327<\237\237|=#\216?\275\273{\206>\007v\206\274\307h>\274\203t\2259\353L\306\274\215\020\330\273?,3\275\340,0=\373\230\255\275\036\302\036\275\276@z\275,S\355\274\323\202\031<\312Q\360\271\357J\243<b\no\275\262\363\034\274\230\374\242<\210\250\310\275\203\320\023\275\364\245\370\274\235\016\223=\305\022X\275\007\301_\275\220z\373\274:\005\222<\215%\224=\242\302~\275-\223\227\275\250`\305;\344\205\\=f9\304=\213\360p=A\214\263<[\\\254<Q*\300<\035rp\274W\n\026>h\257\331\274R\242\237\275\275\354\356\274\234\364`\275T$\241\274z\311\321<\272\370x=\312wa\275\241\266\020=\201\003\014>q \256\275{\322\222\274\241\223\256\274\255wg\275\316o/\275\023\325\351:\345\204\200\274\312_\205\273\360vE\275\030d>\274\335\244\362\274P\337\253=\246\315\034=y\235\345\274\232\3770\275T\260\010\275j\036v\275@\252\235\275\377\226\213>\036C\027=\224]\347<]7\t\275e\310J=y-\036\273\r\017:\274\200J\360:\007\261\370\274E\327\264\273\177\352\200<\271\264\001<7\'\027:Y\312\232=\337uU\275\177\371\023=\215L\237\275_\301\343\274\204[\204\274\002\036\253\274\332\034\003\275H\023\200\274\327\207V<\260d\310<\345/\347\274\334}\033=\214\001B\275\346\272S\275Sz(=\306\375M=\243\021\215\275R\213\033<\345\366\301\274J&]=T\245\270\274h\000\006\276\254\266\020\275\0254\214\275QNP\274\360sl<\232\216)\273\302D\302<\001\235\242\274\344K\303;\260s6\275Y\035\\\275P\025`<\nF\327\274\233\001\224\274Aq\023<;\250\207\273\361u\261\274\245-y<\324\333\320<\226S\251\274P\214G\275\r\342$\274\225\240q\2752m\005?\346{\n\274\302\256I\275)\010\273\274\374.\251\274Wo\263\273\233N\031=p\220\003=Ap\361\274\037\2203\275\243 \266\274>\320\356;\213\001o<\200\037R\274\310\324\332\273\263\336s=\313F\t>\211\367\265\273\316nn<(;\371\274\345\300\035\273\340\034\311\274\347/\332\274\373}\002=\006\027i\275\364\272\177;\210\340\374\273U\"\302\274\345\264\200<s\244\214\275f\3509\2730\027X\275S`8=K\312i\275b\376\365<:\253t<\037m{=\367\251\363:\007[]\2756tL\274\221h\341=Op\367\273.\205\037\275\351\233K<\374\272;;\0146\241\272\230\271=\275\340/z\275\3738\n\275\264\025\371\274\350<\365=\336\344\342\273q\234;\275\236j\037\276\315\0054=\234_u\275\342j\025\275[\230\344\274Ux\326\275\017]1\274\362\007*<d\245\317\271\213\177*\274\351\244!\274VH\'\275T\"\272\274\203>\347\274\035\364\210=K\202\\<\310|\234\275\002D\212\275\2330;>\326D\201<\234\221\377<5\210\216\275\236p\232=o\221\250<:}\201=\220\333\272<T\306\355\267\'Y\262=\253\330\025<G\312\206\275\033p\000:8\246\202=\002SU=BR\025\275\270\223G\275\235\226\215\275\250\330\217\274.\272\212\274\031+\027\275\334\251a\275\355\3234\274Y\2626<\275\324\237\274Y\013\376<\236~\331<\030\311\227<\234\224\003\2753\237=\273r8\330\273\335\215(\274\263\353\331<\366\230\247\274\225X\301;:Dj\275\330u2\275qf\242=L\264\257\273\362\234c\274oM\000>\377\367 ;\240\215*\274O\373\240\275\\\214\273\275\220/`=\334&\005=\372o\246\275\232g\033\275\265\254\236=*\034O<\316X\215<\341\030\261\275oX9=\301\372\316\274\2349\201\275e\013\316\274\303\3001\274\257\025\003<\373\343\376<\276ce;\335\300\304;Gi$\275\374\250\335<:\263~9\2433\233\275B/\336\273\'\312c\275\226\3542<e\022>\275W\013\274\275\013\307\367<\202i\247:\335@\226\274\230v1\274\206T\201=P c\274\340\262\017=E2]\275\003\374j\274\225\024\004\275\227VS\275b\352\266\275\231\241\221\275P\321\226<\356\346\220=\231\010\247\2741\3629=\217\233\237\275\351U\032\275\316:w<a6\353<\337sv\275I\026\t\275\177c\231\274\356\311\234\274;\006\252>b\371\030=\014\320\"\275\255\310\375\274y\240j\273\001\351p=\364\002A\275y\344\254;\016r\251\274v\365\033\274\027G\224\275\265\323\246\275{\215\327<\307:U;QW0\275\340\303\210:\3104\231<\"\375I<\273\246\304\273F\017\024\275\331\257\303\273\3630\230<->\007\273I3\313\273\327\024\270\275\234u\327\274c\354?\275$\354\274\275\326C\375<\223`a\275R9O\275\t\001N:@X6=\016\017Z\275&\3309\275\261U\002\274\277?\204\273\273,\037\275\253\026B\275\331\317o\275f\311\312\274_\241=\275g&\023\27564\016\274`\016\014\275\222\272\262;\273$\201\275\243\330~;\355m\272\275@e\216\274\373\365\254<\374\027e\275R S=\233\331N>\271\022\204=\215AC<\356\006\220\274\326\"\016\275\342s\262=\313!G=D{ \275\306\257\210\275\276<d=8\265\245<H\313\332\274Lm$\275\342 \022\274\013\206.\274\275\327\010\275oc\364\274\232t\202<\345]\251=\260\002\221=\305\031\345=8\261\250\274\264q\214\274\013\007\342\275i\310\261<\372q@=\240e\200\274\357\303\262=\230d5\275\271\242$\275,\305\271<\304\356\340<y\227+\275\036\376U\275cTz\275\n\307s\275n\272\331;\224\361\203\275\362\302\365\273.\r =*\203*<L\007\372\274\365\376\306\274\303\007\373\274\006E\276\275\330\026\000=X\311\237;42\203=\306>\334\274qu\'\275\370p\000?\341\204\214\273jA\036\275\320K\306\274QLx=f2\350:\276\273\213=P+r<\3765.\2749\217(<?\340\001\275!\227\021\275hb\334=\233\"\257\274:\255\000<N\220E\272a\006U=f]$=\315S\203\274\331\324?\275\357\001B=l)<\275\221\361\241<\312\241S=\315Op=\374\304\320;\211-c=\2406\003>\037$\341<UE\035\274\270\372\354\274\3663\266\274u\242\002<\016\250\212\275U\311)\274\352\364\026=C\257\274\274\t\010\221=\256/\241\275\300\335\020\275\3259\';\032\320\024<T\250\261=\250\202\220\275\311\035)>\013.\035=\030\360\324\274\314\353H\275\350\021\227\274\341\321*\2758\324\215\275\020\370\216=\033\363\246\275K\016\352=\321\375T;\333\327l\274\021\331\230\274\304&\300\274\n\242\251\275\343X\023\275\302\303\215<\223^J\274\030j\344:d$\305\275C\227\275<\036\034E=\003\000\236\274.r\367=J\"\262=\360*&\275\212\022\n\275\017_\027<\213O\235\271[\321\314\273\313%u\275\272\221\373<\366\345\237\274_\017\221=+\033\365<\201\321\036\275C\205\256\274\316(\256\275\032\001\027=-;l=\300\337\262=\267\317><U6\020\275\243\023\033\275d\022\360<\030\261\220\273\007\206#=\217i\252\275=\372\250<\035*\235=\r\004\200<6\247?\275C\366=\275\020\332k;S\002\252=\330\rJ:\277!\200\274\007JD=3%\007\275\206\332\301<S\270\340\273ES\002<\247{5\275\220\177\035\275\026Xt\274\007\272J\274N\362r>\346\000\300\274\231\235\327\274\367\230!\275\221m\024<\332I!\275\327\037\237\275\241\020\327;\031?i=\357L\226=\221\237|\275\317\203\032\275p\366\245\274\337\253\224\275>\003(=\315\370\022\275\322\227\n=\225+*>\035k\344\275\2507R>\301V%\274\253/\016\275\324]\003=[T\n\274\324||\274\327\316\"=#\013\317\274;\212<\2755\326\005=\353\014\313\274SI\213>\236\210\024=\002\275\200>#V\033\275\203M\212\274\305\361\254\275%\204\216\275\206#\265\273!\030\035\275Iv%\275\221\2322\275\365c\000<AU\214\274\340\235G\275\37342\273\3668\324\274C0\341=a\010\201=\272:\234\274\265\324\017>\377\326\221\273ROt\2755F\303=\340\333\352\274`0\246\275\034\2210\275\337\326\202\275\357\177\234\275\2075\246\275J\020\272\275\222\353p\275\200\006\320;.f\035\275Gbd\274\306\216\327:\021\277\207\275\242\345)\275\320\025\202\274\240\336\210>=J\003=d\264\220\274\261\323\022\274\313r\255\274\350+@:Q\260\247>\221\335\235\273\035h\210\274\255*\337\272kor=\250\230_\274\315\2647\272\262\206U\274QV\256=\261\247\250=\214w\370<$\2466\274Q\341o<N\352\270<\203Gu\275Q\252\002\275\346\033\306\274z\231\031\275rns\275\331\341\270=6\205\226\275\225 \202=1\376\252<=9\230\275\370|\221=g*\214\274\271\216F=\2611=\274\0376!\275\352D\216\274L\206\021\274\374\177\210\2739&\032\274h#\243\275t\031J;\360\327\213\275\263\274,\275\214\315\250\274&\323;<\340F\206;\367\007\215\274\006c\366\274\313\202^\274\357\336u\275\210\266\330\274\001#\315\275\200\031\317;\035\302\301\273\371\207N\274bX\206\274\036d\372<\202\344\037\275\305\371\034\275\274\333\001?\201D\232\274_~\271=\264\317\235=\362\252\262\275\320n\t\275\346\177\200<ODT=\277dP\275\324\336\030\275\217\037\341<\177\256\r=\t\303\326\272\007r(=\023\206\221\274\201\325\226=\215\217\350>\351\323?<i\037\337;\252\347\033\274\266\003}\275o{\013=\374\362w=R\262\230\274(\r/\273\350\266\332<>\037\202\275\271\374o\274m\354\303=t\037\027\275\275\325\202<5\335U\275;\375\273<\233\231\001:C\017\247\275\353\236\346<E\3019\2740\274\301\274d\301\022<\250\224}\274\243\305G=\010\256m\275^9!\274|W\213<\235o\035\275\2177A<\265p\355;\361\216\370<i\365\213<!\331\252\274\276*|\274\324a\241=\035\371\242\274\035\030\214\275\236w\272\274\340c\206\2748\207\330<\212\346Z<S\001\022\275\323\265\t\275\024\025\360<\034iW=\302\307\211\273Y\301\264\274\034\230l\275\317\340\263;\236\n\364<d\241\032\274\2379T\275\036;==e\340;\275DC\204<]\215g\274\231!{;\363\347\021=\036\0070\275\236\312=<.\031\201\274\177%\'\275\213\215I\275P~\331\275\237\347\t;f+\301\274\244&\212\275}%t=\371\277\032\274\254{\375;\214v\204\275\231\006\010<\211w\035\273J\364\227\275P\250*=yM\331>\341\005\346\274\337Q\230\275\020\272\317=\t\366\266\2748\370\213=\3320\300<WhZ\274~\027\234=\306\016\216\274\301\\\005\275\206)6=v\370\215\274\372\325\206\275\023\273\351<\017\024w<\247L\333<\316J\376\273\020\342r<\221\361\016\275\346G\350\274\017\367^>\2703q\274\352\304\217<[\'\225;\372N\330\274N\355d\273\301\213;=\006\257U\275AH\023\275\347\010n;E\023\251<\243I\232=\232\265\253\274\272\023\266\274\347\0330\275\304\243\305\274\261\256\247\274\0178m=+%\233<|\322\016\2752\343\372=\362\003\205\275\217\005\211<\346\3306\275!1\247;?\254?\272\277\201\217\274\332\200\275\275\000\352\t\2755h\377\274\273\230\301\274\371\206F=\203\343>=\035\226\246<2\312\322>0\004\227\274.r+\274W\276!<\000az=\276\374\212=Ob\022<_v\247\274_Z\212\275\3143.\274\371\220]\275\221.\021\275\256\221\n\275S\223.=9\365\344\2742\362\302<7o\255<\204\323\246<\214\302\264\274\346\222<\2741J\177=\006\006\017=5Jx\274\002\203->&\325#=X\204\220<Yg\'\275%?\236\274\331\213\022\275\266\031\r\274t\3515\275\211\377\025\274\215\241S=\213\312*<\246\317\341\275\356Y#\275\004\305\264:\210\370\033=S\177#\275\253$f\275.\251t=_\306\321\275aL\002\275O#\351=i\242\252<!\250\236\275(\276\341\273\336\225h<|\0247\275\206\366\357\274\367\346\251\275\217\265_\275.b\343\275I\235\006=u\246\220\275`4(\274\3377\240\275\003\\\026>\260\230#=FT\276\275\002~\023\275\014\215\221=n\375l\274\314\006<==8\246\274p\025\"<\222g\211<\"N\352\274\370\240k\275\314\177=\275\234\241\252\275\257\320K=\"\001#\275\206\251\247<\210\252\272\273\n\264\262\275\202\212\277\274Bo\200\274\272>\032>\263]Z\275\273)\003;\356#\031=!\204\330=\003\\\211\275\001\313\341=Ri:\275;6\305\274\252\325\252<X>u\275\247\334\235=\277\240\212\275>F\312\275\177\\{\275\255\364~\275g\307T>HI\326=\213L\206\275bJ\332=\343\204e\274U\2073\275Y\321\374=\212\026\013<\246\371\216=\200;#\274c\252@\275\017$\020=\r\253\344\275\360\"\344\275\210\367L\275.\300y\274\316\262\240=\253\"?\2754\310\302\274\007\004\202<h^C\273X\036\002>\345M%\275\236\350\224\275!A^\2756\016\221\275\004H\214\275\347\222\206\275\244\250\261\275\244T>\274\315\321\223\274\021\253\013=\2762-\275\374\203\220\2758\0033\275\2404\016=\206\274\216\275_H\354=\273\257x\275\025\014D\275\010\306m<\246\376\212\2754J\206==3\014<L\021:\275o\376\230=\310?\334;\263k\242=\024\334q<\2459\204=\361\255L;\324\037[\275\352\224\201\275\247R\203\275\006\n2\275\264C6>\326\227\365=4\000\261\275Qr\177=h\244\275\275n\261\230<\230\013W>\013G\376\274\261T\270\273\317\337\001\275\273\367\226\274\247\005Y=\302\315V=\247\202\013=t\366\254\275\367\2022\275\\\315o\275\244\311\013\275k\354\022\275\367fK\275\256\340\353<\260@\261<&`&\275\302\220\325=\260\r\251\274\232\014\230=j\377\320:\004)\365\274\325\263\031>D\203\220<\360\034\353=d6M=\022\242\201\275Y1\316;\217\203\275\275t\361\247\275\217P\324<\312\025\\\275\001\324\247\275\217\311\321\274\273C\322\275\257\3146>\347\353\362<R\301 \274\006B\215=\3366\334\274Q\253\221\275%\277\221;\335^\226<\rf\020>\246\216\255\275\334MM<k_\221=\242c\343\274d\330\231\272\357\200\027=Q\t\210\275n\316\274\274\375\315J\275\201#\'>r\311\216\2750\312\224\275u\311L=?\314\204=A|\306<\254\014\030\275w\323\202\275\371\367\005>3\221\025\273\350D\206\274\207\300\014>\363\274\016\275C\351\227\274\313e\236\274r\227\n>\030\214\347=\032])<S\t\004=A\264{\275C\354\224=*\031\014>e\203\014\275e\216\370<\315d*>,\026\027<v1\343\274\225\224\r\275{v[\274\277i\341<\3624\300\274g\250D;8k\376<P\027\334<x\260\220=\320|1\275\331\367\001\275\226ok<\235\322O\271\"r\253=\323\326.\275\030\230\211=\274\277\205\275\027w8>v\375\225\273O\265@=TW\265\272\372\257\034=\276\\D<4\256B\274\237\024\213\275\"\030\365\275\025\260\031=\0041\276\274\030\236\217\275\306\303^\275\273\0243=Tf\310\274\\A\375\273\310\274\'=W\316\234\275.\024\335=n\340\307<P\225\254\274\232\347\307=\3576\t=Zb\334\272u\241\225\275\346\227\017\275\220Xq<#\177\035\275\r\336\024=\333\2430\2752\3003\274\323\004|=\234\225\303=\350I\310\275i\000:=X\344\"\275%\325j=\237e\004<\007\3218=\226M\326\273\234l\262\275\3300\021\275\246\'\246<\233;\365<\344\220\016\275KR1\2757\355=<\3608r=\344\010\243\275[\353\260<\024\250\023<\214pl\274y]6\275\237A&=\264V\251=#o5\275\205\266\267\273a\336\251\275\033\262\231=\300Q\031<\274\317\223\2759*i\275\n$\354<\205\\\002\275\335\021\036<\253\036i<1\254\212<\365\316\t\275\261/.=\201\352A=\023y.\275H\355\264<\001\273\000<P\365v\274\264z\t<\342]\036=\262f\262=pAL\275\026\226\214\275\002\025\337<\355)\332\274\346\262\221<\252\313\214\274\2451\240=Y/\364=]2\224\275\221\321i\275M\215\264\274O\2018\275(\002\023\275\373\377\371\274<\224\031\274\tD\331\275\314,\242\275\177\2152\275\304\2207>!\007\361=\"\372\243<m\231k=+nf;\231>\324\274\2355\315\274\016\242F<\231L\255=_@o=P\007\3459B\2570;\307J4;\201\257\005\275_\212\211\274\353\210#>2\007S=d\031L\2744\016M=)\361\035=\305\223\027\275\311\252\270=\346\272\024:\001m\227\273jv\227=z\272$\275\213\220\346\274#4\265<h\317\374\274-J!<\321\306y\274\211\306G\2751*Z;DL\203\274\003\006\375;\320U\306\273\373D\244\275\260t\031=\312z\274=\212\273\"\274r\265a\274\245\316\341\274Wb.<\375=X\274Tb\201\2758\261\235\273,\2017\275\273\276s=\352{c\275\313\021R=*1\332;\001\352O=\007\'W=\261\360\202< !Q\275\316I\245\275\223\225\323=\274\037\343=\310\237W\273\346k\244\275\345\327\025\275\366v\205=\317a\221\274t\333\272<q\203<\275\262\215\303\273\356v\311\274\275\003\220\274fi\262\275bV\344=zF\177=\264\233`\275-\220\333\274\372Bq\275NY\261=\360 \006\275*\220$\275Cq\005=7\373\271=\333\347\r=8ca\274\244UW>0\335b\275\367\260\002>\013\317\211\275\215\020(\275o>@\275\r0\260\275/\362\022=\313zu\275p\t\236<\322\207>\275s^\035=\r\310\300=\232\252k\273\006d\356=\222\021\357\274nV\323=\334@`\274\027\237\235\275\005z\\\272\357\017\016=\240\213|=\355\230\3208O\260\206<:+y=\n`f\275:>\327\275\252Js<Z\362\346\274\245\345\020=l\330R\274\256,7=\333;\'>\354\214n\274\034\244!<\034\206\237\275\307Z\350<D\304k<\306\352\302\275OG\241\274mYv:\203Z\335\275\320\254K\275\016a\013\273\021\347\010\273R\202\373\274\354\365\320\275\225J\267=\'4\022\275v\216<\274\361z\007>\327}T<II =\227\354\261:\027K\251\275q\303\265=\371\343\353<\221@\203:[\371\327\272m\334t=<\315\354<\242\234\237\275#M\031\275\215T\303\274^\233!\274\001\315(\275\205H\371\274;U\025\274\034\353c\274I\231\313;\037\246{<\254%\321\274\'\327\257\274J$\262\274\322\266\203<\352\227\346<|\301G<\004\312 \275+O\251\275\241\334\322;\221\362^<\255(0<\227-u=\257EC\275}\353b=\0217\321;Y\237\250\2758\201|\275\347\275z\274\031\001\n=\026Y\353<t\206d8\020\247\245=\003\010L\274\025v\030\275O\017Z<j\266\003=_2f\275\215\306\250=\361\266\211\275\251\340\263\275f]f\275$&&<\231Qx\274\272/\327\274\235\364n==~\005\275=s[<\234\210?=\204\272\033=e\037\313;l\\\345\274)\177\022=\264\207\017=\200\300\373\274\034\212\230=\237 9=J\037K\275\321\244\303\271\307\031\373\274\236\321\000>\256\035\214;\2736\">\\\033K=\256\355\272\275v\267\267\275\251\201\214\275\340\214\n\275%Q\326\272\335\332F=\203\2401\275\006\2627<\006\010\017<\264BM\275;lD=\033=\314<R@h\275\217)\232<1\220\016\275\375\213\310\275\311/\342=\016\177\034=\203\036\002\27588t=\205\265\203\275l\003U=\207\200\251\275G\320~=\351l\206\275\217\220\370=\205\002\300\275=M2\271\370\312\201=\375\336\227<\312EN\275\026\201\325=Fv\346=u\306t=\262\261^\275\344\356\037\275\006\306\024\274\301F%>\326\330\036\275\331\307\264\2758\265\200<\221\323\232\274\201*\306=([{\275\\\2712\275\027\376\200=\260U\t=\024@\326<\343c=><V\036>\030\246\032\274\0002N=5\"W\275\206]\341\274\206\225t>\010_\006\275\022\320\235\275)h\031<\267\212\026;DQ\354<\231\330\213<\277eb=@\364\010\276D\310\352\274\031Ab=\252\030u\275\014\233\216\275\270\243\242=\343\352\327=\275\220\023\275\240\356\250\275<\310\303;\341\235\r\2752\030\001\275s\347m<.\342d=\2453t\275\277\27348\266\373\323=\353\372J<\230x\374\273\026[\347=\006wl\274\205\305\204=\274_,\275\330\247J=\214L\031=f\263\200\275\263u\305=\240\001\";z\267\033=q\177b\275\363J\300<\275U|\273\036jR\2750\227\"\275\211\356\260< \324\'<\272N\323\274\373\253\035\275<\250C<\t\324A=Zx\233=D\245\331\275w \t\275\233`\201\273\220N\020\275\351\324}<y\321\006>\tE\271\274\276\000_\275\345lp=\216\3557\275\300\2132\275\244\001\302\274@\346\200\273t\320O\275\227\376\237=j\204M\2754Vh<h@\'\275n\201:\275\345\300\000<\230YH\275%\246r\2755/\255<q\'\264\275;fP\274r\r\313<]F\t=\215\"\377=\354W\262<\351D\017\275v\266\213=\227}\344\273d\265\213=d\370\235<1j\343\2755\022d\275\252.\242\275I\206\006>\340\263\336\274U^\000\273\222I\336\274\300\361\301;\307\2212=\233a(\274.\377:\273\316\202~;\314\030Z\275&\256\340=\013\364\306=+S\270;2\273\035=\210L&=(\0256<\263\220\214\275\237\305~=\023\337\270;\251J1>n\220L\275\361\331\037>>\2764\275\231\377\226=\305\025\"\275\233\014j\275\017\245\345<\337\345\005=IO\202\275\257\235\004=\355\216H\274\331\325\331\274\331\3249=\237<\231\275\035\314\346=\\\256\261\274Sl\345:\256\224i=\330\253`=\342\007\006=\216\361\350\274)\2223\272\010\343\n\275\016\316\t=\0040\222;\226N0=\225T\230:\001\355q\273\334\007+\275\245\252V\275\243\332Q;b\306\370\273\231\210\027\275_Q(=\310\205k\275\201e\203<\375\'\032=qS\374<\232\3709=\301\220V=\240\341\031\275Q\243\222<\n7\216\275q\3762\274\301\212~\275H\366\017\275\362:c\275\214/T\275,\335Z\275H\256\256;\260\337\036\275\326\305\216=\372\336\361<\215u\213<\244e\355<$\267\030\274\354\202M=*@m\275\024e\302\274\\.\246\275\246K\215\275Q-9=\273\016\303:\231_\032>\222d\345\273\351r\210\273\r\274\311=\207\377\211\274\262\352\232\274\245\312\224\274\202\255\000\274\215\006\024\275a\033,\275\227\t<\275\300\232\227\275:\006\033>\020k\010\275^2\252=J\276\241=o/&\275z\'\370;MS\246=\305OT<N\223k\275\016\316\244<\307U\227\275\271(\270<\2701\006=\267\224\317\274\207\\a=\315\266\027\275hz\023\275b\270);\360\204\317\274\001;\311\273U\000\231\275\222\310S\274%\302/>)iD\275h\366x=\022\365F=\227\022\021\274\234kt<\017:M\275w\330\\>N\223\031=_\264\244\275x\366\340\274\020m(<\256\213\321=GA(=w8V=^g5<\266\251\243\275\341\3733\274h.\215<N\335\235\275\256\006\245<\010\331\202\274\010(\214\275\347T\260\273\266\347\'<\177\351\314<2zB=$\362\273<\251\332\220>k\000\311>\310v\300<\224\211J<\236\341\036\275a\271(\275\200X\004=\353\0160\2757\356\355\274\324y\361\273\250\230\313=\374\333\210;w\037\'\275\203H\034>\216z2<\332\244\207\275X\337+\275\302\223K;P\376n=U\236R\275\277/P\274e\216@\2754<`\275<\023d\273\322\362\322\274_\222\203=H\245p\275\177\323;=\036_\275\274\326\375\203\274\331\355y=\223\266j\275\313\016\243\274\347vW\275\347\276k=j\257\005;\237\256\"=(\234\021=\237\364\007<\322\2664=uc\035\2742A\366\274\313\'\243\272\344\252\006\275\377\017E\2759\r\327=/6?\275\332\257A\274c\265\237<M\270\255=\321JZ\274\334\237\272=:\265\033\273\177\364\347<\2279\004\275(\\\362<\217ul\2740\343y\275\355\037\303;S\r\205=\372\354\272\275,\333\232\275rI\312\274\234n\027\274R\200\262=\376\207\261;7T\275\275\016:\006\275\301\265\306\274J\373\n=\006X{\275\"b@\275\250\246\366<RJ\221<\037\020\021\275\210J`\275Yv\333<l6\225\274\014\300\212=e7\324\273\306\274\204\275\311.}=fM\247\274QW\270=\020|\220\275\031\007\023=\243\270\365\274\026\257\371<\303\356\036>\377h\010=\211o\317\2740K\006\275%\3508< \370\004>\263j\341<\302\321w\274@S%\2755\231\320\275\350\270\316<R!\240\274\222_,\275k\333\266\273Vs\216<\014\243\264<-\311F\274\373\'\017\274\203\017*=\275\340W<\213Tf\275s$T\273\336\367\301=\341\350}=\244\341\306>\274\016y\275\024\010\341\275\240]\026\2756\226\037\275\006p\343\273q\3631\275\351\202W\275\237\315\260;)*:\275\226\027\302\274\254H\377\274\220\n\355;[8#=\226\371e\274\245\330\242\275\267AL;D\226\252\273I\202\003>.EV\275\t\006\032\274\262p\231:j\022^\275\014cA\275Y&\267\274!\232\375\275>\256\026>\221UP\274\337\025\203\275\026\274\276\275\0252\032\274Em\223\275\024\255\262\274cY\007\276bO\344\274l\247\254\274$\304\243\274P<\276\275\244k\000=+\333\236\275i=\370<\016\362p8e\217\202=6\240:=\223N\002\274a\355T\275\270\355\340\274\020lq\274O\033\177=\nXV>\345\346/\275\223\232\331\274\000\311\274;I\2611\274\225\263\023\275rs7<8\000\346=)_\204\274\203\250\245>a\350j<\315\010\346<i\222\213\275!\352\205\275\346\322\236\274[\212\230\274%\361D\274\340F\001\274\226~\033\275i\r \275\033\032\231=Y\273i\275P\236;\275\320\213\325\275\001 \300=\226\024P>:\004\216\274\205\332\016\275\000K?\273T)\021\274\326{\223\275R4\001\275\272g\354\274\321\244\245=\356{|=k\036h\275x\323\370;\005\272\000\275\302\010\006\275\305\340\376\2738\277\337<\216H2\2754\322\263\275\001<\232\273\304#\252\274z\263\225\274\341\367}\275\273x\257\275\333H\017>\374\224\n<\267\211\205\274\212\037\346\2741\222\327<\230\005;=\005]\270\275\020\202R\275\205R\351<\346R\324<\007\334\3678\213d\236\274\344\255\237\275\206\337\321\274\261\242O\274\313\371\223\273}\311 =\374\016\335\272\317~\224\275\023\264}\274\235\310\355\274\377\361\214\274\341\013\211\274\304oG\274s\\\026\275\251\326g=1Q\010=\016\352C=\351\236:\275\206\326p\275Z\206\237\274^f\342<Uj\260\275\037V\351=\365a\202\275\026\265g\275\306\244\n\275mM\240<\310\016\356\274\330\264/=)\327\236\275]\263\246<\273iT\275\361\021\332=\335\275\230\274d\r\016\275\200\262q\273\337\224\221<\211\200\002\275I[\365;\006\177\320=\374:\226\274\227/Y\275\266Ns\274\306\236@=\264y1\275DRH\274\2616\031<!.Z<\331\336\341\274o\0222\275\273\273H\275\003\300\321\273\235z\"<\201\226\240;\031I\005\275\356q\361<\244\227\210<\272_\231;\313\235\030<\215\252\017\275\177\276U=c\315\373\274\210\324\334<\367\201\266\274\007\255\267\2751[\032\275\214e)\275\264\016c\274\027U\353<Y\237\264=\213\225d\275?v\022\273\257\001\000\275{5\260\274\274W\277\273|R\242\273\253\245\365<\236\014\240\275o<\256\274\034\366\002>\272-1\275k?\302=\377v\t<9\344\271\273m2J\274\353\227[\275V?/=z\330\033=\316\267d\275\026\313\020\275\337\234\334=w\372\331=b\000\320=\364;?\275\341\366H\274\234t\000\276\312\276\260\274\273m<>R\3679<H\273\373\274\311E\227;ND\006\275\200\0259\275O(`=\272\305\023\275\312\031\243<\346m\251\275TN\200\2757\212V\274\002\364\210<\n\261!\275gn<\275S\245O\275H\2359=\310\035\3209\360\302\214:t\365\033\275y\315\336<\240\177u>\242s\325\274MX\244\275~9\305\274\252\260\"\275\334\276 \275cxc>{\266.\273\315\332\315\274`m\311\272\271\215\264;NUY\275\316y\225\274\231\351\000\275\333\227w\275\316.\026\275\204\326\275<\017\243!\275O\353f=\272\027\021=\300c\372\273*\345\246=t\341\353\2749\r\336\275\336S\210\273\321<o=\314\006\003=\215]-\274\360\234\252<\363\253I\275RN}\275m\246\022\274\034\236\236\275\246\201\313<r\031\277;I\364\213\275\320\200j=$\204\243\2737=K=\034\242\034\274\261\014\303<a\325\264<\016\312\253=$\217t\275a\006q\275\350\313<\275^\351D\2748\271\"\275\205\300L=?\310\031<~\327\322=\376q\366\274\341y\205=|+\227\274N\211\001>\213\341];\260\337\013=\326\304]\273X\260\020>\201\250\356\273Q\341\"\275\025\016\252=\226\025\217;\264\220\223<-\nQ;\261\036\361;k\241C\275\003Y\272\274\247Tb<?3\023<\273P\210=\361\210\277<\014\212A\275\377F\322\274;\006\321\273\022\326\371;\315\273\267\273\367\376\321\273\022\274L\274\211\'f=\031\347d=\277\205\322\274e2\340\274\240\372,\2756\037\022>\0237\024< \002|\273p\366\206\275|\262\305\274Z\034\222\275qq\020>\275\236\255\275\006\264*>\037qi<\353\343\007=\305\274\225\274\242\361\367\274\037L\353\274I\236\253<\222\260\264=k\230\201<\274F@<\253|[\275F\345k\275\2332\r\275\235\212\023=\274\034\317<c\0243=\334\202\334\274\237\235 =(\007\000<\013$\304=c\034\244\275\364l\225\275\335\274\200<)\254d</\337\025>\267\325\260\274\202\343\014=\026\030\331<\330\321\216<\300\222\252\272\311a1\275\270X\021\275\233K\300=\304\247\031=\252`\311\274\351\261\224<\r\0038\274\272$n\274]\026,\274\302D\212\274(\354Y\274\356\2349\275h\214e\274\261\t\272=\260\007\255<\361\330+\274\274\313\370\274q\215\005\275\336b@;: l\275B\2452=\223\317R\275\273\201\300\271jO\201\271\030Z;\275,\033N=\000a\202\275\212\246\345\274\302\220_=\r\265\270\275Bi\262\271\362\220\240=\030\254\212<\271\261\231\274\240\237B\2747\204\350<.\237>\275x8A<\000\256\201\275:\213\204<o\020\243\275\375K}\274\373\027\266\273\033\r\032\275\332((\2748VU\274f\205\211\274\216\3235\275xQ?\2740p\240=\025\213j\275\275C\273\275f\367\010\272\226\006\365=\260\362\367<\324\243\027\274\177\237b\275(~2\275%\304\235=1\275\274\274#\227)=\305\226\231\275\237\271\356\274\260Z\312\2724{7\275_b\005\275X\204+\275(\023\313=\n\3235=\205\302=\275\370_\223<\253\363d=a9\263\274\232\262\247\275\224\311\366\273a\201*\274\370\331\203=d\264\270<\322f\253\274\331\001\372<\2275\251\274\337\2426\275\241\261\016\275\010y)\275\213@\263<\270\023\032=,!d\275Q!\000=\241\3449\275\235r\211\275e;\244\272\315,N<\226\025\201\274\320\030\032\274\n.X\275=\341\274\273\223\355\025=.\226\247=\326Wa<\026\251\013=\333\000\027\274\026\345\014\2755=P=\240\026E=\237p\224\273\'\270\253\272\347\034\272<\364/f=\204\305b\275\246Dt\275fT!\275\305\270}\275\021\232\243\274Q\'\312<av\226\275\\\036\200\2751\370\267<\327\275\002=(\013L\275!\234\232<!\345\372\274\330\257K>\312\361\'=)Y\272\274\336\3263\275\000\216,<R6\024\275!\037S=\245\234\203<\005a\033=\377\nZ\275\327\005\226\275}\010,>\030\032\331\274p\352\n<\341`J<V\370d\275M\241\032\274G\372\306=\263\346\215\274p\006*=.\316\306<@\327E\274!\373\310\275\234D\017\275\323b\365\273\032\320I\275Hv~<\373\034\350\274\022e\270\274\220\362\270\275\240J\346\274T&\242\274\301\337\032=\241o\212\275t\343\255\274\311\305\313={b\213\274.C\371\274NJ\231<\221\216*\274g\010x\273\035%\245;\236\254\217\274\243\0257\275\336\262l\275V\323\213\274,\3311\275k\3253\275\362\023s\275\317\336\315;\210\217\035=\2743\314\274\331\320V=\267\347\025=\026\213I\275g\323\353\274\n\232\205\274f\344\210\274A\306\207\274\360\305\010\275\367\203\240\274\223~\203\275x\2071\2755\252\n\275<\317r\274/\202\3119\200\225\006=2\250l=m;7=\023h\220>2\300\324<\003H)<\206\317J\275J\237\342\274\035\276\222=\222Z\362\2742\364\303\273o`\310\275g\335\265\274\036\211\211<\034]\031>\010VN\274\325^\350\274\035\032\r\275\335\2272<\312f\302=\377\201/\275\215.n\274.\356\276<\252\233|=@|\357;4M\214=\033\026#\275\322\260\026>\354P0<\273\005E>k\271\305\274\240\270\362=H2|\275|e\234\274\212\211\212;3\322\016=\357\257e\274\252%\202\275\002\314\013>W3\215\275\322\366\370\273\254/\202\275M\221?>\334\270\236;%i\217\275\307\357\206\274\362\377d\274O\003J=\206\257a\275\262I\204\274U0\351=4RA=\361\026\267\274\327 )>,Es\275\212Y\035\275.\363\013=*Ad\274\326\021\010>\242**</\377\345\274\306\230j\275\221s\363\274z\023\316\274_\3166\275y\013\371\274\206\007f\273\277\333\023\274\177M\251\274-\357\007\275\362\224\232<\221#\237=\317\266\273\274\202\314\304=\244\275-=0l\221=b\016\027\275Uz\000<\237\255\224=\256?\020\275\2041\207=\307\325\034\274e\0100\275Q\025\222\273\2769\273\271\300\303\277\273x\327n\275\307\341V\275#\304B\273\354\n\316<\304Sw\275\314\370\261\274\t\251e\2750\230\246>\364\003\024\275P\224\020<#)\251\275\305\'\354\274\200\014\210=Jn\233\274\226I|\273`!\243=\333\241\215=\034\312\263\274\023\222X\2740\206\313<6\301F\275\330\323]\275\344\273N\275\341\226\201\274\316S9\275r_\206<\364;\365\275\004\256\304\274\250y\346<Y\221\371;&M=\275\305IK\275z\306m<\355q]\275}\253\255\275\213j\366\274\322\273\210\274\340b\341\274\034\371\270=\314\035\325\274%n0=\363\362E\275\301\314\234\275>u\203\275@\n\017\274\237\270\367\274\365\324h\275\334\nR\274\205\037\354:!\252W=[D\302\274\267Q\000=\3127\033\274\223\362\237\274\345\323I=\247a\263\274\355\230\005\275\243\262[<\352?\206\275\307a9\275\242;\222\274>W\247\273\304y+\275\005Z\207\275\324K\252\274\227\276\316\274\230\035\374=\330UE<\205\273?\2752\256\000=\341\330n\275\277\323\310=`\201k\275\250\2461\275\021\230\030\275G\313\366=^b\263\275\346\325\230\275`\220\264;\262e\242\274\242\0006\275\373\361\217\275R\016#\272\345\307\317>\006\365h\274\231P<\275\307\026g\275pQ\325\274\207\016\206\275R|\253=D\270\027>\016M\322<\311\225\037\275CY\230\275\233\007\206\2752\3069=\3516\002\2757v\002=\014\225\373\273\t\226\030\275\271s\357=H\273\026<:Vy\274\314\370E=\245:g<(\207$=J0\020\2753\027\351\274\226\241\035<D\031o=\370\265\264\274\314\023\253<ZC\017\275@w\347\273\241{\202;\033k\236=X\027(=\310\365\340\274\373\256\250=\222\232)<\236\2142\274FT\266\2759\226;\275\352\242\021=3\024O=s\177\220\275\201W\266;\205\230\300;p\226#\274\226\372\004\276\207M\001=\300\306|<\327\255-\275\223\177\254=d\210J\274\346E\210\275\303\364r\274\250v\253<\223\250\243\274\270\346W\274\305:z=\036\201$\275\243\014)>Z\302v=E\374h=J\333\223\275B,X\275\233\361\253=\177\356\331<tp9\272\233$\251\2753\277P=\311\324\002<\000\301\315; 5\317\273\265\260\375\273\302\270\374;\213\231\323\274\267G\010>\274\322\272\274L\036\211\275L\364!\275\020\005e<\266\224\332=\310\205\033\275\311\3515\275u+\010\275\036\216\004\275\0374\013<\353\2720\275\264+\222\275\205\325\003=\235\245\366\274\365\305\035\275xG\027=\023\233\202\275\212\332\264\272\200\320\242\274\373\211\257\274\372~\036<\017o\233\273\013x\247\274e\340\254\275\206e\267:\'g\233=H\353A\275~\202\257=\211J\332\275\252\337\036=y1$\274 \355\242\275E\237\222\273$\023\256\275\202\3762=\320T&>t\336\345\274\202Wb=V#\001\275\'\263\016<\250|G<\323\376v\275\251\034\024\274w\345\214\275\324$ \275\236l\004>b\'\204;\274\240\357;\336\353\251\273\343V\246\2745\370`=\261\323\203\274=\321\214\275\372\"<\275\310\276\324\275v})\273\177p5<\n\302\000\275\364m\344\274j+\003\273\202\210_\275S\335\371=\312kf=\245\002W\275D\305\246\275*\225\267\270\360\337|\275\013\022\211<\206\273N\274\007\314\030> Lr=xT\003<$%\221<\351\377=<\320\312\300;/\302\204=\016\344\033\275\236\323B=\215\243\246=\377b\202<\217;\222=\035\337\225\275r\330a<\367\321+:\021$u\274P;\002\274D\265\230>sT\215=B\243]\274HI\007\275QZn=\215W\\\275\360\357\000\275\372\230\"\274\322\237\r>\206\013\321=\215\225\244\273\206\305\244<SCw<\217J\221\274_\262\220;a\366:\274\344hj\273}s\001=\027\001\354\273\273R\322\274\205\201F\274\330\354F\274\252\307;\275Ra.=%a\256<I\267\346=s3\314\274m9\216\275\321Op=\206A\003=\211,\005=H\231f:\023\235\261=\037\320\271\273\205\361l\275\343\216^=<.\300<y\372\314\274\373j,\273\230\320\304\274{G\034=I \361:\325 \354\273pYG<\220\355\027?\202Fx<\026\270~\275\227\250\002<[\325\223\273\254L?\275;\025%\275\304\330*>\242F\233=fs\334\275Le\323<\222\266\031\274>\307\253\274z\300\356<\342\r\000\2751m\360\274\233\031\306\274\364\010\247\275\316\251\311<\324\024\001=\t\027\020\275\2409l\274\276\370\217<\2242\364\274\023H\214\273\375o1\275u\177\205\2752\231\273\275\242\337e;\256\271\365<$\304\032>\205)\320<\233\226!\275\024\324\035=?&\020\275((W\275\267\327u=\277\367\222=\327\260\217=\374\372i\275h\330U=\320\215\n\274$\261\035<3\357\206\275\rn\351\274\207\022\231<\252\313J=\313\3039\274f\226\247\275#\001\014<w\033\021<7\247\360\275!\261s\273,\257\010\275\313w\317\274\177\035\216=&\231\215<c\361\201\275\303>R>\220\235\253\274\312)\322<\213\002\222:\037\037\370\274<\345\032\275e\352\272\2758\202\301<\222O\253=\005\024\277\274\246;\305\275\320\306\003=\217&\346\273\230\1778<\261 7\274\022@E=\241\017F=\367* \275\204u\230\274E\263i\275\n(!\275:\327\213\270\261\t\023\275\247t<=\333R`\274L\252O=-?\251=\343\377?<\266\364`\275\2047}\274\"(\026\273Ee\321<\320\003\026<\t\177\234\274\213\277\203\274`\333t=\223\027T\274k\0361>\313\365\340\274z\255\300\274\355\243\204\274[\213\001=\025\306v=\027\232j<\017TD\273\226\013\361\274\350\230=>S\035\313>\300\264\220<N\316P=\315\r[\275c\243\r\275;\366\242=HI1<8\332\266;\035Fv<:\010I=\036\237\201\275 X0\275\020M\226\273P\232\013\2758\350X\275\013pa\275h0y\274\256\026\230;!\3457;\312#v\274\261(\004\275\377\004\275\274\250./\273\376\001u\275\307\326,\273\000\217\234\274\335M<\274\252~\225=\033\213\311\275Q\375\344\274\332T\272=\022\251\271\274:\327^=B\305:\275\263\220\344\274f\001\005<\256<\002\275V\001\253\274R\360]=G\315\326;\272\224\253=\341h\277\274\224\212\004\275f\356\374<\275\2079\275\235\260\231;\372\207\037\275\200N\216\2751\226\332<\'\265\361;\030\356\035<m\252\r\275\266\243\245=B\311D\275\226\177\277\274\013\273\271=\221\"\253\275\006.\372=\303$\230\274\303\024\\\275\220\357\235\275\367a\017\275,0*<\225\305\021<\221\362\250<E\030\304\274\214\206\026=v<\323\275\036\'e<\261I\3419\307\330\033\275\232,_\2759\203\211<\323#\206<\3149p\274K\256\210>Z\002\305=\212^\351\273:M\351\273\352Z\235\274,\250\001<\366\266?=rmK>\320z\203\273\363\310q=J\310x\2756y\205:w\332}=\360m2\275@3M\275\n\313\206\275Nb\310\271,\211\211=\236P\023<\030\356i\2737%\350<\276b\034>\264)\201\275\256,\231\274\356[H\275Q\016\320:\220k\373\273O\243*\273Qa\224\274/h\221\275z\016R=\317RF<\377=\177=\247v\224;\272\255\276\275\205{T=\330\'<<\t\304\004>\235(\225\275`\363U>F\030\277;u\016\022\272\224\260\007=\3345\243\275Ra\247\275\376\225\315\272w\3124\275^\230_\275f\231@\275\332d\034\275|}W\275\250\342@\274}\\\320\273\341\321\000\275\3579\032\275\365\321\036<\270K,<\272\313\200<\305\366\205\275\3235K\275G\234\304=\233\275\225\275Z\207l;\346\2339\274\341\221%\2748\324h\275$%\007\275\020L\217\275\267Q\336\274\335C\317\274i\250\236>#v\243<\265\311\026\274\273\345/=\344\335\010\275\301\323A\275\333\326\245\275\312\342\374;\377\235\210\274\344\026\337>T\3355\276a\222=\275\217b\025\275\234{e=\203\223\324<\375\334\253</\t\253\272\240%[<q\355L\2754;\2778\303\334Z\274F^\374=\220!E\274O\335/<\354\024i=Q\322\n\274\376Uc\275\3251\207=f4\367\273\0225a\274\230\235\014\275\201\354\303;y76\275\300\005<\275\215\005S\275\227\225\255\275\240\007\232\274\\9q=\023\274K\275\333\357\030>p\300\205>\217\322\263\274H\347%\274k\026\247;R\251g\272\374\t3\275&S\361<\211My8\026\275\312;\2471\213<\210\223\030\275Tkd\275}\247\360:VXV\274\023\303\341<\257\344\271\274\315\\\237<\214\232z>s\275\204\275F\002\245\275\373!\373=\225j)\275\336\354O\274K\027\241=\223\357\301\2741\212\337;\004\211\246;\237\335\257\274D\016Y\275\330\257$\274\034t\r\275\345\013\r<\225\023l\275\362\261R=;\271k=uH2\274\021$\346<|\373\023\275\003\037\304\274\232\024\376=m4&\2758\214\214>DMZ\275\244\337m;\013AE\275\016M\216\275c\276\332=\376\035D=_>\241\275\206\344,\275R\210\r\275,\031\272;]\376\212\275W@[=\362\\D=i\313\036=\235\t\326\274qld=@\244\314\274\345\256\206<\270\306\222\274\373\366r\275\001\334\214=)\353i\275\354\225\223<\223\017\250=8\374\227>l)9=S\346\\\273\242\211\247<K\333U;\022\202\226\274\362\254\241>O^Q<\0261F\275k\375\360<\2476\254<#\305\243\275\0106\007\274\203\231V<\037\356\251\273\337S\254\274\256\034\324\275\2562\256<B\261\343;x(\304\274\210\004\256\275\352{\226<@g\214\275\362S!\275\r\247(\275=~;=;\227F<q\023\200;\341\206/\275Y\220\353\273\332\332\354\274))e<S\325\244=PY\231\274\364\305T;\327&\245\275Co\375<%\354\230=\323\374]\274\236\272\244=\342t\254=\374uG\27428{\275\023 \245\273#\272c\275\214\203\236\275\204\257J;\315\340\214\2757\301\345\274\005\356\356<\327\247\266\274\341A\206\275id\275<F\022\370=\354\245\210;\330\355\352\275?\000\n\273\306V\241<\014\350\013<_\312\304<T\232R:S\034\263<\027\334\370\273)\320\213\273\225\007\036\274p\256\001\275\366H\220\275\221\277\345<\303\337\034=\362\346\005=\255\331<=W\345-\271\250\2572<\"\200m\275iZ\216<\340\232\321\275w\272 \275t\225j\275\306x.:-\371\271:\243\003\323>E=\030\275F2\341\275\001\032\355\275\270\202\032\275\035\305\260\274N.\303\274\354%I<\233,@=Or\010\275\36469\275(\327\343<\023\344\356\274\346\025l\274c\332d\275\250\247c<\010c\r\275\234\274\312<\237(\303<\\\220\014\273#8\243>\002\010\265\275\334\275=\275`\346\017\275G\331\371\274\247\330\265=\205\027\300\275\213\302o=\244\030\006=w\334\022=k3\014\274\307\262\315=\261\355\367\274\253\307\236\275D\257\203\275\007\342=;\375X\227\275\375\226\236\274\236\313\010=,.d<r\325@\274B\rQ=h\211u\270\017\340\305;]c\262;\346\255\300<\260\321\327\274\370\253\254\274F\373\001\275\2464\252\275\'\336`<\215\272b;\301\022\036=li\304=;\272\320<\207\313N=G\\\223=V \214\275\220\335\274;\014\243E\275\337\215\252<b\217\245=\212\325\332<\371\021<\275\024\3301<fM\224\275 \276\232\275\247\346\372=;\271O=\\\227<\275\247\362\021=\003\007\006\275*\310\204\275E|\222:s\320\333\274>\365\227=\231\037>\275\256\222\007\275\335\361l=\002\317\004=p\202D<\374\211\325=\033\017\362\274\351\201\250=DS\237\275\031\265\231=\246\013\214\275\340\236z=\3044\222\274%9d\275*J\243\275\20120;\003\207\035\275\301\367]\275v\010\025;\364C\363;\270+\303<bm\231=\351\020\030=*\252Q\275B#\337=\365\223[\273\217\016\274<,\323\n>\t[\265<O(\236\275\2002S=\326\031x\275K\300\003\275\370\0330<\357\"\033\275G\201\002<Z[\014\275\253\237?=1\001l\275\004[B>)\356l\273>\264?\273\325\276\026=\350\3455=\356\271\004\275\360\004\222\273\351\204g\275\221\301\275\273\225\233>=\210\373\035\275N\252\331;\263U\241\274_\305\212\274\305\253\227=\263\327\275\275\364J\267=\036+\373\274\267\001\'\275p\001\305=\325\232T\274\361j\272\275>\232\252\275\307r\004\275\004\365\324\274#\300\346\274\257\204U>%\243\311\275\225\324\001>Gl3\275\351\202.\275\247~\035\274\034\nX\275\001{\230=J\256\010\275\006wL\275Wh\'\275\270w\022=Yc\026=\031\233+:\013lT\275\233\026\245=\377\226\t=S\025\354=\026\214{\274]0]=\013\227,\275\236s\034\275\226\337S\275i\3234\274&\033E<c)\227=\220\177\007=\025\310\265<{(\340=\355\241<\275<]\006>\221\276Q\275\343\204m\275\306Q\250\275\244\237i\274\0026\237\275R\321\340\273?\372\277\275\007%q=\217\206\027=\370\212\031=\0033\005\274\022\216c=UVd=\037\264\202\275\321CP\275\344T\006\273x\337\220\273\340\305\363==\3240\2747\2359\2753\247\235\275\353\216\033\275\366=\005=\240\224\000>sy\005\275\305m\344\275Qg#=\257\343\214=$J\222\274\263wT=\252c\323\274`\206\210=l\"\345\275\273{C<\262/\027\275Q-\227;\017\335\221\275\255\335r\275\010\024\"\275\365[f\274\350U_=\t\211S=\261\336\305=w\342\370\274\336g\314\275\216\333\032\274\212\361\250<z\300\275\275\2014\203\275\370\263T<\222x5<\3075j=}\373\221\272c\327\306=\343\342\304\273\373\010Q\274\320~\256\275\262,`\275\210y\017<\311d!\273\375\271\007\274\262\362\035>Y\205\357\274\256\252\003\274\320\232\006=.j\365\274Oa\222<\223+:=\306z\205<\222K\004>d7:\275\367P\242<QT\027\274\330\032\360\275\341\370\036:\322\031Z\274T\177\016\275p\177\210<+\034\326:`1\223<\320\210\\\274\263{\217;\376\331\262\275\226\267=\273\000J\204\275\206\037}=Fs\226<[\362y\275\025\305\240\275Z\345\255\274\260\016\347\274\201\376\016\275G\310\025\275\201H\213=\350}\201=\364\365q\275g}\317\275\314?\214>\323\203\205\275\022\034\004<\307\320\320\274\206\255\245\274c\014;=6K\261\275\312w\255;\310\031B\275$\261\206\275\276\232\007\275\262\213\324\273\321\205\304\274\224\\\010\274\345\233\201\275h3\257=\247\201N\275\350\337\321\274\252\303\245\275\250\302Q;H\010\226;T\327\347\275\014\327b<\273\302\315\2748T\265=\306\317<\274\235\274\321\274\255\032K\275|x\270\274+#\343\274\215\264\034\275\253\313\010\275\302\032\004\275X\030\t=\251a\207\275\311\210\236\274E\361\372\275X\'\020\275\035Pp<j\022\035\275wJ\326\275uC\037=\200\304\247\274\005\324b<\272\216\230\275N\202\020\273\214d7=R\307&\275\222\272\200=\261\022\200:\253\263\347\2737S\235;\302\316\346<\326B\250\275\002\300\245:\332\365\025;X\340\030>=\250>;\314\224\344<\314\3758\275\020(\207\275\362\312\313\273|\237\030\275\373\004\025>S\257\365\274\236\326@=z\340\342<%x\352\274G\022\010\275\0378\"\275I.\262:\3215\226\275\244\343Y\274\222\376\'\275\224T4\275\374\256\365\274\023;\224\275\354\022\203=\321\277\346\274Z\205N;W\272\t=\204\266\025\275\364X\030\274\327\202\242<&\341i9\"q\226<gC\253;\3159\333\274Y&|\274\375\334P:vG\"\274\016\226]=\307\017!\274\261\234\212\275\300\n\345=;\364q<\237H2=\203\356\302<\330\006+\275I W<&&\307\272g\202\210\275\003g\014\275\251\360v\275\233\035%>=C\320=\307*\363<\024\202\n\275}k\232\274\303\033\362=\264]N=\217Ft\275\344lG\275\004\034\341=6Z\014\274k\2600=\256\316\223\275L\2540=\360\221\275\275_\331\276<\345J\032>0V\262=`O\214=\375\320j\275\215\"\321\274\371;*\272\036\215\326\274\334\246\335\273[C,=s\316G>/\366\337;\025\257\377\273^\204\263\273\355\230C\275w\233t<*\364\252\274\215\275\307\274c\223\r\275ho\337\274&\032\266;\371|\233\274\2161\334=\260K\224=\021ci= \220\211\275\032\363\t\275#\371\014\276\262$\013\275\000\360\202\275\251\030C\275mo\031>\260\007\232\275\013\346\232=\264zf\275\273\365\034=\334\024\262\274\224\0136<\023\216b=\313\331F\274D\013\251\275-\366\302\274\311\266\242=$q\t>\312M\221\275(\247\200;\3765\004\274g\363y\275FI\315\275\331\344\243<\327\314!\275\255\022\261\274\2440\004>a\362\237<\340\032\201\275\237\376S\275\241\033\177\274W\215e\274\245\206\210\273\255:J\275;,M\274fo\027>\016\037\221\275\331tB\275\265\031L\275\241]\202=S\025\005=\304\304h<\t/|\275\376X\314;\250\350.\275\317\276M\275\265\210\020=\357*x\275\227\342O=\375\266\234\271\233-<\275\2201\323=\301\206\031\275\237\365\212\275\251\223\000\274\t\257\255=`\206\341=\'\264h\272\254+\272\274\3543\211=\200H\260\273\035\330\273=\247\t\210\275k\231\023>$\231V>\024\206\323:\265{6\275\331\315\237=~\260:=\016\205\265\274\366\230n<\217\'\"\274Us\277\274\242z\006\274\322\367,\275I\367G\274\214Z\203>K\244A\275\277\313\236\275\250:\001>`\234U\273\271Ld\275\002<\334\273\331L\365=,6\226=\367\374(>\222bH\274\272/\327\273\316\244\331\274v]\320\2743\235.>\357\355\256\275UyF\275u:S=K\305\251\274%\232\250<_\332\321\274\277\021\256\274\266&\\<\212\237s\275\361J~;\363\201\347=#K+<&c\202=\301\361g\274[\256\231=@\236\202\275\005\257C\275\352}\023\275\315\007\224\275E\017Q\275\362\370E>\332\013\260<hh\204\275\346\331;=2\013\352\274n:\304\275\251\321\315<\245\255{\275\036\337\n\275\351\360\024\27551\252<\326\014\376<l\240\317:\327%!;\275$\247\273\251\373G\275\"]\273<\220\317@\275\272\026T=N\262\341\274\335!.=\010\217\216\274=\207\320>5\325\031=\212&\306\274\365\376\033\275\002\016\230\274\344\367\007>WB\325\273\355\225a\272\246\323C\275\251\377\360<=\301\341\273\334\216!:\201~\244<|3\240<L]Y\275\370j\033\275\251i\277\274\203\243\300<\315\350E\275\246\337\263\274\353+\027<N\361I\273\3423\t><\361\031\274p\255}\275-\245!\274\264\220\"\2754\202E>\303\217\026\275\317,^\274f\270<>\024\276\351\274i\346>\274\276\311\225=\233\033\2457xr\027\275l\264\022\275\372S.\275\301U\313=%K9\273\027R%=\333`r\274\027h.\275\363\307\276<\273\247\000\274\212\010C\275~\2476=\'\2173\275\006\347\000\276+|\220=i*\206=.\207\t=\346\244\227\273\365\312\343\275\327\350\314\274\021\233\261\275._\360<\322$\224<\253_ =\202\354\003\274\3011z<\016`\275>\376\315\276\2739?\273\273\177r\303=\227\232E\275\356\347\211\274{{\355\274\210bC\275\207\026\360\274\221\321\243\275%\003s\273\340A\r\274\341.\320=\261\021\303\274\036y\214\274i\027$\275\200\265s\275M\346S\275\255N\223<@\276\252\275\243\372\240\274\3567->_\300f\275&\372e\274U\331\231;\255\255\216\274\031\235\353\274C\251J\275\013\247\233\275dw\243=\332\353\261\275\017[\221=\"\252x=+\235\022\275t\356\022\275\336\325\272\274\230\361t>4\200\224=8U\223=\263y8;\003\177!\275\3500\203\273\343\312\030\274\010\266\252<D\312\020=\260R\360<e\363\212\275\372\334\250\274\247\371w\274\3723\351\274\324i:=\326\220\315\274\226m\'\274\262U\r\275\236\276P\275z\001\032=\017\224\254\274\007\310\222\2749\232\341\273#\2768=\375\243\341=\325d\225<\215\321T=\360T\003\275\232\024\301<\257\373H;\226\202\204\275\302\014t<\355\325X\275\230e\251=\342\375\037>\356QF=\261f\224\274Qp0\275\004\035u\274\035\215,=\353\241l<\352\245a=\355\266\272\275f\264\020\275\036R\326\274\255==\274\321\277\267\273\353\020%=1\351\031;\007\322\\\274\264P\205\275}\375t\273\266g{\275\244\243<=\311 7\275)_4=\203\234\201=\366ld=\203-\314\275\205g\363\272\350\233\036=ShI\275=\314\303=\276q =B;\267\274 /\225\273\236\033\256\274@\014a=\022\024\273\274[\204c\275\217e\210;VQ3\275\200\r\316</;\010=o\233\250;\371\006\213\274v]\271=\304\277\273\2756\003\230\271Q\0013\275%}\262<\202d&>;\337\273<\004f\252\274\203\001\232\275\360r\026\274\227x\216\275@\3422\273)\214\252;\016\313\271=[\376\021\275\270\035j<\362*\017\274\304UK\275\315\327J\275\373\022\252\275r\270X=`\037\000=\367H\347\275\023Z^=\274C\232\275\357\024\307\275u\353\210=Bf\021\275N\207\007\274\364\216\235\275\237\216\300=Z\344E\275F\313\252<\005\350\254=\024\177V\274(\373\252\275\r\243\022\275yy\270<\304\326\275\2738m\305\275\006\347X=h\236\007\274\217\362\263\274m\250\372=(V\372=\3727\326\272\334\205\243=2A?\275\375q\361<\373\rT=H\271\347\273#0\352=rl\036\275\231\3555\274\026\372\217\274Z\270\344<\212G7\275\324M\320\273\224\024\204\273\026\360\033\275%\370\030<\036\317\213\275e\215\000\275\003\206\304\273\323\227A=Zs*=\332_h\275\337\326\220\2751\323\276=\327*{\275\025\375\321\272\254\367C\274\251\270\363\274>\317\004=\205\0044=\246X\037\275w:\222<\364\211\327=IiU\275\314;\003=\324\321\002\275\2058$\275\320\264\006\275\035\240\025\275\017\211p;\367tB\275A\034\301\274S\251+\275\256\344G>\232\356\237\274H\363\254\275\343\354\251:Tv\263=U\221\267\274\243\244\305=\267c\225\272\303\006;=\035\264H\275\352}\323\274\342\363\255\275\010\325`\275\340\365\026=\266\354\320=\036\250\365=4\221[\273\200\302\376\272]\030\275<NIS\275\247\231\214=_\336l\275\272k\315<\302\344T\274o\211\033\275\224yC=\206\365\373=\271\253\002\275\204\242n\272\303\005\204\2741\311f\275\220\317/\275\2137\033=^<g=\254B\225\275b\031\204\275<\214\001=\235\004\223\271\336o\250<\301\326\307:>b\026\276\366\003\221=\237\310n\274(r\320\273\364\220(=\247\320\017=\377\263\254=\355\014\344\274\030\006\225\273\302\324\262\274}l\265<\213E\353=?\352\350=\324\351\200<\335-\273\274\215\031?\275\364I\230<\331\036\327;8\020\215\274\2268\273\274\277\346\340=*\221\211=i\237\351:\321 \242\275\303\310\215=\334\024\303<\247h\240\274_\200\234\273\277\205\245\275\217\367\231\275.\367^\274R\345\236\2731\206\267\274\033p\032=\245\014\253=\0255]\274\177\232\227<o_\221\275\272\300\262\275\014\330\016\275\036k\024=\312+\000\273a\344h\2753\030\362\274j\276\243\275\366\013\256=\\K\211\275\372\352\n\276\360*\223=\232\320Y\275\303\377p\275\255\000\321\274\350h\342<s_\227=qaC\275\231\342?<\t\230\202\274Q)\301<\265\247P\275\212\220\013>\312\316T=\230`\241\274-\274>=\250\231\000=S\354d\275\341\265\231;\317\342\327<\021\016\266=\356\360\274=\305\034\002<\365ps=K.X\275\207\364\214\275O\n\006;\014:\221\273\304OC>\202\025\231\275\323\374Q\275\035\376\005=D\017)\2752\314\277;\235\323d\275\202\001\352;\250CB\275\'B\002\2751$\273\273\222\201e\275+:\243\275\201y\370; \334\225=?H\267\275\310\312\207>)\\]=\305\022\217\275\217\376[\275\210\024\274<\307,\246\275\241\234\202=\234\262\217\275\020\'\210\275\371\245^=\tN\254\273\267\333M\274H7m\273m\325q<\250>\r\275\262_6=\336h0\275\357$\207\275\254:\\\275t4\025=\036\232\200\275\262^_\274A\027%\275T\353\242\273\322\\\r>\244\212?\275\344\034\t\275\236@\017\275\225\276 \275\276\034\220\274\232S\007\274(\205\250\273{\312B\275_-\342=h\024_\275\215\336\371\274\365\376(=\322\237\374<\242\357\247\274@I\254\275d\037T\274=\'W=\375|\355\274\377\236z=}\2559\275\363\273\235<\230\025\344=(\005O\274\261\244\003\274h\353\270\274i4\033\275\n\231\332=\373@\232<(\212L<\2763m=hq[=S%\324:\227\375*\275\033\207-<2Y\026=\210\325\037\275q\325\227=\240\241\252\273\233\221\221\274(\003A\275x\310\030\275\216\203\330<T\n\266\275n\257\225\275*\214\270=iQ&<\222!\017<5S8\275\351\263r\275\354\346`<\217;\354>\264k\261\274\361>\234\275\244\335F=x\323\003\275:\354z=\227*\003>W\231\274<\202B\372\274\021W\326>/A\352\273\236\366\325;\305\273\314\275a\363R\275\312\002\310\274\326\365\267=q\233m\275\241j\220<\010H*=\314\222\337\274\260}\327\274\362\323\257<9\n`\275\263[\211=!2\324\274\270\221R\275\372m\001\275\027\376S\275M*\020\275\037l\214=\006X\244\275\336\021g\275\346\241\256\2741\371\262;9\233\315=\010o\n\274\237\271{\275\270\007\230\275\377\254\214\2748]\240\274\300\204\331=G\257\006\275k);\275\241d\014\275@\341\225<\223H\325<\0316\315\275Ni\373\273\227\030\026=\233\311\276=\223\354d<\223\351\371\274\221\000\200<\210\230\355\274\355\356\225=\203\230\203\275W\305=\275\005_O\274b\254\035\275L~!=\th9\275\370\337|\2759\227\030=\010\256\"\275O\334{\275\377\324\234<\334\3207<\013D\022\274\272f\346\274\334\301\260\275\0278\262<P\327\340\274\030\207N\275\203\211\210\275\374\300\374\274\362\221k<\232\340\343<NE?=\303\313\345\274$b\225\275/w\315=\022\330\323\274:d\342=l\013==\366\013\026\275\"\333\274\273\003\355#\275b\340`\275i\353\027\275&l\252;Jy\215\275\2760U\274\306}M\275\010j\021;\215\024\004<\351\261E=\206\273G=\nW\247\274\005\2306=`\262 <M\017U\275E\032R<\356\272\t\275\327\316R\275-\220\205<\3658\2458y:\315\274\254\030\217=\013\250\013=O\243\242\274\016\362\036\274\223\364-=\300\242X=+=\265\275\271\031\036<\224\034\262\275D\240\200\274\265\350\205=\3173R\275\335r}\275\214\374\024\275\346\023\270:\032\204\007\275\333\023\212<\"7\034=qK\343;\216\021\250<\312,(\275\005$\307=\322@N\275\341\311)\275\220\203-=C\373{\272A\266u\275 \256\372\274\254\224\003<2\354\014\275\252-\222\275\032Ao\273\023kL=;\002k\275s\237\215=R\302s\275B\230\344\274\343\031\335\274\023\360}\274 \241\014=\217s\350\274\033\312.=r&w=:\226\233=(\215D\275\367\312\221=\350\232\332<\301\344\204\275\367\376\027=V\265\320\275\275\356D\275g/h\272\343\266\024=e\317\217<e\205\354\274\325\360\002=\376\353\\<\304 \223\274d\305\225\275\231\237\266=\006`(\275{\226_<]\325\245\273\354\253b=\017\356\232\275\234c\316<N\r\322\274\235q\203\275\257tG<\262\343\231<&\231\014\273e\357\262;T\313\032=O\010\2769\001\0025\275\233/\212=\020\333\322\274\230\323\253\275\210h\300\274\352t\\=\241M$>\256\330W\274G\205\257<\253\265\376\273\302kb=\207\333\346<\333\203-\275\356>\213\274\371\014H\275H\3122\275\261]w\275\"\270\227=G(~<tM}:E\373l\275d\367\267\273a\217{=\362\321\271\274\337]\223\273\214\374\365<.j(=V\271k<\202\206\273\275\353\257\200\275v\230\033\275P\022\242\275\257\216\210<z\332{=\034\346T\275`T\255\275\202\\\340\275\327\205\006=\024\336\371\274\241w\247\273]\357\'\275\031\237\226=\241A\t=P\212\250<\347|8\275\304\277\205\275\n\341V<\325\005\017\273\t!+>\223\375t=|\337\227\275L#\037>\310\037c<\374\357Y\275\302\333\254\275\332\311G\275\314\215\000<\220\234\215=e=v<\277\375I\275i\371m;\177\035#=\"3\246=\353\244Q<\374\257\275\274\247\377\275=\300\2208\273+n\177;\306\323+\274\021\316u=\305\240\250\275\367+(\274[\343v\275*\365\223\275\354s\022\274\2757\004=\244\002J=\263\337\356\273\361\340\206\275\345\350\341\275M\362\315\274\254\305Q;<\3506\275\304\337&=q+\303<\336/J\271C\277\231;=\357 \275!)\363=\264\276\246;\276\231\007\275U\240\224\2759Q4\275\305)\225<v-\350<j8l\2750\352X\275\263\231\035\275\031\340\225\275\021\3159\275\320\260`\275\266\305\252\273\246\342b\275\r\220\225<\302\231+\275Ot\3069\332\016Q\274\232\376\346=\311\263\367<\314 5\275\033\255s\275\2005\272<mC\014>R\202\250\275K=\366<\326.N\275\363\226%\274c\312\214\274\352\214\346\272T\026S=N\275\220;\017$\237\275\221\373:<\217\211e<\205\321\000\275\344\273\220\275RN\204\275\376!^\275\254c\335\2744\265\244<\037?b\275\022\033\010\275\000\343\355<\324\322\t\273\264\335\016\275\2002H\275;\377+\273!\275e=\311{(\275\343\022&\275\316.\265=\027$\001=\251\025\003\2724!\266\274w\330\027\274\022\366\254\273L^p\274\232\262\177=$\003H\271aV\314\274`S.<\270\'\226=\251\'\201=\255\365\304<\246\263\036\274K6\201=\322\211\204\275K\201\244=\220G\275\274\352-+\275L\013\313\275E1#\275\271Cl=\325~\201\274O\n\026\275\260\365\005=\216\273j=_]\031=\360\304(\275\211*\006=\327\002\362;\005\310S\275\245\017\010\273h7\023=\307\310\226;\325\236\'\275Qj\203<\350J7=\357~\245\275;\200\211;\366m\210\274\260\304\201\273j\266T\274BY\337\274A\350C<D\302\r\275\300k\017=u\233\315=\271B\026<\306\033\023\273m\244\374<Ys9=\243p\017\275\277\'2<\375\345\242=\035 -\275\017\310\r\274\245\312W\275O\351\310\274\240\253\317<\001Q\224;\304\273\374\274\310\t\024<\314V)=H\020\023\275\310s\240\274\332\310\274\274x[\214\275\202\260\324\274H\3321=D.9=-\306\326\274\243R,\275\312i\206\273\"\221\313\274\313\026\027\275\364\330W\274*}\205\275\252\022\007\275Vd\356\274\016m\234\274`\223\270>\264\016\200\275\315\254K\275\177\343<\275kM+\275\270\rr<_L\336\274.\237\232=\005N\251\275\035>\027=\375{\003\275\345\010r\275\276\212\211<|\217\010\275\033\3417\275\304%\260\274\237\001\235\274\355\302Z\274\352\022\302:L\326\246=\314\024\265;\264\327\033\275\211:\345;\200\333\200<\246\004\030\275`P\221\273\200\211\237\274\300\210&\275c\226\203\275\010Z\204\274nr\n=\354gU\275!P\311\274Kd)<\335\nr\274\216\225\006<UfA=&\377\024=6g.\2756v\260<-\324\327\273\356\316Q=\372\201\014\275:<\363; \210;=\037?\230\275|MO=s\274:=o\224d\275,\250U<\324>\357:\333\3555\275}\346\026?w\271i=?\257\232\273Za\3779\t\007Q:\3153\237\275\276\3673<\314\003\253;\026T@\275o\267\247\274t;\237\274 \254W<]\202\313\274)\235E=e\221:\275\272\032\313<\252-\330\271\r\204e\274;\223h:n\203\322\274J\014s\275\313\356\220<s\327\204;\027$D\275@\347\032\275\311\023\307<\301z\037=x\343\306\2743\200\257\275!\310#<\314\354\020\275\336|\222;t;\003=\303\231R=\345R\214\2758\311[=\377\217s<D-\034\275F,\252<\220\001d;\347(\250=\030\212\305\273\006K\215<\322\334\202=X\247\271\274\323\325\333\273\323\276\213\275R\241g=\330\020\215\275i/\213<\"\373k\275Q\"\006\275v\335<\274\217\034\254\275\250\2358;\235k\255=\276\244\022\274\030X\211<\ne,=\'T6\275\202\340\264\275,\247\315=-\270r\275\203T\222\274\241\304#<\270\030\215>4+:=\324\002\317\2754&\223<\332\374\016=\267\367\303\275k\006\025=#(\022\275J\376\205\274\240\202\032>b+\360:\325\265\033\275&_\371\274\267\013\016=4\177 \274\267pj\275)\017\335\273\026\201\211>5\261\322;G?\006\274\207\250V\275\000\234\377\274\251\231\203\275a\333\356\274\322\327\250\275\313\343\333\274\246Q\372\274\313\203\353\274\226\202\370<]\000 \275\\\000\270\274\316\213a9b-\251\272\031\357v\275\356\217\215<F\236.\275G3m=\rT\033\275\230ug\275\017\264\321;\036;\252\275\014\331\344\273\317\274e\275\231!\300<\341\036l\275&\030N\274\255\371\320\275c\327%\275\223\247\254\275\356\221\272;\340\031\026\275\330z\013>\314\321\332\274qX\253\275@K\332\273\257\017!\275\272r\357<\277\031\251\274\027\244\210\274\206\355\253\274\211W8\274s\025\330\274L\016\230>\035>\031\274B\350<\273\264(\260\274^!\232\273\252\034\002\275<\252*\275\031\340\234<\344\336s\275_#;=1\212-\275\231I\037=\300\\\261\274\246\277-\275\261k4:g\330\021\275\3249Z;\343\r4\275\346\216A\275\241\362\n\274\253\206\301\274P\267\225=j\3205\273\206T\312\274\265\347\330<\211\032%\275\251\251>\274x\355\227\274\370\206\205\274$\204><\262t\327\274{\020\302\274\274Y^\275R\342\320\2752\036\207\274H\000\023<\340a\351\274\316L\223\2747\245\256=\257t\241\272c\376\204\274\037\016\371;9\005\256\274\022\247/\275\222\204\205=\022a\212\274\274(\343\274\212\211U\275A\203n>*\272\277=\016E\213\275\024\251;\274h\037 =F\203\314\272-\205.\275\352\273\266\275j\274\371\273o\375\007<\363\373\241\275C\022J\274\335z\322\274\231(_\275\244\000\353\274\330W\201=@\351\267\274\200xD\275J\\\036\275yC\002\275\234Bo\2749\023f<\022\226\261\274Pq@\275\207h\206<\363\326\234=\227\304\333<\201\373a=\031\000\334<\265\251s\275\301\227>\275v\2465<\212\025\245<|\373\037\274\014R\355\274\242^#\275g\364\313\274\020`\216\274\212\274\021\275\344j\242\275\356&\320\273\326H\007;\374r\225\274\367\375\271\275&\\\304\273\024/\274>zZj\274\2270\220\274\246\275\234\275\341h\362\275\254\215\201=Dh\204\2751+\342\274Y\207\266=Tw.\275$\362\245\274!\330\224\272\375\237\337<<\366\272<Y\366\266\275)O\271\273s\325t<X\022\232\2757\264%=\215m\216\275[\027\231\274\334\222q\274\365\025\210\275O\201 >\233=\004\275\375\204\317\274~R\304\274\276\247>==\243\026\275\2007\214\275\241\r\n\274Y\246\303\275\330\254\001\275Gdt>\007\217\266;\253x1\275V\022\004>Z7D\275\361\034_\274\324\326\001>\361\324\202=\256j\030\275\263\337\001;5\334\372\274\313\3101\275\030\300b\275\236\317\360\274\2302\227\275\227m\317=-\236\326<\204\027\367=\2010\325=\375q\023=\332M[\275\215{\244\275+\001*=\007\246M=\376%\365\274\027J.\276\272\313\203=)\2332\273\371\356X\275\271\255\346\2723,b\275(.\277\275$[\233\271I\311\211\275q\005\253=\231O\037\275\304k\205=}\245\225=\347\240\024\2758\340\203\275\355\300\202\2756\333\256\274<r\236=\336\331k\274\360A@\2742\364.\275|Q:<-\000\262=\371\363\227<<kR\275\035 \001=[vn\275\242\2736;P+\346\274\346\255\377\274\023\366S\275\316\262\366\274\326\021\223\274\364\'\251<\311,\\=\304:\355<n\275\210=\252\317I\275.\024\203\275\243\222\006>T\312\005\2765\034\036\275\207\214J<\361\246H\275a\tf\275\213\216\013<\026\340\205\274%<\025\275l\324\t\275I\301\274\275\210zi\275|&\034>{.\211<\244t\014\2750\225\177=\270\036\317< \330;>\035X+\275$k&\275\272\335h\275\252\033\332\274;\323\231\275\030\303C\275\376\376\212\273\207\322\034=\255\351\215=\225\360U=M\251\336<\220\"\275<\304-\273\274\214\325\231\275\304\237z\274\354\314\230\275v\323\234=\010\307\n\274>\235O\275\310z@\275\001\301|<\252$\266<\373R8\275\266^\177\275\310ZE\2750\241\232=\361_\207=\244_4;\252<\266\275T\013\225\275;\005\274=v\237\350=\374\200w\275\203>\034\275\352\273\363\275\303k%\2744ao>\365\260`>y\250\200\275\305\277\324\273S\350\372\273Ov/;\027\264\024=\034i8\275\267XF=\000\n\000>Og\202\275;\363P;\222\\\352\275\247\334\236\274\202\007\253=\256\013\220\274D\356\227\274(\230\256\275\031\305\277;\006\240d\275H\354\247=`$\220<\307\367\360\274\304j\034\275g\364\256<H\307\241\275\000\375\377=\241]\244\274\2643\026\275a\205w<\372\030/\273\272\221L;9jY\274mH1=P\352\226\275\'$|\273<\236\030\275\274^\305<Z\233\022\274f\037D<\346\206\303;\256x\005\275\217\372\360<D*\213\275;\260\315<\343[\361=}\331\032\274\355\326\023\275\354\037\276=\243\357\244=\275@\037\275u\024\273=\276\242m=\036\334\263\275\363r\370\274\245\327O<\306W\321\274\001\225\335\274|S\303=}\261\005\2752\rh\273\357+B>[4\347=qo\t\274\247\270\307:\010\2618;[{\'\275\277\206\027\275\330\236\366;\221\341\201\275`\272\t=8\3536\275\255\352\021\274\253\370{\275\333\276\002\275\221\'\027\275\343yp=\250\322\237;\331\010\262\275sL?=\260\r\315\274UX\245=V\273 <\ni\315\272\355EX\275%\271\002\275\212jT<\323j$<7ro;6\260P\274\277\312?\275\225JJ\2750M\016=V\334\236\2742!N\275\315\2015\275*pW\275a3\014<&\273P\275~b!=\013J\363\273\225o\313\274.N?\275\354\320\363\273\335\347\311<\324xf=\306z\326;\247cG\275\231<U\275\254\363\221=\200\205\344=\370\221.\275\261Z\270<\031\341\251\275\256\253n\275\352\020\321\273r\265\037=\334a\230\275hT\035\275\"\232\266;\031\322\023;\005\2746=\177\033\310<\023\345\014\275\243\307\213;\266r\210\274\252\272Z=GD\024\275\341\247\002\275\331w\033=B\2650=\007E\244\275\375\267)\2757\263\221\273MR`\273\225D:\275\317#c;Aa\224\275\265\254\344;B\214\235\274;/\002=+Q0\275\335\364\242\274\362\356U\274\000`\356\274^\032\016\275\024\010\007=C\352\307<\001\231\234\2730\356?< \250\200\273\277&\356\273\234\207\036=\357\2162\274\017\216\267\274b\247\207\274lc\215\274\215W\314\274\0343X\275b\255V\274\335\313z=A*g\274U\330\234\275>\375\t<\203`\255=y\327\017<\302\370\251<\271u\346\2743\026T\275\252>#=\225r\273=KK]=\206\347Z\274<o\022\275j\271d=B)\300<\023\244c\275\017\\F\275\2451\223\275x)\032\275R\334\207\275\006j\252\275\204\255\204;\362\324\232\274x\220\265=\014zE\275\346\206\375\2740z!\274\316Un<!\245\356\274\307&\r=\363\222\345<\303\005\354;\250\306Z=\365\222\320\274\220\224\223<\304;\255\274\373\334\351=q\010=\273O\374\261\272\211\366~\275\245\331\030<7\021?:Vc\305\275\342t\302<\361\235\024=\310\344\024>\354Y=\275;\321\246\274\230\250F<\r\332\204\275\351#\261\273\177\246\206\275*\330m=\312Q\263\274\252\255\027=-\036w<\017Z\265\275\270\375\203\274\271t\252\275\301\253%\275\307\365\307\274\274\375.\275\273;\016<\024\002\266<\3343n\275g\265\230\274\313_l<\210\253\207\275\301\202\002\275\0307y\275\321\301_\274\314\332\371<\303\016\350<\303Yp>\265C\265\275\336U%\275\306\0241;\027H\005\275\200\310\264\275<7\203\274\303\245t=e\321\200>\002\020P\275^dI\275p\264\002<<f\300\274u\367!=\247\221\037<\304\323\244<\225P/\274a-\252<\377\330\247=\302\221\301\273\376\322J\275\035\261\266\274au\254=\205\272.;\2351\036=\375\260\240\275\325\3505=\240\256\n\276\313\264y\275\013\263\313\272\252\035\321\274\376[O\274\001`\305<r_\212=m#f\274`\223\331\274\322\010\354\274\375\005\370\274y\311\350\274\233\223\031\2749\026\r\275\023\224\010\275A#\235\275+\230\"\274R1\005<+\360\252\275\004\264\t=q\307\034=K\261\021\275\265\024\262<sJ\202\274\272&Y\275g\305\302\275\247\264\021<\252V \275\354n\366=\350\353\345\274\346)\235<\031*O\275\366z\\<S\313\274<A4\013=\020\005!\275\250\330\207;`*\"=|\036K>\212\377$\275\317\275\3229\356\206\240\274\2606\251;aA\034\275LM4\275!\213:\275y\226\226;\276c\010=\343\004\251\273\273{\006<\033\262\370\274\342\017\335=%\343Q=\311-\300\274\254*\322\274\032p4\275\002\2502>k\334,\273|\177^< 1\352<\016\256\217<\211\237\232\274|\201\020\275Y\320\006=\340\306\341\274\030\315\245\275\336\024\271\274\032\256K==v\267\274\030W\234\274\230u3\275\270\342\336\274\314\001\305;\200w\246<\014m\376\273\327\362\001< \247s\275\310,\276\274k\350\221\274\207\252\341\274\231P\016=8\335l<\361\257\334\274\2361L\27425\003\274\331\0234\274\3726u=l^\212\274\210v \275B*\006\275\013J\200=H\263?=\037|\252\275;HU>\332\304\023=\027G\311<\220\2179\273\0054\306\274\3549\003\275\327)\020\275\204\266\036\275\214\202\270\275\033dC=\214\236\227<\245J\'\275\033t\213=4\323\r=\000\016\225<\035\334=\275\033\232w=_i\205\275\022\364\212\275\236\200\007\2736\371S>\267E\227\275\352W\026\275\357\303,=\013\2752\275\t\341\375\274\370\n\375\274\323\374\001\276rL\331\271\360\2156\274\030(&\275N\322\324=D\241\206\274\232*2<\235\225i=,H5\275\305\033\'\275\001`W<\231\242\021\275\t\337\033\275+RH\274z(\271=r\313\363\274\035&\253\275l\017\224\274\305\260F>\023\305\210\275\375\301\301\273\340Q\006\275\352A\347<} E\273\334RL\275\033\026\243<\222I]=\032\375\222\272BS\345\275)0%=\257\033\353=\355\347.\274\346\316\'\275\r\214\225\275\352\314\233\273c\035*\273\301\316\025<\343\002d<\000!\016=x\361c;\311\335\330<\274\254L\275cS\030=R\375\024\275WBC\275\330\177\355<\313\230y\275FVC\275\237$\246\275a\374Z\274\236\310\200<\343N\321\275\356TX\275i\236\265=9%[=\355\306+\275\301\220\215\275U\301\005\275<\316$<n\241\024\275\203\031\256\274\371\300(=\363\265b\275\217Z\203\275D\267M\275|\314\253<\261x\336<\277\224\206\275\264\251\007\275\341\243G;\305\n\257\274\305*\336\274\367\014\307\274\241<)\275\363\250/<\036\3744\274\365]\365<!\007\226\274F\261\204\274(]%=x\335\023=\271\201\033\275\214\240\205;\005EX\275&\016\332\274e\347@\273D\372\216\275\247\261W>\245\023p\275\334d\025\274\307\244\265=\266\220F\274\366\234 \275\236\033\226=S\357.=\347\231`=\241D\304\271\211\213;\274q\303h>\255R\022>\013>!\274\203\334$;\035\222\355;\330.\274\273)\033\225<\371\255\321=4M\263\274\033\230~\274m\215\033=\365\212o\275\334\3437\275\301\347\203\275r(y\273\315\346,<\255^\311=V\372\037\275P$@\275\001j\375\274I6\227=\341\240\006<\304\341\307\275f\254&=\354\007\t\275a\\39\177\237\302;F\343\262= \356\263=p\010\214\274\251HX=M\223E\275\245GN\274\210\030/\275\321\346+\275~\276\364\274\362\246\226<+\032\017\2755hK\275\234S\266\275X\232N;v\211h\275k\357J\275\232\227\032\275\221\210\256\275\234\234M\274\031{\312:\030)@=z\361\237\2755\004&=\273\377\317=@\017E=\347u\244<\333\223+\274\376\205\321\274u^\312\273\255\'\236=\\o\220>#\216\251;\212\007n\275\202\242X\274\363:\244=\t\216\004\275,o\321\274t\225\331=*,\270\274\243\203!\275\215\203\242;\2220\367<\342\363\262<d\330\210\274\350\022\"\274\320-\253=\354\355\341\274\202t\253\273\232\253P\275 Z.=\2308\211<Tz\303<\303\037R:R\355\354\274\361\022E\274\223\226\246\274\253\254h\275\0075B\274\372*\322\275\221,\033\275\267\003\323=D>\311\273;\315\r\275\214\363\007\275O|\230\274\r\304\r=\306~H\275vL#\275\252WJ\275\257V\331;[\025\367\274\034\3608=5\355\013;a\370U\275\351\036C=r\320\317<\375\361\027\273\236\016\206=\373\007\355\275\\\375P\273\336yU>\001+\005\276\320GF\275S&\343=SKy;_\224\234\273\000\342\211<l\345\204<\263y\250\274\013\357\213=\262\270\021\275\326o\330\274&\207\006\275\246\277\240\274\334\036\032\274\323(\263\273U\032\215=G\237\030\275\215\345\031\275\261\315k\274\023Rm\274\354M\245<\263\274\'\275Ya\t\275?\341\005\274\223e\321\273\305\013\000?k\255\034>P\341\210\275|\311\033>\217\277y\275&\357\000\276\346@x\274\213\316?\274L\364n\271/\233\013<\010TX<\361\326\200\274\203\201\270<\251\311\320\275\242\024Q\275\2663f\275\307n\220:>\001f=f]\237<\271\013\372=\211-\240\272s\374\344=\312\001\'\275\205e\232\274\217\300?=\020\345\033\275\"q;\275\034I&\274r\233\354\274}\3413\275\265\374\230<<x\265\274\246\357\261=#\210\313=\342\334h\275\256\003J\275)d6<\010\026\251\274\215\301z\275\306\t\232\275\300\355P\275\003Gq\275\232 /=;c\250\274\316\307\253\274\345\036\006=p\247\341=\021=.\275,\316\224\274E\226\225=\376\234\340\274t\356\037=6D\346\274\237\235\261\275A?\324=?6 =\261 \035\273=\302\361\274\304\351d;\307\204\000<6H\322\274\252^K\275\371\357X\275\334S\017\275i\203{\275\006\341\022=\277\362\360\274:\373\351\271\273qh=\\l\262;\201\036\215\275\024\243\031=v\352\256\275\330\203\\\272(\351\354\274\215\312\376\274\207\206==\302:M\273\314\242\233\275\002\215\266\274\224\013\006\275\254\215\221\274\2567\371\274\325g\323<\3573\215=O\224\t\275\321>\355\275\350\222n\275m\362\225\273o[C<w\010\005>\243l>=$v =&\257\250\274\257C@=\310w\230\275\376pB\275\226\336w=\330V{\275\213a~=e\022\014=\032\354=\275\353n?\275\032E\007\273\217S\205=*\n\230\274\262\346+<\276f`=\357\357\352\274\212\010\306<\236l\324\274\014K\216\274\035\010}\275\002\324\005\275\375\325J\274,u\325<\032\005\025<@0\212\275\300\247\304\274\312\267\340<\245\343\331<V\022\021=\264\342\241<\251\341\3479\357\201\030=\223T\230\275\2101\020<\005\240\276\274L]\031=\335\275S\275\372=\244\274\277N(;\221\230\260=\2755q\275\274\375!=P^Z\275`\216M\273W\201\345\274\017/\224\274\254\260v\275\331\304P=\231\261\213\275v\352v<\031\315\316\274\347\362n\275\036\000\021\274Y\302\244\274\374\374y=v6\023=\244P\n\275\226\025\027=o8\341\273{\252$>\023~?\2739wV=??\032\274\032J\021\275\347|M=\313\036k=\271h\211\274\342%!=Zm\234<\316H\342;\247\306-=\321f\005=\351X\244\272,\021\036\274\342\036\037=\272\177\335\274o\331\014\274\245\323\250\275\2141\205\274\222\025\202<\030.-\274\307\005P=H\204\311\273\263\024#<\257\255\254\273\'\002\230\275\237/a\274G\004\354\274c\211\271\275\034w\264\275\314si\2758?\325\274S\033@>\177\026\032\275(U0\275\221\273n<\"\275\220;\034\331\326\274\030\375\207\275<\374\016\275\254li=\204\260\005>B8\004\273\270\033\242\2740}\355\273\320tl=\331\222d\275i\331\216\275t\247A\275\332\247\205\274\314\314\241:\024\024h\275|\373\221=\302C\231\274\216\3468\275\253\371|<N\261\305\275$\r\352\275\022\253+\274\343\336\216=\n\260K=w\031\355;nP\320>\256\003\037=\224\214\355\275\307\360\003>\376hz<\265\346\333\274an\363<\003\223%\275E\204\032\275\321B\200\275\340\204B<\345\243:\275\232\3713\274,\313\203\274\177(f<?=\r\274\266N\340\274\3609\251<\302<\341\274),(>T\315\222\273\350a\237\274TY\215\275*\257t= \001f\273\344\323\357>\221\310\027=d\373\000\275\323\246&=\325\212,\275\"\225\233:Iu\365\274q\325\t\274\255\r\376<\245\317;=\364+\254=\237C\347\2744\336H\275\340\263\265;\321_M\275\235Bi<\210M\r\275\'s\017\274\344/\024\275i\377.\274[\360H\275#Ef<\354\256\234\275\n\246\250\274\013\256+=\357N\356<R\322\324<b\306+=\307\034\375\274\222\212;<\341k\236>\301\3150\274\334T(\275\243\332g>{\016\205\274\244\302\022\275=\317\252\272\367\006)<bN\327<\014\230\260<\322\310\250<\250|\342=\010\000\267\275K\255L\275\005M\373\274\301\031n= \030T=\320\224\203\275\362\253\315\274U!\032<\037\325q\275\024UC\275\242\2354\275\252\360\377\271\335.\366\274>B\227\274J\377r\275\014\204Y\274\257\360\267\275Q\261\301<\263\352\237=M\357\317;\314\345\241\272\343:\245<$\323%\275\250#-=J\350d<I\357-=\216\316J\274\267\327\214\275\375{@=\256\335\024\274N=5\275\027\200\216\275\367\3242\275<\355\334\274\004-\226\274\023]0=\350\024 \275\256\020Z\275\201<\302\274\375\201\204\275\211w\247=\326\332\233=E\\\200=\313\220\344<\'\361\354\272\373z|=\322\257(\275\320[A\275\300\272z=sF\302=\017#Z\275{M)\275\002-|\271\r\0069=\377\026\261;\265\303\251;o\343\t<\203\331\016<n\037`=S\005\241<\244_\327=\242\264\017=JI\014\275\022\356\276\275\375\2758=\374\366\330=B\263\301=\332\035U\275\242S\001\275\237p\353\274\273\220[\275_\374o\271a\013\003\275\223\007\205:i\037\033<\256\242\261\275\025\234\365\274\330\276\244<\037\247\332;\347N\243<\361\031\027=\327\256\315\274\365\325\024\275\016\363K\275\225\200\335=\236\212s\275\204\201\323\274<\371L\273\254\276t\275\344\303\261\275\313A?=8\330V=\255\345\013>\320\235\216=\320R\211=\312\366\315\275\003\217\255;\007\377`=\027w^\275\026\004\255\274\372I1\274M%\363\274c\233\013>j\244&\275\247\036\210\275U\364\240\274Y\311\177:E\230\231\274Y\230\375\274\303\254\275\273\014\272\025\275\013z5\275\2646\345\275z\303\223<\266v7\274\323\212\322\274\016\003!\275\242mn\272\223\211\227=\316\030\252<TX@\274z\351)=\367\206\205\274\034\240\207;\231\311\323<\202vi\275\"\302s\274\321\3264>\202\200\371<\2278\352\274\025\363\013\275\274\232h\274\003\206k\274\031W\220;_F\010>\373\202\217\275\326\200\234\274!\000w\275\335.\r=\262\013\263=\233\367\271<osD>\240\005\001;\275\261.\275\355BP=t\264>\275\2577K=\305b\213\275\373\326\256=\343/0=\030\215\300\2754\310\\<z\027\213\275\3211G\275\235\2400\274\236\240F\275\207*\255\274\007\325a\272Pf\230\275\001\357\177\275\'\353\212\275\242\337\315\274\261%\335=Z\337\275;\212\236\023\276\305\204Y=4\214[\274\037\214\241;[7\232>\210\246\257\274\233j.\275J\361.\275\355\234\301<\3731\035\274\212~\203\273F\334t\275\341O\020\275\266\246\353\274\035f\235\275\3561\223\2757T7=\300y\343\274\022S9;\"\273\366=\230\347\234\274X\366\265<vk]\275\316\002\013>G\312\224\274\001\343%\275\232)\242<\313)|\275 \366\025>\032d\337=_\223\212\274Uo:<k\235\204;\002I1=\356g\270\275a4V\275c_\\\275s\370\243\272\311\3777\275\002\344\255\274P\260B\275c\314j\273]\346S\275\003\000\t\274\245\r\210\274\027\003)>c\246\033\273\no\200\275\357\034:<7cb=r\346\314\274\372KY<\257\253\032\274br\002\275~y\"\275\244\265q<\333\275\250=\337\030\017\2756n\225=\036\232\026\274\035\n\233\274\021\016K<?\213\350;\342\"I\275z\030\031\275R\201x\274\020\350T\274\313J\255\275\324\334\206\274\036T\207=Ge\336\275\221\242\216\274\363\311\006=/\333\300\274\013\301\275=W\363\203=MY\373\274\341\270\357:\372\261\266\274\363\214\001\275\200\033\227\275x\210\211\274WF\344\273h\247\357\274|\004\020\275\355\254\263\274\222\361\352\274\260\265\230=\205\016\204<\323\355o<m7\227<=}g\271<7\316\274x6D\275\324\347\373\274\257\263\306\274\234\237>\275\004z\010;\3038\210\275!\246\033\275\230QL\274\264C\277\273\344T\036\275\251\246\203<\316\220!\275\304-\220\274\3601\210\273\200\033z\275\363~\201<\033\310q=\tv\243=\326\373\230\275\260\305\301=\256\340\234<\212C\"=v \205<\364Lc<\324\177I= \260\245<\207i<;\302\303*\275f\022\035\273\263L6=\304\204\262\275g;\024\274\224\271j=\007_\336<L\264`=\227\326\374;\023\177B=\340\177\320<\272\307\253<\007\331\257=\356\234\027\275E\2018\275Kc\242\275B\234J\274\272.\202;\002r\027\273\374\225/\274\315W\205\275\271\203\322\274\305\0046=fs\212=[\317e=X e\275@Jc=\207G\036\275\335\030\260<\334\275\006=O\333!<K\211\221>M[5=\203\373\326<\232x\237\274n+A>\3068<\275b\255q\275\246\326\272<\277\240\214=\006\3701<\022\230\027\275\241dM\275]<\177\274\273\035q\274V\306\2719w\204\225=O\"\245\275\017\036u<\364\212\233\274:I-=$\305\376<\252\276\203\275\224\243\345=\232<3\274a\003\257=\023\010x=\"t=\274st\251\274W:_\275\'v=\275\227\021\250<\'\224\'\274\354\254\231\274%\007\305=\255y\017\275\337\2367\275t\020\251\272c\331\001<\216\361\315\275\246\203(>cX\030=\240\017\031\275w\241\333<\3250\373\274\360\370\033\275\205\3337=z\021\314\273\021\366(\275\377(&\275\217U\234\275\311\211\210\275c=\010\275\036h!>0\323(<\0015J=\030\255i>\2066\350\273\010AU\275\317@)=\375B4=Q\256B\275l\352\363\2740Z?=\356\270\001\275HK\221>\245\300\227\275\211\005\036<\233\2663\274.Iv\275\320\316\346\273s\350\016\274\263\334\033\273\0353\243\274k\r\304\275:\302&>\231\277\345<\033;\t\275FS%\275Gs\335;\3556C\275\233\220j=\240\350u<\227p\226\272\243\217w<\017\325\325\2747\373\334\273a\330\250\275\0061N\274\211\276A\275\303\345\215=\253\000F\274\305\341\312\275\271\000\001\275 b\361\274\355\366\345=m\353B\274L,E<s&v\275\371\346\323\273\177%\275=)\014\372\270;56\275\014\354\006</m\271\2751\005\373\273\323m\230<\331\213\322\272\227:%\276Z\224\023\275\314\360\316\274kf_=\221\007\207=\352\020\007\274h<\021\275C\3451\274F\327\217\275\276R\023=\363\312\212\275x\221\333<u\303\214\275eb\313\275X#\207\275\020\212\357\274\361\273y\274\363s\331\274\332\237\007<\241/8\275\373\360Q\275\3465K<g\017\001\275\004B\216\273\2645\360\274@\375\254\274E\027\256\274\356\270\204;_\371&<\375\331X\275yQ\350\275XP\207\275\264rl\273\345\250&\274\305\325\221<\341xQ\275ct|\275#(*\275$o\212<\312\260\303\274#\034\350\274\202-\200\275_\324\"\275J\322\230=~\034\232=uy\002\275\345|z=\t\270\030\273\2009\320;\006s\025\275\010\276|\275[\207\214=6\304I\275\222.\232=5K\357\274\206\255n=<\017o\275q\235*\275\001\375\001=\301\211\271\273y\324\027;\300\025>\275m\365L\275Isz\274\003\366\364\274p\210\002<)\264\357<:\345\275\275\017\343\216<6\nJ;\357$\256\275\373\200\277\2755\201\017\275\257\3701<\023\347\201;\233O:\275\037yM\274`f\027\275{;\351<\346\001\000\274\034V\035\275\337Z\r\275\266]E\275x>\226=\340Tg\274\340_\354\273\207\255\265\275\236\032o\274\276g\007\2758`\316\275\246\225*\2730\242`\275|gd<\235\001A=\357Z\335\274\311\260C=H~}\274kv\236<\347B\243<\013%\226\275\313\215\322\274\177]j\274\353\025 \275\354c\006\273\265\004\306\274\352\343*=\255\270\246;P\3654\275\236\'\366<`\201n\274\202\236\236\275n\rF\275\365|\272\274\215\344\2179\202\370q\275\016\275\024<\3066r<SPU=\033f\224=\253;Q\275]\244\206=\331\211\313\274\255?\033=\227\030\033\275\226m\014\275?\272:=6\367\177\275QU\247\275O\303\207<\024\362\301\274+*\020=\n\263\'>\207 \020\276Gs\223\275Y\310\372\274]p\003\275\233\372\234;\3658O\275\210\247\321\274S\277\266\274\377wD<P\237\252;9\2728<\317V\312\274\311\272\263\274r4\222\274RYB\275\207\224s\275oG\017;\007\252\323:R\246\004=+0\036\275#\210\356=\375\241u=\352\336\311\274\344\362G=\224\242\032=\316\324n=\2067\014\275\343\363\267\274\014o\302\275\270\245>\275\201\267\021>\323V/\275\332k\366=\274\354i\275\335\033\367\274\022\370\256=\272z\334;\365m\346\271\001\025\221;\274q\357\274\312\017\251\274U\036\225=.\351\027\274 \274\316<\330\035\200\274l\277\033\274\024\311\001\274\374\363p\275\354\352-\275\304#\231<O\263\031\275\2253\217;c\030\243=\3773\247<\000\234\367\274\224.\277<k\221\363\273\005O\017\275\257G\203<P?\277\273\034\010&<v*\252;\360\0100\275\224\366\217\274!\201\240\274f\0012\275\205\261\301<\371\326\317\275\026@W=\273\200?\274\373\024w\275\005\250\037\274\305%\244\274T\267\257=\307\211\024\275P;a\275\355\235\214\275\337\307z\275\321\351\332\274\305\236V\273V\\\032\273,d\267\273\n\341\347<\376\n\225;M\036\375\274`\007 \274\331fv=\250T\327<\"\270\326;DU\201;,\246r<\212\212\035\275\301x\214=\366\376\360\274\250`Y\273_\310;\275iiT\274\2060\261\274\007\262\265=R5\000\275\211\264\027\2759\rm\274Q\017\204\275\314\r\340<\013\025.\274\206O\242\2742.\006=DD\272<T\021\232<\275\014\231=u<\017\273\235U\202\275n]\325\274\265\214\346\274p7?=\026\362\021\275\336\342Q\275N\013\020\274\021\030\002=\254$\307<\276\266\276;\201zW<\2511%\275\237m&\275\272\371\374\274\320u\357:M\362<\275\346\374A\275\003\020\252<\222\010\234\275\331\257\025<\0050e\274I\032\326\274\3242_<\263\367\210\274\037K\223\275\002)\301\274\032d\0109\200\311b<\230\363p\274\213\201P\275W\tS\275;\034\227;\327/>>w\327\350\271@\\\006\275\301\366n\274##P=\274\204k\275\215z/\275Z\013_\274\311\354\304<\343\327\037\275;\223\256<}5+;\020h&\275\223\261e<\221\203\214;D\010\036\274\203\2033<\205\257\362=\014\236g=\323\205\200\275X\260\204=\3420B\275\333\227\233\275\241\375\001\275\275\366\230;A\222#\274 \224\013\275\033D\270\274\204\374\345\274\205C,<v\326N\275\361\374P9\037\351\002\275\325\372]=\332\314P;\036\231l\275\316e\311<S\227\224\273\304\033\326;\334G\344<\021\017\357<z{(\274\277\305\210\274\325k\272<\356D#\274\234\230\\\273\342X\032\275\205/\027=U7{\275X\307\322=\206\310Z\275 ;v\275\256\234\203\274!e\r\274\362\177\324;]\',\275Y)\246\274\341L\216=\305\"C=\205\255\237\274\346\207\216\275\345\204,=\362\333\306\274&0\344\274;\313\017\275\253\374\016\274p\356\035<4\222\220\274\201?\253\273,\036\334\273-=`\275\345\244a\275w&\354\274\205\237\226<\373w-\275\034I\351<\261[\222\275v\314\201;]\235\240=\244fb\275\024\311Q=\264\215\037\275\267\350\n=\377/\365\274\374C\260\274\025\253`\275$w\366\274\367\200\256=F\346g\275\266\275\330\274\007\270F\273\356\267\006\275\275F\346;\364\024\211\274j\261\000\274\377Q=<-P\302\274\313\005\004=\263\277\250\274qQ\237=\214\232H<\314\031[=l\203\237\274\242B\235\275\022\232`=\325\333\026\276\312\211%\275\205\237\224\274\177M\202\275\324\375\344\274\214\000e\274\267\225\320\274\246*\t>\031\245\275\274\255n,\274%\016\211\274\273\216\275=\305\306\035=\260T\271\273\014\261\023\274\374fW\275\313,`\275\374\002\302<\225\342A\275\241\316\252\274E\305\364=\274`\302<v\325j9\337N\213\274\000\263H\274\006J\t\275\013L\250:\023\001\250=\010\366\033\276\022=\'\275\333\240\343:Z\274>;\250\222*\275\021\023\345\273\336\247c<\341\211\234\274V\203\202\274\300\013\361;\202pg\275\331\n\026\275\342\315\017\274\243mN\275\226\031\r:w\365\354\274\002\223\237\274\244\226\034\275\177\rZ\275xs\023<\347\342e\275\361h\016>?\034\205\275\2057l\275|\251\360\273t8I\2752\t\250\275\310-;\275\222\030\340\275\023C&;r;\037\275\3675\005\275%\213\276<P\337:\275w\005\177<i\327Q\274\366\211\325<g\005I\275\304\334\225<[\210\200\275\323\375_=8\002\025<G\363\265\275{&\224<c\344\225=\022\273m\274\014\035j<\017\357\310=L\212\237<\322\261\211=\212g8\275\337\310m=5\342J\275\2575u=\355l\004\275\312V\233\2755_\211<\236*\244\275\311\013p<\330\307*\275\227\253\334\274\301y\252<\303\242\226\274b\014\235\275\272\340>\275\355v\316\274\277\313\331=\334\255\250\275\335\302\251<@1*;\013\004E\274\013\001\344<\267\"\032\275\017<\026=_\364\206<I\3116\275\314\315\365=\210\000\013\275o\261\341\274Y?\203\274\247C^=\305Am=\021\325\356;\200\325)\275\276\033\315<\310U\021>\356\375\225\273?M\201\2742\331\317\272N\037\\\274~P\304\274&\272\310\2749F\361=6\300\261\274\361)\242\274\342fP\274=\226\223\273\360\323\205\274II\206=\014\267\303\272sb\260\274\312x\371=\260W\223\274o\376t;\366\203\377<\373\336\231=\237\200\001\275\345\021\205<\347]z\274\n;\013\275\333\377\332<\310\303\270:\272\'\r\273C@\352<\005\246A\275\210\243O\275]rQ\273\177\222\016\275\337f\246\275\210\177\232\274\341YA\274Dv\337<P\035#<a\243\263\274\262\235\3109i\273f\275\220-\256<\320\341d\275\0345\244<o5%>1\'N\275$\246\264<D\302\326:\274Z\242\275\223\244\352\273\212\225L\274\272v\265\274\007F&\274[\340\023\275\013\033\216\275e\350,>\231\351*=\335\206\223\275v0(<K@h\275\216\217\207\274`d\252\274>\026\373<kEx\275\274u\301\2735\236,=y\001\r=f>2\275\355N\'\275^\0166=\023S\232<)\327\265\273\251\223\006\275\027\237A>\262\204\r<\326P\021\274E\256.=)\340\211\274\300-\037\275\233\266p>\243\365\343\274\362\377\001\275\326\200\317\274X\353I\274u\347\244\272S\366\003=\346\366\303\272c\245\267\273\277\214\260<9\333h9\253/|=\347\376\034\275\244b\000=^\342f\274\r(5\275\366\033\307\274\374^\302\274)}\313\275Mj\245<\022\366\243</\300\331;~m\203;\355\203\034\275\2177\004<\322p(\274\203]\203<\034\340\035>M\344~\275iE\305\274w|$\275\272n\245=\n\336\262\274\253\006\231\273v\353{<\316\320O\275M\246%\275A\375+\275)\240\231\274\254C\316\275\271\271K\275A\214&=\266\006\231;>_\223\274;\207(=\000\354\331=Mn\312;%\333\033\275\360O\022=T\261\355\273\r\302\234;\330\370\024\275\300Z\320<\223\005\302;\301\341e\275\252\301\311>\354\245\251\274.\357\363\274\266\315\361\274\206\222\243>4\014\t\275f\205\010\275\344\013Y\275\014\220B\274\205\213%>\324A\231\275\244b\270\273\312\370\250\275\315)e\275\333!\030;\211\214\311\274\224\017i>Pt\307\273]X\355<\211\301\227\274\021\355h\274\'\275\376=c\010\201\274\302[\014\274\302L/\275\201k\323\274r\211Z>\343O\220\274n\345\363\274mB\251\275\277\n\221;a\316\030\274@\002\274=K\367\030\275q\036\027;6\301\200\274\310\031w\274\020\263\300\275\000\376\252\274g\241\227=\221\2328=\033\371\224=-\021\320=\262\2036;\322|\207\274k@\327\274[h\313\274\200~U\275\206&\244\274\340TT\2754\275F\274\270\327Z\273dQ`>\2059\035\274\247\177\355\274\036O\005\274\373\240\276=8\005!\275=\025\254\274+\034\351\274\263\024\367\274\032f\373\274\326>\024\275\253%\271\275_\200\025\275\226\002\023\275\2225,\275\272m\r\275\233\025{=\317\356\272\273\002C\314<\236\036\006=\353I\010<d}+\275\217\355Z\274V\325e>\366_\323<\303\207\251\275\250\ts<2B\223<\2112\006=\315\305\370\274!!\r\275\246\264\321\274\266\253<=\301.\000\275\230\330\246\273n\302\227<`\261\270\270`\330\245:n5\275\275\005\242[\275\346\267\246\274\004\257\236\275\t\311\302=\352\377!<\334\317r=@[0\275!\275\317\274BPV\274\017f\010<`Nn=+q\005\275\303\010m\274\240~|\275\252m\026=\212\233\371\273\026mo\273\223\2663\275\331\035\350\274\276\365?\2755\311\034<\222!\245=t\006]\275\"kX\274k\235V=u\226\031\2719\327\313:h\300\032\275\223y{\275\361,g=[j\020\274\260\232\200\275_\351\326\274\242H\006\275H\375\305\273\003\365R\275L\360\305\274 \303\220=\315\346\001\275\343\201\324\275k\t\333\274\370!\002<\\$\351<\017h\320\274\375i\217\275\305P\235\275\007>\201=0\316\321;\311\370J\274\300e\264\274\357\2628=\330\010\255<\375\342D=\271\241\276<\242\036<\274\274\322\376\274\311\277\366<dLp=v\237Q<!ms=\200\231\226=\205\265\017=\250\0325>CMo<\203D[=w\260W=\3348\331\274z\315\247\275\340\025\t=\250\306\204<\217G\242=\366\237a\275\307\177\007=\271\363\200=-\325\016\276\n\222f\275\000\024r=R\234 =3\356\016\274\372\330\003=e\027k>\177\242\000\275i\252^=\030\321\200=\375\377\036=}\367y\275$\255>\275\322\273J=-\202\203\275\006\024\324=\201G\344=\374\035\'\275\221+\201\274p\342\232\275\323(\025\275k\276\231\275\244\212\323<\325V\367\274%\221p;\322\261B\275T\256\250=\373,\374\274g\031\361<\312\254d\275\336\nF>\326R\356<9\314\270\273\t\330\247<\020j\251<7\214\003\275\324\274w\275\030\214\367<W\254]\274\223\315R<\203\r\244\275\017\027>>\024\365\n8W\023\272\274\037K\232\275>\021\257=\337\017\267<S\273B\275\306X3\273\224g\355\274\313\236\247<Yg\227\275\372Du\274\337\205\324<\375\241@\275.r\177\275\262(_<\260L%=\251<\317\274\206?X\275\326\344,>\r\037\337<\002\360\r\275w\316\330<\374\214j\273\243\352\216\273{8\273\274\264\t\n\274p\205\361\274\352\013\344=r\221\024\275\341\254\330\275\316\177\267\274\325{\035\275:\013\240>M\034K\274\007\371`\275\"cS\275P\335\006\275\262\301x=\020]:\275\240\307\252\275G\257\245\275\301\321\266<F$h>]I\254\274U\277\257\273\375O\342\273/C\263\274\351q\326\275T\346r>6\357\263<\245+\241=\253E4\274\226\233\373<\242\375\013=\335\337\335</\t1>a\204O\273<#\006\275\235\334\325=\351<k=-0\273;|2\342<\010\264\305\275\000\341\007\275*\306\036\274\030\331\255\275VD\377=i\302\025\275@\257\017\275\325o\354=\253MR<c\035\030<j0O>8,\340\2755b`\275\036\022\020=\377\254\n=\213\001\352\2742\204\260\275b`&>G\236\023;\227S[=\200\232C\275\025\255D=~o\266\274\325\253\2019\305@\333\271I\212\276=\t\240\024=\245\327d>!Y\321\274\225\342\270\275\r\2631\275}~\242:9\352U<\321\203\032\2742\252\032\275iU&=/\316\374\273\323\021\270<Z\363\215\275n~\210<Jma\275\217\325\253=%\014n\275H\302\236\274\013\246\030\275io\211\273\356\307\001=JP\014\275\373\327\212=\350\372\356\274\263\237\032\275\036f\234=\033f\303=F\023\325=s\205b\275\002c\243\275c2\261\274\003L\022\275x&\231<Tv\313\271J\260\202\274\020R\006\275\250\246\353\274\033\205\013>\006\2647=:=\177=-zl<\263\343\201<w\341]=\377\016r\274\"\333\000\276\325\305\327;\360\361\3249\277s\n>\032Ml=\342\334\275\274Q\261\004<\224:\205=\260\366\247\275\271\0173\275\300\330\304\274B92=\242\316\270\274\271\307\230=\311(\335\275\202\303\355<\373\350\016=\371>\324\273w\343\221\275t\"\010\275\027\352\247\274;X\027\274\352\256\312\273\346[\026=\330\352\255=x\340o=\342\277\225\273J\237\010<_\252+\275c\206\264=N\341\"=\335gl=\266\034]<?S\261=\365\214y\272\020\n\375<si-<E\2440\275\220G\364\275\252@\232\275\225+\351<\036p4\274*\374\305\275cct<4N\300\275\177\350\347\275p\235\366<x\231\273\274PX\232\275H# \274\217V\236;\352\313\313\274l\334\022\275\245A\307<Q\316)<J$]\275!\251\203=*\351v\2742#\312=\367\252\375<1X\367;\374\206\233<\341\003L<\\\030\n\275\257\t\030\274\000\377\324<\002\212h=\273\332\320<\301\240\n>\277\032`\273\016\237\270;$\323\014\275\225\262{\274\243\237B\274KU\246\272\251w\024\275\207\355\247=\366\025\0179q\236\205\274\254E\203\275g\010\351\274\227\265\230<\345^\372\273\242\342\360\274bZq\275\222\230\274\272\354\265\301=\205w\232:\232\2304=6\344\005=\347\023\362<\342\n\246=W>%;\240\nr<\214x+\275\004\322\202\275\215\025U\274\336\317Q\274\0325J=MN\037=\275\0104;u\245\226>\000\270-\275xh\033\275\207E\236\275r\321\230=qv\200\275\315\335V<QZm\2749\220\236<\317i\265;4!\254<e\3261=\227\345\205<c\210\220\273\036(J\274Z\321\177\274\3123\263<\206\334\030\276\230mx<^\272\240\274\342\267\027=L\205s\274\256\343!\275\214\032z=\241^Y<\344\204\276=\351(\032\275\222\233A=\240\027\307\275\211TS\275b\225\222<lu\246=x\320i:\353\331\374<\256\006e;\353)\203;\251\306\311<C4_=5\262:=a3\206;\000r5\275%j\305;6\001\301\273\247j\246=\317?Q\275l\030\214\275\331\337\346<\340gM\275X\326\023\274\260PF=7\357A=J\265C=\304\010\223\275\212\265\204\275\371\277~=T\'Z=\211\t[\274%\364G\274\306\204\331\275\017\205\316=\227\354B=Q\357\216\275\370\347\335=a_\361\2745\252=<c\0228\275x\r\006=\374\252\205=\244>\301=m\352\276\275Y\331\225\273\270\200\016=\243\314\203=\262\362\270;1\225\001=\237|\026\274\n\245\r\275?)f=\217\347\345\272[i\226=6Y\343=\271(!<u\376\025=\332\326p\2741\242E\275\350\2029=l\230 \275\227\036\235=+\333\'<|\230\256=\340\030\n\274r;S\275\240\356B=[h\254=&y!<\243U\265=\330U\"\275>\331\205\274\360\205\310\274\301B\326\273\304\2747\275\023x\340\274\210\240\024\275\271\273\220\275\302\2721=e\206\227\275&\253\207=RiU\274M\207\031<\352\235a<\261\303\316<\rv\304\274He\002\2750\342\300=\272\274\367\272\352\374\022\274b\231\206\274\016Je\275\010qU\275{\344\304\274\365\010\001\275\376><<\260\004\333\273\241\264j\275\201\010\255<\000\t2\274\003BV\275\014X\220\275\357!!\274\223=G\275\316q\016\275\177 \210\273Eip:\273\352\227<\344\263\261\275vZ4\273Ym\017=\343\257>\275\332u\314\2751\333\214\273\0227~\274M\367\356<\325\304.\273V\246\236\270\273\316\214\275\374\032\253\273\251\363\326=z\210\227<@\257\021\275\233\375\267\274\257\225\213;\302_V\274\251\246j=B\275\203<-7\004=6\312\277\274\331C\326<$z\246\274L\377\350;\353z\301=\375\005^\275\032D\021<e\007\203\274\232\205\004\274\276\"&=\250\022\013=S\252w=q.\317\274\3523\022\275\275:\313<\251\377\264\273\351\223\346<Q?#\275\334d\330\273\266[1=/=p\275C\271\241\274\214\320n\274\246\274\303\273\257\363\025\275\341W\357<\374;Y\275\037H/\274\274\304t<2\303\010\276*\303t<\356*\213\275\010S\236;S\274\214\274v\017\233\273\265\337\331<\270\274\'\275\256\314\377\274\253\3029\275P\277\250\275\265M\007\275X\220\262\273\220\350[\274{\234\277\274\337\316\t\2750\014\004\273 t\210\275\206\353\010=\334i\201; F\010\275\310h\226<\304\301\201\275\371\036\360\273!@=\275\034\000\003\275*\371\337<\211\026\254\2717W\214\273\264$$\275\263\232v<\2117\335\274}\256Y\274\300\257\225\275\301\311\217\274!8I\275\\\367\r;yj\210\275\241m?=2\"?\275\241F\344<\023b\305=\227\026\346=\273\007\007\275\222%\203\2758Q5=\"F<\274\230\017\354\273P\274F=\033 \257<\310I\274<\353\242O\275[\304\'\273Qu@\275ID/\274}\3118\2759b:=B\020e=c\014\016\275w\262\332\275\257\257\300\274G\023\250\2741+\320<\236-\033=`^\240\275\356[\270\274T\337\006\275!\261\235\274\001\243%\2757\365a\275\225\234\201\274\235\232\243\274d#\210=\231\211\271\274\226\352\000\275\315T\037\275F\256\021<\031\201l=\252\204\260\274\210\3323\275\352\262\272<\221\306c;\301\001\264\275\250\347\367:-\202\202:\245\006v\274J\353(<EE\t\274\265]\264\274K\366u\275U\304f=\346N\020\274\265(k\275\215\234\202=\023.\035=8\265\226\275x\322\217=\370\037\317\274&\236\257<.0\302;\250Y\202=<\334\331:\231M\017=\346\364\201\274\214\362\020=$\327\331\273/\3037=\315\331\361<F\004\"\275\027\247m;\006\362&\274\022\204g=!p&=\255\027\024\275\364[j\274r\361\220\274\221\212\355=\341\222\215\274\274\223y\273\276\244\231\2733\267$\2754S\032=\202C8\275\274c\031\276\321\024\004\275ej)\274\2716\352=\331j\017=\313xK=\365\217\243\275}N9>\rj\225<qf\356\274E\260l=j\330(=\332\256\035\275\311!9=\321\026\r;\305#\227\274\252\357i\274\364)Z<\347\024.=\216;N=\376=\010\274,\334\266;\201\343U\275E\234b=%\214\014\275\014\205S\275\205\025\216<\336\025{\274\262\277\212<\365)\272=\247y+\275\303\350@\273\301_\261\274\026 \357<\374Z\257\275\r\365{=\215\020.=\316U8<\250\201\227\274\213\246\034=b\322\236=+V\263<\307\346\307<\250\003\001<\2370\240\273\013|\201\274V\246\363\2754V\325=\n\206\214\274\231ov\2746\344\301\273\260\316\215\275\331\006\203\275\343\030\003\275\310g\265\275\311Cq\275\201\322\303;8F3<\207\n\333=~\217\317\273\276f\266=\377F\262\274\236\031*>\0073\370\274c?-=\276\217\231;\222\333\266\275\201{k\275\260\210\202\275\351j9\275\353aN<8\234\010\275\204\250w=\342d7=1\n\215\274-5\t>V\265\326\274Lm\325;\315H\r\275\014\031\230\274\265w\333\274\nTr<\254@\216\274Q\305\324;\362\252\270\274<\027Z\2756Q\225>N\022\225\275L`$\275\\\355\004\275\275\005w\274\203+\310=\322\246\024\274\231\363\363\274\361\006\016\275\204\325\202=\261\033\023\275\364!T=\315|\311<%G\356\275\273\306Q\2751 @<\220\223;=\236\007-=\350\252r\275j\216B=\203\3212\275\r\2336\275\225y\223\274=\224M=\r\316p\275#\257\003=\013\225\337=\177\345\366\274\3534\350\273\222\207\253\274\037\234\020\275\327\341\307\273 \344\205\2738k\201\275\320\014\224\274\316\220B\275?B\273\274\225y\201=\034\302[\272\321\210\261\275\331Bl\275#\211\244\2731\000\250\274|\322\252\275x\233\360\274\224A\270\274S\315\n\275~o\374=\252^2\275\314A\355\274\001\320\206=\031;\206\275\251\001\312=#\247i=\361+L<\311\343\232<\231@\254<N\010T\275\"\331\311<\375\301\303=\361\350b\274\354.q\274\205Jx=\247\177\235\275\263DZ\275\370\376\206\274\304\273\013:&\262\273\2746:\257\275\251\321j\274\020\252\026<(\372\223\275{D\253=d\272\037=\024\\\336=\255\032\265\273\303 \373\274\004\350\t;.\001\002>P\010\201\274W\345~\273>\261\374\273.\177\337\275\332\n\336<\256\177\254=\020\025\256\275\337\321\r\275\3373\324\274\\\034\204\275\214\364\321<\317\344\020\275\301\374\271=v\025\241<\363b\252<>%\241<y\347\010={A\324\274i\301\221\275\374\356\322\274\371\223\307\274\254\203M\274N\263\277\275\272[\251\274pA\277\274\215|\241\272:\210E\275\321\3356\273\006\244_\275\t[\204\275\277/D\273\306\2304\273\205#\251<\257\024(<g\0310\275\302\303q\274\300#L\274=\270\253\275\372\n\263\275\272P\246\275o\234\026<\3360\316\274\243\024\035\275\303jQ\274\360&\245\274^\000\267\275\247J|;e\217(\275}\311P\275J^\353<\010M\\\275mv0;%\016\250=,\343\366\272A\352\234=>\212\272\274k\242\373\274\333;\265<\215!\211\274\246\274\304<%\371\367\273\226\211F\275\n\324q=\021k\317\274\206J6\2753\341\271\274\235\020\237=\374\336\022\275\326A^=\204\200\204\274M\307\221\275s\030\272\273o\377\321\274/\311\230\274$\333\227<\2468M\274\272 \025\275\242?\304=\016\337b\275AF\t\275\262\246\206\274\"\252\365<\311\361\245=\327n\260\274\210u\337<<J\203\275C\247O\275\250P@\274u\2351=\357[>>\306\257\023\275\254y\303=\233\000\231\275b\t#=JnK<t#\245\275ee\331<\202\037\207\275\236\323\315;\240C\023\275m@7\275\232-\034\273C&)=:p\225;_f\243\275\376\342\3119\217\004~\275\200P\362\274\264R2=\232\003\305\274\272\230\t\2756\007!\275V,\030<|\354\005=&\217T\275)\221\223=\n\364\177=\023F\036\276\257<v=\307\367\270<\266\242*\275}\333\270\274\230\225\037\275\257\363\017=\024\244C\273\342J\035=\332\317\217\273xZp<!K\344\274Rd\206\275\0020\010\275\207\241~\275G\"\027=\035\2109\274+!z\274Aq_\274Vl\230\274\000:>=\006po=a\373\230\274\205\004u\275\205\276~\275c\341\364:}v\006\275\207\375W=rb]<\214\262\205;)j\247\275V\334\335<\310i\314\274\031\363\232\275\0212\261\275\307r$\275\326k\272\274\360%\237\275TP\207\275\317\371\210\272\254\005\231\273krY\275\013\303\014>D\207\345;r\031^<%\252-=\317^s\274\305]P\275\025P\032\275s\227S\273\263\003\270\274\177\361\022=.\330\243\275>,\301=\022{[\273\371$\305\274\375\346>\274\300\345|\275\000\310,\275E\331\351:\214\320\356\273\200\304\225\275Qn\321==Gw\275\272P-=\247\270\317=y\nG\275\376|\363\274\261pj=b\3375<+\t\241=\255\271\371\273\217\373\355=\240\241s=\t\325\253<;g\222<\325\204;=U)\206=\027\016\255<\202,\344<p\272B\274V\245\265;\273#6=\177Px\273w?\027;\351\366K=j\357\237=\232 \000\275\340\325-;\277\366\351\275=\317\260\274\304\301\205=1\322Y\275H?\336\274\024\254\204=\305\217\377\274Y\336\032=\t\266\260=Us\271\274}gS<\277\017,<W\235\232\274\025\240l=\177\362\272\272@\222m<\0100\034\274\230\212#\275\231\254\226=\003\006\022=\024\265\021\2753\240]=w\320\356\274q\352\240\275t\034\305<\004N\344<\035.M\274\341\250z\275p\375\213\2750\327M=\2545P\275\227\035}=\335\376\235\274zT\361\274k\001\263\274w\375\200\274}\257\003\275DN\033=\264\037\026\275?~>=N\237\014=\263&\034\275I\321h>\177v\022<C\323\205\274\203\326\007\2752\353\020\276\341\326:=V\313\251\274\252\242\200\274\201\340\212\274\265\310\251\275\203j\247\272\266\005\010\2759a\321=\270 `=\331\373U\275\245j}<\310\274g=r\215\357\274\020X\031\275\025\254\225\274\246\253\215\275u\365\247\275\3073\005\275\277\350\002=\334\032\222\275I\232H=d3\267\275\032QQ<\022\313\322\273\303\315\022=\373\240~=~\333/=m\n$\274+\221\261\272\362\353B=`-\237\274\260b\203\274\033\331`\275\031\240m=\246\032\236;\223\317\025>\177P\346\274\341\216\'\275\247\254 =\202\030\222\275\354\262\315\275dx\010\275\344\373\'\274\300\217F\275,\0211>}S\036\274\353\014\241=\316\377\265\274\327\343\030\275\320)\224=\225\001\236\274\330S\225=\005o\200\275\320\006\022\275H\031\231<\264\355\307\274\016}\203= L\033\275so[\275_j\273=\241\322\306\274\2745\r\275\356\240_=\005\353\341<5[q\275\\\364$>g\026\307\271\332\373\333\272\223_V\275\360@J\273\267\317+\274\034\211\205\275\370L\003\275~\037S\272\343c\224\275\242_K\275-\216d=\376\233->\350k\374\274\306\361\004\276#\203\340=\023\361)\275\244\031\353=T\307B>\275\265\025\275\265\322\004\276\374I\231\275 \234/\273.\350i\275F{}:`\016\233\275`n\300\273i\"\003\275^\233\021\274_\327m\275f\022\330<\317O$\2759n\334=\006\226\240\275\004|\260=c\306I\275\203\366\257=\2665\310=\366\276^=-\345\t>v\322\334<\341\317%\275#*\377=\222N\376;\274}-=[\360\315\2735\256C\274\354\305\233<5\304\026\274\310}\204<\316\227\305\274I\035\004<\177\035\220=\246\353\346\274\211\357,=\325@\007<\242\300m\275Oa\007\275\214q\300\275\017^ >\314_h<9\3663\275J\370N\275\256:\274\274[\002\267\274\025\034\227\274\372\"b\275\330#\312=\231\303h\275\305\215\251=\0350*\275[K\026\275z\200\210<}\345\206\275\231\351\024=\326V\334;\363\231\214=\254\277\000\275\021\255\031\275\237JM\275\034F\316<\200\0022\275\366\004!=G2\037;BS\016\275\313a\251<\273x\323\274\260\304\243\275\004jb:\2437$\275\273\334\303\274\210\036\307=\314P\211\2757\270\316\275\347\302\220<C!F\275A{\244\274(\000\200;b$p=\344\233g\275\356\271\327=\274>D\275\034\340\t\275%\341\257=V\275\035\275\251\225\220\275\262(|<\016\223\177\275\224\350U<\330\224h=\336/\231<tup\275\314;\266\274\216\355\272<\212=\320<\237y.\275\274EY=\330\3249\275\216\316 \275\315,\013\275\355\220f\275v\211\327\274\320c\213\275dU\026\274@w\266\273\235\334\010;t\303\356\274\203\373\253=\304\253\342<\377@\223\274\371\010O\275\022o\347\274\205\374\023\275\317\037\013>L_\250\275\233\224\205\275\327\3728;\371\214s\275m\242\263\273)yi\275x!\216\2728\233\302\274\262:?\275\300ow\274\311\202\347=td\370\272\272n\312\273\324Pt<\235\342h=\002\317\360:\274\334g\275l\207+>Z%<\275\264\024\177\274\356\3100\275\242}\222\275\222\316O<_J\307<P#B\275\251\023\304\274\025\337\032\275\313n\227;\2453\003=\315\367\250=\256F\317\272c\224\227=\247{\022=\202D)\275RC\301=YM3\275\373\242\200<\337\024\023\2758\327\372<>)\026\275\025\344\262\275\261<\004>uT\277;:\325\237<b\202\232\273\301\372&<=dK\275\330^0\275\217D1\275\000\341I>\3262y\275\262\301\265\275\327\371\365\274,G\202\275bG\240\274\352\252V\275\262X\210\275D\222-<\376`\320\273\272\351F\275*\213\267\275\227\257\357\274]$\024\275?\351\312\273\354\346\314\274\344\234T\274\0367\"\274\351\265I=Z\240\323\273\256}\204;\217\370t\274\377S\211\275\361&r\275\232)\220\273j\261\332\273\223\204\200=\017,q\274\211F\024=\037>j<\274\3548\275\207*\000\273\205!\361<\253F\350\274\217\200[=\022\227\354\275Y\203\261\275c\276\326\273\3549*\275E\013\034=X\302f\275\333Q\021\274F\272\323<<3\254=-\020\205\274\372q\210<\301\300\004=\2201\356;\013\351x=\030\032\223=\023\347\261\274\365\254t\275<\371\247\275\277r\235\274\221\247Z=\003>\007\274\303\352T<,u\017>\345\242\030=\326\302G\274W\324\374\274\020T\004\275\036\230~\274\246J\275\273\035\245)>V\023\210\275v\220\014\275\327YC=\201$c\275]\367\367\274\n\221\212<lV$\274 \377\327<tv~=\"Jl<\026\372\317\2759\377\201=\030\013>=\263-J\275r\n\271\272\327Y\252\274Y3\264=\341\327\017\275\304\307\366\274\023\217M<,F\003\273v\343\207=\010\226@\275\274\325#\275\240?\333<,\275\241\275f\350\006\276\3776\275;D\002m\272\006i5;\336\275\245=\206\007/=L\r=\275\244\002\213\274\203\236\221\275\026\271)>\262\323H=<\371\257\273\233\342\025<\226\320\306<.\377F\272\225\351\027\275\255\317\033\275\244\250\273\274X49\275\331\276\006\275\343m}\275\243\033^\275\370lB=\017\236\230\274:\323\221<\210X0\274!\371c\275\364\002y\2743Ao\275<\260\200=oIW\274MJ\217\274%\225^=\273\352\203\275\224\177\266=\376\365\032=.`\353=\341\222\005\274\371!n\274\206/\244\273C\000\215\275B\321O\275Rj_=\'!\032\275(\010\374;\264\264\264\274zd\240\275d\210C<\242\025\234<0\356\204\275\031\261,\274\310\017\261\274s\004\323=2\215U=\242\3621<\334\200\021\273\315\376-=\200\227\310;\277\265\251\275b\225\371;\352W\310\273.\016\"\275\367\263\"=\214\245\217\275\237\256\272\270\223\245\211=\334\177n<\266\244\367\274D\274\314\274?s\311\274\206\2102=\247\210V\2740\320\216<\342Ia=7\003\007\275\372\276\253=\204<\000\275\025p\202\274\003\306+\275\346\261\300\275\t\032%\271\307\027\004>OM5<\026\2122>\244\212\336\274l\033\236\2752\307\306\275\036\365k=\364\031\230\273\341I$=Q\257\232<J\356R=\254S~=\000?\323\274L&\2568\003\210}\274;\006#\275\2103\3119\304l\244\275\2579H=<\235/\275^t8\275\361{]\274\301eI\275v\327\263\275\226E\200=\312\232Q\273#\032\007=?\340B<\020\353\032<f\216w<\372G(<\020\266\215\274\275\2147<\265N\327\275\030m\270=}\276<\275\226\007\265\274\255@\227\274\204,P\275\274\273\227\275\305\353\365\274<\256L={\361<\275\006\312\217<\215C\n=\227\260\277=\316\334B=\020\303\356=B1\031\275\177\377\t=\306\352;\2724\231\317\274\006\3120\275\031W\261\274\375Am\275?\\\231<\357`\326=\253\2053=\245\300\366\274]4\272=\3552\214\274\263\302#=\005\315\352<\365\016\337\274\312S\371\274\277\004\245\2738\210\000;\334\316\2149|s\207\275\234\275t\275\212\351\000\275\311\205\'\275T\244\270<\311\314?\272\234\204<\275u:\212\275*.\026>]\004\211=\335\016\265\274\367\"\027\275\251\251\226\274\212<\244<0\375\370\273e\026E\275\2168\214\274\3404\307<\203i\005\275\027\211\232=\323OO\275\362\245n=\256\306\235\274\335\207\035\275A\337e\275\3438\232:K\027L\274\214-\242<~\002P=\221R\266\274\215CD\275,\210\363<\377)\354\274\020!3\274\337B,\274\352\0064=\334\212\036\273\000\203\003=\306\255\213\274s\335\224;\275\341\234\274\360x$\275~\253/\275\221\204B\275a\204\255<\035\204\266\274F\014S<dk\200\275f\252\372\274<b\230\273VD%<[=\200<\007\233\270\274\253\007,\275\247R\246;a\327\261<\227\035\244=\257QT\275\202t\211<BbL\275\324|\343<\213\264\271<\215{\351\273rd\234\274Xd\034\275p\2566=\311\214\301\2740\302b\274E\327\033=\255\233T\275\376\3047\274}Yw\273{\235g<>\001\266\274\340-(\275\367|\265=\177\271\202\275\227\350\036>TID<K\022\211\2751\250\326\274+\311\330\274~\3055\275?\235q\275\223\235\260<\231\355.\274\314Z\305=h1==u\361P\275\370\020q\275r6\365\274\264XC\274\320\004\230\275\357\242\313<\303n\241\275\310X_=\243\257\030=\307\004\236<\261@><\300-H\275jF\270<O\270\352\2740\017~\275\'\270p=\034\370+\274\257\351=>\243N\030\275L\233\223\275\360?d\275\347\241!\275w\"c;\031\021\262:\033N\201=\025\372\002\274b\2200\275\001c\236\274f\263\210\275P\005y\275\201\356\031\2754\235@=9_\207=\002\267\363\274\260\360O=\017\212\021\275aJC=*$\372<H\270P\2757\216\205=2x(;\210\225Y<\022\323\327=\322Q.=\037{%\275Y\264\226\275o\r\342==\203\232\274\033\262\237=\312\000\360\274\013\353\233=2\024\324\273\261E;>\270\266e\275\241\367J<\345k\n=N\267J<\276N\027=v\240\004<\000\034\342\274Z\027*\275Fk!\2756P\215\275\032r?\275\2543\256<\233b\025\275\214\313\256=\333f-\275\340\007X<HK\300\275\200\346D<\307u\037\2743j\345<\310\363!\275\325J\207=\310\307\344\274\271j\212\274\306\336\001=^\027(=\302H\001=\021\317\030\274\267\016\177\274\250\365\225<\203\354\t\274\327\207\243\275\271\273\031<S:\255\275O\303\304\274\377\200\022>}\277\347=\205\220Y\275\313\025%\275\006\343U=\237\000\222>\247\246S=s\r`=\345\177T\275\'\273\017\275\016\t\371\275\2176\366\273\371\215\034\275\272\027\252\274\270\215\031>\232\236\231\275D\352\025>2]\231\274z\307\361\273g\270\213\275\324\207\222\274\030,O<S\343v=\204e\305\275\013\253\213=\344\025\342\274\211\033\311<\216*\317<\210y\231<\253\314\230\274\207\321\350<\0179\257\274I\354u\275\201\266\250<\246C\315\274\324\"\331\274\343\351\217\274\241|\232=\343W\274=a\207s=\0177\373\275\021\267V=\016\261\201\275\202,H>\377\264\350>\307\225h<\306J\254\275iaV=\303\260\301\274,\3456\275\362\024\267\275\254\246\304;\300\312\302\274{\206\212<|\200>\275\372\000\r\275z\373\224\275\240\241\320=\23420\275J\\i;\345;\307\274\311\010W\275\233r\205=~\275\254<[\225\272<\327\256\006\274(\202\344\272%\310\233\275\222\223\200\270B\377g<\313\226\024\273p.z=\270X\177\274E\3742\275\034\007\252\274\264\001J=\034W\375\274A\030\232<\254\247\020=\316\260\313<\013\257B<8\307\210\275\030\201\334\274,\276\254\275oX\205\274!\234\214>b\266\005=7\r\372\273l\256\224\275\210\270\234\2753.\300<*\004\265<\236\226:=\207\323\016\276\2171\341\274\025:$\274\241\262\005\275\303\001\354\274\203]B\275\020\250\254\274\326\226\262\275\244~\345;\220\300\341=\354E\233=K)\305<R\336j\275\235\"w=W\366Z\275\241v\264<\0346\302\274\360s\201=g\311\335<S1\314;AT\345<\244\224\257\274\314a\013<\360\371\261\2730\234\005=\267Z\234<N\230\271;;\353\003>\304\363\227\275\325Q\250=\206\213\217\274.\277\247=y\027\\\275D\001[=\035\347\235=\332q\245=\350\366\'\274n\213\363\274&\264\t=\322i~<0\2522\274\035\027n\275\257\024\331</\226\237\275\317<\n9\3412\272=W\205\373<\305|\211\273\213\301Q\275\300\276\213\274o\301s\275.{\207=\351\231\217\275o\025\330\2740\266\321\275\204\343\374<\356\247#\274\300\365\353;\214\037r=\026\263{\275m\273P=A\265L=\222\307G=\3570$=\203\252X=\274\220\334\275\300E\261\274\203\030f\275a\264\'\275\256\320\004\275\024fo\275\344,\030=\2660P\275Go\212\274\356\275\353<\207\367\n=\257z\370\274\337\212Y<\202l\250\274\233H\222=J\370\307:\007\257\314\274\303\016\006=\013\277\024\275\354}.\275\010\304\270\274\243\277\274=C\354\275\2741\336 >\177\274r=\0266\022=\240\326\033\274\344\007\345<Cc\034\275\035\001\014\276\232\241\200\274\230!\036\273\235A\010=1\332>=\251\335j=\025W\017\275\356YD;}\303{=w^,=\266\337Z=N$\362<\205\241p\274\320nG\274\264\253\272\275\303\023\314\274\224\246h\275\253t\276<M\341\376=6\032\252=*\005\277=,\343\277\275*qN=\3271\017\274e\321\337\275\004\212\r\275K>\037\276I\373\302;\273\303\233\275V\344\302\275\330\032\224=\266\312\202\275\177\001\214\275\204\345\203<\360\231S=\254\306>\275*\3575=V\177\217\274ad5>\232\303?=U\246\204\275@\306\312;\361J`:h\3647\275\365\241$=e\303\214<\360\242V\275\255X\243<&0W\273\036\025P>\000\026\355<F\2664>]\006\356\272}J\026=o\342\372\274\n\300\002\275gE\000\275XN\343=\353\333\275=\030\307O\275\227\003\303=K1(=\213\017\001\271\014\235\217\274K\247p\275\324dI\275/\230\317=\230\355v\274@\230\000>\265\223\033>b\0242>V\340\315\2754\177\230=\262U\251\273\213k\302<%\331\017\276\254\031\007\276B\315\034=x\230{9 \361\005\275C\251\326=\307\010\254<\021\303\265\273k\366\266\2732L\271\275\216\214\t>\344X,=\321\032\376=Ms\204\273\254o\004=\324\361t<\235\275\230=\014\370+\275\226\001e=C<\377\273\320\240r\275c\303\036<\337\305}=!\214\362;o\005\227=\0172<\275.*.\274tB\020>Y\310\326\275\020d\341\275T\261\311<\374\256\216<\377\275\335\274\005_\220=\264\216\t\274\220TY;N\330\374=\207\363 ;\024\000b\274\340Jv<x[I\275z\217\322=\306R\251\275[)y\275\272|$=)\030Y\274\000\303\353\274VH\r\275\341\006~\275\002U\212\275}\275\017=\264\342:\275\232\360\214\274w;\005> \356\317=\273\332R=\010-\312\275e\232\'>\243\207,\275\005+\005=\020\007G=b\177I>\247\331\t\274u\204\216\275\354\263\024=,\016\252=2\026l\274\013\362\035\275\375+r\275\336\254\235\2750^\304\273\276u\032=\244\310\017\276x\254\032\275\243\215T\274\375\336\240;\241\311\266<n\372\r\275\025\202(=\031\017\230=}H\006=I\272\024\274\247\313\255;x\237d=Pg\233<\177,\270<\351G\030=\236\270\255=\230\242\301>\223u\\\274<\230\270;\327\343#<\325\310I\2750\270\344\275\261\2739<\203\246\243\275\004:V\275\030,\263;\322\227s\272\231\202\246\275q\'\034\274Lf\030\275?\326\251\275B\252E\275%\t\031=\350\036 \275\000\272\014>\252\374\034\275G~\347\274\232z\n=6\226N\275\203\247D<\342\323\220=_\215\233\275\352\326J\275T\250c\275\230\005\217;\342\034q\273[c\035=a%\034\275\327\326@=\006\204\234=\326\374S\275Hs\235=\005X!\274Xi\361\273\377p\317=\205\342&\275\201\216\230\275\020\005\316\274N?\250\274\007\217[\274J\200\323\274\251\266\234\274\313\336;\274\212Z.=5a\214=\340\t!<L|d\275Y\312\204\275\004x\200=\264\240\026\275\272\253\370;\354\246\360\274\020;\206\275V\240\251<\353\034B=\270\000\346\275\214R\223\275\034(\272=G\347\177\274\273\316\250=\313\004z;\030\227\262\275\364\234\251\273\343bX\275\315\335\251;C\357\013\275v\206\3649\230\242?=yN\241=M\221\310\274A$7\275;\000I\274\351.t=\033,\244\273Y\235[\273\272\301\365<v\230\267<\333 P\274\014\335\006=f\317*>\322\354V\274\313\360\224<\013\345\354<wKe\274\201\021\302<\337\2127=\314~\271\274t\324\257\273\202\234l\275\321\003\213\275l\264\234;\023\214\342=f\'\206\275\335:v\274\346>\265\274\241q\245\275\200\031\177;\357\202y\275\311B\240\275\326\302\177<\317eN\274\264\247A\275S+\377\273\251g\371;\371y\260\273X\230N>s>:=\246\362\277<\313\272\355=\014\360\374\272\354\350=\275\247L\254\275\251F+\275\3036H<\341\240\226\275:\244\004\274\256\257\247<s88=\275\260\000<\251\235\243\273\241\277N\275\n\261\205\273\364\243\246>\264\213\263\275\234\264\243\275\030\267\340\274~\345\264\274?p\017<\312D\343\273\317\2244\275\266\226)\274\263\254h\273\223\326\204=DPC\274\330\226\316<\343b8=\360\355\320<x\2258>(\025\361<c\227\342;\000o\t\275\230\317\375\274\310\311t;\006\273\262<\357+\235\273&\2348\274E\345\211<\272\253O\275\360\303\036\274\304P*\274E+\362\274\025\202\023=\031l*\274^\025\246=#\205Q=\366=$<\232\322\020\274\001\177\226\275\326\212\311>\0068\266\274\024b\002\276\234qk\275\350K8\275\217\342\2309Z64\275\260\311\317\274\374&\017\274\270\247\320\274\002\230\216\275\233\250x\274\241g\017\274\217\361\333\270\377\332\352\273\346\\\230=)^\226=\277dZ<\036\351\325\274\3147\214<[+\206\275\300\312\032\275\271\242\366\273\2659\210=\335,\237\275\245\004.\273w\327\312<0\333:\275\362x\261\273WV\225\275\037PP\274II\351\274\352\202O\273\356a3\275Q\352\265\274,\025\307\274\321\211r\273\234\334\252=\217\321\273<\326\272;\274J\254\314\275}\300\224\275\373M\276<\231b\222=\336=\350\273\245\215\230=\274\256\022\275\261\"7<\243\314W<\232\267.>\231\036u\275\266\246Q;\240\0133\273gG.\274>\353\210=\331\347\005\275P\020q\275U\354^\274\033\251e\275\255\365\203:\316\'\004=\013\032]\274M\230u>\325O\345<L\177\231=\201\021L;g!&<\322\356\330\275\217\366\177;!\315@\275th\215<\nT\034\274\376W\237;\\\337\326\275\214\373\227\274))!= \302\332<S\271\246<\002\3723\274\264US\275r\344\221\274\201W\240\274-L}<fW\010<@\323J\2758\247~\275K>\336;=,9\274\027\315\2679o\330{\275vu\255<\334j\366\274\304\321\177=\027\025\335\2745\213n\275|\370-=<\235B=]I\033\275\224\330\177\274cUQ\275\232\376*\273&!Y\275\2700<;\363E\233\275\206\236\267\274Z\347\212\274/\240\340=\272\315\231\275\230\326q\275\t\230\032\275\332Q\006\275\264X\342\275\333\201\235\274\2712\n\274\266\322\213\275-D\014\273\276\334\262\274\022\213\020\274\312;\245\274>\357\202\274&\307\305\274s\367\375\274&e@=\325w\200<\374F\370\272&;\333<\253\177\010\2751\023\237\274v+0=\313\203\\\275)\357a=-\253\334<tq\272<D\366\314;^>o<S\225A=s\337\360\273\036\010B\275\207\236\031\275\337\320\236\274<\223\177=\335m\210\275n\302\030>K\001R\275\r\276\234;;$#=\263\t]\275r\r\217\273\033\024\031<k\341\221<\177\352w=\246\233\300<\377\344\n<u\305\222>\206+\221\274\016\227\363\274\224\016{\273M\013c\275\024\355\370<\247\376\350\273M*\376;\254[\276\273z\267\313<{\347\024>\n\363\217=\303ow\275b\246\233=\357\256\021\274Z\035\271=\026(\212=\341C\266<\033\220\223\273u\327\216\274ID\311\275\300\223!=\342[0:%!\215\272\245\312\014\275L\021;=\177\320\260\274e\024\342\274\212d\023=\332\277\274\274\031r\037<\315x?\275-\371\t\274\374\3123<\355\253\r\274\353lg\275\340\336\364=\320\366n=\307\260\360\275\002\333\230:x\373\255\274I:\224\275e\231i\274\366\204X\275\361\031.\273Pf\302;\340:\265<\025\317x\274\262\256\004\274\342\304W<\205X/\275\363\341\314\274\020\212\215<E\327\221\275\326-\223\274\216\211\261\274\230\204\263\272\325\021\006?\375.M=\366b\010\274i\232\326\274\263\r,\275\251\311\007<.`\264\273+\324N\274\367\031;<)\017\307\274\224\311\030\275\372g\232\275\273-\254\275;\317\214:%\267\024\275+\221\324\274\372g!\275\264=\331=\314c1\275\363\036\020=i\365\001\275\356\276\033\275*\006\256<\375j\231=Y\264\217\275:Q\302<\371\203&\275\314\265\023\274\235\310\t>\207\024\001\275\257\036\244\2732>\326\273v\244\256\275\300ON=\331\276\355\274\231\030p\275a</\274\223\315\232\275T\341\314\275\224\266\244\274J\274\237\275p\017\000\275\243^_:\3710\350<\273\032Z\275\242S\255\275U\2648>\361I\216\275\367\352\333\2732\207@\275\010\202\n>B_\362\273\205\260\204=V\337\034\2756\376#\275jJ\032\275\257mD=\362Q\036=\256\251\006\274\345\303\333\274\033\363Y\275\215\026>=6\260\205\274R\377\016=\001\342\014\275L\223\246\274q\206\023=\362\305Y=\3535$\2755\202\327\274\243\365\264\275\212\335T\275jq\032\275\021P\234\274\315^\206;|\"\025<\331X\226\274\360\303\204\275a\020:=l\016\324=\303\r\221\274\000\366\2369\005w\013=}x\\\274\000\357\205\275g\245\360\274 \217\226\271\332\236<\2756\200\226\275\210\323\356\274\030\375|\275\341\257\221\275)\260\025\275v\304Y\275U<2\275\202\336\201\275\344\031\t\275^{Y\274\007\202v\275\257C\016\275\201~\206=\263\267\263\274\224#\213\275\221\227)\274);j<\323\243\235\273\261y\264\273\3419e\275\257x\360=\233\374\036\275\266\215@\273e\200\212=H\326c\275\226\263\335<\323\273+\275\264\004\272\274\267Y0\273H\221H\274\031+\234\274N\004\240\275\201Q\257= \300\201\274[#\010;\027\206p=\273\365^\275\"\312\000\275\224yK\274\263\356\235;\374\336<\275\360F\005\275\032\034a\273In\327\2744\247>=>\265\317\274\343le\272\352\211C>X(\253\274\366\211\326<\323\020\017<\357\345\341=\215\263s\2757r\323\274\354\322\016\275t)C\275\266\033\177;A\314\374\271ho\270\275\177\246\014\275\"\311q\275\304Y\377\274\233\274\334=\004a\014\275\354\365\326\274\2044\305\274\234M\201<\366\"\227>\201\n\335\275\351\317W\275\326\031\213\274\351S\207\275F\225!\275\317 \225\274\35370<\302\036\331;\265z\317<\027\027\001>0\360\367\274\200{\323\274pOv=\376k\256\273Y\r9=\005\321\213<\215\232x\275\252\274@\275j\247\324<j\n\366=\217\241\233\275\t{\000\275\376\243\361>\366 \n\275d\376\210<\243_{<{\340_;?#\301;\325\274j=\3279Q\275\373e-=\253\332\264\275z8\037\275\302A~;\362\215F\274\266\234\346<\327\377\343\274\335\r\227;\326\3539<\340ZG=\034\223d\274F\230Y\275\330\202\031?\246\200L\274\365q\340\274\374a\375<)\r|\275m\003E\275\\q\303\274\367\250\227=\004N\240<\300:\022>\233\022\237\274\020,;\275\370\264H\274\274hB\274\270\217\212=\220{\021\274=\326\361<\205\363\030=\r?\376\274\255D\311<uk\030\274\323\207~\271\r\225+\274\350Ar\275Y\242W\275\007\357\224\275\306N\021=\373\001\022\275\017R\243\275\3346\"\272\237K\037=\324\305\376\274^f\311\272\301Q\204\275`\276\"\275\201\271\n=\211\3740<\365e\233\273\3658\231\274\266n\201\274hw\370\274m\217\267<6\334#\275\263\376\235\274\373H7=\000\350\264:I\032\200\275\307\016u\275\311\340\340\274\274\016\246\274\232\234a:\252\260\000=\013vo\275\021\020\001\273w*\333\274\005\320Y;\224\3718\275\201\320\002\274@k\274\274\312\263d\2751\037\200\273U\352\307\274EN)<\330%\313<\"j\023\275[3;\275\312\342I\275D#\251<\315\001`=\357\332[=u\362\231<U\272\221\275\177\013\207=\256!J\275X\206N=\027\367\264;\241]\247\275\272q3=W\335!\274\303E\013=f\254\271<uA\202\274 \026\210=\350\203!\275\206\241\250\274\036\335\005=\316\270P\275\360\001(\275\355\214\204:6n\362\274\216\037\242\275\366,\026\275\010dp\274&\316\254=U\205\307\274\337ad\2750R\256\274+\201e\275\334p\221\274(\340\013\275e\355s\275!\304\265\275#\023\001\275\232Z\307;X\212\016=\211\206V>\023\362\004\275\301\236\376<\232L\252\275\217\016\253;\020\262\032\273}x\340;\303El\273\376\r\016\275\301!\221<\257\343\351\274Dg\225\273\211\020\315\274\217R\306=\235\302\254\275\310\323\013>\013\375\030=v\\\255<\035\351@=k\217\017<Y\342t\274\026\252\226\275F\255q\275\362S@<\"\355\364<\210\373\244<\346\n \275\212\002K=\360x\222\275\244\000]=\251.`<\351\236J\275\307_I\275\237=\262\275c%%\275\350V6\275\177\033#>C\032:>\257\202\032\275K\225J=\221\007Y<*\324\203\275/\230\344:\277X\310\275\221k\320\274I|\261\274\226a\257=\346\006!\275\017\037\257\275\025\024+\275\326\267\226\2732N\006\275\r\023\026<<?=\275\273k\212\273e!\022>\325\301\222\274\230\020\223\275\354bD<\200\005\243\274\360\304\206\275\0269V:\200Yw\275KE*\274\241\023\006\275\304e\276<\327P_\275\260\225#<\307\354\232\275U \035\275\272\037\210\273\244-\\;\3759><\227\200\254\274\264\311\215<\000i\340;\356\244?\274\r\221N\275pj\n\274\202\016$<\205,\"\275\020T\346\274#3\326\274H\322\211\275\016\004\322<\264K\247=\253%\324=)C\211\274D2\272\274rU\214\275\212\337\217\273\257\325\355\274S\034J\275\036?\r>xPf\275\357{\250\274\000j|=\003\000\345\274\313\304\n=\"\0064<\214)P=\003gS\274\200\254\220\275VuX=\022;\377\274)\267-=<\021\304\274\360\310\007=n\377\001\275\376~;\275\312pf=\312$^\275E\204\211\273\256\3569\275\261\321\034\275\025BH<\3616\276<@\247\266\274\355\222E\273\030\234\372\274\343[T\274\n:\222\275\361\377\205\275\026\254y\275\014\033\265;\322<\231\274@4s;5\257\224\275\345k;\275\267\355l=\325\300\203=V\353\207\274\334\330I\275\270\314#\275\025V8\275\304\305\325;\004\327<9\253\210\230\275=\311\014<\00754\274wJ\220\275\035\347\237=A\035\204<\236\2030\275\026G|=\260u\304\274\2678\233\274\250@\023=\227\307\347\273N\000\252\274+\351\026\275W%\000\275/\266e=\351#*=!\240/\275\017M#=\325g\006\274\027\3761=M\027\326\271Z\304i8\224\343\242\275\335\310\320\274\331u|\274r\010\245\273\202\376\222;\221\304\022\274\317i\370\274\"\317p>`\037>=>\315\273<\240}\261\273A\3553\274\255n\372=pT6\2731\351\330;MwE>\032\336\246:\377\016^\275\016\305\035\275Z\201\355;\255;x<d\007t\273M\n\006=\337D@\275\313\230\216\275e0\343\274\210\302m\274\3011A\275\357\"\207\275\315\250\332\274\240\253\222;\301\370\302\275\220_i\274\301)\230\275\253\371x\274\244\234\341=\250\037\245\274\3750\322\274\270\250b9\340l\265\273\267\343]\275\332/\370;\30114=~m%\275\r-\227<\327\217`=\315\354\024\274\031q\335\275\007\272\033=`F\315\275\323~k\275\371_6\273L\022W<r>.<\341\323\006\2768\303;\274k\356A\275\257e\360=\'\370+\274\205je\274\270xf\274}\353\224>\227l*\275=0\260;\213\366\345\275\325\016:\275\003RC\275ib\301<\273\230F\274G\301\333\275/\245R>\210\002Y\275\016H\244=\251\311\275=\032&p\275\247MU\275\344\251\335\274\223&\221;A\252\323<]\250$\275;\373\274\275%n\323\273t\222\342<\2630\325=\201\314\254<@\030\244\274V+W\275C\353\242\274\360lV<\201x7\274\201\027\302;c\305\241:\006\344==\330\'4=u\264&\275\222\027$>\243\0003=\035g\000<{lK\274\335\221\377<3l%:~\302\017>\034m =\016M\007>U\t\364=\243\227\254=a\377\255\274\201\177\\\275\232\333\355\273\225o\025=\3709}<\256%\320\272\215\341\203=\305\224o<\006p\013=\252r\000\275\n\376\307\274B\373\255<\361jz=\351\363\242\274O\332\356<\2466\343\274CQ\032\275e9\250\274\340G\276;\022,V=\314/\023\275Ld\273\274\275\336\222=\003\004\227<\234\321 \275\256\276D\274d\277W\275\311\r\234<\312#\276\274\261\210\321<2\024\036\275\265\304\346\273\261a0\275\351\237\374<\204\304@=\216\216\333\274r&I=\376\226M\275\315\377\243<\303\357\351<\230<\345<d\003L\275\343\3373\276IVP\275\264\324\372\274\003@\370\274\263\353v\274G\242\312\275j\302\204\273\'\0023>\300cL\275\222\351W\275\337r\026\274 \246\373\274\220U\312\274\256\264\372\273\215\313&\275\305\276G\275O%B=\345-\234=\267Co>\305\006\310\273\236\327D\274\\\231)>qYZ\275M\007\210<\033\017\177\275\373\372\013=\2740\'=\266\334\343;\310A\226\272\245\235\010\274.\261\227\274n\021\t\275\255I\201\275{\221&\274f{S\275\322t|\275_;m\275]Xi=4R\372<\334\220\301;{\311\024\275\313\374\360\274\374\345(\275\016\367\005\275\3037\025\275\231\026\265<SAC<,~d\275\332d\013\274\341\007\242\274\036d\255<A\223\014=\226\t\255\275u\217|\275\212\001T\275X\035\260\274.\371\220=\222D\201<N\342\274;\204\364:\275\016\263\031\275\265\340T\275\361&\276<\327\251\204\275\243;\037\275\263h\273\274\000\272=>P\254\236\275\326\224-\275]\223\360\273rO2\274\0310S=\357\002[=L\314\367=\335\253\022\275^/\032\275H\2710\273\364\300$\2751\207\027=\240\341\366<\235\022\213<\377r\376\274\225\235J\275\273\342\310=\035\243\346<5\216&\275\\\034\037\275b\223;<z\2472=\237*\247<\005!\000\2754\336\260=\224\215\253\274\261\270t<\261\376*\274\361q\032\275\306M(\275\324o\235=6\023(;L\272\300<\214D\003=E-\032\275\272\220\004;.j8\275\311\226\370<\272\244\014\275P\202P\275\234\256\031<\216\306\203=\231\261F\275+;\001>u\326\211;\256\230\356;\376\356K=f\352\374\274\225\356\201\274?\254\000\275\230\332\032\275\261I\215<\035k\322\273~G\375;\206\275\212\275\177\330\270\274z\210\245=\235t\220:\017\274\235<4\273\014\273,<\033\275\236%\337\274s\373\027=\"^v\275\262\237\022\275\241K(\274\236\370\212\275\324\323\203;%\027\024=\035\274\237\274\344\301\305<OG\304\275\202\352\350;Ts\003\275#\340f\2755[\350<.MW\273<\222y\275\246 \201>\266#\007\275%sl\275\033\352\241= \341\203>\000L&=\002\374\200\275w~e\275\014\256\221\275\r\340\202<\272d\354\274\\\177h=+\'\276=\177\321\016>^=\250=a1Z\275;\',\275\r\003Q:fD\014=\031\362\211\275\257M\256\274I\257\313\274L\221\312\274\317\'V\274G)\001<\225-\036\275\345T\203\273\204\270u\275\223\363\255\273i\347\027\275\277\360_<\307\'$\275M\347*<Z\230\266\273F\3346>#\270g\275\302\307\365<W\222\026\273CE\211=$\365\255\274P\361\312<\3102K=\262\001\002:8\351Q\275\275)u\274\020\321[=\251V\036=*\324\330\275\230(X\274x8J=\374\324\330=of\315:\320\213\346;\017\017g<\316\021O\274\004\226`=\324\006\031\274B5\373\274\007\212a\275\031\276R\274\337\326\265=\031\324\310\275\342\226\266\275r\007\306\274\361\004l\274\004^\356\274\261c\372\274y\330\300=\244y\305<\2303\203=\0374A<\317\320\333=\253\352\237\274\rp\251\273P\260\226=\002\256\016\275p\3263=\370Fk;6{\315\275R\263\355<4\352\363\274\026\307h\275Mnd\275\344\217\0179\347|\205\274$1\222\275d\322j=.\250\312\275\230\255\240\275\261\236G\275\332>\017=2\257\"=+@l\275l\030\203\275\356v\266\275\355\325^\275\016\363+<@\035\267<\256Z#\275\031)/\275\202:\203=c!\264\275T\2709<\022\202\271\275\306\264\244\275\014w\002\275Rk)<D\212\242\274 \361B\275<>\241;\363\020\003=\252\371\242=\351\341^=\305\204\347\274!\254\352=\314\240<\274,k\244<(\325\"\274\1779m<_o\241\275\206\261\204\274\267(\262\275\257\333\235\274\343t\326;e\342\254\274\275\372\206={\000\310=\006\337[\275vU5\274\302\265.\275\033\267\\\273W;$\275\327\001\003\275\236\n6<)\305r=\352z\246=\376\304\302<\274\342>=r\372\361>\367\2515\275\355x\260>\356\000\206\275Yd<;\322O\276\275\310\273{<\325\000\023\274\244\343\244\274\242\253z;\371\223\267\274\020\320\254\274_\246\025\275\371\314\373<+\214\010\275*)P>\376\030\203\274%g\034=\330\341\205\275\201N\310\273,\325\335\274\376\315\242\274\260\355\377<\337]R;\352\361\200=F\032<=\262T\261\275\365V=\275S2\310<\275lX<o\343m\273\273*%\275J{\002=\032\363Y\275K\377\337<g\301l<\212;&=\r\366\251=rS\022\275\353\237Q=%\"\277\274\347V\222\272\247\352\337<S\310\200=+\321\030=\321|\255<\002\001j\275p\237\357=D&\255<v\t.=\r\265\204=\301h\007\274\034\236\317;\270\210\013\274\225\213\250\275F\306\344\274\343`\006\275\2753b\275n\331\224\274\215r\034\275I\032\003>\267jU\275q\225\204\275-\302\2159!\022\002=\341i\233;9a\221=\227\201\241=\325\275\304;\263\374\244=d\025\321<4[\037>\261\311\262\275\275/\032>+A[\275\266\n\261\275\2074\007\275@\362\275\274R\204\210=J6J=\205-\234<\256.C;\276l\336<i\311\370<\334\364\026\275q\277;=\025 \220\275\333\372\250\273\367\353V\275\210\333\014\275\031\255_\275S?.=\223M\276\275bD\257<`\231\240=Gs0<Jy\032\274[74\274}\346\316\274\367\305\014<H \263\275\211\273\352\274\362\256 >\326u\264=\221C2\275z\347\221\274LeW\275\2614+=O=2==l\334\274\247\316\001>\330]f\275P\267\324<\212\321\361\275g\346\\\275\202?K\2754\251\344\274O\235\005<\310Sw\275\r\337\223=\344\r\236\273?ff>\024\n=>(\320\266\274\023\223\344\274*S\204\275r\220\311\274\3161\250\275\016\216\"=\354\253E:w\357\017\273\3029\027\275K\005Z\274\026\252?=\033\221(\2757\025\210<\361\335\035<\0379:\275R\366W=\313!2=\204<J\275#x\224=6\275\214=\361\2474\275\0068B\275\203f\361\273\037\0243\275\010:\034=\263\234\224\275\022\214\222\275~f\231\273\251\005E\275\367e}\275CD\243\275h~\212\275g\315\034\274\363\237\030\275\340\212\254\275\312l\022\275\372\260\302=\332\247\225=f\211D\274\n\225%\275@\362+>\005v\234\273\365E\246\2746\013\272;k2\371\274;mR<\327m(\274C\240i\274\307\253\020\275\024\252\221\275\356U\205\2754\352\230\272\266\267V=6\n\227=\234\303\024\275kH\274\273\'1p\275\227k\326;(\317\313=\347\225\202=9\234\300=\"N\021>aPe\275/\332\260\275\017\354t\274\230\320\003\275R\t\023\275\023\211\202\274\271\356\271\273_`\307\273\261\336\231=kC\n\275#Fy\274\005\231\020=j\272\227<\242\224\227\2753\257E\275)6\r>[\031O\275\364\006\025<\214\276\034\275\312r$\275\347\006\326=\023\207|\275\327\246\314=H\010\216\275\314\260\347=`g\205\275\203\010\232\275m\332\351\274\000C?=\277{\337\273[\021\347<\255wa\272\362\375\013=\321fg\274\232\236d=\037\301\255\274h\367\317=O\020\202=\316\031(=q\345\037\275ixQ=\300\364^\275\2445\207\275\270 \377\275@\307\245=\336`\204\274F)\215\275\031c\244\275P\345w\274\233\376Y\275\314\207L\274\004Cq\2754\353\301;~\263\361\274\373[\237;1#\036=\246!z\273\254r\212\2757\302\n\275\'\351\371;\244q\000\275;o\305<p\306\237<^\344\035\275\342/\014\275{\264\370\274oV\211<\350\326)\275\314\230\211\275\221\254\005>\006;\036=\340\021\374\274\222\227\357=j\037\244\275^5\"\275_\007\\\275K\243t\275]\221h\275\274\321G\275\331\"|\275Lh.\275\263\000\271\272.\270==fl\217\275\307U\335\275\245q\020>#\3569\275\267\325\034\275\312s\215\272\310\260\002;\232\325%\275\314,\007\275OJ\207\275\235\372\245:YI\023=\020\312\"\275S\334\265\27448\036\275\314m\235:\324\370`\275D\310\201\275\374\265\245<\357(+\275n\333L\274\177\320c\2754Z\016;\032\272<\274o\362\375\274\241\360\226\274p\311\037<\273\316\342\274\310G\364\274\301\202\313;{_\014>\303\032\335\274-\257\013>7\307\277\273\360\034~\275\236+\372;\254\362\214\275\2435%\275F\317\242=\366C\010<)\246\224\273\036|\304<\326\210\312\274\257\240\016>\302\371\201\275g\005\274=\014\254\334\274\210x \275)\262\227\273]\017H\274\253\324\353\274\367hE<7\001(<\303!Q=X\002\314\275\036L\020<\'y\341\274\300=\313=\300>\310=+u$<\367\3013>\'\367\001\275\313\314\026=\226T\360\274\016\350\224\274a\366\211\274\372\317\323;\370\314\316\274\273\376\022\274\252\201\355;~L\222<\246f\361\274+&\"=\27586\274w\001\010=\247\347\025\275?\201\357=mG@\275\336\316\210=*\370\036=\313\315\033\275\360\014U\275`\t\377;\006c\032<#\3714\274\334q\204\274-\270\203\274\323B\036<;\312\t\275\370VA\275\324\032\350\274\201c\035=:\372\204<\023\326\335\274\025S%\275\274d\243=\025\337\374\274\312\216\r<H\344\337<\353\037\226\274v\362\014\276\340\345\302\275A\017\335<\327\252\035\275\027]\306\275\251O^\273;\340\360=3v\344\275^\374\215\275\026N\223\275\363q6<\237a\303\273\340|`=\021\331\020\274\330\311\375=\245\021\222<&\361O\275(\027\363\273\217~\324<\375(\203\275\350\274];\\\310\333\273\245.\337=\021u^\274i\024\\\273\275\2401=\312\267\377\274\212uq=\211\357\017=\007\277\340<\225\000Q\275\224\0257\275\275\315\322\273g\024\302\274\322h\242\273\255\243d\275`@\303=J\204-=R\270\254=9\363\243\273C\203V\275\307\220d=\237\331\251>\235\262\266\2754G\310\274\342\346\334\274\021\020\231=NZK\275\375\301n=\357\270:\275}\332#\274g`D=\003\300\275<</q\275\235Y\305\274\326\342\'=\314\333\035\275/\356\214=\005\341\364\275\027\242w\275e\225\252\275\227\n\210\275X\033\014<]1H\275\237\207r=\377\274\227=\003\316\264\273%K\274\274\370\206\206<\014|]=.\245\002==\021\304=\345\006\377<\340\032\347=+\371,\275t\305\233<\3553}\273\'6\r=h\201@\275\272b\t=\340N\250;\326\313\247:$`\322\274\347\241<=-\247O\275\206\262\210\275\306\265\312\275;+8\275\032\014\007=\177V\002\2761\001\020\274\212\033\">\254\235\324<<\375x<\222ks\274\244}\224=\244Cl\274vu=\274\301\363\272\274\354k\'=\376%\r<Xn\017<\321\330*\274\024\360`<.\322\237=K\204\023;E\326!=\375\006\275=y\016\001=Z\233\n\275\275\335\344\274\246a\025=\362\034V=!NA=s-\320\274\230y\377;\032E\346\274\354Q\213\273uIn\274\231\305>\275W\025\230=\013\220%\275\232\014\273<@\271r\275\373\311L\275{\375Z<\017\341\233<T\366\021\274H\226\310<\020\004)<\014\3101=\346\006\227<\010NK\275\243\2022\274}\212\272\273\377\203\221\274\351\353\030\275\221\263\r\275Yy(\275\207&y\274\312qV<\216\334\310\274\322qG\275\007OC\275\\X\275=\363IF\273.\001\333\274-I(=x\256\002\275\320E\035\275T\224\024>\004\300\357:\031\312\215\274D\t\017=\224\252=:i\274\231<\313\364e\275b@\262\274H-\035\274\344\324T=\010sM=e)\202\275\304I\266<4w$\275\\\242\037:\371\210\336=zi@\275(\363\251\275\346\003-\273\224$V\275T\205\t\276\022\333\206<\025\264_\275\222O\251\275\220\363\'\2747u\033\274\247h\335=\236\353\'\275]\217\n=\254\376\250\275\371\027 =\265\353\244\275\'\326\020\275\231\207\263<+\320X\274l8\021\275\372\232L\275\266D\031=\254m\261\274\217\343\033\274y\357R>\221AP\275|\230\002;\345\016\320\272q\342\227\275\277\036\216\275(\210\204;uJ>\275$\013_\275\3637\325<{\225\202\274\260>\237<|]Q\275y\247\243;=\367Y\275\230\004\026\275eC\351<\315\236\005=\326\320\206\275\035m\002\274)n\231\274P\315\220>q\247\243\274\375\232\205\275\267\367\267\273\225\177\302<\215G\315<\0213\000\275G\224\027\275]\237(:\255IJ=\327\017\003=\245\363\350\274\342\365\034\275q\302\002\273\352\t\211:\024\007\201<\242\240\262<\272&\003\275~\314\"\275uc\024\275\246g\361<N\200V\275\017\306\363\274\355\202\266<%\300\024=*\t\027\275YN\317\274]\264\"=U&t\273\367\254.<\0339[\275\037\357\344\273]\002\244\274\302\364\273\274Q\354\005>`\336\242\274_\255\037\275\210\332\267\274\352X\202\275\333\330\261\274=w\215;\303\340\022\275\247\306\246=\375\226\242=x\216\231\274\320w4\272~\317m=D\310G\275\255u\212\273\311e\213<\345(\n<\343[\362;U\036\320\273\200m_>\266a\006=\215\357\303;\002T\221<\271\r\365=\324\3415\275\315i\021=$\246*\275\202\303\353;\016=\216\274v\'\n=z:\'=@33\275\333u6\2752\247W\2752\275\037\274`\315\250\273\223\232,\275;\274\'\274\254\274*;\375\215I\275\315\276\346;r\035\333\273B\354\020=s\357\376\274\327\013D\275\327\032;\274GlJ\275\215\323\250>\203@\261<\267\307\210\275?k\302<\007\362\244\274\204\253-\274\221\324\305\273E\233\r\273\271\326D\275=|\035\274\036\336\211\275\250\346\252\275\013\206 \274\225U;=\326\007P=G\340\265\275\373\224\312<\330\003\351;G\235W\2758\3775=\205\023\023\274\224\206F\275\327\322\004=\\\231\260=\"\022\362\274\366\226)>\336+\242\275\321\361%\275\361Hw\274\275\332\364\274\302E\270<A\255\003=F\2410\275\033\354)\274\363\226\220=\257\007\237\274S\203\356\275f\325+\275T\336\031\274\304$\220\275\3655\016=\323\216\230\274\002\243\344\274\0021\323\275B\201G=\314\236\317<\231y\371\273$h[\275\373aS\275C\352\345=S\264\031<\322jr=\247\327D\274\nt\236\274\361\004\"\275\2143>\275\2351e\275\362$G\2742|\203\274\366\261\337<\013\223\004\275\252\007t\274\333\273A;\353\200\013<\320\257!\275\'\314f\275\340<0\275\32781\274\312n\371\274<\226\374\274\322\303\032\275\310\245\210\274\342]\206=\0106D<Q\'\366\274\213\033\205;5\3318\275Z\026\n\275\222\364\t=)\027\026=\325\377\216=\317w\004<\004K\002>=Q4<\336\305z\274\005\205\333\274(\347);\006*\305\274\305\351`<\201\312\026\275\253.R\275\253%\027<\267\364\265:\014]P\274\304U\022<\r\002\355:\034\217\206\274\256z,\275V\303)\274V\321\023=\006\014>\275QS]\272>+!<w\rs\272K\252\234\275\215\272K=\316\371\030\275\n\277\220\273\326\207c\275\226\276n<\270&\225=\021\r\262\275$G\332=(QT\274\207\177A\275|\3321\275\270\371\250\275\217X<<v`\006\275.\246\214\274|<~\274\364\316\024\273\300\276\225\275\327{-\275\265Mg<\325I\231\27576\315=\260B\276\274m\205\306\274&\264\250\2752\223\233;\263\236\002=\034\301\274\274n\363F<\271\251\024<\317\304\004\275tEL\275\364&\014=\201E`<)*\t<\363pt=\346\230\327\272\213\210/\275}\252,\274\310\255\007=\005{N=\221\325\205<b\334\032\275\340\332B\275bd:=\370\2263\275\324sC\275\022\240\202=)\310\031=-<\272\274\376\363\252\275f\021\343\274\250\330m<,0c\275\010,\267=g\002\t\276\310a_\274\317\177\266\2731\361\337\275UP\304\275\201\272H\275\336\270\207\274\320\343\354< >\003\274\020\372w\275m\206\301>\307\010c\275?\314\305\275\240\3308=\224AL\275\362\347a\275\016\323\302<G F\275+\260\321\275;\021\036\274\346\315d<L\266y\275\037\256\366\274J\210t=jQ[\274I\005\025\275\2272\240=>\2611<\005\337\200<\207*\'\275w,\245:\025r\177\275J\316#\275A\307\220\274\0261O=\004\266\207<n\306\213\274\354\243\240<\355\264\332\274\333\303\252\275\324\216\026\275\300m\212\274Y{\233\275\341\204\343\274\205\227}\275k\356\306\274\325*\272\2745x\376\272\214\013\007\275:\336|\275q>\206<\260\275^\275\003\310\260<\354\227\333=~\0052\275\341\312\204\275d\325\016\275t\236c;J\276$\275\262\247\327<J_\317<]\002\245\274I$m=`\351\224\275\260\271\337\274\241\027\324\274\343\326I=\025h\\<\020g\374;\254a\261\274\033H\253;\304\201\022=\022\346R\274pi\037\275\344Q\362<I\241O\275\000\'\025=<d\232=\315|\350\274\201~\237<\3070\226\274c\247x\275\225|\200\275pM\203\275+\006P\273g\332\213<(\273\202\274\032\342\223<\207z\"=\270\332\301\273uw\270\274\333\356\372\274\253\361\212\274:s\\\2751\377\000\273\306\032\r\274\243\230\335\274\354\335\203\275(\240\313\275\252\352U=X\345\\\275\333\216\242\274\222\231\004=b\003\207\273\n\274\027\275\237i\221=\375Y\235=_\343E\275\303\010\031>j\3624\275\336Q\"\274\312\315\374\274P\257\302<\331\2560=\355x@\275u\332\322=\362\007\205=\004G\215\275@\253\274\273$u\366<\251\331N\275oc\222\274\235\357e>\207Lm\273\234\200\325\2756Qp\275.\342\303\274]\335\035=`\\P\275\'\202\220<\220\234\250=>\321/\274\234!\220\274\347Q\200\274\316\275\250\274rX\034\275\253\331\214\275\212<\334=\341\305\006\274P\3752\273\270\375N\275\013\204\201>\037\017|\274l\000g\275\367+\272\273\244\254\"=\376Y\032\275\022\326a\2742\r\245<\222\206\2539e\321\322=\241\272\016\275\362E\262\272\346\272\246\275\241s\031=\341\026\006=\034\332}\275\267\252\377\274\320\027\002=\021\224\'\275\256ae=\256I\2619\200\335\214<\223\364D\275\271\256N=T}><?`\304\274\363\260_\275(\352\335<\372~A\2753\326&\275\251\312\037=\330G\253\274\302*\227\274L?\355<\376h;;\320\360\324:^;\360\274\3754)<\037\311<\274\020\210\331\274\233\t\245\275/[%=\331\234X\275\265\\x\275\325\333\007\272\246\200\363\274\355\252\225\274\r\356\321:\266i\223=V%F\274\344,\224\275\351\242W=\342\254\335\2732F\220\274g\247\206\275d\337\222=&\230\375=\347\t\372<\204\340\276;H]W\274\343I\303<\035\033\220<\320\342r\275~\302\373\2744\365\212;r9#<\361$\225<\212[\217<\017\303\202<\252\300\316\275\242\246\205\275J\t\330<\322j==\360m\367<\375|\370\274q\263\037\275ee\225<\263\2311\275\007\024\t\273\256G\317>\352Ii\274\217*\306\274\n\316\227<b\217\277\273\273T\203\274\277\027w;\027H[\2752\232,\274\242w\030\275\024\263\n=jS\001\275\315\214\353\274\333\323<=\331&\245\275\326\312\270<\275o\"=\255\305\005=Rj\024\274\030X[>\020\252\261;&\'\333<&\253e\275\344\025x\275\222\035\223\275\360}M=Q\276>\275\246\026>\273\23667\275t\226\354\275\341\231\033\275\205\206\206\275VQ\024\275q\324\217=\033 \275<g\363V\275\356 \010>\022E\305\273w;\233\274\255#\">\323\002@<\321?\362\273\223\177\207\274\2159m\273c\321\004=\251\376\321\274\025\356\276\275\271\241y=\002\3426\275PH\004\2754\"S=S\256\177=p\267\022<\264\233\203\275\244\250\026\276\251\246\027\275\244=\"=\377\361\373\274\246%e\275\023\222\241\275\002\201\322\274@\272\242\274\350\010\354\274\000\037O\275Mvy=\263\330\254\274\266.\237;TD\216\275Pui\275\317\341\301<\3214h<Z\332\371:\252\203\225<Z5\200<\372\372\276\274\020\006Q<\025\356 =9H\036\275O\237\323\273{\213\376\274h\374V<I\2667\275A\365;\275\343\354\273=\263\373\210<7d-\275F\331\254\274\3614R>C\r=<{jJ\275~[*;SI\023=\240\230\'\275\002\2359\275\242\331\035<\035\370\235=)\241T9\263P\030\275\342\206L\275\313\362k\275a\362!\274\262_\305<\271xe\275\327\301\026=&p\345\273\376\340\001\273\020-\223<\206y\022\275-\237_=ZV\336\274-\313T<\3407G<\004\027\220\275\257P\351=\177,a\274\020\257\313;o|\355\274\335\340}\274iM#\275P\\n=\206\014>\275,\372\320<\207a\030\275\355z\341\274N\003g:)Zj<\347\026\251\273\275*\223\272\332\252\032\275Ds\227=sR\351\274\20591=zc\327\274\224\215\207\274\034\266\360\2748)\310\274\264F\252>\262{\013\275\336H\345<\275F\350\274<\346\352\274wM\030>\344\263\230=\017\330\307\2746\261\233\275\212.\340\274\304B)>,\256\344<\360**=<\212\207=:+,\275O#\332\274\365\274\226=\013\010\336\275\213\261\307<\304\2260\274kH\"=\021\t\241=D\272\014>g\231\207\275`lF\275\2321\261\275\225)\215\275\301w!\275\214\345\">\246\241%\275\326Nc\274<\275\233\274\025\262\243\274\254\201\213\275gW#\275q\271\220\275\023\212\256\274\357g\220<\030\023\205<D\252\265\274\361a\274\274\000o\002=\214\0061>\037\207=\275U\201\031\275\335\247*\275,\370\034\275\031\2350<\340J\014\275\356\003\203=l\245\352<\213\326\336\273\322\201\032\275\007\275.\275\253\336\347<9\347\001=m\r\010<\"\313\226\274tx\256\275\341\025Q\275\333\244Y\275\245\233Q\275,\264E<\"\222\227>xR\262\274\326}\342\274\244]\262\274L\304.\274\307\273\221\274\303?\330<T\311\026=\t\025H=t.\014=\"5%\275 ~\022\274(\206_\274\340\210\312\272[\020{\275@\334$\275\351j\365<\216\241[\275\013\212\323\2749\271/\274\2234x\275\360n\316<rU@\275\220\251b\274\005\003\202:\213e\000=.-W\274d\032,<GY\326\274C\334U\275\310\210\352<hv\250\274\323K\201\274\257\227\351=\272\270\021\274\302\337\277;\233>\216\273Yn4\274:\330\345\274{\225a\275\250F-\2754\001a=T\200\315\273\253*M\275S\315Y\274PO\353<D\354\371\272\341\243\224\274l\275)\275M\016v=\313K\222\275F#\312\274{\247)\2755\345\200<@\221\335:\037\316|\274-\266\300\274`\003\347=\305^\247\272\3247S>V\302\213=Bq\275\274\276\242\300=H}\310\273\273\310\276<\242\344\265\274\363&v=\205\024v\275\233\263\005\274\031\307\212\275\223J\210=O\237\206\275\346\334\'\274\253\367\330\275Y\267\036<lQ4<Ht\347<f\022\244\274\342\234\216>\326\204>>\227@\374<i\226{<\364\037\254\275\202S\027=\024\256\216>\3475m>\031/\337\274\275\376\343\274)jq<H-f\275\247%\265=WM\030=\207~\352\274\272\'\312;\266\035\271\275\357V!\275\222fP\2753uc\273g\371\366=\221T\002>\013\355\277;\345R\035=\260S\201>\250G(=\267\027&\275T\353\213<\302\304\221>IjY=6\016\033\275\234\252>\275\230\240\316<\216\211\217<\001)\236\274\251\241\213=\002\264~<\336\025\001>\311\221\217\274\324\256\327\272\235\363\000\275\026\305T<B\\\21295p\245\274\016o\246\275\322\240\337<\030\263\223>\367e\201\275\\k\251\274k\026\335<=-\324<r\005\255=l@\236\275\206i\305<\324\031\340\274\t\201\037\274\323\210\036\275 \233\276=\300\233\256\274\221\364\254\272V\334U=\372\370\250\273@\"\351:=\214\237\275v$[\275*\031\335\275\231g\267\274\301/\367=J\207W\275\203eW;\351\220D=\017\261\366<$\220\375<\255\205\320=\300\275\212\275\013,\004\275\226\206S\275\212:b\275\214\2212\274T\310\206=\303\350\321\274\372$\004\273\265\260X\274\n\232<\275u\233c\275X\306\357:\302\351\314\275\212\024\312<\250\210\263\274\3709\263=\224\232B\275\324\353%=\010\014\037=\254I\210\275\205\256e\275\014\213\244\275\314*%\274\351}&\274v\231@;\2479\366\275\3501\261\275V\200\233\275d\000\t=k\020I\274\301\307\006\275s\2422<x\301\301<\0179\212\275\3075+\274A\346d\275\311\256Z\275\247\251\237\275\032JL=\005\337$\275hbe<\270\263J=M|\342<H\316\333<lz\324\274\036M\026=\305\372\027\275l`\274:\323\354\371\274\302\250b\274\225:;\275?D\000\275hO,\275g\200\342= \0065:\220|\006\275\005\3071\275:\277O\275\256\3324<\357\231W>oFB\274\006\370\235;\n\315\223;\031y\217\275\342\3006\273\025H\215\275\342\213\336\274\257D\235\275K\023\327\275\250+b\275\234d\213\275\2524\277=\266\'7=\366Q\034\275\211\034\026\275\236\000\322=g\220\201\2759\027\035\275\354\202\246\274\030\030\"<\204\320\314\275b\024\362;\013\206\013\272\360k\334\274sv\326\274cY\002\275l \310\274x\'\277\2741\345\243\274Q#\034=\002\244\267\275\361}\"\275fsJ<Sn-\274i\226M\274D\025\205\274N\230\350<\n\212\007=\201m\006\275\201\007?\275\002\326\023\275R,f\272\227Y\265=\326\336y=\274\256\236\275\177\262\315\273a\231\325=k\031\303<\024?\265<d\212\314\273i\223\356<\327:\221\275\216]\325;\003\3317\275\226#4>\343\0069:\212\002\261\275>\276(=?QK=\026a\235\274\002>[;\262\206\200\275\3747\254\274N\014\327\274\202o\241=\363\007\251\275\3338\242\275\033\357\220<\244s\213\274%\326W=\262p\r\274oAK\274\"5A>2\233\210=\237F\014\274\241\311\361<Rh\014=\032\010\t\274\010\270\010\273\341P\323\275\316L8<=\233:=\250S\202\274\020\202\320\273\223\243)>\236\245\244\275H[>=\257Z\240\275\266\n\361\274\257\275Z;P<\036>\205\373\272\274\203\t\037=#\256\201\275D\245\333<\r\373\002\272\200\307~<#\340\035\2758\371\221<[\216\213=\253\255|\275\330\334V\275\035}K\274\375\253\013=\316\001b=c\256A=|b(\275\"\233\267\274\000\023\203\274\037lp\274\030\313\030>\332d\204=y\373\235>\235\026\360=\213\241C\275c\2361<\233\037\311=\3240v=\206d\025\275!\317\205=\342l\231\271,\'$=(\352\261<\344q\354\273\'\214\203=m\020<\274\360\314\021\275\202\266\277<\351\020:=\336l\357;\300\241\331<3\255K\275\312p]\275\032\371)<g\267\254>N\235\315\273\361O\002=%u\275<b\253{\275rt\021\273 W\311\274\300\3439=C\023\007\275\342@\023\275Wn\337<\256\"\353<\251\363 \275\373?\274\275y\334\220\275\310\200\307=\347\214\351=\272\365\006>u\224\256\275n\326^\275\210\213{=\343I\265<\354\2314\275Z+P=q)\'\275+`\256\274\374\027n\275uS\">z\342\362\274\310z;<\366\240\203<\036v\223\2753\342\311\274\201\003\312:\257M?\275o\272\213<6H\362=\251\235\275\275(\025\276<?x\235=\255\233\324\273\375\245\220<\343\354\030<\317[ =?\3771<\2756\207\275\312\277\006\275;\001\275\274\257\014\314=\030\257\305<\321J\212\275\366\3124=?\231\322=8\312\345\267f\t\224\274\031D\251\274\330s<\275\372\022C\275\360m\331=\342\367\007=\336\\\032=\350\220j\275\001\231\001\275\035\002\233\2750fy<\023\304\215>\034w\316\274\033p\266=\270\313\005\273\316\276\234<\333\211$=9%\3179E\343P\275\254v=;3\206\225\275\271\226\025<\006@]\274.\037\246\274\353\253^8\020\313\022\275\030\005l=\300\036\372=\033\373\332=\303\022\304\274n\013(\273:?\200\2730l\022=\276\225\303\272v\264\356<VT\221<0\0315\275\031\030\305\274\251H\001<\260o\253=\216\264%;\263\331Z\275\004)\024\273\363g$=1\'7=\362&\325\274\261M\000\275\345\021M=\370\357\020=\314\026\356\271\036\342\250=#\253\311\274\214\240\020\275\2245A=\356\302\341\274\352w\337;\212\263\252=\257u\250=4\373;\275\330\310f\275]l\023>\214,\277=\365\376\314=sB\211\275\226\241A\275Y&\304<\212[\014>N\036O\275\366\023\234\274\354Y\347\274\233\217\211=\323\276\031\274\0056<\275JZ\246=\027|o\275\262Uy\274\322}\327\274\016\006\t\275\034\212\302\274\216\346\n=\354\223\240\275\202\357e\275\234\323\010<\357\317V\274\205\303\374<\342Y\035\275Y8w=\244A\262\274\366\324/=b2\\\275D~\270=P\236-\275V\236%>Q#\214;\214\237I=\254\364\313\273\240\242h\274\333\274,\275\2466\337\274\244\252\r\275O\036o=\315@\221>\345g\206\275?;\352<\035\377\252<\325\371\264\275\217\"\212\275\217\323)=\325\016\024\275\303\027\347<\322\221\375\274\037\345\203\275\366;\370\274\017\210\202\274\326\227\005\275\334\304\247=\302dd=\331e\353\274K\032\346<\334&f\275\3026E\275r\020\276=\375\265\276\274\220\214\204<9\251`\275h[1\274@\007\027\275\322\212\276\275X\310\261=\0315v\275\221r\232=\025\264m\275\376\'\353\2741\3055\274\332K\200\275G\201\225=Z\216\354\271\260F\226\275\265\337\202=\233\3079=\320\243\250=\025gh\275\340\306\216\275\241Ci\274\235:H\273\3060\227\273k\0279\275{\257s\274zl\243\275\313\304.=\272\360\224\274\3571b<\023\304B\274zH\327;0wV\275\225\372\341\272\323\334D;\006\231\241\274\3310\254:\362J\257\274\025\276h=\273\016\030=\363\024\004\275J\315m=.\200\311=\224\030\377\274e\241\230\273\010z$;C\270\244<\"g\n\275\272T)\275g\360\223\274\323\273G\274\334p\336\274\325\222x=\331\204\177\274\245\362a\275\271\226|<f\276\004\275a\262\320\274}\tf\275+\032Q\275\330\310\236\273\237I\211<9AN\275u>\275=.*\201\275^\270\222\275\215\002\261\275\346\014\002=ji\r\275v\273\313\274\020C\002\275\007=\333;\003\014\247\274c\337\340:\356\220+\275ZT6\274W\273\270\273_\016\201\274\r\375\225\275\315:^\275\270\024\004\274\232G\024\275\354\0227\2752\352\271\274\263\317\245=E \225\275\202\353T=Q0B\275\236\271\030\275\321\372\006=E\030n</\371\014\2756\242\241;\266\221\311<\005\353\004>s/\231\274\375$\246=\321\350\332\274\251\307\226<\336r \275K\377\217\275\343\227\347\274\214\037\223=\336\377\213\275\25040\275\347\277J=0\017\033\275\315\340w<\207\314)\275r\022\030=?\233\010\275\237\\\335<#5\350=\310\0001\2750\366\2359\227\\\334\275p^*\275\375c\t=\315\220N=\032\2317=\004\304\273\273\376d4<\357+|>`\273\370<\362\317\212<\251=Y\275G\313R\2716\032D\274E1{>g\343m\275\216F\272<\363\347P\275\337\263\035\274\023\033J\275\362\371\007<\377\017\000<\213\034\312\274t%^\275[\211\226\274\372>v\275\036\220\206\274\232\266\260\275\350G\000;\301s\245\274Z\225\352:N\345\217\275}\267\263=e\235n>\356\252\261\274\252\000\215\275nh\205\270\246\0229\275\002=\275\273#w\312\273\243\016\363\273\262\177\347=\374\265\262;\341\340\272\2723T\252\274\364S\007>h\262Y\275\016\210\366=I\374\217\274\372\177%\275\352\333\256\274\217\362\363=\245\036f=D\374t\275lk\223\275F8\202\275)7M\274\223\0028\275\004E\033\274\251J\010\273\030\317\207<Y\221\203\2751r\265=\264%\034\274\230`\003\274\364}\234\272\360\\\021\275}\'\306<\243mu\274Y\217\370\273\332\372\262\275\234iw\275\311\267e<\317\332\215\275\000/\204\274iO\247\275Z\224\003=\330\211\275\275\217\365\372=\033\027=\275\034\274\203\2756C\273\274<i;>\026k9\275\323\335\244\274\254\210K\275\003\326,>\227\007\223=$\326\273<C8P\274\340\333\240=\326\335\250<g\377=\275\346)o<\323\261\234\275\037\007\034=!\006\"=;\367\313<rl\342<w\255r=3\272\250<!\205\202=\342\301\306\274\222\267\214\275}\200]\273\3428\352=\205\233m\274\300g\263\275p\231\232\275v\312\211\273uR\203=\335\235\211=\\\227c\274\252\240\2567\300x\255=:\001E\275na\223\274\277\017\004\274\036\261\227=%Pi>\325\323\006\276%U\234\274b\215\202\274MDR=>}J\275\347\267R\275\273\241\004\275\274\"\220=\\\216\226\274D\371\006>B\237%\275\003\257\267\275\260\202\205=\232q[<&Z\002>]\372\223>q\237\n\275\332\325i<C\036\317\273\270\371\267\274\331i\260<F\361\232\275\317~W\275\363\270:\275{\032\205\275\316/9>\223\246\t>%\177@\275<\023\264=`\034\007=QR\275=\375A\353<\222_P\275\032{\253=\246\001\246=\343\004\226\275u&#>s\260\000\275\275:\210\274\261\232\210>S\263L=\303z\322<\203,H\272P\223*=\222\250\225=\034\226^>\320\224.>\016\274(\275)L0\274\324R3\274,\220\211\275\225\022\347=\334\207S\275\222q9=/Z\204=M\371\204\2742N\356=\267\265\316;F\210\265=j\024\223\275P\216K\275vM\013<\210\212\002\273\\\326\234<\344\222\001\275Z\347\310\273\340\323\017;;\261\375\273\311\016\301<\n\327\263<F\376\031=\303\363\271=MzA>\021 -\275\277\335\022>\313\362\203<J\266\243\274%2\240\274\255\210v\274\373\250\005\275&\203\211\275pm%\275\302\323Y=\331R\234\275[|M\275G7\234<\n\300\002\275\257\235\261\274\301\274\316<\301V\014\275\230\0356\275\303\266\035>\007\214\360=\223kD\274C\031m\2751\314\032>\240\300\243\274\320\327\277<\216\2413\275[z\272<p\323\364\275\034N\257\275\016\322\336<\212\023\000\276{]%<;\013\002;|\357m\274L0\247\275\255\204\027=\t\031\253=\'\350j\275\320\2623\275\314\216]=\346\307\200;y&\243\274\017-\240=\301\363\270\273y\233\320\274\367>\302\274\275,@=\017\335\217\275M\316u=(\274\307\274\033\314@=vM\257=`t\007\275NK\006:\253\333\362=<\253?=Rd\330\274la\341=&$x=\213\013\214=c\245\213\270\314\030\342=&\177n\274\276\324\223\275\365P\037\275\313V\201\275+\342\214\275\240Tn<+;E;\320<>\274=\257\300\273-\024\301=\010\310s\274\254\251\301\274\024\241\243\275\005\273\215\274^\255\026=\357\366\221\2744\307U=\340\246\314\274~&\016=\251\306\224<Wp\022\275\202\201\215\275\223k<;\016\377\234\275\362\241?\273\372\266\270\274\355i\374\274\257!\001\275\217\323\223<x\n\231=\205\201\206\275\272M;\275O\246}\274s\207m>\300I!>\306(!\275\010K~=\022\375n=?f\266\275z\272\361\274kk\014\2759J\016\274.>]<#E\271=\024(4\275\362\2611=\267z\177\274\006_\022\274-\033\'<)\363;\274{L\200\267\206Sd\275\302P\322=CA\017=4\257+=/\255\207>\324T\256=\005\\\224=\352\213\376<\277\265\273\275\311!\t\274\320H\355\272\2201\243\274\374?\211=\021I\301\275\317\004I\275\n\246\241\274\003l\246\274\332\037\357=-\224\004\275M\3120\274\353\3756\272\270\230\347<\034f\226\275t\222\030=\004m\017\275$\232\210<G\327\360;\277\032\320\275\024#\033\275\322\276\310<\2600u=yF=>\':\207<\346u9<V\255\n=\327\033\312\275h\t\000\274`.\010\275\200\006\252=\2543\005\275\271\022\340<\356e7>c\025\277\274\300\037\373<EzD>\t\017\222\275\205\355\016=\"\016\372\274\273\304\222\275\r\211\353=\024\260z\275w\314&\275\031\241&\274\255@\372\274\2577\325=\216\364J=y-/=\214\241\243<\315\372G\273\307H\025\275&\311z=C\272\235\274\221\227%>*\320\345\274 L\200<\256\212L\275\3558)>+\260\030\2759Qr\275\342\230\342<\364\305\263\275w+\244<\275\005\001\276\323\203\027\275\342\333\027><\306@\275P\032\244\275\351\"Z\275\316cb\275I\020\375\274\263{\222;}\232\200=\315_\260=\201%q<#\025\036=.\t,\272\202T-=\2603y\274-\004\025\274~\223\233\275\265[\316\272Hb\021=9\203\242=\344j\354\274\014\214q\275\336K\014\275L$\030=\235\240\277\273\245\220\321=\210\033\276<\207\303/\275\\\223\276\274\210{\220\273\203&6=\0221D\273\277z\230;\367S\225\274\274\2367<#D\230\274\036@L\275n\374\346=\302\224\t=\022O\246\274\230Pu\275\235\347\370\274\212$y<ou\241\274\245h+\275\000K\200\275xx\227\274Rn:\275\271@\004\275y\314Y\272\300\367$\275\321\000\360\274T\344(=M\261d<0\021\247=6\370L<gN\254\275\3260z\275{\336?;I\231\356<,DI\275\321\352\'\275(\316\370\274\247=\230<[\210\025\275\372\316J\275ZdH\275\020\226\325<@d\r\275\217\313\322\275\225X\201\274\372\326\300\273)\313\205=t`F=\260\361G\275\"0\305\273VU\221<9Zw<\275\004\247\274\361\3109\274\013]<=\320j\254;\247\370|;\361f\026\275_\266:\275\nt\346<\316\231\017\275\033\342\331\274\274\327\014>2\356\365\274\376|h=\240\377\340<p\335\\\275$\261\021<\327\341s\275\027\312\252<\331{\207=\240\306\263\274_\"\r\276\347\364\206\273\210\256\342\273ti\220=\352\272\203=\271\025\305=!\234\207<\233y.\2754\021\n\274\\\334:<\3151\\\275\000\007\006\275_i7\275\025\203 \275\035\217\001=\354\327\227<\312&\254=Wm\220<)\240\014>\316\006\223\274\210)P<\250\356\210\273\240\177\272;\275\254!\275\007\312`<\354\2473=m\010g\272\307\357N<S\326\332\274\261Qi;s\347\225=\025\365x\275E\337T\275\350\016\250\275\342i4>b=\217\274\313\232\225<\247\222\034\275\023\265\210\275>JN;L\n\360\274\341 \032\275\023\373\206<\361\235\013\2751;\273<\237H\307<Z\230\366\274-\372Y:L\263x\274\353&\362<\246E\376\275\271\261$\275\372\370\275<\003.\341\274r\302\033\274+\261\202\274\036,M\275\277\037|=xih\275\3264\367\273\020\210\010=VA9<bA\t<\3726\244=_N\243\273\367\260\356;\371\317\354=X\316\206\274\273\305\235\274\262zX=3J\202\275\002\364u:\021\215\244\275\325*F\275P:\027=z^\005\275\217\030:\274\010M\303\274\350&X=\326,_<\225Y\375<4/\210\275S2&\274\243\036\271\274o\304\245<-\257*=p\376\256\275\036\000m\274/L\371<?\r(\274\236\364,\275.\340\013=\354\340&\274\252\302\271<guv\275y\237\254<Z\374[=u\004=\273\221O\013\2751\014i\275\242{\253<r\2578=\2750\333\275\206]\034\274\206rE\275\373>%\275\340\334\270=y\275\320\275\nO\212=T(\034=\037\217\242\275\360\237\\=\007k\241<e\210_<}\032\221\275\224Z\332\273sH\213\273\225\2050=\270[7=?ai\275\353F\214=h\200\304\273\"[\315\274C\007E\274\027\022\231\273-r\240\274\251\n7=\272u\372:<A\255\273\242V\177=H\316\010\275\256\226\231\275Z7f\274z\003\257=\2404\276\275\345\301m\275.^\276\274\276\327;\275\321\355\315\274\336\334:\275\312*a\275_\346\027\274\302s\267\275\000nE\2747\253\033=;\037\'\275\250\377\256\275U\021\346\273\200\200\225:\367K\204\274\017\235\322<9\204\003<\244\276\341\274\231\225\027=`\250<>\362\023\306\274\240\333\014\275f\343\213=\\j\021\275\234\312\274;\032\323=\271=\014N=y\324\321<\\0\252<\326\324\\\275\213\326\277\275\211\355\217\275\023\306v<b\257\315<\377\277=\275\207e\262\274X\206n=\244S9<<\313\020>\267\212\013\275h\330y=\305\233\341\274b\032\234=\354hC=\347\351\215\275\311)Q<\267\034L\275\313\225H=@P\245\2732\302\202<*h\243=\261.\007>Pgw\274\310Y\366\274\315N\217=\236k\200=\226\270\244\275t\211D=\017\277\324=\335y\304=\225\221\037\275\024\213\214\275\206s+<\243]T\274\3519\221:g\331\353;\331q\206\275\r^\t>\017P\030\275\303y3>\244\000\203\275\313/j<J\300\221\2745\024C\274L;A<\355U\302<k\221\177\275\204y\311\274\0265C\273\231K\361<\2426\261\274^\336p<\360\321\311\274\236\366\315\274\202~\025\275\310\246\344<\220Y\216\274Gg\222\275\213\206\005\275\322+\202\275?.Y<@\001\005\275Zn\310\274j/\224\2758\'\310\274|@\230\274Jl\t<\246u\210\275\252\207\266=\265\'\026\275^i\276\274\266\'\261\2723u\241\275yt\311=*\274\005<\244\031*\274\233A\227\274&F\230\273\247\313\021>\277\353O\274\263j\204<\365\021\324<r6!\275\253=\035<\316R\230=\002\010\211\274\200L\325\274\203\345\362\274,~\021>\234P\364=\232\320X<\262\217J\275<\312\264<\322\0035\275\242i\001>\324\3132=\267\376\244;\371\001!<\376bI\274\024\263\201\275\'\250\276<H\017\004\275\374\017>>\\F\203\275\n\236,\275(\315\343\274\262\315r;g\255.=\201\226]\275\276\332\311<\034\036\270\275?\265g<\364\'\264\274\021S\263<\260h\236\275\205\324\337;\266H;=h1G\274\235\014\006\275\202|\n\275\347\301\026\275\226?\322\274\257\336\010=\337\230\371\274\271,f=\264\361\351=\271\rL\275\366\204!=9\002\316\274\030Pk\275}\207.>\032\246\005\274\225\243\305;J\362\205\275\336A@\275bU\251=\327t\010\275\232\321\256\275NY\303=hI\205\274\203\206\002\275\"\277\r=\361\253/\275\023s\213\275\246xh=&n\266=}\356f=6\351)\275I\243\037=G\210\025>\006\257G=\010\245\035= \303;=\277]\217<\351\032E\275n6\031\275\216tN\275\231M\236<1\245\357=\350\037\271\273\021L\214\275Xh\232=\310ll\275\334\313\236\275\367{\305\274\335h:=\346\343h\275+\364\016>\350yH\274\t\314\240=\267PW;\255\246\276=\356U8<-\3151<\324\353a=\323\206i\275f\345\315=\223\312\370\274V\003s\273\004\3424\275v\3418\275\026\267f\275\225|\274<d\213\213\274\301Y{:\263\025o<c<\230<\377\264x\275A\032\322;\360\310\331\274\014G.\274\335\262\022\275\235\210\020;\370)\342=E\311|\275\212l\245\2744\374\270\275\315\367+\275\317\216A\275H\317\356\274>V\000=GKU\275\233\r\276\275\223:\301<\351\354->\312\223\213\273\014\235\336=\376\362\363<I!\346\275\272Z{=\014\302\000\275\272\376\231\275\235\333\337<]\177A\274\177$*=\274\367\243=\342Rr\275NI\307<\277\372\244\274\005\276\304=\rzC\275\237\324\262<\342\362\233\275\306\332o\275&\345\002\275\256)\204\275_\335\307<\211\304\251<\262\205 \274\370\275];\366\222\350\273)\364\346\274\021\314\226\274\202\355\203>\035ku=\003\014\350<\366\221\037\275\301\004\247=t\201\277\275/PF;\231\221\031\274\226R*\275\367\n\013\275\205\244I\275\315[7\275\030\270\020\275\361i\264\274\203\213\020=}A\022\275q\335\344;\333N\246\273w\371\357=\356H\223\274\202B;\275j@\275\274u\251z\275\201\216\204\275\225\370\367\273\226\376L=\270F\221\274\336y\016\275\311,\325;i\327H\275\334\356\207\275|(d\275`\355\345\274p*\342=\242|\261\274 \357\361<\364k\022\275=\211\261\274]\271\300<\262\352\236\275J\010D\275\021V\003\275\r\271\246\275\326[/\274\252&\023=I\301\271\275&\277\265\2754\211\322\272\252\204\216\275\2564\267\2751u\023=\374\233\335\272\266\333\210\273\255\224R\275:\345%\275\315 w\275.l\234=\204G\250\275\304 \035\272\3673\203\275W\353\034\274\037)O<m=\247\274\272\363\004\275\032\031\036=\227\232\371<\177\213\362\274\"\034\322\273\367v\226\274\031\321-\275\033\'\354<\027>\307;\241fD\274\320s\301=\257\374\253\272\326\256e=\017*%\275\007\271\273\274\034\337\341=\341\034\315<\003e\226\275O\035#\274\245K\257\271\255\241}\274\347\216a\275\000&\272\275.\246<\275\032l\027=\315\236\024\275\220\001\t\274\023]\205\275e\355\300=l\222\274\274\270\030K:*\300B\274\026\305\000\274?\313\335<JZ\024<\321U\003\274\310\366\014\275P\233\237<L\036\250=\210\006\034\275#(\t\273\330\207T\274|\2517<\037M\322<\310\307\216>u\344\322\274v\331\221\275\202o\2137Gr\231:\356\267W\275\204^\013=8\236\272\274s\345:\275\260\033X<\000L\303\272\233.\205<\212XB=v@}=\325\332T=J%\335\274\023/\241;=\214\313\274M\347\364;\206\207\n\275#?\200;=m7\275c\240\274\275\245\t\264\274/.2\275o\024@\274m\375\035<\246{\273\274\241On\275\274q\361\272A\250\336>E\373\210\275 `\003\275\265G\235\274\267\356/\275\205\326\262\274\030\2411\275\211\306\\\274\205\3410\275\310{\351=\326\214C\275\\\030\264=\253\207 =\305o\304\274\210>\316\2758\240\241\2751\025\242\275\340\227\025\275\257I)\275\276\330\026<\251\354B\2751\223H\274{\252Q<\333\001\024=zp`\275U\264\007\275@\373Z\275\373\224\205;\016\305\235<\255\243\237\274J\357O<\224\013\331\2755\215\033\275b9\262=q\231 \275\273\262\200\274\262w7;\361\013\210;\203@/\275\271^E\272r}\350\274\325z\250\275\245\260\264<e\275\254=\023\342\230\275H\371\272\271\010&x<H\256p\275\250\025\246\275?\231H=\316]\241\275\371\276\205<p\312\006=\253\313\343\274~\235\244\275\357\233\013\275\317[\237\275\355[\027>\266\203r\274\324\000\275\272\260\265S<y\370I\274\006\347\321=\326L\263\274`6g\274\376\354{\275\311\230\236\275<\2742\274a\361\267<r\025\321<_/\204\274\316\211T=\305[\023\275U\360\273;\357\035?=M\272G\274\233\220\200\274\r=\363\274\304W,\275\337,N=\016\220\032\275\216\334s\274\000(P=HG\013\275MF\254<G\213\242\275\327\275r\2758B\257\275\337\001\207\275^\306\033\275\006U\035\275\3317\r\275%Z\374;\315$\347\272\031\322a\275\000q\'\275\237rY\274\375\357V\275f\262W\274o\205\214\275\374El=D\333,\275\320`\026\275\353\310\t\275\202\0171\275\261\027\010\275\231\221=\2758e\036\275H\001\332\274f\266\200\274\357\243\023\2752U\030=\225\205\t\274\327\326\226<V>\242\275c.\227\274\204\177\034=\013x\206<\225\213\216\275\314\022\240\275T\375\'\275\342\375\336\273\243L\220<\360\325\'\275+\200e\273\353\002P\275\234<\022\275\002\371\345\274\337\2028\275\366\365\211\2718J\270\275\016lp<\260P\301<ro\006\275\311\357\230\274\250\214\"<\177\224\200=\275:\213\273\365\241\201\275\035\361*>\353\262H\275\265\003\233;-\370\215=\355\220\220=T_\325\274b\301\366\274\034\210\330<\204\357\365\273\270co\275+C\205\275\300\177{\274\\\347\357\274\217\235\327\271\272:\216<\340w2\274\020\235\332\273h\272b\274C7\213;\334\013f=\220\263\321;\307K~\275\245b\003\275|\037\216<\360\3544\275\330\344\021=\344\351\321;\035\225!\275\371\000\201\275G\310\232=\251:\3578J\302\305<\300\036n\275I\177\022\276\205\224\211\275<I\006>9 E=\324\353?=n\337\203\274#\236I\275\334$\312\275\226\254\365\275?\"==\247m\267\274H\324\036=\214\275==\255\024\227\275\2261\333;\023e[=\241N\217\274\337{\322<\346\365\000=\ns\237>\\\217\244<\244\211\223\275\253H#\274Q\273\206\275\3624\020\275\216\356 =\306\360:=8\266\241<\245\246\016\275\275j\270\274w\036\215\273~\323:=\237\025\370\274\203\216\224\275\301\366_\274\326)L=\327F^=\227\017\371<\231r\267\274V\324\034\275\304\326~\275U?\235\275\010\277\323<\365hL\275\002~6<\331\275\365<7J{:\315tu\2751\241\331\274I\237\003\275\332\212x\2758\020\253=5\2062=\033\200c<4f\020=>\266\213\275\351H=\275a\001\266=g\014\220\275\356\220\251;_Iv<gz\017\274Y\372\243\274e<\315\274\342\323\230=\351\321\336\274eu\217>\327\315\240<\031]@;VX\"\2754T\246<\254\375\263<\341\347\364<\2557J<\002>\331\274\240!\275\275%\307\221\274<T\334\275\"\231.=_-x\275\364`\246={Z\023=L_n:\n#\264<O\256\335\274~N\002=\221!b\2723W\033>r)\277\275\255\036\020\275\261\324\377\274t\200\206<l\220==+$\325<\2532#>\324\307\213<1q\305\273i\007\220\275\032\327\016\275\211\326\034<\340\324\021;\347\235S<K\244\356\275\232\353\035=\366\344$\275\247m\343\272<\315l\275\341\315\356\275\317\235\033\272\030A\325\274\340\223\001\276Z\033d>\245\317[<\353\377\332\274jP\212\275\224F\365\274\270\266\361<\206\302\007<\205B\027<\345\244\270\274\260\346\313\274unv=\224 \264\274\332c\242\273\244\200\354\274J\335\250\274Y\231l=\213}\216\274,\2625\275U\216\212=\324\334\336=;\313\222\275\311T\\=R\025\277==`<=\302\305\022=\300\331\245=\0321\331\275\354U\351\274\336>\242=\353\005\242=\270\032\250=\0161d\275\222\307*\273\242\222\252\274/\'\031>\323\302\036=\254\345\230>\253\277u\275\275\005\035<\267I\230:\347\325\354=\316\343c<b\200F\275K\354\353\273\241\304\250>\231b\024=[\n\250<\334\257\225<\265y\013=\206\206\344<\374\007->\321\030\204<k~\202\275\201\224\365=xl\227\274\351\344.<\211)1\274I5\022\275h\t\314\275g\251G=E\301\025\276c\016+>A7\026\271q\332\207\275W\371\240\275L\307\300\275l,@\275\034\027\003\273\224@4\275\370.@=O G\275\346\021\305<\250\306\033\275sx\333\274!\220x\275G\t\037=\"\235\246\274\226\213\353=\235\324\006\275q\326:\274\324-\316;\021\024\3339n\375\214\275v\024:=\004\032\241\2751\237\336\274@\222\267\275r\354&\275\360,z<h\036\242\274\245\370j\275\n\322\265\275\306+}=N\245\031=\024#\361\274$\362v\275\243n\330\275\'\007\003\275D\177\316\274\205\237 >\034U\245\274@=\022\273s\303p\274\324E\t\275W\373!=3L\353\274\017\364,\274\024H\331\274\353\0225\275\375\311P\274\235~T\274\257\265\246\274%\336\221=\022\207\037=Y@\277\275\355E\025\275\235\215-\275F\177\r<\276\275\035>\032\212\224<\265L\270=\023\336*\275lz\013>\254fx=\326ui<\001\200I\275q\352e\275\2245)\274\263*\277=\257\257t=8\007\036=\210\252\022\275X\266\\=\207og\275\323\262\260<Q\025<<\3355\022=\205\320\244\275\330\211\317\274v\304\217<\3078\206\275,\237\255\274\305\351\331\274\276\2731<\266\336N>3p\245\275\224\264+\275-T\371\272\260\360+=%\357\013=\017`\350<\037\000\267\274 \313\224\275a\232F=\247/S<\216\202\031=\'>\004\275z;W\275\017\260\321\274?\354\206=\002?\013\274\270\224\\<\204\025\310<\"O\360<Bpg\275c\'\257\273\305\216[\2748Ph\274\000\254\254\275o\035K\275\347\210\261\275\353\300\003\274a\317\t>\013\253\307\273]\017\032=\236\324g\275\313d\202\275\372\227\355\274\216\035C\275\313/\221=\257M\227\274\316)\013>\256\235U\275\261\242\201<\316\234\300\273\377\267\365\273\234\022\241>\233\206\367\273$\377\200<\004\305^\275\230\313e\275\016\347\326\274\265\2027=U1\213>#\322\t=\210\370\257\274\325\030\\=~e\227\275\223\002@=y\273\227\275y\345\013>\307\024\002\275O$n=\032@\375\274)\220\326\274R\325\302=\033*\016<&\320\300=\261\037\350\274NP@\275\361\355\214\274G\331\315;\372~2\275\337\032\370<\2203\215\274\370\254\201>j\223%\275sk/=\203\355\372\273\346\356\222\274\217Z\230=\274U\r\274F\255\030=t\330\325\273`pG=H4\'=\202\265\003=\260\014\277\273\366\226\037\275@\216Z\274g7\2519P\247\214\274\037\260\221\275\357\'\006\275\350=\225\275\247\271\277\271\236E\020\276Cu\267\274\3062\";\320\220b=\325\020@\275\201\010x\2743\330$\275\244\356\253\272\323\234\207\275\366aP==p:\275\267\256\\\275t\265\342\274<\350\\\2759\314\351<hk\357<\004\356\327\274\232p*\274\342\371\267<\270\341\354\274\325\255\376<\311\375\272\272\207\211\302\273\244\337.\275\333\010\005>C)f\274\322\300\241=|\224\267=\346\2413=\245\rT\274\030T:=1u\213<\240\233\254\274\227\255\371\274\322`#<\343\362Z\275v\344\263=}\244\312\274\363y\362\274\204c\305\274qM.\275\243\304\014\275\367\311\307\275~\351\024=9\306\031\275\255\003Y=\002\375\311<\202\'G\274\310\363\221\275\273z+\275\340\247\270\274\262\000\331\274\312\014=<&\212\333\2746\244)=B\303\312=\236l\n>\240\nj<#\244/\274<\216Z\275\327\210I\274\257\346\226\275\275\333\014\275F\034S\271/YW\274D\177\010\275\263\200D\274\237\317\342<\216i\230<U2\252\274\232\233\006<w\356\237\274hjb\272\322\316\343<3\360\304;o\360z\275|\277\213<j\375\010>\260\327\313:?\310\027\274v |=\267\3605=\200\302\231\2752\261\n\275\007^&\275\212\353 \2741N\347\273\320\243\020\275^:Z=j&\360\275\003\250W\274\303\327\365\274x]\240\272\214\\\303\274\210\016\213;AEf9\034\355\244\274\371=\234\274\304\236\243=\177U5<\267\014\016=\233\266\315\274O\334\213<;q\364<\\\334\024\274t\031\036=\262\316:<\214c?\275\302\212c\275}4\321:E\302\226\274l\246x==k =.\025<=\016=\'\275\032<\244\275\030\375\r\274\311\212I\275\273\322><\253.\014:\004\240\247\275\277n\354<m\237\310\275\306\355\350=\207\016<\275~MW\273L\003f\274\270\376\352\274\373N\207=\331sR\275)\"\t=\221\336g\275g\t#=L\275\330\274{\204\220\274\364V8=\3114w\275\365\177L\274\257ng\274\027\276\315<\022\345\326\275\330\301i<\224\233\350\274\233&\220;\372\t\220\275\034M\243\273\304]\257\275Fg\256\2753\231\337\274\002\016\260\274SSX=\343\0367\275\226\233\033=\264\t\250\275\237%\322\274\350\314K<\231M\255=\035yL\275DB\035\275xi\255\275\r\335\016\275\225\325\022=\n\1777\275^\240\373\274\256\214\353\273o\315\200\275\323\352\361<r\0261\275\237\215\034\275\364\370\343\274\360E\203\275\375-\n\275\017\2379\275\214\211\236\274\210i\004\275;9W=Q^\221\275x\270\034?\366\376b<\333T\215=\357\240\212\274\221\2328\275M\273K=\307N\024=\244*\245\271\251\247\222\274\3146\220\274\027\331\304\275\214\3721<\255\034\311: \036%\274\346s\200\274m\365->ns\031\276T)\263\274sQQ=z23\274\367\320\025=\336\304\243\274\305u\301\273\215\241\361=\2563\004\276\312\323\302<GG\201\275\304\302\361\274\221q\002\275\377\252\224<<t,\275\354\272C\275\212\211n=\005\206\222\2746\021d\274\264\3504\275\301i\250<%\214O=\350\027\'=\323\033\204\275\t\257\222\274R^\013\2748\251\"=\3779\266\275\027\334!;\370\326\261\274\013\256\031>\205\374W=A8g<Dy\262<\333?\032\275*}\n>\003\246$\274\305n-\275Rc\361\274\367\036@\275\203\253G\274\337\243\265;\363Z\205<w\234\205=\234\231\226\274r\002J=\"g@\275\017!z\274U3\034=Y\365\335\274M\332O=B*(=\013T\014=^\256\000=\331\322\035\274\021\200t\275\374\202\224\275\332\230\244\274\317a&=\306*J\275\356?\260\273\233\362\032\273\263\306\273=Tl\026=X\3341\275\271\233\211=\006\357\350\275\243\240\010;\242\345\355<IF]\274\010\301\212\275*\367T=\227\004P;Q\266\035\274\334\002\223<\200\251o\274-\366\310=m\351\334\274\024\234h\275f\247\205\273\364\342W\275\r\211\337<\354\324\335\274B\270\240\273\177\0132;\340?\327<x\373\n\275\346\244\363\274H\313<<90\301\274\334\370B\274\370\312T\275;\261\005\275\002\246 =\204\357[=\305\343\312=\357\3724\275\177\227\217\274\327\026\027=%\322\211\274\233R;<$g\312\274+\216\347\2747\312\212\275\020\330\200\2743]s:\342XV\274l)K\271\315\274U=\267\177%\275\254\t\210\275\302\2123=o\237\335\274@\304\017\275\035\000\362\274k\214\020<9\352\272\274\325\322 \275/\302\320\274\244 \306=\225\337\317=jE\201\275k\200X=\263y\222;\242\211=\275\0240Z\275\233W\"<\306\n\010\275J\307\340\274\256%\2539u\260\204=\362[\264;r\255G=\243\301\202<\362oG\275\257(\200<<\260\036\275R\261\262\274aU\216\275\027\267_\2759\376\237\274\037\321\025\274\363\333\214\2739\323\006\275\257\002\260\274\206\226\272<\004\351\021\274@\323\376<-\250\361<\371\246\356\273\362\270*=\'A\r\274P\016\002>\305u\253=\002\232\266\274fC\314;^\014\242\275\347\2101<\245A\326<\372\3306\274\023\355\341=i\233\316\275\024l\361\274\271x\321<\343\323\301\275\327\001I\274\035\224\315\274z\344Q=\t\361\214\274\351\270\230\275Dc};\340\342\213\274L\374\276\275\232j\236\275\317\200B\272\274#\363\274\325m!=\327\007\320=i/\352<\303\212\351\274en\316\272BxF=r\264g\274\000\327\264\275\376\352;=p\331w=\002\227\315\275\236\262\024\275\322X\232\275\006\301\250\274b\210,;`\316:\2732x59\313\374\224\275\372\013\315<\375NM\275\350\0322=xb[\275v9\032=\321\tw\275\340\323\374=\311$N=\335\343\030=\377\273\3739\317\007\226\275\264\036\216=\252p\320=\031\0046=\337n\373\274\016L\354<\345\030\375<G\033,\275\306\313\020;\257m\363\274\327\250\'\275\002\365\210=\354\006\202\274e\253>\275\336\370\033>\\\037\217\273i\t\003=\035ma;\325 \213\274\201\242e\2758\300,=\275\364\222=\021\200\223=\222_\'\275\226\327\211\275\302\300\370\274\226Cn=\227\362z\274\177\364\225=\202\023\211\275\234\375\311\274\272\207C\275\331\347\250<\365\007\351;<\305K<n\241\301=\371\203\345=g\313?<\261,[\275F\257d\274v\026\'\275\177\313\227\273\2163\251\275Q\017\003\276\353\032\027\275\331Q\032\275\t<\244\274\n\360c\275\225\354\032=\342\332\210;\361\236\004\275\266|\020\275\257\001\356;\230.\366\275W|\026\274J`Z;p\256[\275\0218\006\275\014@\266\274\214\022m<jV\312=\010\242#\275\2547\370<\350`\322=\266\236_\275\256E\314<\026\257o=N{8\276M\243\227\275\304\332!\275V\270\n\275\241\250\246<XL\375\274\315\340_\275U\026\366\275\005\276\021;\361?\326\274\222\220\325<O\301O=\304\232\243=\215fP\274Pv\240=\354\030\273\274\236R^\275kYN<\006I\221=\316\236\234\274\251\231\227\275\370\223\256=\313\363J\275\306\2035=s\002\231\275R\343\222\274\'\350 \274\t\340\014\275T\275\t\274\375\tT=V;\227\275YU\207\275\313\352\321;\313`\252<\311\223\014=\324\024K=x\345\004\275\341\271\340\273T\334N<\200\364\236<\3150\336\274F<\236;\367x4\2759\000\207\274\325n\024\274\203yW\275\233\177\254<\216\371\034>\276)\246\275\302b?=\0066H=\302\212)=\376\275\351\272)\341\332=]z\346\274LB\327<\221\336\323=gW\220<\365Th\275\022T\031=R\021\020=\351\370\001\275\320\274e\275a\'\004=\375\352\313\275\177\236\277<u\231\221=|\0336=\".V=\0350T\275]W\000=\215\263\260\274$*\323=\017\032\034\274P\375`=\030\374\240=k\247\222\274\317=@\275,\002\264\273\022\033\202=\000\250\013\274T\257<\275\342#\366\273\210\\a\274\314(.\275\221\t\315\274\\\331\022\274\022\031\257\274\344\302\253\274.\351\203\275R>6\275\217\365f=\'\271\010<\222\030S\274\216\327\233\274\223K&\275`K\334<\201|>\275m\314\234=o\r\005\275\234-\001<\316o1<p\235\206\274\214\3765=\251{\'=\253\345\237\273\233\365n\275lu\266=\247\331\202\274*\336\212<N-\025\274\243\317\266\274\320\245T=\317\214x\275\007\356\351<*c[\275\331\025\312\267\220\364\203=\323\317\326\274\240+{\274$\244\333<\'*P=\343@\032;\207t\222\275]>O=\320\213\032\275n\"\021=27_\275\034\271\000>\022\362\372\274-\256\031<\r\250\226\275\345\224\315<\364\253 \2736\356p\275\216\353\265=cg\010\276\330\301\'\275&\017g\275p\357\034>\347[,\274g\245\231\275&\016\240\275\360a\202\275*\227\263=EpX;\353d\321\275\237\363m\275vb\037;\242\204Q\275\213\203U=_\370\034\275\2413s\275\005K\241<\352[\222\274\241\222S\2756\221/\275\337\336{=\344\301G\274L\227\021\275\001\226\370\274:\335\233=\205\277W\275\033\273x\275\221\364\314;}\277\376\274\323\312\n\275\225)9\273P\272\322\273Hg\255;B\330\375\273F\030\224<\367\343\243;\027\264k\275\"M8=\323\265\240\275\340\025J\275\030C&\272F\217\205\274\303\014f;\307f\331<\220*\007=\017<E\274\204|\247\275\363\2438\275\352y\350<\223v\014\275\350\357S\275Dr\244\274T`\320=\221\013\3409C\343\375;!&\342\274\332\016\272<\306\325N=\302.\330\273v\2429=\255\006\210<\323v%\275\361f\240\275<N\003=\020\357G=[\000m\273\002\004\247\275\304\361\357<j\225\243<\220P\326\275\245M\211\275H\207\203=\006\204|\274\333\342\203\275\360l\260\274\3414\253\275\330\021M\275\201\264\201<\3231 \275\3454$<&+O=ta\327\274\377\313\272\274\270\013\260\274\361\344\300\274\343\361\341\275\377\277+\275)\354\200\274\024B(<_X\232=\3501\177\275Ph\214=\33403\275][H\275\021\225\220\275>\241M\274y\311\210\274\371\014\244<?-\227\275\213pd=#T\000\275G\305P=\207\244\026\274\224\346:=\271\203\303<\204\317\"\275.\356\031=D|\250>\341\335\320<=\'><\302\006\013\275\353\336X=C\307\317:\337(\333\274)\024H=\205\235\036\276\341Z#\273\3262\252\275\205k\371<\033t\275\275;X\341\274\377\277\310\275\327tH<t\317\330<\t\361\177\275(\304\211=\271m\264\274\3406!>\352D#\275\332r\304\274\377\0236=;\223\274\274\315\311Q\274\3410\277;^\277\214\274\271\306\244\274\251Q\303>\306@I=\005\323\017\274\367);8\242\264\371<\246y.=\303C\314=\341\327/\274\244\216\006\275\3330\\>,\241@\2756l\303\275-}\222\275\322\205\254=\360\363R\275G\363\367\274\025\236\010=\273U\250=\210\000\270<\260\361l=\254\307v\275\362\206\234<\274\256B\274\3032\365\274_\267\033=\260\343\252\275i$\362\274\304^\310=\252\245\261\275~\017\007\275\006g\267<\035\032R\275n\342?\275\\\237\213\275\275\340J>\304\362.<j\370\213\275}\245J<\256\343_<\226\314\337=\347\2158<:\r\262=\274\217\346\274\346S\341\273\346\005=<\313\t|>M\224\356=\236\231b=\302\277\204\274\033\222\277=;A\206\275\203\353\273<\273\266M\275F!\213\272\254\265I=\344\240\240=\037\217\243\274\275+\n\275\r+\221=\263\003\004\275\342>\204<cp@\275\265\370r\272\021\023\250>\354\364\315\273w\214\204\274\306\226\262\275\232q\025\275\342&\312<\235\375\311\275\"\355\214\275\177\031\242>\t\275)>tx\017\275\331\221i=\311\244\326<\356\313d\275Qw\276\275\002\251\220\273b\353\236\274\205\306(\274\271~\032\275\200\314t={T\234=\355\370\331\273\327\021\000=\212\021\027\275\277Gu<7\301\023=\030\004\216\274B,\315\275+\314\221=\272\260d\272\026A\r\275\252\345\353;\251\'\363\273\221\323\247\274\342=f\274\211\356\004=q\331\001>\2673\251\274)\257,\275\247H\322;\310\255%\274\007s\r<\215\352\014>\333\237\345\274\035\224\036\275\t\022\260\275\\R\224\274\236C\002\275X\247s\275\373\245\347\274\236T\335\275\300}\033\274\337J\355<N\'%\275\277/\277;\356\340Z=#g5=\300v\347\275\304\024\354\275\'za\2759\220\024\275\240\"U=\274\366\201\275U\\\014=\005\377\376;\003\337\363\273f\271{\274\212%\027\275\237\241\034\275/$\206=^\374z\275\000\303\032=9K\023>T.\204=M\007\331\274\032\260\217>\241)A>\303\272%<\352\201\033>\233\2640\275\271\230\200\275\351j\331<\237jk\274\027\316\235<.\350\236\272l\311\272\274\357R\206\275:\312\221;@\320\363\274\002\373\355\272|\202\027\273v\217A\275\233B-=\247\212Y\2751\"\365;\200[\314\273\236j\374<;c@=\341.\212=V(\216=\215\004\316\275\242\257N\274g\207\253\274\340]\233<Rc\344\274\002\252\273\274\265\370\007\275$+\235\274Vj\3739_L\036>\352\310\217\275\016\323\211\274b\361\333=v;\250\275\274\252\020\275\370\277\213\275\347\326K\275\300\356\013>\035!\005\2753\301G\274\n\351.\274\327?\027=\201\2404<\302\317o\274bm\006>&E\331=?\324m\2756\234\337\275\222\367A\275\247z\315\273\"\316\037>\007e\224;\257c\020\275rc\357\273\246\035\326=\302S\177\275\323\027\n\275\033\"\033;\353\250\032\275\237=@<w\374\230:?{\030>\3619 \275\270\235\246<\317\231.\275\275\016\026\273\260\'.>\032\314Y\275\023{[\274UuO=\301\210\247=Y\000*=\340\371\234\275\324\223\327<\271\006\302\275\2369\245<\243\236a\275\347w\340<\240\234}=\370\000\314;\027\345\362\274\227\3454\2753\202\006>\003k\325=>@\371<\257BR\274T\222\203\273\233\352\214\275%\335<\275\0305\016\275\177N\000\275\267H\035\274\203\323\177\274D;\020>\360\237Q\275\250|\326\273\241/\240=\030\274L\275\356W\200=\201/\033\275 \270B\275\205\377h<\006\212\370:\375\356\337\2741\324\033\275k\r\034\274\310,\230\275\r\002\350\274\2254t\275+\225N\275\327Q\207\271\353\002\t<\016\311\273\274k\"\024\275\210h\177=\003\374\314=\342\005h=t\330\233\275\311\\\375:3\353\000=<s\246=\363\360\273=>\342\003\275\342\026\346<\267\217\233\275N\342\323\273\302\336\002\275\244\215\334<d\201\251=\300?\226\273\031GF\274WSl>U\270\007\2744Tj=\202Z\332\275(\341\032<\032.[\275\312^v<(\014\224\275\252c9\275\234\251\337<\250\352\244;\275\342W\274\245\250\371<\032\033\206\274\202?\211\275\364wp\275)\356Q<\350\206\3366\366X\223\274\251\277\220\275^\252(=7t^<<\377\232;\030\215\225\274>J,\275d\tO\275\025x\242;\033\244\215\275$p\314<e\241s=_\266\321\272\217\362\300\2739\0074>\224\244\302=\275\370\020>d\001P\275\n[\344<\301cH\275xk,\275%I\'\274\006^\200<]\206\232\2748\032\210\275\230E\204\274}o\350\275Q\344\301\274H(L\273&\232\004\274\221s\250=\224\365\'\275\326\004\361\274\n--<\203\367\315\274\'\2567=\323f\254=\273\266\307\273P\244\300;F\3610=\330\214o\274\267\357R\275T\351L\275\033\213\304;\227\353`\275{?\345\274\002F\330\275\307Z\256;6\033\273;\266\267\310<\244\274\340\275\324\257\031\275\241\020\251\275n\2364\274\357\201-\275A\253\330<(\022\224=z\003{\275\267\3724\275<\3428\275\300\275\"=\266\375\336\274\336\024.\273\365\310\240<\374\345\007<\010x\316=1\035\336:\203C\216\275\376\250\317;\022\226\331<\3647\326\274RKw\274~\354\276\275\212c@\275#,\311<6\304\214\2741\205\330\275\230\250@\275\250#J\273O\334U\275\030\304\320=\372\226\036<\377\003\r\275C\177\241\275\010b\215<\2412\263<6o\303<eK\217\275m\225P\272\267G\025\275\300\014-\273K8y\274\234,\005<\300\260\273=\252\270h\275-f\225=_\274Y<\204N\177>\301\3672\275\332\017\030\275\020Q\245<\330m|\275\013l\030\275\352\260\036=\273\0275\275\200\022y=\364\320\235\274\354)\361\274\332\200E=uH\355\274hE%=\311\244\203\274\022\222\000\275\223Ym<\362$\235=\023\250\212;aFT\275\225C,\275y\351\344<\253\024S\275\323\274\217:6\260\003>?*\263\274\023`\362;\2639\005\275\234\030\243:\262\320w\274<\253z\275f\353\201\275.\363\352\274\006K\007=\252\366:;\253>K\275\224B\205;\316\244\323\274\217=6=:\334\036\275^\217\n\275\320*k\275\\\014\024=\3148\233\272@\201R=4\257!\275.\024\267;H\335Y9x\321\357<\215\236\013<S\337\266;\353L\344<m\331 =\332\177\245\275\'\202\010\273\237\267\205\275j:\236\274C\336I\2758,\261=\247\004[=0\033\220\275\035\t\244\275\246p7\274%\277\014\275!\316\014\274g\267i=\326\361\013\274o\000,\275\257\245\305\274xk\214;Q\303\237=\234:\017=+\221O\274hhG=r\364;\273&\217\350<\3727\247=U\022\213=zX\t>?\\\250\275\207#m\275r\nE<o\024\314\274\205B\224\275\273\313\374\274W\352\200>\235\035C\274]\375?=f\317\234\275\344\203\312\275\376\241\232\273\247b\036\2726\341\267\275U_\004<}\236\203\275m6\233\274<\355\024\275\307\353\262\274\200\234.>+J+\275\236\031\000=t4l=r,\005\275\374[\240\275Y\354\013\275\310\261\r\273\022\\\016\275\243\014\304\273\276|\254;L.i<\316\013\030\275\265=\317\274X\006\200\275\326\354\270=\371\037I=\203Y\210<\235!\035=\365\023\236<3J\207<e\202\277<H\244\313=\323\356z=\3341\210\273v\252A\275E\235W\275L\357\221<{\0240=\262\216\203=\366\035\305;}\322.=\356\255$\275\256\265\r\275\342y\324\2750S\267=5\242@;\364f\031=\323u!\275\244\267<\275\035\256\245=\001\222Y<\375\363\252=\021\365#>a\355\032=\310\247\316\275\246@\316:\316\311\316\275\250\365\236<\017j\200=\t^\214=\277\000\357\274\266)\031\274\240I|\274U\273\222=\324e\207\272\340+\254:\321\277\352\274r\204-=\340}#=*\224\023\273\222\255\016\275\263\035\316\274\245\216X\275\317\366O\273c\325\325=1\334\330\274:$7=\211=\004>\374>/\275?\347\330>Y\014G\274\322\223\362\274b+>\275[(g<p\362\202\274\010e\242\275>\306`=w}\252=N\302<\275\322g\342\274\017)\253<\003\361\033\275+)~\274\202\350\210=I\364\234\275`\365\025\275m\323\374;\241\021\222\274\274_\331\274M\016q<\303&\321<\326\337H\275\366\340\264=\314\226,>\034}\217\275\337V\226\274z\341w=\275\372\033\275\204\010\035=\252\300\225>EW\345\275\371T\020\275hi\362\274INT=[>p\274\310g\016\275\003Zx\275\343=\024\275\265\217\212=\223R\366\273xY\302\274)\264\217\274\327l\320<\266`\266=\203\276\247\274\331\367-=f\264\334\275\002p]\275\016\225P\275l,\";\370\315\013=\267\007\303=\377\241\022\275\232\217H=n\260\005\274\014I\307=\344\275S\275\245\244\022\275r\313d<E$K=\320\210\344\273\357=\356\274\177:3\275X\370\2249\324H>\275\353\035\242<\336\240\205\2757i\004\275\024\321K\275\241?\302\274\276;\262\275\332\312\206<<!!\275D\230\246=\027Z\336\274\270\240\004\275\2230\037\274\366\025(=M\375t=\2677\246\275\236\275*=\207\334z=\267\005\004=J6T<r\300\352<XWW=\0251\202\274f\032$\275\'\272_\275\351d\330<|\225\24798r\237\275\265x1=ubf\275\334o\216\275\211\312\236\275\275\262\233\274\033\035\315\274\020/d=6\022\032=*\225\335=\212D0=0.\220\275\233_E\274\274\226\234=m\324\225;\n\341\205=\251\255\230=\325!F\275\230\203Y\275k\357\230<\344\256,\275\007D=\275\036\251j<\035\315\376\270\r&\241\274\000\235_\272\250A\203\274Jw\213\275\3014)\274C\010\261\275\363\242\243\274\207\233\233\271v\3471=v\222\234\275\034E\247<\266v\236<\230\215!\275SS6=\262\270\021\274\025\277\205\275~\322\003\275}_Y=\324\312\274=\217\304\320\274\372\006x\275X\267j\275\027\355\253<\007*f=z_]\275\331r\263=\323\373\002>?\317\376\272\324A)=\223\371\036<J\302]\275j\033?\275p\226\'\275\034\"*\275tw\262\274\274,\320\273\3019\253<l\327\277\274\036\324\n=p\023\240\275\235j(=)HR\275^,?\275\374\325&\275\034\317\367\274\364k\276\273\365\327\237=\036Y\335=F\360]\275\364Lr=\261\303\246<?\310\312\273\260\311\250<\352\371K\275\2337.>\203?\311\274\207o\374\274V\032R=\365\306:=\236A<\274[\367\'=\000\375\225=_\347)\275\020\021\332\274=\275\234;.\243\025<\364\221`>\013\357\213\274\034\310\317\273\001\375\030>\221\211Y>\"\256\221=\014\317T=\330.c\275\241;*<\216\312\017\275#q%>\2246c\275\305\341d\275p\374\350=\211\337\335\274\002\263\336;?P\303\274\310d@\275f\332\002\275?\316\331;\031G\272\275.\244\313=\205X\211<\270h\250\275\306\310y\2756\274.=E\023\n>\207\206\254\275\332\020\242\273\026\315\000\276n\337\252:\247\221\353\274\253\013|=\206\246\205<\2357\311\274N\354M\276\207x\374\275\0314\317\275v\006\"\274W H=\031\214\352;\320\341\202\275\031\006*>\376::\275&%4>}\361E\275g\201\002>(\240\033\276\262I\371\272Ma\202<\004c\353\274\003B\351\274\r(\253;9%m=\031\232~\275\352t\035\276\275\n\300\274(\224\216:\214\325\254=\343r\200\275\342\374?\275\224\033m;1i\370\275\210\314?;^\254u\275\242|\322\275\266~\250\275\361\223\261\275K\263\'<\327\277}\275\324\035\331\275L+\003\276 ),\276\374\251M\275c\267\020=\241r\210=)\335U=\207\205\\=\002u`\275\002\002\021>\230\317\242\275\272\352\223=#9@\275\300\214Z\273\354\336\\\275\227\2353\275\237\260\202\275\006.\201\275\261:\224\274\037pz\274\201\343Z\276\267\3640\275\026\335-=\370\273+>\334\255s\273\353\375\002\276m\3300\275u^\207;\031\347\\\275\311#\272\274b\222u=W\003\256=\031\212\013\275?\344\360=M\231P=+\3108\276s\246E\275h/\201\274\324\315\335\273\207\275N\275\366k\323\275\272\214\212\275\212f\247=I\305\276\274\214]\023\2769\202H>\227?\304\275\226:\033;\313\016\\\275\212\344\375\274\377>\310=\007\344\303=\224B\002>~\315\255<J[\207\275\267\327\304<\372\254O<h>7=\"\206\023\276)\014\252\275\352\276N\273\332\014\234\275\260\006\007\276\013\232b<\237ad=vF\265={S\350=T>)<\266d\024\276[\266\345\273\010\031\351\274\000\n\235\275-\\\202\275\362\242T\274\227\272\314\274\2540\205\275RW\006\276\010\n\002\276\203\263]\275a\313\261\273\331}\265\275\345\217\265\275\361\336Q\275\373)\235\275\274D\373\273F\323\033<\263\007r\275GCq\275\021+=\275\330\350n\275\376\221\240\275\206i\241=\342\276\021>\265\005\004\276\017\374\267\275\237\025R\275\312\371\017\275.\014\347=\202\332\250\275\333\233\026=\177W\002>a\017\247;\250/\202\274\201\232F=\215\364C\276\365N\316\275\311\2034<\017\360\020=\265 \002\275>K\374\275\207\001.\274\344\023\265\275%a;\275%w\377\274\t\002a=\367q\007\276.\254\007\276\t\273\251\275\023R\310\275E\356*\276\232\2279\270\nc\315\273\002\016\330=3x\252\275{\354\253\275(\023\035=T;\240\273\215\323\001=J\320B\275o\227\225\275F\316\247\275J+B=F\266,>gp\204\2753\336u<\317\246\213\275pC\331=T\337\234\274s\263\311\274\2018\204\275-\330\303=\272\r\301=\342\345$=\377\327\271<\276b\334\275\231\345\321<\351\323G\275\210F;\275\307VE\275\270%\341\274\002\206\243<\002\270\216\273\313Q1\274m\036\002\275PH\224;\224&\022<\331\300\023\274+z\007\275\350{?=\265\201\331\275\373G\002\271g\335\244\274\315w\270;\030\267\254\274\302\261C\273E\257\021<\225-2\273\276\336\236\275d\\\\<\355\322\026\274\351a\014\275M@~\274p\232\344\274\222\013\303\273\205\353\241\274\207\030\030\275\354\326l\275\277g\332\275O\177\020\275\216\014\334<-X\206:\247\335\375\274\307\356\200\274\273\210\204<\001dE\274\336nN\275\321\341o\274\007E3\275\374\220\226\274\230\252<<\233\324\200<\250\'\354<\236;\007<\nf\362\273\252\365\340=\037\357\016\275\210C\021\275\255\030\030=\020\261\t=1S\r=9`0\274\236\373\353\273\267\271[\274nt0=\263w\020\274P\374d\274\265%x:>\355j\2759/\272\274\032\0206=\204\257\215<[\261f<F\350\261\275\333\233o=\374\277?>1B1\274(j\206\275Cy\243\273wV.\275\020y\033=\n~\220\275\337UK\275\225Y\002\275\355\204\221\275\277w\337<\251\0160\275\275\237\244\275\264t\220\274q\373\030=\277.@\275\2749\275\275\244\002^=\333\364C\275t\251\016>\365 \306=\372\333>\273^?\234\273!\232Y\274\275\233v<\216~\207=;\036\350\273\010\2360\275\033\200W>\"\205\001\275\300\233\200\275\004~\374\273\211\030\024\275\345QQ>\2150\251<Kn\321\274\352\277\020\275\024\025\r\275\372P@=Iv\021\275\002\322\250<7\307a\275\301\205k\275t\277\367\273\371\016h>0\213\236=\014\330T<\357;\332\274b\223S\275T\017\003\272\275\036\001\2740\345\326\274\030p\314\273\370\\\370=0\000.\274}\343\325\274[F\210\275\307\202\271= \355\304\275\'\261\266=\244\272i=\331 \307<|?\013\275\227\275\226\274\340m<=\327\354\036\275\264\000\334;\254i\305=\300|\245=}T&\274\267\263+\275\3160\007\275\233\207)\273\303X\010>\364\006\205=\031;\304\274C\030\246\274\240j\203\275n\244(\274$\272\020\275UL\203<\211\030L<\243\317+:\276\270@=\225U\363\274\361X->8\220\355\273\232\242\n=\242&\251\274\031\177\316\274\271iG=\353\"\257\275\201\334{\274z\247\261\274R\226\023\275\324Y\232\275Dr\250<\303\302\013=GG\231<\343E\212<\026\364F\275OG2\275$\247\021\274\376)\267\274qlT<i\242\362<\344b]\275\325\277\357\274R\216w;_k\177\275\026J!\275\257\334\210=\355\017\264\2735\256Y<\026\363%=t\332K\2751\310\253<\025\317\325\274\327\207\002\275#\336\306\273\026C\301<\227\311\371=\323/K>\033Y\364\274]\260;;Ot\224<\\\003\205=\204*\246\275\035\347\355\274\002\265\'\275[\234\006\275\371\342\264<8@\n>X/t<\010J\262\274\235\245\035\274i\366q\275y\014\000\275\035\317\331\275pe\024<xE\363\2746\310\235\274\242:\r=\223+<<\321\244\202=\207+\n<&M\215\272\277\374\236<C\354)\275\264\344c=5\352\335\274\311\374Y=RB\242\274\006\344\373\274\204\326:\275`1L\274\202B\326<\010r\211\275R]\366=\264\250\354\273\315\325\307;>\334\314<j=S\275\355\227F\274\033\222\351\274j\002\032=\355\241\337<\277a\036\275\367\231\271=a\366,<\370\n0>W3\222<fp\360<\002g0=\360i%;YX2\275\3166\246>\224\354\217\275n\300]\274(\332\014\276\234E\301\2746\007\'\275\340\312\320\273\307BK\275]\037\034\274\035^\374\274\244\341\362\273~qX\275K\370\013<c\205\002\275\034\363\233\275B<w<\033\274\t\274\231\321S\275\276\016\030:\033 7\275\t\373\355\274n){\275F\000\213:X\233\224<!\233Z\274>w\273;f!]>*\267\342;H@\276\275\2067\256:!\2007\275\311\345\337<\037A#=\263O6=]\325\215\275eb\306<]\242\336\274\177\334\025\275\265X%\275\031\341<=\263e\237>\254Z\346;\344\267\222;\306\324e\275\233]\305\274nK2\275e\\\017\273|d\t>\277_L\274f\365\003=\261\225\217=\007\272\233=\373\361+>\267\006\352\274\333d\335\275Q\364^\275\327yd=\301m5=s\376\014=\006\266>\274JL\2528\234S\030\275\\\010\375<O\237q=\255G]<\212\252G<}\270\313=\276\211\037\2756c\025\2753\365\266\274\217\362\305\272\032\326y\2741\3359\275\252W4<?l\027>\253\027\237;\370\006\310\274/6K\274\026\ti=\010\342\334\2747\342~\275Z\245\225\274/\000\273=\202;\216\275=W1<S~\275\274\002\267\001>3\335c<\343\274\226\275`\205\005=\253\375\244\274\016\310\224\274V:\025\275\221x\232\274\233<Z=j\'\342\274\251\226\"\273Q\257@=\261h\224=\335\225]\275iq\035\273)\010P\275\365\313h<\302}\241\274\364K&=\216\032\220<\231\003\327\274\342\243\037\274\361N\302;{\311\262;\326\325?\275\003h\025\275N\340=\275l\314\237:q\254\223=\325\245\344=P\366\"\275_Q\021\276\352W\203\2752|\363<n*7\275\023\337\333\274Wo\343<\234\013\207\274\203\2566=\274?\023=\327\260\237=3\337u\275Ve\203\273\207b\230\275\227\022\017=ubR\274\275\373\020\275\023\234\222>\017`=\275\226\302N\273\302\232I\275V\035K\274\373\241\233<h\304k\273Wp|;\365\220\235\275\002\301\303\275B\300T\275T-\267:Z\340`\275\344\tG=\251z\344\274c\307\316<\3509\235<\036g\t\275\026\235\320<k\365\016\274\021{S=b\\w\275\221\214k<\004\353+\274\264\330\332\275b\014\253\2752\036\322\274\274\364|=\302\337\220;y\037l<@\321\271<\245o\337\274\356\340\361=@\276\205\275\013\270\213\275W\265\212=\331\004\212\275F\300\317<\031\023T\275P]q\274?\237\351=\010$q<\027\210]=\346\236\037;\370J\231\274\364t\205\274g\255M=\237\313\227<\371\364\302\274\227}t<\204p\232\274\010,E;\234\245\013\274`wT\275\355:\255\275w\371g\275 \371\330=:\347\215\274\252\352\346\275\246U\n\275\343\227\364\274\177\341Y\275\366\221\t\274!s\200\275\036{=\275*\316\261;\311\241\306;\227\'s\275#\212\035=\216h\224=e2\001;\213\300~\274<U;;o\017\000;\353\367x=(\212\202\272\245\246\027\275>\332\343<\315\207&\274T%\004\275\224\227\343<\375&o<\260W_<c\252\006=\341\356\215\275\214\3622\274f\303\207\275\204\230[=\242\361\270\272\014\347\223\275\341\257\320\274j;Q>[\001h=\340\236\312\274\227Y\237=\025\233\333\274\217c\207\275X\002%:\302|H<I\226\345\273\356\366\r=\251\261\021<\237q\014\275\360I\010=\236{[\275F?\272\275\374i\213=\225\212n\273\360\221\004=\024\200\000=\036\337\234;\313!\233<\024 \014;.\0054;U<X>v5*\2750w1\274q)]\275n\005\227\275X\303\007\273<\266\225\274\217\345\253\274\005#\026=\204\340\261\275\306\237o\275\353\221F=C\244%\275\214\001\255<\255\006\206<\260\001\242<\330\267\014\275\373\022k\275\352;\306\275\004\363\232\275\355S\367\274\224y\333=8\0367\273\035\354$=\364#\236\273%A?\274*\034\276<VN\r<\'%2\275x\000\346<B{\370<9\277\004<\204\'K=\212n\030\2746\211\033\276\310\342{\274\231\302:\275%0t<\257\256\251\275\307\374\315;Y\371$;\336\203 \275\031\026\217\274\364\354\330\273\034\225N\275\366\211;\274\230\333k\274\353\367V=\367\306\377<U\347\205\275\364\263\202<!\374\316\274\nOH=\026L\357\273\307I\035\275{\024\303\274p0\304<\360\257\010\275c\004\021<\255=6\275/\245\376=\344/o\275\330%\257\275\345\361\004\275nW\022<\204\267\225=\231e\241\274\311\330\037\273\304e\002\275\362\222\305\274:\007\351\274$\273\036\275d\363\243\275\227F\324;\370P\267\274\253\352\316\274\374\031Y\275z)I\275\330C\346\274n<\024\275{\000\022\275\237\354\335;o\340\'\275\243\021\356<\222?A<\320\267B\275n\204\333<#\216\232\275\023G\316\274\016\350\353<\014MC\2752rB=\304\2471=<\343\302<\326\225\252=Xm.=@\202\222\274\373\206*=\035\260!\274\324\036\\\273g\363,\275L\366\213\274x\024\025>)\'\223=\305\272\203=\252\372z\275\337Z\215\275\241\020\307=\0048k\274]\264\322<\363\277\232\274\340\346\266\275&\266\002<\302E\204\275\304\204\271;\366N\351\274*ur=F\235\235\274\030\323\n\276\247\3446\275T\034\334<\322\260\241\275\336p\306\274\265^x\275\372\014K\274m\253\200\274\262\001Q\275\212\212\221<c\033[\275*\356\014=\217\355J\2758w\257\274\332x\327=\026\237\235\275\0352\006\275\247)V=\324<m=u\377s;\356\214==\335\262)\273\r2\003=\371\340R\274\272a\315\275\217E\307<f\346\037=\365$\203\274\350oc\273\034\256:\275\342\273\371<\306\360\247\274\251!J:\'\316\016=IjQ\275\024\t\343\274\356\260\243\274Y(\032\274I\200q\2750BG\274\264\374\336<c\321#=\216\033\371\274\341\016\037\275B\337\221\275k\005J\275\221pc>\337:\220<\343m\312\273\322\212\226\275}\206@\274 \366\001\274:\'\225\274+\234\307\274jF\207<\234\016\010=\233\254\216\275+\214n=\213k\004>\025\027\225\275,\273\257\273\362\033\242\274\237\227(\273\217}\223\275\210q =x\275h\275\037\302\343= xJ\275\304\347\030=\352\237\346<\255\346\355\274\354\275\304\274@\025<;\211\035:\275\310\"\t=\202\250\213\274#6\014<\353SG<+\365\026\275\3554\014=qDu9Y\317\'\275\252\213\3559\351c\250\274\336\226\030<\207\236\337<t\206\310\275\342\004\032\275a\340\017\275X.\265<F\357\332\275\211Gy\274\243\376\264\273\356D\263=\315\347\232\274\335\271\234<\023NF\275 \231m\275\202P\004=\277?\241\275\226<\342<\234\335N\274\217\252\235=5\211\034\275\371\226\023>\177\260\313;\021\333\327<^a\330\274A\3746=\355\215\200\275\313\320\r=Rx\010\275\322\033\202=0\310[<\217H\267\274\364^\237<j\031&\273\354s\264\275\0221B\275\214Q\025\275s\231F\275\250!%\276\366\334\267\275$de=[\221\020\274 \233A<\365xp=\314\257\211<\004\361\356=\345\263s<\326)D\274Tp\224\275\206\2074\275sS\263<a\026@>\341\022\200\275yv\n<\256\343\374\272o\021\355=\"k6=\356\310\235\274\346\036\256<B\336\332\271;\025z<\242[\214\274\251\357\254\273\0218\226\274\214\222\314\275\230G\022\275t\352\032>\324\0226\275\364l\257=)\252\256;\335\022m=P&\241=MJ\t=m\3630\274q+\337:\025\367\006\275\376\200\233\275g3l\274\032<;\275\205\206\207\274\346\374\321\274\300\002\252;\232\260g\275\332\347\240\2740K\371;\317\321+<\340\207\300\2738\334.\275~\2101\275f\315\342\275m_\250=\372\312\013\275L\226\350<\177 ]<\252\224y\275\\\036\367\274\261\274\232>FO\177=Nv\344\273\3176\\\274\301\301\r\274B\336\217<\264\213\031\275\210\301\312=\010\371\266\274!-\254\274I21\275\023\324>=\364J\207<y1A=\253\254\236=aV\353<\033\002\323=\'\177t;\016\217\325<\226b\341\274\237K\216<A\246\307\274\033Pk\275\255\330\027\275)~\227<\035AZ<\004\016\001<\026\333\342\274]^O\275;Xf<P\034N<\300\365\315\274N!D=m\"\367\275\356\257\302\275\021\210R=\305^:\275L\221\034\275\340S\321\274\2264E=6\326{\274^11=\200\316\334\274\242\032\035\275h\035\'=\031\306\317=\217y\013\275\017\356\252\274J\313f\274\334-\331\274\344-\023\275\323\335@\275\350\374\000>\231\233\320=zH\020\2757\177\246\2758\334\275<H\356\372<0P;\274\347U\206\274;\356O\275c\316\276\275\377\355^=\342U\032\275i\004\017\274\250\276\366<\022\324\\<\371\357\'\275)KR\274\'\322\256=D\331\205<8\377\t\275\026\212\320;9\030\r>\233\006\224<\342,\033\274\346\360\247\274\302\007\007\275\223\302\215\273:n\242\275\241C\037\274\232\266\256<EKy:I\250\205\275\252Y0>\254Nl=\210\212\335\275\265\021\013\274\363\036Q\274\265\330\023<C\231\202=m=\001\274\350n7\275S\323K\275\216\217D\275\307\360:=\203\300!>\336p}<\313\241\275\275p\254\275<q\253\304<+\036i=\3772\013<G\270\273\274\363n\226<;\t\325\270|\002\004>\032\222\020>\335\214\224\275\307UD>\n\265\216\275\316G*\275\375$q>\355\341\305=\266\246\277\274\300\355\241<j\342\255\275\244\177\014\274\313\312\236\274\00159;\370\312\032=Q\333\303\2734~\321;\025\361\020\275,\325\022\275O\374\235=\307\243\356=\266j\216=\301\t\324<\2421/\275MY\020=C\375\324<\361\220n\270\224\346\361<\265\211\331\275\277\242\001=tE(=\001\302.=\371f\007>\320\205\327\275\002z\321=\300\272\241<\261\202\201\275\034$)\274\033\325u=\244\006\210\273\204AR\274\274\256v<\334H\364\274l\345\211:d>\245\273\213\325\232\275\377z\201<\022\251j=\315\032I;[\202R\275\233\177\245\274\257%\226\275,D\224<\213\332\'=\352\306S=Ab\215\275\340k\034\275\323\255\241\275\001\220\214\274\340\207\267\275\373\'\306=\362x\025\273\313\2555=\365:+> |\331\274T \246\273\234,\001\274\270w\262=\304\3622\275\353\233\220\273C\367h\275\340y\251\2746a\002=r\242\r:\006\037\271<_N*\275\211B\244<\356\024@\275b%\022<\002\231z=l\302\025\274\266\357\241\274\370\231\007\275Wg\370=*~Q<\2637\020\275\201\376\273<\303\343\314\275\353\034\271=\370h\272\2754a\037\275\006d\312;4w{\274\030\036j\275$\377\256\274\317\332r\273\021\002e=S\3225>\254\370<=\334\335|\274\030\321o=01\267=7t\302;\203\236y\275\375\210\246\274N\240\330<\001\213\235=5\024\205\2745\231}=?\246\032=e\253\250\275\353A\345\272\2055\304< \355\016\275|L)\274m\260o\274?\202\333\274\002u\234<\232\345!=\0175\033\274\361*F\275\302\036\211\2747L\316\274\201\373\272=\362\005\201\274\251\336\347;\302\025\226>g\347V\274\n\236\336\272\220X\242=\352\006\244<\361\236\024\275\220\235\202\2748B/=\225!\321<\331\224\377<z|\305=\031\313\265\274\006A\264\274\251\344\304\272C\201#\275\222_\205>f\354\022\275\363n\214=\262yg\275\347dW\275vk\306\272\316,\203\275\344\231\200=}\225\016\275\257\374Q;]Fn\275\321\013\373=Yhk=\316D\320\274uA\314<L\206<<\036\013\362\274k!%<\210\366\366\2747{\010\275\367\274\361\273\244\231\001\275\221\034\001=\025\3240\275oA\257\274-u\315\274\317+)\275+\004`\275\247\036%<\3128\'\275f~\234\275\365\325\252\274\276E\303\274\236\330\376;\035[G<1p\277<\320\023\\>\255(L\273\202\034*\275H\221\243\274\026\2635=/\033\007>Z\200/\274%\353<=\022\352\235\274;\336Y\275\032\373\223\275\212Q\027=\372ad\275\313\230\006=\370xG=H0\236<{\235\265\275[\267t\275\314.;\274\253\022\273\275\235\026\324;HM\213\2759\022T\275\025Fb\275B\266\341\272\347M\203\274ne\304\274B\234\305\274\361\314\2707\352\252\254<S\350Q\275\235@\332\272\231\200\211\272=}\356>\032f\372=\364\224\344;\360\345\213\274LC;\275\355\023!\275\341\275\204<\272\374\351\273\346F8\2758\2037\275\224d\211<%b==\216\003$\275X\204\351\274\3262\177\2737y4\274\257\206\321<\177\276y\275s\214\037\275\211\3102>\273\177\000=\234\002)\275H\2270\275\215\"\260\274\200\376\013<\031Y\232\274\355?Z\274\266\246\266\273\3672!\275\374K/\275\240\361\021=\034\361F\275\271_b\274\317\301\026\275\324+\303\274z\035]=\337\236\311\275Wf\035=\000vu=Dn\370\274\304\003\314\274Ir\314;\252m\004\275\372\203\312\274\203X\014>\373J\361\274\0342\220\275\317\036\201\274F\017\240\275\327\334\226\274\026\0275\275\341\362[\274\3501\247\275\310\340\242\274p?d\275\007c\030<la\333\274\320\307l>\200:\217=P\033H=\r\213\265\272\027\344\224=^\272(=,2{<x\227x\275O#%<\032c@\275\231\203\244\274_\313r<fgl>\265u\200\275NQ\023\275\264\235\000\275z+\033;\225\2446>\331\247F\275\034m^:^=\236=\243\360i\275ku\212\275\003k\020=*\230\316=\303\316I\275\244\002\022=\275\311\227\274\347f\365<9\214o\275\354-\206\275(2H<BM\354\274\310>\301\274\033\216\004\274B\016F=v[m=\346\"K\272\205>\221\274\254\003\031=\357e/\275e\277\237\275\244\016\366<\303_\020>\022t\002\275W\216\326\274\307 \006<^\321\350<\t\201|\273U\372a=?\004!\275\021G\023=@\255\317\2740\014\220\273m\237\243\275\021\351\004\273\035\200?=\214#\002=\227\264!\274\223\227\276=\215\331\212=9A\n\275\313R\003<\270\3451\275`q\217\275A\362v\275\030\371\"\275@\327\257\274?\352\005\275\334|\014\276\337\240\331\275\207\347\341\275\230\203\251\275\"\t\264<G\304\020>\243Vr\275\"P;\275/\032\367=\216\314\261=\207\342\337\275\242\335\007=\326@\222=\277Dk\275\365\210\017\276\276\355\005\275\233\230\307<\030\276[=\333\330!<\333\024\214<\007y\232=\216d\255\275\300\325\n\275\023t\210=;\237Y\275\205\010\316;_C\010\276\021(\266\275`\026\223<\313\347\317<\304\226\256=\027\210\\<j\230J\274\325n\267\2750=\331\275\250 \215\275s\265\022\275\003\305\335\275Tx[<\314@\262;\005\236\003>K\361\330<aM\214\275\207n\222\275\240\344\265\272,\230\254\272~\334@=\323\341\274\275\025\370|=g\262\241\275v2E\275\356b\266<)6_\275txr;i\301\327\275R\335\234\275\222Z\005\275J\245:\275\312\245\234\275\310\303r\274\217\235C\274\332\"\005=\236\322\223\275\305el\275d\242\277:\025\374\232:;\213o\275\371DP\275\370\370(\274\356\261\204\275F\376&=\016n\300\274\333\006\314\275w\234\260<\301x\005=\224\313\357=\223\325\202\275~\347C\275\315\340\200\275PU\207\275\331t\003>\007\\|\275\007\250\241\275 \335\270\274?\253\351\275w\361\312\273\007\027\243\275yO\223\275\313\240\234=\266 \034\275_\000\307\275\367q\225=\2320\037;\241\266B=\244#y<\310H\r=\230,\246\275\320\325\002<\204T\033\274i\224\336\274\355\373k=\026\226\235\274\217?\030\274\013\177\236<A\333\267<\231\010?\274\211\244x<\201\201\213=\236\232I=\360\200\303\275\226\034\025\275\313\2079>\020H\234=\340\247\301\275\'@\235\275\301\261\207\275\347l\246\275T\005a\274\322\333\307\275\030G\214\275S\202\256=p\351\203\275d\222\256\274\250\314\214\274^\002h\275\033\255\374\275\247Y\024\275t\3325\274\323`\320=\346\211\321\274\350R\264\275\020\002\r\275\331K\337=\332\001\340=\236a\261\274\267\335l\275\327]\225=\034\265*<\214\002\204\275b\244\351<l\232:\275\006;\233<_S\236<9W\245;8\t`<\036m{:Q\003\212\275\271\3605\275AF\\\275\\\2674<B=\202=\321\3131=\312\302\343=k\241\213\275\024\343@\275M\231j=\002\230\216<\305V\000>\225};\275\361+\270=\326?\236\275\210\375\026\274\364\332\221=s\204\266=Ki\262\274 \300\216\2757\037\225\2752\220\223=\305\316\213\275E(\200\275\2536b\275\315\033F\275\2550_<\202\002\217\275\204\373\024=r\302\246;fE\256\274\301Q\210\275}\342\323\274V\313\277\275df\316\274\372\327\n\274\206\307\364\275\202\235G\275\316g/<V\233.>\236\013H\275\2369B\275\322!\220<\344PG=\016P\217=P\357\210\275\370O\373=\303Y\273\275\010\333L<\332\0005\275oz\024\275\237\262\207\272\370v\363\274\246\206\'<\263\003\037\275\362k\013\275\220\322\037\275\300\243\016;/\322\313=\360\201!\27451\016\275\033W\220\273\333\374\014\275X\215\276\274K \022=\304\333\257=\372\373*<\347y5<\232\337H\275\020\224\354\274\227.\"<\375l%\275\367\340b\275ds_\274/+\232=6$J\275t\260K<X\336\327\275\264\367u\275j\220\027\274Y\265\301=\272C\275<\271\353\233\274c\215,\275\025\367\013\275\226*\330\274\263\024\t<\277\361\246=\236F\006\274\345O\265=,@\320\274P\340\253\274\246\225\341\274d\026\037=\375\265s\274\256\374;<\376\336\335\273\311\257d\275\376(\213\275\331(5={\326\367\274\255\271\260\275\273ux<5\263j<\250\273Y=\037\267M\274\362\242\335\274G\314\014<\244\354\025\275\333\311\315\272\36030=7\263?=\000w\006>\243\266\007\275\231i\220\275\340\252\371<\301\215\327\273\301K\356\274\371\303\316<\232\233\274;\363\252\363\274\215:\366\275\'\353\265\274\232\006\274<\277aL>=X\212:\213]\360=\017\'3\275=0\020\274#sJ\275\346\343\305\274P\2021=2T\355<\246YT<\202\204 \275O\265\014=\330^\227\274SB\353<\310\303[\275$:z\273#\360w\2740\343k=\316\031W\275\005Y\002\275Is\247<\201\373\000\275\260\2342\274\202\354]\275\025Q\007=\t\3510\275g1\376\274L\324.\271?l\243\274\"\240\221\273\224\207\030=\014\304\215\274\3001 =\323y\365<Q\001\014=:w\244=\323\346\336\274\367fQ=*\231\344<\224\373\243=\223z\034<\024\274*\275\240G)>\245#\335:u\366\235\274\016\323T=\312|\240;&U\024=jf\300=\366\026\n>\304\236 =f\233\212\275E\220\313\274^\n\017\274\037\352\230<SL3=#=\237\274MY\212<\244\306\246<\226\216\001>\357Q:=\301\3424\275\267E\003\274\035i~\275d-t\275HS\305\274\356\367]\2757\337\265\275\343\027\354\274a\364\001=o\333\231<\311\243\302\275c\361r<\004\023N\275\312\204\021>\226i\017=\346\016\023<\261dD=(\225\345\274\366d\350\274\302\024E\275\226N]\275\213j\002\275\316\255\230\274\200\226u;{F\344<\233~{\2749\250\312\274p\267o\274\335\364V\275\r\274L\275\243\255\240\2740\273O\275f\326%\273<7$>\347\206\224\273\314pz=\217\342>\275\255b\210=7\006\231<\343\341\024>\267\231:=\361\307\215\275\242\357\321:\r\026\211:\317\002\307\274(5\260=\270\336\236:s9)\275e\334\276\274\325\013\t<R\r\316\274\014\006\032\275Ls%>\212\306\313\274\215\231\031=\262\360\001\275\363T\216<It\346\274\177\276m\274xJ\353\274\032\r==\355\276\231\275\376\200\256=\252\305\270=\317\305b\275`\230\333\273;\007\375=pb_=\264t_\274\206_\255\273\306\2262>E\370\277=\025\266\275\2745\222\351=_\212N\275\032\206g\275\002\300\000=\344\323\247=\266W\020\274m\034\245<\n\035\036\275;\t\222=\025\242~\275\241\035\327\275P5z<\006\330\356\273\327\340M\275\343\317\313<\253\nP\274\321F\235=\031\331\220\275\202\236\257<\370l\330\274!\367\027\273tb\203\274n\026 \275\371i\005=b\006\236<#z\030=\244\237\330<\313\273j=\205u\222=\t\020\212<\251\3116=pJ\243>^\341\301\275\002\207]\274\026T<\275\216M,\275\334\325:<\204\3704=\360D\226:\031\274|\275v\214\r=\220?\266=\024\362\310=\333K\020\274*\334K\275\225n\336\274\341x8=\351\347\370\274\306}\213\275Z\224E<2\023\242\273G\022\257<L\n\311=\236\030\344;U\\\327<U\263\331\274\026}?\274{\225_\275\027\2002=m\216\363\274\200\317\226\274\240\341\373\274\004\213\034=z\272\177=\351\276\344\274:\001\310:y\337\320\275\n\200\272=\277i\n\275\2404v==\357\342\274\300\006w\274\014\215\242>\257f\257<\366\"\222<\242\244\356<\2369[\274\035\347\014;\303n3=\262(\273<\372\225p\274\360h\322<\231\204\326\274/q\345\274\201\266\306\274\233-7\273\232\377\000\273\222\374\r\273\260\347\020\276\352\321*\275\322\2541\274[\314\323\275\r\351\013\275\274DU\274w$p<$\354m\275\n\002\342\274K\252\277=\036\013@>\000\036G\275\216\007\006\275\226>x\275\343)\233\2752] \273\255m\312<\252L\221=%7\333\273\321\017\002\271\332=2\275G\373\360=\242\341}\275\300\010\233<>\355O;\241X!\275\354\337]\275n\177R\274b\321\204<\321\262^\2755\"X;\235\366\371\275~\244\037=n `\275g\337\032\275x\232\274<!\354\224=\240K\326\272L\302r\275\023\036k\275\335a2\274\353x\255\274\024z(=\243\224L=\314\024\210\275P`\031;\246\202\251=H>\016=\020(\252\274H\254@<z\2100\2740\222\213\274\273~\027>N\234\007=\007\207\334;\253\222\203\275\235\034\005=\002O\241=\331\024\231=\334\362I\274\222\335N<J\341^\275\327V\252<\r!!<-\312\010\275\204\007/\274\207\017R<iqI:s:A\273\256\350\324\273h\0064=\210\177\'9\001\372\347;\212\3407\274\373\245\027\275\324\3758\274_\036\251\275\313^B\275\300\252\275\275S1\t\275\253\371U\274Pit=H5\340<\036\223\312\274\200*\273\274\005\203\326\274{\3765;{\333\361\273\230\307\273<\354\277:\275\235o\301\271\201\307\252\275\2013\263\274,r\205\275/}\366<\374\274\324\274Bf\025>\207\303\226\2752\234\017\273\316\267\n>\335\273G\274Z\242\303\274t6(\275C\322\r>\r\274\265=\343\036\r\274\321\246^\275\261F\004<\306\344P=\206\247\205\275\007s[\275\032\320|\273\350z1:\340\310\264=\307\244\033=>ef=\331y#\275u\312m\275\002\365\034\275\377\314\\\275BN\337\274\316\373\006\275\014\244\245<\237J\"\275\241\211\314\274?\r\227:\257\004\206<s\"\322:j\266\316\274Y\216\177=r\325\243=\375\016d\274\306V\n\275H\214E\274x]d<f:\r=\t\021\222;\220\360\377\272\335\034f=\025\362\257<X\310\230<9\346:\275\033m\250\274\013l\347\275\335.2\275\023\372\210=V\371\365<\327\310\341<\321F\003=*B\242\275\"\t\206\273I\212\236\2749\312Z\274\330\005\333\274c\241\251\275U\271\n=\307|\024>\234.\033>\307jo\274&\271\315\272\004<b\275G:\271\273\275\370\033\274\021\274\002>\361\206R<d\'\240;\260\262\207\275\001\000\026\275\331\262\\\274\177\177\325\273\343\357c\275\260C\365<\017\232$=\243\033;<2\272\032\275\310\370\230;\004\261\032<\007\204\240=\275\365\240\274\365D\317;.\022\335\274\035\3143\274EI|\274@\366\237\275ns\256=\r\351:\275(\357N=(K\257<*W\227=\275Yu=\207\264D\275\236\374W\275^\205\036\274\326\241\021<}\226\r>\365g/=\261\010!\274\220=`\275Z\337m\275\2538\214<\037K\307\274\213\306\264=\371F\007\275\304\341*\275\333\224\007\274\022u\346;V\260\n\275\225\'\031=wdk\275\003f\224\275\276\323\203\2747\001\373\274\275o\203\275\365\024\204=\364\001\t<\327\354\330\274\026\235\014>\203\020b\275_9!\275\374\336\253=\336\315M\275\200g\006\275\316\234\363<e\272\203\275\374\337\213=\304#B=M\032\301\275\266\tK=\255\304\324<4\223\257<!\300\304\275\262\312\262\274\2057e\274\312Q\357\274\373\324\345\274Vi\000\275Bew:\036h\236\275\370\'\027<T\376K<f&V\274a\0318\275\346\"\204\274XF<\275\315\215x\274Cq\357<\231\300l\275%n\225<\2575$\275\310a\362\274\247\352U=~\257\204=\200\211\'\274\345\333\320=R\246\245:\305R\302\275e\277\334<\236\025\245<J\200\257\274\253\254n=g\254\034<\223\366\254\275\245K\203\275\3220H=\361\001/<\237,|=\343\266\202\275\022O\031\273V\316\216<@\214\200\274f\352e=st\240<(g\253\275Z\256\245<\202\267\014=yL\213\275i\007K=\201@\010<WI\254=\374\030\370<\354\246\005\275\374\033\035=9\017r\274\2446*<\204\210-\275\257\025\236\275?\3420;b\035\246=\315\213\255\275\362Lu\275x\361\331\275\316W\034\275\230\201\261;\311\344\030\275p\025G\275\226\254~=(\230\331;\251\365\235\274T\343\010>\254\334\\=|\2276\275D:9\275\2524M\275\215&\246\274\201d\204\275\276S\017=\361\025\235\274\0144t\275p\245\325<\334\216s\275\304 c\274\350\3104\274\245b\222\274\242r\025\275\320g\203=\352\276\t\274/\321\033=?w\035\275Q\302\241=\222\251\013>\005\037F\274\353\273\263\272\200**=]\225\306\274\222\265\007\275\032V\320\273g\271\322<M\370\217\275\202\305\204=\315Y!\275\036\342\033=\026\363(=Z4\357\2746\206\274\274\314\255\234\275\335\034Z\274/\240\236;\310`\212\275\247I\235=\301\030\332\275,\213?\275!\016\256\274\331\010\254\274\014\225\236\275\214\204\226\275\272\315\225\275\024\314)>\361.\365<\305#\024\275U\265\242\275\032\265\216\275\315\227R:\307)\351=-4\222<\0132\361\274\350\200\243<\224\2637>\356\333\313=\014\025\346\274D\250\014\275\352\363A\275\004\227\232=.\271\232;LK_\275R\264\213<\234\246\241=N\347J=\204\266\265\2755\235\215\274\000\035\200\274\300\362\322\274x\367\010\272?\364\246:\362\350\240\275\203\276\207\274\361\024\304=\271\264q\275\266z\363\2750\025J\275\016\213\231=\327F\014\275\037\275\377<X;\337<\274US\275\223\'\207<\317\023\215\275d\002\376\274\243\313S\275\206\213\324\272+\355U\275\026{\n\275\337\236\305=\274+\357<\205\364K<l\261+=\372\366\037=j\265\224\272:y\263=Ux\351<@\307@\271\242\350\273\274\014J+=\267 \020\275\036\243\302<\005\272\177=\277\350\321=P\032E\275\272\216~<}H\353<C\351\276=\3178\365\274(\302\267\274W\347N=4\352I<k\264\313=D\317\357\275\224\245\303=\332D\235\274\254\337\343<\311v\027>\376p\237\274QS\221\275\366\001V\275\302=<\2758\r\204\275\004\016\010>~\032\250\275X\370+=t\305\033<\037\373\037\275-1\347\274\244\003\351\272\376\242\227\274l\235|\273<1]\274\210\300\032>\004\0076=\206I\312\274a\254\032\275\006\275\206\273a\031\225=\017R\353<\032\027\321\275\245U\212\275\000\264\257;\341b\235=\375\000,\275\230\371\301\275\000\322\203\275\027\347?<\371\265,=\344\264\224\274\262\212\360\274\321\233\303\2750v\233\275\325B-\275\357\351\021<\036\257/\275\230M\006=\000H\344\275\000\3106=\211kW\275V\201\223\275Y\002\327\274Xz\024=&\002q\275\177\264\245=\226\234\034\274{I\313=\276#,\273I\003A\275\021\020\014\275~4E\275\270\376\276\274WC\014;\024\252V=\255]\005>]9\234=\030+\251\275\2608\';\021\314;\274\252\032\344\274\201`7<\347\025<=\026\363 \275\022\3216\275\364\377~\275#p \275Q\251l=\375\020\215=\014\240\374;DA\234\275\202\027#\274R\347\277\275\033M\023\275\255\217-=\273=\032\274\021\014\270<\2162\212\275\241\300\316<\362aw\275\270\203\303\274\375P\036\275\356$\271\272y\234\3329\253\220\276;\225\237?<\027\330E<Qo\303\274\"[\322<\210\376H\274\351\263\312>\021\237N\275\251\300\354:\224\203\t\274V\315\344<\371\340\217\274\\\324\003=+\000\252\274\\\"4\275\225c\214\275m#<<\307\2622\275\335#\254\274\231\240\030\274S\233\312<\322\2346\275\266S;=\245\331\271\272\220s\311\270e\345\214\274\235q\027\275\017\254\312\274E\202><A\210$\275[\376\246=p\275\237:\375\271S\274\343\260\317\274$\027\007\276\267\260\021\275\246W\025\275\003\013m\275f!p<\221\337\241\275\231lM=\244\307\026\275.\217\"\274\353l\227\274\331\352\350;\230\252\347<8\032Z>v\363$=\271\340\201\2751\376(\275Vp\200:\232\302\205=0\317><\360\316.\273\246\000\033\275~\316\340\273t\266\264\275\323n\327\274L\373F\275b\300G\274\353\377&\275\nR\016\275\32326=\320\3548\275:NW\275\262\351\257;x64\272\260xu=\247\362\207\275o<]=\343\306h=\320\323\237;\371\303\207=\316\007\037\275\001w\243<\265\322\314;\032\226\020\274O\223\241\275\263_(\275s\371\250\275\005\003\355;\366\024\037\274\211\221d\2741oy=_\370\020\275\320\233\335\274\206Nk\274\350\037T<\023\016\254\272\335\266\003=\250\316\271=z\257\034=_\267P\275{o\335=\325\215R=\255{\321=\31786\275\'\346\320\274\256?\010<\366mX\274\025J\337\273\332\245\365\274\242G%\275\343]\r\2759\310}<Q\364\212=\020\276\275\272\2527H\275\350\271\002;\337\034\031\274\354:\205\275\307\265\177\275\266\271\000;\314\304\237<\377X;\274i\237-\275\317\276P\274\351:\247\274\302R\022\275\377x^=E\003{\274I\350\216\274\211Q\317\274\234\332\t\275\325\315\233\275\337\367\276\275hjH\275\212q\327\273\225\306\365\274\\\2340\274:$\220\275\371\335!\275\210\226\322:\334x\333\273<\332e<\224\253\023<\211{\236\275(\346\201<\034\273z<e\326\205;<\026\360\274\250\272y=\034\225\254\275\365\272w=?\266\273\273\344\272\202\275J3\020=s4\220\275V\200\031\273\227\035\347\274L\375%\275q\345\201\273e\256E\275+\232\t\275wgW\275\301\274\332=E\2339\275\374\354R=\373\364N\273\352?\307;\027ye\275\271\315\214\274\3026\202=\316\307\202\275\0026\261\275\372\013\021\276\343\017\204<\256T\252<3\021\366<\357\364#<<\024\361\274fk\374\274\227\224-<\237(v\273;d\243=f\250\\\275\312\215\032=vD\037\275D\361y<?W\203\274U\035\313\274\220\247\202<a\270K<Bqc\274\225_\235\274\316\224\204\274\226\032\257\273\375\212\033\275\213k\026=\003JC=f\024\256\275a\312\376\275\205\262\020\275\202\320\306\275\036A\033\273\243e\315;\276Q\200\275\\\3148\274u\331\024<5\272\027\275\212\'\"\275lD\002\275gl\200<\277\3234<4B\302\275m\270\257\275\310\002&= X\277\271\227\262\373\275lcJ\275\232+\352;\005\271\231\275\330\343q\274\367\312\237;\222^v;\376\323\237\275\310\211\362\271\004Y\206\273\'\236\256\274\226\021\340<\263\020\n>F\371\"<\340\345\r=\360\231%;\331H\236\275\216+\236<B\343\232\274\273E\227\274`\360\377>\321\010H;\222\236!\274\3662\236\274\315\373\272<\241r\357\275z\301g\275\020\3027\275J\0367\2754b\232\273\367\205\361<\r;>\274\217;\237>9\245k\274\250%\243=\n\205?\275F\222\t=\302\216\200\275\356\203\\<\240w\236<\376w\262\272(2K\275\342\305\260\267\251{4=m\232\277\275\276\014\234\275\333\223N\275\0330\237\274\233\232l\275\204$\306\2751K\345;\202N\223\273ci\262\274`>\212==\236\245=\036\020\204\275\025B#\275B\350\276\273\371|\032\2758L\326\274R~\215\275\032\376+\275y\334m\275\363\375!>Z\241\274\2746\033 =\334/\225\274\230\235\025\274\353\017\307\274\273?\232\275g\262\223=/k\007>x\236\254\274|\033M\275\366\354\370<\0370D\2757\336w;6\304$><H\253<\025^\'\275\264\035\210=\376\212\276\275\214R\021\273\212\363\005\275\347\312\003\275\321\371 \274\177\315\225;p\370\252\275[\036M\274j|\000<K\356\003\275\n\'\240\275\215!\306=\204\345\347\274\240\031\370\272X!\315\274\221\211\240=f\032+\275\352:\310<\014\023}>\365\304\006\275\234\300\027\275\371\034\017=\r\336\225\274\026m+=a6\214\275\3003\241\274|f[\275\276\276\227\274\026*\232<\035b\230\274\252\005f<\244\244\334\274\214H\212=~\322\220=\341\202\273\274q\273\263\273\303\267\201<\24018;e%0<\377\224\304\275p\317\001=`K\261=\212\311\006=\031%H=-\350\213\275\367\317\376\273V\033J=\255\376\344\274*\215\247\274\0001R\275>\033\357<\034\224S\275\177wO<GG0\275\244\212\013\275aX\325\274a\246h<\314\261\017;\370\003\333;\364\276!\2757\223e;\257\233\306:x\"\031;\357\306\364<5\014n\275\345=N=\325\316\251< \337\225\275\214-#\275K\225\r>QN\227;\2527^\275\240\246\366\274{\307\241\274r\335\207=?\000\004\271\016\013\217\274jc\300=\256\003\250<3\351\235\273\200\314\006\272}\027\262\275\276\016K<\305\243\213=2`\263\275\027\325\014=\273\354\351\274\2425\276<\347i\262\274\177\021\367\274\365\314*\274\306n\313\274c\265x\275\245\257@\274\354\205\241=9{\243<\317\002\321<\005\rG\275\346\246\245:\030\246/<O\272I;\033\261\257=AR\027\275\212\354\"=r\350\240\2758\"d<\274\340$\274Q\335\230\273\255\334\020\275;vb\275y\220\r\275h\371\324\275\265\r\032\275A\265\356<\330\253\004>\226c\202\275\357\320\222=7\220\227=\267\303\252=\014\270\022\275\211\264\300\275uK\027=e\356\002\276\242\037\037\275\223ok<\342(\361\275B\245\201\273\300q\265;)\2143\275\372t\275\274\254\312a\275<\206\222\275\306\354\304\274\253\277\013\275\316V\035\275\207\225o<\336\017N\275\234\222e:N\207\207:F#\r\274i+h=Q\2122\275\010\250\n=M\314:=Q\332\030=\n\343$\273\332t\325;\350{@;z\211s= Z\214=\306\317\367\274\214\020U\275\334^\002\275\221\023\010\275\3226\026\276\023*\317\275\r\371\037=\020\312\036=@6\007:\t>\007=\222\327\024<\377\363\332=\362o\370<\263\340\023\274\221\375)<\345\033 >\211\031:\274}z3\275#Q <!\370\326<}\355\377=mF\207\275\207\255k\274 \251\370\274\337\306\220\275?y]\275\313\245\357\274\274\341(\275\017\374/\275\264\216\331\274\310\351\034=%l\022\275\353l\376\273i\360\226\275\222\370[\275M\260@<\373\212\200=\022\373N\275\257\331\030\275\306:\n>F\374\305\273\007\222\330\274 \345\372\274+@\350;)Z\264\273:\030k\2759\244\340\274\2306\253\274\301n\236=\342\345\273<\033d\315\274@1\313<\"\322\004\275\367i\355:o\350\245\274r\315A\275bT\275=,\357\240>\337\212\306\273\313\322l\274\356}@=C\000\222\275l\325\203=\373z;\275G\343\014;\376k\227;\211)\312\274UJ\035\275`/*=VD\215<09\274:\264\225Z\273\340\031\237\275?\264D\272\376\1770\275\361\213\243\274\022A\221<N\002\223\274\177h=\274Dem\275\236\316~<a\006\016=\037\262\315=\246R\3717\331\036\000\274\232r\016\275p\303\030=\010^\322<\223\010);\"Fi\275\177\353\256\274\034\300m\275\310zW=-d\360<\003\025\252<g\324\301=Z{5\275\2172\344\275\203\260\366\274o\224b\274\316\255\010=M\304d\2753K\207=\3632\327\272\263\263\374\274\242n\310\275\200\242\010\275\036A\250\273\221r\223<\236\272\316\273PzK<U\244e\275\366\022\243=P\324\367<Z\343\032;\360\366,\275Ov\301\274Z\364\003:\315\213\200\275W\270r\275Bg\302\274\276\235\365=Ef4=\310|\204\274\r\223\246<\217w\030\275>>\021=\3267p<\272\232-\275\036D\263<K\233\2669ID1\274\244j\321<^\272\264\274\206\241\302\273}s\225\274\030\002&>\222\302\213=rI\006\275\304\0330\274\350\255\265;\305\350\275=\367\356\242=z\226\325\274tv\236=\371\301\254=\347k\272<\004n\256\274m\370\247\275\227\3378=W\t\236=\372\241\302;\256c\302\274Yc\005=\024A\377<P5\335\272\365\205\037\274Vr\216<2\276\014\275\216(\210<;\265\'>^9[=9)\230=1\316\225\274\333\2068\275\324\3015\275X\277\000\2724:V<\322\014>\275K!\004=\261\214I\275\2548\304<\367\037z\273>nI\275N\210 \275\"\314\274\274\200\322&\275\205J\313\275\307\352\034\275\023\222\341>\274N&=W\\\202\274j\367?<e\266P\275\356a\326\272\000\203\335<\375\'Q\273\227\344\240<\267\244\220\274\341\3737\274%&\223=\32557\275Z\3320=\217\235<\275\243Xs;\377\274)\274p\245\254\273\276[\222<\000T\336<\036\246\231\274o\352i\274\"e\235\274\341\210\026>\3041\005\274\340!s\275\250\nD\275\267/\335\274\033(5\275\357\300\201<\340\307\242\275\372/\037=\221HV\275\265C\264=#\320\252\275t\316E\274\275ul<t\216\334<\214\231\214<\005\304\235\274\005\367\255<\345\320!\275\017\327[\275\336\243\211\275\233\274M=*\327\365\275\265\224\240=\010\027\236:\344\000\027\274\267\024\267<\301)7=\021\355\263=\252\354\265\275\356\254M\275\221\343\230\275]\305O\275`\037\242=p\031\003<\304.\222\274\3057\007=\036\201\243<fO\277<\270\325\204\275d\007*=\351W=\275\313;\024<g\227\201\274F\025\230<O\003\023=\270;\343<x\252\010:\214r\351\275\002\260e\275b\374/\275\025\212\020=Dsh<\327\323\274\274|/\216\275^h\310<\275\231\t\275$\200S\273\234\326\027\275\"\251\203\274Q\035\243\274\033\256\206\2759\267\023<\n\316`=E\326\336\274\023\244\246<\333\013,=\362}\004\275\221\265\240:Z\374\207\273 F\377\274N\033[\274\327\3609>(c_\275qTP>\022P\201=\364k\317\274\006}\363;d\224#\275K\215\t=\355W{=\327\300\300\274r\254\005\275\275p\033\274\344*\365<`\003\037\275\324\'\037=q\001\203<!\370G>]\320.=\272X\227\275\227\022\014\274\364\340#<7\341\210\275\000\021J\274$\303\270\275\303\237j\274m\021\331<\006\032l\275\3752\250=\027\331\223\274\203\257\202\275\317x\332=Pz\362<\242\267\341\274,\223\351<E\307\033=\223,\276\274\360\037#=\032\311\334=\232\200\022>\203\026d\272\221\':=\211zk\275\366\200\001=\2432\325\275e@\003\274\3376\207\275p\360\265=%[\277=\002\273\321<\202\021\361<\262\276S\274\245gq\275\321i\375\273\337\232\211=u\r\370=W\255\231=$\014\273\275\346w\266\274\214*\037\275\200\227X=\371n6<\274O\231\274\037w\205<\366\327n\274\026w\000\2759\246O\275\250{}\273\213R\272;/>\246\274\251x\331\273\306*\204<\352\322s<\224\306\260\274(\270\022>\232\371D\275\026\373\202=\372\0168\275\267\021\236\273\373\200r<\244\356\244>\034\370\201\274\356\237.\274\321\252\177<R\200\315\274\334\215\212\274\313\317\322<\330\0042>\270\273\350<y\375\250\274\244A\320\274\217\354X\274\236%\230;\210\315\347\274\036>\224<\232T4<\3208\213;\n\234\222\275\"\310j\275\037n5\273\334\241J\275\"\232(\274\342\317c=(\0103\274\361d\253\274!\332\325\274\266\r\345=9`\020=F\233\020\275\026f~\274w\277\035=3\312\252\274%}H\274\353\334\264\274\222\324\246=\354\357?\274;\370?\273w\252\025>@c\336\274_\237\017=\257\331\270\274\200\024D\274\26425\275U\322\n\275\275\333\211\275\333g\376\275\3320\257<\240U\312<\277tF\275\000\025\244>\276$\262\274\274<S\275.I\215;K\233\177\274 (\027>\254\214\003\274\rL\257\275|\213\244\274\n\364\263<\311\033\350=\377\332\354\274\r\316\264\274%D\322\274\213\244\370<\277\321\243<\311\302\317\275\246h\016>YV\034\275\356\370Q<\361,\037\275x\264t>k?e\275\210>{=r\337\251:\024\010\026\275\230\022\n\275R\023\202=\244M\322\273\365n\372<\371\214\352=\3054\361=\202\233\205=V\213\311=\245\303\016\274\214`\322\273\022\001\222\275$$s\275\257?R\275\313\371\005=\200\000\307\275\257\221\\<Q\227\345;\204!\200\274A\240A\275\270\276\306\274\275i\262\274\346~\213=\375;\022\275O<\356\274\024\027\245\274\tU\020\275\260\227\210\273\013\013\014\275\322I\275\275\275G\013\275\227\031\007\275\3161\232\275~/\363\273/\007\203;\036,\351<\237[D=\"\003\035=C\313/>\252\003\370\273\343\206\016=8\n\204\274%\202\023\275hN\353\274X.\341\274\210\375\366\274T\220G={f5>\261\r%=\234\344\270\275G\312\206=\340\3150\275\231\242\223\274u\224\236=\007\377e\275Ri}\275@ \210<P\345>\275\374$s;\300\037\351\273\367\262\330\274\200\350\254\274\366\272\222\275\005\0237>\201_)=\317;\200=\004\337&\275ZM\200\275\364\362\215\274n\377\260\2749\333*;@%\261<\032\\:\275\256JM\275\324\255B=\031\220\266\275\235p\031\275u\364\334=\377\203\232\273\352\267\016\275\214\024\314<\2252\303\274)\350 <\3064r\275;\255\210=y\024V\275\222\354\215\274\211\335\227=\'\003a\275@/\'\275\217\341\r<\0254^\274\344\345\221\274\271\n\301\274Q9\322\274\230\336l=\264\276\252<\330\2363\275G\000x\273\036x>\275N\366-=\310\300(>l\253h\275\020\005\225<\234~\304\274\322\375x\275\221\265\372<\233{=>\241\2143=\201\017\277\274\207`\026=\033\313\252=\221\3276:\324.\200\272fM-\274_\336\362<,7\021\276\244\232F\274$b\t\273\036\360\212<\313\3516\275\360\217\252;y@\211\273S\376\376\274\' \336\274\014\240\235<t\251\021\275{\250\214=R\220:\275M#J=Eoz=\364j]\275\357\275M\275H/:<\37138\275\313\260:\275\325\2223\275\223\375\237\274\260\006!\275G%u\274\035\217\223\274y\370\270>m_\203<\331\276\261;\241Y\334\274\034c~=\024>\225<\204u\352\274*d\255=U6\030\274\362\033#=(\350>\275F\326\313\274\322\370\327<\0315\035\275\327\027\215\274H\365\205\274\232\215>>NX\016\274\373\355\265\274U\271>\275&\342\202\274f#*<\333\"\243\274]\311\246=\266\232t\275\312e}<\316\020\321<\341\351m\273\030\333#=0r\310\275\350\010\233\275\372@\347\275Xl4\275\344u\244<\270\236<<\362Xi<[\004\222\275E\377\016\275\014\273z\274=\030\215\274V\210\034\275\275\2330\275Y\304\203\275\0202\016\276\362w\003<?\023\351=D|\213>S\310\027\271\216R\275\274= 8\274e\2468;\023\315\305;K\314\340<bBB\275\376\330\376\273\177Ft\273\215\273\325\274\314\273\223\275\216i\275=W`\255\274\226\332\001<\317\347\331=\346\362\205\274\036\275\264\275b\212\330\275!\254\307=i\'\r\275C[\301\274g6\177\275\223\363\255\272\342\001\265\274\213\377\020=(\2368\275\267 \304\275\340U\215=<\r(<\262\025i\275g\031.\275\242q\355\274E\305b<1\t\211\275\362\227\230=\275\"\264\275\261\277\322\274g\337\262\275d\214\272\273\3256r\275\205U[<H\003\322\273\362n)\274\326,\357<\371r!\275n\345x\275\317,\225==\235\000;\324\343j=\262\275\365\274\373\2179<M\027\310<\334\0050\275\037\203\032=\241\327q\275u\354+=lM\353=\244\336\244\274\230\214\t\275\371\325~;\266\023\031=\020\255y=\354\227,=6J@\275|\323\335\275\n\215\261\2727$\256<l\220G=\016\305.\275\\\215W:s\337w\273\247\312H\275NN\322\275\326\266\363\274\2520\t\275:\021\006=/|\t\275\357@\250\274E\261\367=+\351\374\274|\325%<\333\227\177\274\260\363\010>X\264x\273\202\035\235<Fnx\274\326\032V\272{d\226\2750>J=k\370\217\274\246\377\333;\202U\346\274\321\201K\274\027t\342\275\217!D\275\037\245\222\274\234\263\231=\323\224s\275\305\004\211\275852\274^n0>\230zu\275U\260h\275\362\223\265=<&\301<\000~\336\274\336)Q=\351]\271\275\207-\254\275\024\302K\275\366\n\232\273`\006s\274\334\362\325\273\031\302\310\274]\215\233\274\347{h<\323\200T<\356D\263<0\306\350\274[x?\274w\317\005\276\356_\233\274\372G]\275\326\321y=\006\375\342\274\300\211\217;u\376\217\275\300^\035\275mm1>\246;\366\273\353\262q\274\036U\215=6\274`\274>\200o=y\231R<\244\300H=K\016\026\275~\004\230>\034\274\003\275\322\207\263:\033\273}=\216\347\000\275\220L\000<2\351B\273\333\305\272=g\207\033\274n\264\243<\361\337\253\274\036\004\204\273\351\303\243\275b\355Z<\016\240\274=%\334\016>\227\214\032\2746\212h=\376Y\222;\r\014\031\273p\305\237\275 \211\034\275(\254\220<4\346\206=\272<\240=\215\266\202=v]\321=\201\304\033=\001\025\322;\0204\034\275>\354A\275q\206\365<\271\0044\275\023\024\275<5\\\010<\177f\342;\035\000a\275=\270\003\275\351\264n<\343\346\375=\245\212e=[\275\257\274\267v\014=s!\211\275\037\232\316\273uF\021\274\364\275t=\017\353\247<\245_\316\273\237]P\274\217\246\240<\212f{\275 H\361<\234\374J\275\203\310R=\332/t\274(%\346\274\203\304\364\274C\372\n\275U\250n9U\334\253<\351\256\214>\017\215\242=\313j\341\273\3149\360\274\205f\212\275\303\026\016=\312Wf\275\000\264\201\2759\224\317\274o=:\275\ns-<\306\322\330\274\275zh<\006\230[<\303\215\217=\014\006\204\2757-\374=\210\377\343\273\366\365\361=\203\244\274=\361\002z\275\r\\?=6\261v\275\351\233F\275\317\223\260\275!\357A\273\364\340;\274j\262\266\274\001\033\257<V\304\224\275V\311?=:q\365\274\023\324]\275\373\377\261<o34=\226y\211\273M\225-\275\214%\305;\226.\026>\325\315\354\274\365)\242\275\332\300<=&kQ;\352\266\315<\001F\267\275\362\177\204\275O\023J=\310\035z<\247nx\274h\026\352\275\313\224\226\272\255ET<\232\002\216<CG\367;\'\232\022\274S\032\242=t\010\366</\363\222\275\360\224F\274\336\344\250\2749\033x\274\271\240\251<\300K\007=\253\372\234\275\305( \275\354\355\254>U\341\035\274@\315/\275s\216\025=\320<h\275\360\236\322<u\034)\275\263\341\360=\024\336\232=\252g3\274\376\304\275\274\210\253W=\232s\340<\3006\266=\033\336\277\271U\016\'=`\031?=\271\377,=o\322\256\275/\225\363\2758E;\275-r\242=T\364\027<$M\277<\000\345\226=\270:O\275[~\243<\024\024\200<\363\001S=\271K\207=T8\\\274\247\265\203<\036\333\267<\004\"\033\275J\235$\275\273\230\354\273\332\330\031\275\323]7\275Q\311\255</\353\373\273\t\317@\275\317\275#\275\242\222\315=\204\307h\275\027\207\'\274\367\034\271<\020\225\302\274\353/|\275\031\205\341\273\222\376\367\274\001\311\243\2745\210\260\274\333\364X<h\014\003\274\320,\356\275SxY>p\337\376\274q\343+<\264w\246\275\354\350@\275\\@\335=C\223\245\274N\001\307;\272E\346\275\354r\223\2730),\274R\250~<\306\316|\275\035\323\325;D0\316\275\266\262\263\273\026\004\257=\211z\022\275\344g\237\274\376\253P\275\277H(\275\232\325\264\274\005\235H\2751\243\255=\204-N\274er\r<!Z\251\2745\217\223\274l\270=\275i\343\250=\023\240G\274\342\3138\273z\023W\275@\251\232=\342\262k=>^\002\275P\263\324<D\267\206\274\274./<\277\347:\274r\334#\275\370\314+\274\212&m=\000\213\330\2749n\n\2759T!\275\355\353\224\275\243D\034=\332\333>=;#\000\275\215Z\377<\024\257\017=\227e\204=\321\353\237<j\014\033=!\234\215=\352+\212\275\002\227\026\274\006\303:\274[\201\303\274P+\004>z\300N=\330\220\326\274=:[>:\247\311<3\241\323\274X\343\021\274 :\301\274\276\213\255;\341\r\322=\034\205\206\275Ec#<v\215s=\234H\210=\300W\332\274\236\276\210\275\360\025\037>\333\337\014\275\374\365\t>\270\2053=\314\243\005=\232\006W\275\212\324\027\275\007\322\000=\371\251\351\275\033\3115=\0354\\=-1\025\275\240v\206=s\307\211\275k\231`\274\312\250\340\273\213\215U\275O\271\266\274\014\331\006\275N=\360\274<\216F<\350\363\037\275\354u\272=nb\316<\307\266\207\274\255\261\370\273\202\323\036\275\234\321\305=\307{\033=V\253\010\274\252\341\026=g\234x\275X>\250:\251$\255\275\306\305:\275\372y!\275Z:\220\274<\256\251</s3\275)\373\246\275X\355S=T\227e=*\241\031<L\031\016\274\264\n\367\274\226w\213<\034Gy\275\245\353h\275\243Z\023\273`\346\344;W\"L\274%\027\027\274\366P\347<\016\326f\275\251\324k\274v\301\265=\236e4\275\311M\340\2742\227\215\275\317\262\r=\267\343\027\274\366x$>2n\354\271\234\206\251=\237i\370\274+3\272\273m\360\022=\340\0015>\255s\311\275\r\356H\274\312\374\002\275\251-\232\2748\311\020\275\236\303n=\222\013I\275\260\320_\275;T\246\273lAV\275\261\202\204<W\327\341\272d\363\213\275\376\250\374<8\311m\275s\355\257\274\262\247\007\274L7\236;\226\224\177\274\340\315\353<%\027i=d#\243\274;6\322\271\371\312\351\274.\300\263\275\232\334\021<\373\021\r=\002A\354:p>\"\275\010#\340\274\030\320\023\275\227\335\270\273Hs\023<\000\214\307\274>\2220\276\275H\310\274\013^\027>o\'\276;zr\366;\343P1\273\322\240\256=F\230)<\244\025&\275\203\202\r=L\224n\272\257Q\013=\240\2662=6\n6\275\263\266\024\274g2\232\275\356P\376;Z\230\212\275\241\303\214\275\243$\312<i\210\004\275Ga\'\275\033\022C=3[_\275\235Ox\275\213f\336\275\004\215\017>S\004y\275)=\032\2756\234\031<6\r\033\273\330R\224=L(\253\274\334\270\023\275J\376\037:\250-\243\275\003\344\250\275=\305\302=\372hv\275j+\373\274\252\033`=\204g\251\275\2770\333\274~:y>\323.j<A\276\201\275\007\332\344\274R.\034\275\363e\234;3\255\310<\023\217\362<g\220\377;\303\364\343< e\225\275\2616}\275\333\235S\274!\361y\271\210\302\341\274\352A:\274O\215a=y}i\275D\266\251\274\376P\021\275#\333V=\246v;\274\'-y=\303\351\023\274d{\255=X7,\275*\3306;\225\321\351<\234g\344\273\321\206\003;\303\177\210=F\221$\274\345\2146\275\235\345H\275x\010c\275\210\363\376\271\032\212\033<\240g\270=\305\350d<Y\346\n\272w\272\347\275<6\302\274\034!\n\276\357\263#\274\370\362\330\274\224\354\345\274bj\244\275\223U\214\275\207\306\214<I\203\257=\037YE\275\225P\333\274.(\243=\023\332l=D\206q\275\340\373A\274;kX;2\233\003\275\210\270\010\275\003\335\017\275/\000\215\275\2320\357=5y\210\274`-\316\274\301P\200\272\312\004\211\275D\346\211\275\177?\363<\252\371\034\275\205O\305\274\355\026\236\273\000\316\376\275\177\0044\274\350\273:\274\224.\224<?\200\274\275;\034j\275\322\373_\275\363\264m;\237\005>\275r\243{\275xQ\034=\2715 \274\023\220\267=\206\364M\275\345\241\262<\254/\001=F\307\035\275(l\200\275\335P\346\274\022\373\326\274\354\211\311\274\205\235\020\275\267hH9\303k\205\275\335\007\270<)w\267<\033\013\367;N\376\234\274F\341\216<\370\n\222=\257\035\366\274\240\256\252\274:\354\210=:E\267<\331t,<\033\277\021\275\321\330E=ni\240\275\367\r\201\275V\226\300\272g\024\025=\250C(>8\003\365\273\322\002\020>\335v#\275\257\271\361\274\\\rE\275\021\']\275]\334c<+\202\367;~1f<K4\364\274M\345\202:,\"\237;\027\006\375\273\2618)\275Y\221]\275R\374\235\274z\236\202\274\251S\322\274B\243A\275\233]\206\275^B\337\274\377\277\274\275k\031\362=\266YJ\275\257V\364<\022\211(\274w\366\227<$\227#=\334K,\275\322\355s\275\177\222\264\274De\256\272\366F\331<\331Y\313\273\341\221f\274w\002\250\274\031\213(\275\036G\246\274\367\022\022=\227\276\014<>\017\201\274\271*2\275\240=l<\277\201a\275B\227\376<!)\227=;!\376\274\354\\\375\274\367\357\022\275\326\374~7H\320D\275\236\331:\275\252V\353=\265\210\361<\005\207\n\274\311\322/\275C\327\253\274f\227\207<{\332d\275\346r4\274\361\366k;\337s\246=\021\003 \274G\337\233\275\230\307\334\275\310L\301\274g\200\022:1\2304\2750\024\214;\312*\317\274\352\305\002=O\027\006\275\236\200\020\275\201\021\225=\337\374Y\275\204\325\307\274\026\200\221\2730\275`\275\236\275K;x\221C>\360p\226=k<N=<\251\261:\255N\215\274\3751\254\273c[*\275\367P\276=\266\025\000;V\221\274=\020S\021=\025\301y\275H\335\374\275ww:=g\224\010=Z/\275\275\256\r3\275\355i\304<\\\273\211\275\327]\345\274v3M=d\216\003=>\324*=\332\347\310\275\324P\234<\347\370\310\274\213/\211\275=\027:=}D9;nf\201;\352%\020=\210\337\311;T\245\207\273L|\222\275\312\376\026>\220\014\017=\203\320\022\275\375\321A\274\342\221\252<oa\257=\025\377,\275\255z$=\256~%=\023t\256;\244MP\275\014Es\275\3269\337\273J\034\271\2743k%<\343l9>\352:\370\274xd\351\275\031G\"<\207\346\t<.\310\226=\224\264\372=\277\272\234\274\035\314\215<\377@P\275\225\337\007>\207?\234=i\372\315\274]\363K\274\300R\246<\377\305;\275#k\203\275\037\305\207\275\341>\223<\204\233\201=\200MD\274E\372\305<\314\225\345\274\005\3025\272R\310/<\271\373~=7Y\246\275\263\006\361<C\t\222\274\351\254\033\275\023b\355\274\024\361\361<\235F\313\273\321D8\273C8\300\274\261`\374\274\266\306\267\275>7\222=r\2241=)\211V=\3279\305\274oz/>\003\321\225=\240\316;=\236\261\t\275\344n\260\275\177\223H\275J\311\016\276\227\313\235>\017\313d\275\025\320\273\274\221;\373\274\244\222\013=\376E>;\266\300\311<\n\234\364\274\217\277U\275\247\324M\272\'\337\375\271\016\024\354<E\302\032\275%\030p\274\3078M\275!\3579=\334\356\367=\201\035\207=?T\010>\222\245\325<9Ye\274\rS\024>x\307R\274\316\332\034\274\004,\232\275\217\350\201<P\257\310>\246,\271\274\257\3542=/\003\341\274\016\0030\274\332m\320<\002\002\224=\n\301\265<\313m\024\275s\342\202=%\332\331;\355\325\366\275\010\024\335;\263\305|=\213}\'\275K\315\220\274\357W\010\275Cl\342\274\005\302\205=\004^(;Zy{\275O5\344:\277\003Z=\272\231I=\2166\026<~\3378\275\003\016\236\275H\034J<\337T\\\274IO&=\356\231a=e\274\304\275\017\376u\274U+\341\275\250\351\253\275\346\223\203\275}\230\270\275[\023\225;\036?V\274p\307\024=^\010\322\275@]R\275\254v\202\275s\006\270\274\217 \240=\316\353v;\226So=\355\246>>@\271\016>%@\337=2\214\006\275\252\311i<\226\322\253\275VP\r\275e~\271\275\207\207\206\275#\'\323<rv\216=1+\225=I\217\204\275\265\260\035=\317\354\006>\344_[\275\337\334\314\275\372\202:=\216\320\244\274\216@\002=\262w\263\274x\177\205\275z*\212\275u\333I=\033\3426=5\237\314=\351\365t\275cTg\275*\344\323\274s\263\213\275\013\t9\275pI\207\275\306/Y<)\0006\275\262\353\352<\210\240\177<*\234\307<\026F\375\275N\300\003=o\271\2409\256H\321\274L\324\346;\225\200\357<[Tx\275\002\366\231\275\267!\327<N\204\211<\227-\351\274\306\207\242\273\255\200->\276\016G\275\225\315\335\272\327NM:*\276M\275:\253\233\274z\377\223\273\221f\203\275\306\367\220\274\201/-\275\201N\227\275\232\214\027>\017\320\024=\231\306\007\275\021\241\246\274\361)2\274M\370\277\275\233\322\214\275\301\206%>\206]L<q\026\217\274W^\211\275^\254\350<\356Rk\274m\216\2579\365\004\322=)\205\000\275U\301\200=\014@\215=1X8=\217\312\263\274\232\353\037\274nk\337<>\022\231=K\032\340\274\336\023Q<\241n\023<\221\323\203\273\222S\013\275\210S\000>\3453\204\274b\320X<Q\\\237\273\232\035\353<t\2008\275RI?<c\253\265\275#\352.\275\241\311\306;d\325\220=|\363P\271\003\024\247\275?\240\\<Pf\212\274\363\031\373=;\033\242=\342\007\346= 2\213;\353\216H\273\356\336\327=\2012\316<x!\036\2749&\035\275\347\263\005\275\352\177\021:?g\201\275\"n\327=\324\007\240=\216\254p<\t\217k\275\365\032\264\274Y\001\321\275\246\260\217<)\217\272\273[=\223\275\006\347\201\275N\261\341=i\223S<\000S\363<Cc!=\025f\364<\250\252\212\275\355g:=\214\255S\273\0228\262<\354\233;\274\235-}\274\212^\263<\313\205,;\031\251\320\274\263M0\275c\005\277\274!\366F=4\334\2078\225\200\245<\003\267\210=)\021\255\275\260\274z<\211\364\211=\'\322\375\273\233\372\312<i\344\035<}K\357\274=f\262<\274/\026\274!\004\030=-\335~\273.h\365<\005:\203\275\240\325.\275\313,\270\274$,\255\275\364\313\001\275\276=\'=>\\\'\274\363~c=9%\371;\337\n\240=lB3\273\316+\351\274J\227<;\3663\216\275\253[\364\272a\263M\275f/d\275@\312V\275=s2<\245A~\275\357g\224<\037N^\275\342U\277\274\210v\306=C\177\350;c\344\"=\307\235x=\313\222\213\274\'\257\342=\227C\r=O\347\016=\357\355h=B\243\027\275\313\347\257\273H\271\277\275\261\2714\275\3104<\274\375\013\004\276e\330\003>co\337\274Ox_\275\270>\266<;-J=X\000\374\274:\036\245\275\235#3\275\245k\244\274\214\345l\275\241<y<\224\232n=Oa\224\275,Cf=Eu\212\275\366\005\034\275A\364\341<U\212\226\275\211\234F\275\360\304$=\313?\014=\355\336\231\275A\236L\275J\336\214\274\274\356\026>&8\357\273w X\275=5\242\274x\357:\276^\345\306\273\032\317F\275\205\325\007=\242\260\032\274\333\255h<:\211\001\275t\354\350;\266\223\270\274o\004\246<\213\\\212\273\342*\320=/\375\001\275\022\027\257=\324\r\232<\222\237\001>\245\243\312=l\343\317\2725eK<\334\014v>\262\306\320\274\001;\032\275|E\r=\211\023*\2752\031\332=\252t\032\274\301\003_=\252w_=\220\336\335<\033\253\305=\261v\310<\335\375\225=\217N?=\231;h\275XD6={\250\005\275\342\324Y<X\250\001<o\204\241=\003+6\275\334\241\342=\325\266\223<+\303P\275\3421P</\034\224\275\302\034\020>\023\247v\275\276I\210\275\377\353m\273\337\233\216=\177\234\227<_\211\266;_Y4\274\037\375\027\275z\020\325\274 \241\222\275\307\275\314\275/#H<\330\021\313\274%\324\264\275\304g\320\275V\275\344\274\350\027q\274\275\004\355\274\366g;<\303\235\263<\340\357U<\231\025\007=^\211\267=)\354\207=]X\004=W\\\032\275\203\342r=\327\222\215\274\201\223\032>\3559\377<\320\022\202\274\201\'\022<DO\262<\321\301\035\275\230\031\365=/i\343=\353\010\305=\231_\305=j*\254\2742\277F>~\356\214\274c\251(=A+W\273\224\276\211<b`r\275\246\314\257;\373\360\303=\326O\200\275r\334\340\274_\233\024<@;9=p%\025<\264\002\270<\3539\246\275\022/\215\275\034\262P\275\266\r\277=s\303T\275\035\276(<7rO\275[\005\016\275H\234\331;=\005\003>\373\200\014\275u\227x=j\215\311=\034\205\">\217\270\217=\344z\221\275\242(\032\275>\323w\274\315@\345\274\246\315/\275+\000\223=\314\370c\275\020\271\221\275\210\272\345\274\320\240\n>\241\020~=\204\332D=\2363\310\275\227`h=\301\312\202=\036\321\234=[\305P\275\027\347\023<!\035`\274S\017B<\270~j\275V\003(\275\210,J\275\203T\267\274\357\000\250=WCL\275\352\312\020\275\034\351\013=\313\247G=\2420E=\037^\370=\212`\316\274\324lW=\337\251g<\211\216\220\275\333\270@\276\367\237\215\275\362{\021<I\207\351\274y\275.\275\343J\265:|\344*\275\331D\374\274\01758\275P\360\200\275\335\323\257\275v\323\236\274D\366\234\274\245^\366<fu\256\274\365^\266<\340\355\027\273\235\242\013=l\316\267\275\217\274\277\274y\232\017<\020\252\262=(.\352<\021\010\005\273\022\274\273\275\365\277o=\320\236\013\272z\330\225=\021\031\347<8\216w\275\255\254\276\274\367l\267<!\361s\275\n\357%=\253P\240=\327\205\327;\201Y\261;g\344\212\273{{`=YH\032=\203v}\275\262oS\275A\3359<Si{\275\253d\257\275\237\"\266=\265\253.<_\305\032>\341q7:\3355\242\275\345\375\214=\262~\271\275\200\033\025<];\360=\334\r\262=g<N\275l\330\320<T\343\224\275{\025|\275Z\017\211\273\354Y\256\274z)g=co\261=\235\357\215\275\363\354\231\274p\372L=u2\270=\301\340\232<GM\016\276\375\332~\273T\020\322<\254\000\376<\321A\252<\326R\265\275\206x@\273D\367\036\274\262\255\214\275\003c\242\275\007p\325\275}\370\351\275\333\260\357\273\215\230\270\275`S\034>\221+\261\275O\233<\275\203Xk=\025\260\246=]\013\214\274\276/\261<\002\005\274\275,?\354\275\306\003\230=\216l\372=r\2717=Y\'\'>\262\344h>\360\255\002;\277*>\275\221\216\254\273\240M2>\251}\320=\275%\001\275\372\010I<W\266d\274%\215\003=\"L\377<o\306]<\260F\261<\256q\353\275\356\245\365\275\201\217K\274\202\335K\275\225(\214=\234u\204\274/\375M\275c\264\252<\020Y\n\274!\334K=\n\340I\275\010\242\016\273h\\\205<\254 \213=\000\0313\275 \020k\273q\327\356<\260+\\=\201\2645\274\177\276\276\275b\263\022=5T\240;\n\227o\275\3535\232:\221\214_\2758\004\036<\000e,=\224\2154\274\333\013\000>s=\267\274\232U\354\274\212\274L=3\220\253\274\362\217\036\276\324h$\275\335\225\322\275U\234\232=\"`\303\275\272ep\275\274s\257\275<x/<P\r\356=\277c}\275\003\343\377\274\322\317U;C(T\2753\272\313=WK\364<\227\342\313=\326\023\005\275/Q\265\275\353\266\222\273m%\243=\200pc\273\343G\256<\266t\007=n?\351<\304\010,=\357\354\371;\r\202\003\273\023IY\275\300\200\334\274%\025n\274V\026*=V\372M=\271\036u=\370\251\240\275\234\003?\275]\311\013>Tb\022=z\320%\275n\345\242\275\210M\206\275\340\236\244;]\n\240\2751\260-=\267V$\275\311\271Y<0&2\272\271\360\202=\201J\030\273ad\233<cn\t\275\2465\217=*\n\">NI\205\274I\317)\275/\\\025\273!\3235\275\004\037b\275\003\301\017>\206\310\271\275\202\213=\275v\203\204=n\374\327\275I\rp\275\247\'&\273\031 \275\273\374\260:\275o\330\013\276\324\347\330=\320\346\210=\241\201\226=&\027u<x\375\204\275L\333\221=pI \276S\001\204\275\003\302\267=\366\037i<f49\275\276s\005>uOi\275\020\313>\275\250c\307\2758:\020\276\024{\312\274\003\254\253\275rc\261=,\nI=A\275\210\275\006e\233=\243\253+=~)\231\274\023>\361=\034_\262=VV\232<EV&=\024A\202\275\300Q\267>T\263!<nh\023\274\334~\035>\231\035\372=\031Vc\275\030\231\322\272Y_\226<\361s\327\275\364E,\275\254\013\020>\261m\267<V\021f\275?\312\276\2732\245\226\274i\240$;=\031G9-\031\277\274\354\242\322<\031iF=\245\347\273\274A\324r<\035\352\006\274\210\365g=-\376\024\275\254\344F\275L\224E\275\347hb;\013\307\013=y\204\316= :\346\274X$\330<6\363\363\273+Nt;\007Wa\274\321\2619\272\007\306\033\2755x\313\2740\2157\274Ar\210\275u\256m\275b=L\275\311\302\330\274\275\276\370\273\205\250\253<\343\271\200<\0325\031\275E\2038\275>\365:<\264\266H\274\305\'$\275aT\020>\343\0055\275\005H\247\275\223\003\213\274f\357\351<\277\335\315<\260W\2518\004\013{\275\"\223L\275\020|\262\275\206)\245\274\"\355m\270E\202\000\275<\3014<\227\346\273\274\247\310(\275\025x|\273H\210F\275=\320\213\275P\316\305\274\323\032\231\275h\022\241;3T\272\274\303S\234<A\014\032\275xZ\224\275\251\016\265<+\010`\274\207a_\275\243\227\226\275\272 p\275\177/\354\274:=\376\274\345C\353;\262!\336\274\276\177\022\275\366\237\030=x\317?\274W,\242\274\235\357\362=imH\275n\360\344\271\024Uv;\215\273\"<I\0102=\312c\'\275\272Sz\275\314\251\236\275I^\017\275a\350V\275\242<\232<@e\324=\024q\017\275.\206\253\275\320\332\241;\275I\177<\261\370f\275\257\266\234\274\317\350\n\274\236\233W\275\217\207Q\274\342\217\373\274\022\'\022<\232%\346;\370BZ=l\234\205\275\004w4\275b\205+<\340\367\300\274,c\204\273\340\375\324\273\207J\032\275\311\001\016<S\205\204=m{\310<\212\245\274\273_@8\274u\354x\274\021\374@\274U>j\273p\262\271\274t\016%=\013\r\275;\316\035\306<\024\371\201<X\026\034\275\237\246\300<\351\223w\273$\236\303\274\303\305\231\274\330\242\213:\213\361\273\273a\344\266\274\275\334)\274\221\216\002\274\236\003\373<\301\264\237>\242\247\274\273C\304\313\274Eb\013\275\324\302W\274\201\307\310=\031,\233\274\025\225d\275\236\337)\275\270~\316\275\021\277\260\274;\344,\275\201\367\304\273Q^\030\275\311\256\203\274E\370\234\273\033\240\236\274rp/\275\325\251\004=o\210X\274\001S\307:\225\037h\275}\342;\275\305\337\206=\337\271\013=2\310:\275\312\340\217;\005B\023\275\270\022g\275\022\200\227<3<\207\274\256O\'\275lR\010\275\002\277R<\272\202\366\274 .t\275B\"\244:\036yC\275\312\\ =\254\331\277\274\332\346T\275\375\027o<)J\261\275\032H\034\275`\014\313\274\264kV<t\014.=\352\004\031=\351\317<\275\305p\311\275/M\233\274\365>\376<\025\177\032<G\177\002\275\270\202g;$t\205\275\003p\t=\332\2658</\272\317\274(\202\352\2743+}\275\355\005x\274\220T\357\273\177\341d\274UrA;B0.\275\t\275\267\275\021\314\327\273=\344\277;\227f =<f1=\250\370\027\276\246n\210\275\223\320\242\274p1<\275\322\305\276;\336S\262\274\344\244\254;\270n2<g\236\203\274I\347\223<\243\023\265\274hUH=>\247\271=\256\r\000=\206\234}\274\221\223\327<\237\270\261<\270=\316<q\314\212<\2157\376=\362\214\307;\023\263W\275B\251\343\274n)\277\274\354\2563\275\255\213M\275\027\334]=S\016s<\022Z\000>\344\256\230\275\220{\220\275Z\275\304\274\311\354h\274K\277I\275\260\016\237\275\360V\236\274[\270)\275\345\302\330<\\\376Q\275\243\213\255;\003\000[\273%\3712=Gc\013\276\t\343\266\275\306\2542;\025\010\030\274o\375\335=\306\2263=\2602%<7\240\310\275\001\275,>\022\374\004<K)=\275\350\352\004\274\364\343\254;\236\314\201\274l\316\373\271\023.\201=\314\317s=\377\031Y\275\300>\005\275\t\265\337\274\031k\223<c\010=<\024Y\255<z8H=\345\302\027>\221aZ\275?\244\372;\331A\336\274Kz)\275\2314\007\273\361\\\241<u+\222\273\314\325-=\021Z\327<\362K\203=0\314\273\275n\226\272\274\242\025\254\275\211\014A=\343\302\237\275d#q\275\230\\#\274\275=\353\275ZW\014>wo\023\274\031\233\211<\351\211\023=\263Nu<\023\307`=\337~c\274\335\203\304\274-`m\275\214\322\213\275\231z\327;\242\232$\274\213U\361;\363\213\031=\331c\266\275\"\356:\2754\331 \275d\003\304=\214\031\026\275\316\272\301\274\304\"\206\273:P==\\l\261\273\325\014\365<\222\250\310=<\234\273;\377R\n\275\271\213\231\273\001t\200=\331>\203=\250p%=\226\037\273\274\313hp\274\007z\033\274\353W\013=O\306\320\2748\0163<s\234u=\332\345\232\2747\016:<\010\245\204;\312\256\314\274B\004H=\0072\305\274\277\343`\273\355D<<7\202H\275\037\333\025\273F\305\231\273\0201\223=\\p\351\274\206\033h=\253\370\274<\342u\372<\377{k=\205\261\036=\270|\020;ml\222\275\274\354\017\275:0%\275\017\236c=^C\374;\262\205\000\275NA\021\275*\r\250\273\312\276\234=hM\323\273$\243\235=\022n\354=g\311c\273u\217\030\275\333\261\203\274\027D\260<A \014<.9#\275\344\241\211\272Xw\211\275\276\266\201\275\234\315\334<S\350\366\274\001$\353\274\346\203\266<\220\253\272<\2625\246\274\360\016\244\274\223\025\036\275\242\024<<j\017\031=vA\377\274\204\036\247\274\324 \030\275\252\302\324<]\311\277\274q\352\240;\311\004\020>\2727]=\352\3509\275\246.\263<\343\302\246\275\243\262\311\274\376c\255=m\321\315\275\362\033r\275\032\305\375\273\350Zt\275\366F\337\275\236zE=zo;=\270\203\030\275\037B\233<\003\310@\275\013Ha>\200\"o=~\027\335\274\261i\342<\2426\356==\342j\275\250\254}:\245\361\351\273\230\\=<\376\277\024\274\370\345\201=\247p\211\275A\267\204\275\242\334\032\275\014\315\024=S&T>\325\345\256\2759\354R\274\r\217\351\274\2126\267<D\0044<\204\370\033<\357z\213;\301I\006>\2516\261=BW\211\274w\364b\275\020z(=Z\014\326<\201\351b\275\221=\201=@\2562\275C%\356\275 \026\360=\207w\322:\004\253\314\275R\327\360\273\254!i\274*\244\303\274\326X\200\275\246\304(\274\003N\006\275\247\217\234\274\257f\031\275\017\213Q=U\226)\274#\003\244\274P\231\350;=B\240\273\031\325\016=\017\355\352=\3502!\275\304\335/\273\324\274\235\274\335\213\020\275\266V\210<\273\353B=\361\032\262\274\363\342\324\274[\014`=\260\376\216\274\243\005\325\274A\2178=\357\221\204\274\325Zp<b\300\200=\304\017\302\274\017o\224<\207\374\333\274\364\377\216\274;\0316\275c\245\266\274\021EE\275\265\334Z<\006@Q\274\307\020\312=\367=\337\274\307\264\033=\221*\327\275\2127}=\030\340\334\2732]\267\274\253\027\036\275\\d\347<\264c/\275\365\200D\274T\020\243<\356X\035\275D\214N\275C\254h=\216w\327<\036\332h<08\246\275\304\330\276\274:\224\343=\243I\r=\025?\261\275\351\267\200\275\326\223\260\274\254A\335\274\013}j;\321\234\270\274\217NA<\340\327\250<^\000\311\273y\ny<\354\353\205\273uW\276\274\246\003\377=U`}<\020k\022;\2718\231\2759\2019\275\301\361\264<nAA\275J\2628>\377\213\204\274:i\002=\332\212\234\274,\315D=\3071\215=!b\010<\002\257\315\2730\306\244=U\336\256\272X@\010\275\032\206h\275 \204\255\275\320j\357\274\275qD=\377\252[\273\364\204\235\275\321H\253=\365\005\025<\tR\344<\367\362F<\335\244\305=\344}\374\275l\361a\274\233\247\034\274eX\332\273\005\332><C\307A\275\321\323k=\025\023\326\275\\I\200;w\225\221=\216b\211\275!2<\275\2303z\274,\311\006=\035qx=\037\321z=6\234\210\275#\310\335\274)=\r\274\304\212\215=\340\365\335\275\3376\266\271\025\231\231=\\2\342<\251\371\037>\353\253\246\275\257v\231\275\367\235B;I\007,\275\223\016\207\275\337g\206\274\030\356(:\036\217\316<\017\024\016\275P\017\235\275<Y\342\274\2370R\275\323C\013\275\306\321\036\274\360*\004\273|G\001\275\261\220\r\273\237\266$\274\357p/=\313\250[\271Y\361R\275>\203\237<+\235\236<\3168\310<\317$\231\274\326\037\256<\350|\357\274\236\271\207\275\326G\214<XO\212\275\210s}=s2%=u\373+\275\253\261\330\275\374\241;<.y\327\275f\020\225\274Q\362H\275\017\\,\275\330[P\275\001\356\'\275\204zE\275\371\\`\274p\322x\275X\213\350<\372W\337\274FV\306<T\204\355=\234\373\\\274\234)\324<\3071\253=%\226\257\274 \275\005\275\372\311H>\357o7=\344A\372=\323\324:9P\347~\274\271!\364\274\363}:<\347T5\275\244\310U\275\356\314c<\260\311\000=@\304\026\2752\230==p\177\235\274\271\330a\275\300k\231\275rd|\275\\>\336\2747\335\216\275R\001{\273\356E\031\275Hu\032\275\013\242\366\275\216\201e=\235\014\321\275\205}\214\275\260\300\263\273/\200\032>\207\033\302:\224\213>\275\212\273\244\275u\231\254<\"\264\201\275\264t8\275\306Jf=\267\321\321<\261}\310\274\253\004k\272\206\264\234\275\377@7=\0366\006<\314\314 \275_\2217\275\310;\237=\2066\310;iq\376\275\312\202z<U\304\033=5S;\274\313Fj=E\240\202\275\272\217=<&9\273\274\032*j=\277\305\316<!\321\004\275\253\345{\274E\265\235\274X\300\013\275\024\214n<\254?\316\275\326c~\275OZ_\275\260a3\2735\351\202\275I\013G= {\026\274\"U.\274c\337\267:\2736\262\275J3\031>\312r\017\275*\222\340\275t\302\210<j6\221<e\222J\275\235=/=.:\350\271\372Az<e\0164;\346\2474\275\353\201j\275LA\246<fy\317\274\200!r\275\001\203\272\275g\372:=\303Y%\275.\255\312\275\325Y\215\275\030~Y<\3508\027<\374\355\303::KT\275_\330d\275\014\354\222=\334\336(>\2149\211<\234\006\026\275\265\263\217\275\221\225\221<k\001\366\274\344\344\263\275:\374\r\275o\020\351\274\022\243\206=\224/e<\265\303\224\275\246\303\230=\'y\262\274\377Y\256=,\"x\275\2439\215\275\3631\212\275\330\217\200\275Y\013i\275\332<`\275\305mF\273\325\367\204>\231n\003\275)a\351<a\2010<\366Ld\274H\314\255\274\267\310\271\274\351\227\003\275\006\356\357<.\326o\274\235\027\236=#\312r<O\203\263=\314\304/\275\025Uh\275=7H=\301\036\323<\037\323\211<~\264\204\275\017\210g\274\026\235V\275*:\221\273K*\300<\025D\001\275f\221\227=\2646\272\273f\212\242\274Z\377\026;\366\376\204<\275\224\177\275\313\211\252\274\027QB\274[,\'\274@\275C\275\334\276\345\274CYj:\235^\247<<\013E\275[\023+\275\372A\'\275\317s\264:\006r!=\202B\n<ZN\031\273\355\214~\275}\240\266\275\331&\260\274*mu=pjk:F\377\217:\277\367\243\275\314\364\376;\343\271:\2739\010\376\274J\324\200=\031\312\275\274\310\345\026\275\005\3615<\210V\033\275n1\202\275\262\2310<\3701\014\2758t\235<\370\3761\275\373l\236:p\334\376\274M&\201\275\027\215r\274\240\365M<\324o\3418\0330\241<g*-=\023\241\242\274\220e\263<\"\274i\275\020F\007<\247-\222\274_\217@\274\371\203\303=\323\2721\275\204\271\310<\276\t\257<\322\261\014\275\245\274\207\275,\010;=O\020|\275\212\222@<Fp\214=yO\213<[\334\325\274\370\310)\272\200\342\220>N\376!\273,\030\241;/\004\327\274\255\261\032=\342\035\370\273\020\177\030\274\260\025K\275\255T\347\273\241\266\016\274]p\330\2751$C=\236\027\207\275\245\311\200:\336d\344\275\005L\013:\307~\236=\021\343\027\275\261\304\010\275\031\004\306\273\203\016\023\274pH\002=\363\240\032\275U`\350\274\261qQ\275\243\033\r\275\320K\213<X\374\313\274\361j@>\305\261\255=\2026\300=?p\010\273:^\273=\366\021r\275\370X\026\275Y\371\371<K\206\355\274\314\206\222>\033\272;=\261H\235=S\303[\275\270\276s\275i6`\275\200\030\251;o\002\334\274uk\255\274\372m <h\326\033;1i\200=do\213<\177\243\003\274\330\316\020\274\342l\200\274V\002\216\274\255!\352<\247e\223\275\177\000X\275\374l\026;\247\030\226<A\r\223=\340\006\021\274Pk\235<\311f\302\274~?\264;\235\341\241\273\323x\253<U\333\361\273;\031\202\274][\264\274R\334\353\274-U\010\275\367c\241=HpI>\234\233\213\273\271\220\331\274\200\333N\275\203\203|==a\033=\205\344\023\275\243-\345:g\216\247<\366\377\005\275\220\337c\275\212\220\013<\252\352\005=.?t\274\346J$\275q]Z\275\323\2002\275*\242\372\274\332\022|\274\214U\326\2740B\244\274\241\350\204<I\177\255\275cc\005>\372\341\325=\274\273\344<\317\243O=\341e?\275f\370r\274/\230\223\275\261\315/\274\245\370\202;G: =h\333\001\275\241\274\032=\305\321\002\275\206J\251\274u18\275E\204\031\272\365\226\002<\"\t\374;\374\223\244\275\n\027\257\275S=E\275$\264#\275\321\005V\274\233S\343<q\'\247\275\220\340Y>\217K\203\275^\336\254=\304\0176<\336fC=\355n\343<\220W\335<H\321R=e\347\253<H!,>\024\316\252<7\307\273<\201nb\275\212b\347;\345\214\373<\303\277\330\274\307[z\274u\201\247=\236\313\316\274 E\366=\004\031\016<\301\022\255=\212\036 =%\331\334\274\030}Y>\006t\213=\362\317L\275m\202\262\274\221\351\340\274\263\"n\274u\343\330\274\357\375B=\202\221G\275\240\266p<\346\264\370<\215g\211\275g\325\033\274n\254\276<\004?\270;\266\221R=\223\353\350\274w\355\025\274\341\277%<\213\256\016:\232(\025\275OX\307\275\313wQ=\244i\312<\230\3317;\003\347\314=qb\224=\\2\326\275\357<E=\016\014\334\273\333]\234<\302@==\375.\312<\\z\246<I-\331<\367\314#\274\320U!>\027V\225\2749\332\367\274k\241\213\274\225p\206<\246\305\001<Z_\n\275G\017\027\275\260\340\036\275KIw\274\224<\274=\253\004k\275\345\213\373:\026o\260\275W\033x\274\263\215G;Y\365N\2755+\300=#ys=3\250d\274\343J\035=\206~\376=\031\372\021\275(Z\267<_\334\256\275\2444\277=+,)>\301\237\230;\033C\203\274\204f\317=\374D7=\364\204S=\006\370b\274\024\241\026<0\306/>\211\332\032\275\266=\224\275\331\3006\275}\300\016=\337\341#\275\210\026(\275R;\030\274E\302\200<\0339\263<\t\005*\275f\326\003=\222\026D\275\317q\216=\370\215\027=\234\253\341:\370\274I\275m3\251>\252\363\224\275\252\230\267=\014\336\344\273\260s\005\275\216~\305;\311\010p=\317.W\275h,\235\275\334lW<\035\256\010=\235(\010=:z4\275\221Jv\275\r\261\222=\361\362\"=\t\r\242=\2759\326\274\220I\306\273\251Dm=\215\367\375\274\203\233\305\274)\221\230\275\247x3=\215\263\221\275(\273\275;\266YM\275\272G\002\275\315\377\035\275l\336\033<d\020\241\275\257\035\204\275\017\376\203<%\215\037\275\323\253\241\275\370\312\025>\372#\303\275\311\257N\275\341\232\266<s\320\324=\266wT\275W\253\221=l.n:\007\375\205=WBI\273\236eo<\326\244\347<i}\220<\230\020g\275.\007;:\035\215\376=\025@{\274R;%\275\004\352\234\273$)t<z\273t\273\304\331\212\274\350\300\211\274\347\225\205=I\337\226;\271:\220\275\250#\230\274\000\355\301=\321M\177\272\007;:\275\375\005\260=\367\034\360\274\223l1\275\301\231\031=\2731&\274z?B\275\302U\034=\254\331\250\273-T\252\274\350\262\210\275>\035\273<\255\236*\275:\231\210\275\305\230\001\271\237\370C=\003\332\202<\004\303m\275W\301\244=\261RN;%\305\007;\311\006K<oI\207\275g\032n=\310\232\320\274X\224\236\272\313\014\271\275\333]\312\274\'\3541\2747\365m\274N!\300\274\375\352`\275\207]<>\316%#>\316\007\370;`UX\275f!6\275\'\321\371\273p\316\245>\202\311\017\275\316\362\366\274\310\237\312\274\354\320\226\275\031\213\261\275\371\357\207\275\\T\211\275h\254\t\275B\323\325\274\365\257l\275\363\270\366\274\"\332\026>\230?N\274>8\312\2741\342\223\274\022m\222\274\224\335D=G\366\204<d\177k\275\224\021\247=\251o\252\275\023\232\037\275\014\212\226\275\236\347\014=\177\261P\275\217\365C\275V\234\355=\377*\221<\2675&=\327\035\351=F\306\240;\232\224\254<\267\002\n\272\271N\010=\226$X=\022v\201\275\242\356\034\275\257\031a:\377=\033=\r\323\243\275\276\364\200<\023\201k\275\204\314\021\275 0\033\275\236H\r=v\226\255\275\224\t\226\274,\3534=\261\356A>\004\3744\275\316-@>\004q;<D\034\003\275\\`\264<\322`\366\274`\234\223=\274K\r=[\343E\275g\0325\275*\r\235\275f\333O=\210\025f\274B\367S\275%4M>*1\224\274\036\324$=M\375\255\274\005\335\256\274\340\271.\275g\346m=\226\264\212=\2055\024\275\016\205\002\275\236\326\017\275\277\325\362\274\\\371j\275}\026\005\275\310~\244;}\324\375;^vo\275@7\227<\364w\375\274Gr\243:\243*\212\275\247\214.\275;\313\\\275\231\202&=qKh\275\270\305g\275\003b\205<\343\317\224;i0\272\274\233_\332\273V\3759<\374\345\035\275>\030\254<\204\327\352<r\003\276\274\014\243p=+u\375\274\366\232\200=Q\261A;\345\332-\275\303`o\275\363e[\275\352\013\214;\366\313o<\347\2769<E\334\326\272\354\352v:\037\335\262\275\301f\370=]C\232\275`\215^=\316`\202<\223\2577>\202r\224<\325\250O=\246/C\275\265\2651\275\t\341\004\2753\251_\273\277\016h\275B\352)\275mi\016>\203\303\261\275\202V\252\272\3237\037\275\360{\251\275\3426\236\274Hj\311\273\227o\323\274\225\337\347<\317\367\036\275\313\321\304=J1i\275\263#\314<\343HR\275\3608\213\275+\377p\274,-^<\314\304 <\354t\007\275_\242\270:\007\035#\273\312FJ\275\367\343\257\2759\333\224=?\353\251:\255\326t\2750=:>q\252\300<\334\240\253<\252\025U<\334B\216=\354\363\014=E\340\203\275sG\010>-G\232<4\031\017\275\365\363+>\266\256\260\273\217\206f=\372\377V\275\365K\212<X&\001\275\265(\021=k\\\371<u\023>\275\377\032*\274?\006,\274_Cs\275\305a\371<\330\357\323\274\365t,\275>\253\022\275N7\007=+\262\264\275\264\211/>:\017\013=\263\177\305<m@\022\270\025Z:\274\030d\236\275U+\252\275[P\242\273\356\036\321;\001>\356=\267d\300\274\200\351\221\274p\314\207\274\220Y\235\275\312\301\332=\2107\023>\001\025C\275\277x|\274sn\013\273\020{\034>\304\212\373\274\277E\257\273f[\202;X\245\370:\260\3719\275\223y?=\240ko<\232od\275\220b\213\275+\366\034\272\020\027/=\304\367!=\330+p\274\177\360\366\274\233\363f\275\341\321\n=\274e\341\274\275\013\321\274\241\232\224\274r\301\032>EIF=k;\245<\243p}<\2560\331;1E\002\275\027\201\"\275\026]\350\274\357\270\304<\355\341\247\273\221\353\363<\354\356\031>\376\327\020\276\204\233\223\2750\233$\275\347T\240=J\210V\275}\007\237\274\257\230\r=\365\n\013\275\204\034\":\206=9\275\210\371N={\210\345\274\2320\014\275\353\335\304\274*\3750\275?Iu=x\307\322=\035\247t\275\234wf<\263\200&\275~\004\227\274\023\335\244<6P\351; \201\352=8/\357=\220h\311\274\346\007\246\274\2615\210=Y\267<=p\371\345=\313\341\200<\010\246\317\274\303\\u\275\000\307\231=\311\373\031\275\203\332\315\275px\031=q\333\271\275k\017\006\275O\337\343\274\235u\004=c\253b\275ZE\235=>\254X\275\216w\243=\216\210:>\345_\244\275\204E->\036U\006>r\3426\273\0132;\273-\301/:}\035\227\275\002\246\342=\t\3654=\340.\010\275\253p2=3+\n\273N\006q:\365\372\233=\315\344-\275 n\226=\221p\375;\372\017\201\275\366T\210<\342\037\266\275\360M\234<\236}\371<T\230L\274\332L\352\274{(\316;\237\334\264<\351Y\212\274\217\265\217\275\360\321\013\275\361\'\210=\275\236C\275\021\2110<e\204c\275\254`\226\275\276\361!=\3479\372\274\177>+=#\324\347\274-;E\275\314C\250\274\010JY\274\305\331\230=7\306L\275(\036\362<w\234\005\274\311%\210\274A\202e\274\023\366\025=\236M\356\273\237\"\t\275\222\315\341\273\217R\007=W\013\017=x\037\320\274\252zh\275\275\031}\275\220y\332\275<\355!\274|mV\275\370\351\226=!\310\206=\325\333q\275\376\333\366\274\032\372\230=\206\255\245\275\364\371==\212#a\275\'#\026\275\030\302;\2756\353\224\275\245b@<\204\2421<\023\001\300\274\244c\032\274\260O\254\275\227\014\317\273\237j\270=DgU=j8\212\274\000\324V\273\264C\243\275Xn\024=aT\035=\337(\302;2{\337\274|\271;\275`\000\267\274 ly\275\255l\231=y \020<\017lA\275b`\023\273\244lU\274\3719\203<\347\305!=\307\341\217<\266RK=Xt\n>\351s\220\275\325\237\300=;>n=%.<\275\202\371Z\274\032\373\241\272\214\306\226\275j0\032=6\273\233\275\207\247<\274\272\263E=\233\243S\274#\t>\275\"\213\331\275\024\324H\275\001\327l\275\236\007\241<\0246 \275W\365\007>\200\201\371\2741\360\277\274\363\035\365\275\201k\211\273\031\036\270<zeU\274\347\332y\271\257\334\303\275\3505\342=Y\311\275<kZc\275\352`\326\274\223WP>6\351\003>\253M\004=\200B\021\274w\202\204\273\277\313\351\274\241\222B\275j\036\217:\223\240\231\274\020\3229\275O\240\222=\336\222\250\273\252\322\243\275\220\333\223<\007V\034\275\013\341\207\275\363oy=\3058]\274Z\267\034\275\335\212\256=wf\304\274<\002?\2752\234\032\274\345\337\265\274\355w\336\274\035L\\\275x2J=\332\370\225=\357\r\247\275\"\274\225\275\237\311\272;\302\037\262<\364\020\366\273T\364\242<Q\234\227\275tly\273\270a\240=\006f->\313\001h>\226B\021:}\260\257=r\312f>\346\351y\275#K?=\r\342\343\275\252>\213\273\316\n\037\275|E\022\274\244vQ=aLq\275\210\341\262\273U\325\376\275\356\314?\275\352\375\277\275O\225\257;\3046N\275\\\366(\274\026\240\217<O+\315\275mA1<\343\363\303\273\310\375\005;y\013)<w\234\260\275g\356\350\274\355k[;\350f\200<\rsK\275,\312\264;v\3164\275\002%\304=\203\014r<\234\200\341\273\275\246\251\275\017\337\037=\315_\n\274H}\222\273a\376\345=\360i\r>\275\034\205<\231\033s\274\242W\374\274\320c\367=\001\377G\275\324\004\273\275\324+\024\273\304\245\354\274\006\323\003>2\353\024=k\213-=v7\377\273\347\211\036>13\231;\316D\004=\014\200\217=<%\315\274Z\242\235\275{\304<\275\337\304\014\275U<\232\2726\027\217\2750\031b;-\326\301<\0238\221\275~EU=\204\212-=\023\014\266\273{\267\322\273\246\275-\274r\366\"\275\367\014V\275D>e=\375j\265\275\256=!\275\017\322\304<\235\307m\274>\247\033\275h*_;\242\256\274;\'\331\014>K=m\275Jg\301<\010S#=\327\232~=\365\365\336;N\302,\274\271a\315=\330s\345\274j\t\005=nu\317\274Y\376\310\275\352\236d\275\356\246O\275\376\231\306<P\210&=Y]\007=\304\263\031=\034Q\201\274\255\337\023<\006\020\247\275\271\376&\275\005\267\030>U\n^\274E\303e\275\366!\256\275\000\235\213\275\333+\242<\314.T>\254\364\207<\211\307\327<\254\347\255;\371Sz\274T;\200=L[h\274?\346\224;\335\220\212\275\243\"e\275\277\277\216=\036\332\373=J\244\331\275\201\t\272=\200~\273<\260Kk<\301e\263\2743<\025\275\375\234\004\275#E^=\216\354\002=%\337\024=\001o\324\274\376\251\367\274E\310\205\275\2700\000\275\361\254Z\275\247$\007\273\202K\t=\277\222\027\275\035\021~\275U\234\236\275\005\211+=5i5\275{\\\022\276(r\027=\3351\345\275\272t\357\274\346\\\022\275\353|\210\274A\203\017=+\211\205<R\345\360<\344)\004\2755>\210\275W+\030\275\005\020%<B\270T\274\212w\027=\214\324{<@\336\033\275\224}\004=\001\202+\274\204\350\226=i\035\273<\257\217U\275$\037]\275\256\221\036\274g\361\373\274O\245\275\274lX\020\274\204\033\002\275|`\025>\222\342\375\275_5\231<\024\3472\273\';\201\275\004Id<ws\325<q`\224=\255`\253;\200\000Q\275D\243|=\205\330c\275\244l*:\237.\300\274j\201\013=\220n\263<c\311&=\261\232\371\274\271\264\027=\324M/\274\304E\005\276\260cR\275<\314\t>Kp\212\275U\203\n\275\266O\200\275P\222\304\274+m8<oB\007>\177\016\035=\345\272\244\275S1\203=\370\002\341;zr\341;o\224\220=D\340\271\272\006\234\305<\\\266\316=\nT\007\275\311\013J=\374\237*\275d\247\334\274\357\261\225=\275\\\027=\265\367!\275\360\217\210=_YX\275\256M\265\274\245\237p<n\257E\275}p\025\275\267\335T=\\\270X\274\032\266\026\275\332\035\215\2721\003\027\274H\010\350=\245\346\261;\306#\316<\343\337\366\274\035.\236\274\005O\177\275\'\224%;\310\353\367=V\263\246\275\t\226\313:F\375\363\274QI\005\276\357N\356<@]\017=\002\364?=o2\331\274\035K\277\2747+\225\275\374\0071\275)R\357\274\010\370\203\275\240\375I\275\021\315\020<H\205\370=\223>v\275\376A-\274\315\353\244=\304\234\226\274Hv\304;\217b\030=\244\034\235\274\033\377\273<\227\025!\274\177\311\374\2739\256J\2758\214\263\274[\037N<\301gH\274\'\235\244=\262\225+\275y\033\314;\350\267\357=i\323\216\274\221\000\007<I\2444\274\332\020\315\272\357j\037\274\226\304\203<\340\304\256\274\210\301\360\273`\007\363<\351\325\032;[?\275;\377:?\275\211\211\t\275LB\031=\362\3569\275Pm@=\350cX\274\217\351\030;We|\274\206\337u\275\003\"}9\213_D\275\212\203N\275\210v\355\274\270\364A=\006\321\327\274z\2449=A^j=}\327\230<\334\203\016\273\231;\324<B\177\322:\250+\317\275\177\262\326\273_\364T\274\001\324\257\275B\375F\274\363.I\275\366\211\200\274\362\3479>\031C\016=\025\270\362<\272\007&\275\200\252\261<\216\034\240\2736\031K<\303\224\333<\013\n\221\275\246\340\244\274cu>\275r\254\212\274\374\r\215\275B\342\023=+\372U\275\206l\360=\212J\303=cIF\275\\(\311\274\016C#=\000\212\377<\305\007\356<\310X_\275\244\205\365\274M\255\036:\275*\243=]\277\315<\321\016`=\316T\321\275\257\373\024\275!We=\212\325\327=\241\213C;R\206e;\252\364\253=\302\333,\274\261\327\235\275v,\230\274\004\023P\275\335\334L>\347\242\214\275\230\340\351\274\271e\034>?*\033\274\327\211\226=\330iX=w\261P<}2n=Nz\257\274A\230\204\275\241\3727=\021\274\225<\r\375\'\275\262\360=\275\215\250\036<\020~\325\274\357\217\237\273\005`\2169;\206\332\274\036=\203\275@\217\337\272\230!D\275\005j\313;\026\350\014=\251\241M=\267\211R\275\230Dv\275\212\341\207\274*\273\007=\263\"c>y\210!<\320;(\275\323jA\275\r\000`;\n\371i\275\267\226\353<\203\306i=\026aB\274z\000\277\275\274\320\202=\233\326\273;}\003C\274\263\2179<~?\243\274\030\250c\275\"*\035\275\371v\321<\270~#\275\324|~\274\226^\250=\215\277h\275\214\313\t>\235\266\333\275kS\'\275\027L\034\275\320\006A=\"+\311<g\316 >\365\346\217;yN-<p\206\210>a%\330\273\304\002\350\275LdD\275\200\362\323<\207\351\317\275\266P\321\273\027\006\236<\220 \347\275\330\203\376\274\371\036#\275\315\215{\275\356\270V\274N\324\270\274\361j\220\272\253\222I=\214\320\262\275\244\303\230\275\365\207]\275\337\252\250\275\"\340\252\275\r`\221\274^\314\007<_\224\321\274\212\350\321:9\236Q=\270FJ=@\003i=\270\001*=\237\351l=\276\302n=\256S\230\275\322)f\275\037\276\014=\244\242/\275\240\300\001\274\337T <o\350\360\272\356\324(\275\034,\235\274\347_\201<\354`(\275\200\rD<VSv;\244\334\210\273a\277D\275m\2562>\314\304w\274h\347\234= 3\317\274\r\177G=t?\211\275\200\276\311=!\234\230\273&\273\n=\020G\277<\366\264\225<-O\214=Us`=\350\340\031=x7X\273w\341r=w\"\200>/6\262\275\367%\022\276\231\362\252\274\007\362\326\273k\207\010\276$\241l<jI\201\275_\237\352=aey<\357\333^\275\035\021\321\274]\004\320=\375\377q\275\027\007\217\274J\313*\275\310\"\256=\'\2173<\247\203\331\274\216\323+\275\3106\345\274\306N\222>\303\252\235\2755y\210<\352\010\322<]\"\364;\356\377W\274\230Y\026<9p\377\274\357v\025=\030\362\014\274o\021O=\026\214\251\274\2557\200\275\272;\031<\023\207j\275n\351\263\274k\0214>\360\340\033=\364\230a;\230\263\333\273\305dr;b\357\312\273\201a`\275\017\025\306\274\340\200\265\275\357\300\313=\223\376_\275\334:\325\274\231G\006=\244H\314:\000\330\206=/\230M=\225\323\347\273\267\270\034\267\003\222->\2638\360\275D\265\340\274|\371\355=;\010\324\274\232\021e\275F5\241\274\335\3428\275\230\013\214\275\370\362\256\275\343\277\003\276\006\302\225\275p\210\336;\017\300\252\275\340\033\004\275L\335\005\275\305\302%\275\227Y\024=\327\337*\273\nN\201\275\371\217p;>\213\365;\365\021\262<xC\274\274\341i\302=W\247\024=\032\300`<%\246f=1\020\211;\231\351\204\273\007]\276\270\330\330\310<|\273j\275\332*\003<\271\200\214<\307\034\247\2746\327\206=\200O\215<A\374:\275\001\311\014\275M\244\005\275OX\022<\211\217l;LX^;\252\r\000\273\213\215\034\274[z;<\343Q\031\275kG-<\242(\310;\233\226\265\275\310\034\232=-|\220\275\245}\254<\006M \273\307\221\262\274\235X\206;M 3\275Vo\237\274\n\314V\275\302\266C\275!\005\010<\177}\255\274\233s\206=\2670\343=\266\244\240\275\312\353#=\270\241\r<\3168\242\274h\223\023>\371i\246=\203O\016;\206f\214\275e\232\252=P\003+<\235%\351\273K7k<61\215\275\311\220\t>.\225\367\274\373\237<\275\250\032B\275+\254Z=\266\372\233\275\366!\277\275\027\253x=x\251\t\275L\363\010>\270f\266\274\257\331\027\274\257\302\373<\362\036>=m\325F\275\216\002\206\275\273D\372\273\n\347\327\274\332\034\313=\254\3366\275\301!C\275u:\007=\302\\\232=\246\025)\275\"\264\240\2758j\227\274\247\360\261<`|\031=\350\257;\275\252\030\307\274\313\006\267;\306\3400\275\374P\317\274gY\241<3.\242=\267u\343\274av\363=\0174\363=\244pE<\346\036\374\274\266$\022=\242\233\014\276\037\001\003=x\202\337\275\022\346\002\275\332\033\251=\203\346\266=5H\365\274\342L\270><\342P\275\021uI\275\376Y\373<3\267$\274F\2173\275L\260\215\274\201T\021\275\302d\337\274\331\201\021:{\204\306<.\234\347\273\375[\272\275w3\203=\270\000\220<#\355,:\256\016(\275J\225\202\2749\375\022\275u>\021=\3473t\275\026\277\340\274\351\225[=5{\223=\276\2518\275\350\202C=\2702\201\275PI\357;\341,\242\274<\243\216:\353\034}<\204 \261=\001\210s\274\256\311\262<3\353\354\275S;\260\274\303\365\\=\004\017\372\273\000\327$\275\3611A\275\371\213(=\327\"\250\2755\004\t=~\332\215<\303\226\246\267\327\002x\267-\205\320<\324<A\275\242\252h=\271\327x\274\264\362\373\274\225\245\221>>\310\236\275\321\250Q;\000\357\250\275\006\257\347\274\270\334\'\275ckX\274\022Eo\275Z0N\275\013\023+\276\'\316\365\274Ic\010;\321\355\261\275\363\355\254\274\313o \275g\206\325<S\024\216=\252\202[<\331\014\223\275\263\337\360\274\021;\235\273\352\205\367=,\311\243\275m\016+\2752\266\031\275\330{\251;\261\216\021\275\244\\\016<}\363g=\347\371\202\2743\307L=\272\317\320\273@\213\206\275\271\363\240\274\265\323\025\274\374(\237=\017\233^\275\235.B;\027\227f\275\326\266\254<\250\235\000\274\263\033\325\274\177n\232=n\363\225\271x\210@\275;/\242\275K\003\326<\265\226\373\275_n\316\273\227\024[\275V\"-\275S\020-=a\243\235\274S\252\323\274\\\373+;Z\371F\273\333[`\275\367D\300\275_\227\276<P\033\241\274\344A\302<\341\000O=\177\374m\275%\271\326\274x\301h=\337\004\207\273?j\314\273\037\272\316\275\002\177w=\227\026\211<\310\3064=\365\311\237\275\314O\020=\3375\225\274\026\006=\275 \200\215;\335a\225>\325\231\237\274\244\347s<\2513\371=\246_W>\244}\\=\030\370\200<\300\337q:zz\310<<hC\2753\225\245\273&\n\332\275\3432.>\374\372\'\275\375\010\207=\212\353\256=\013\030\026\275\002\\\353; \205\223\274\240\362\024\275\014z\204=\345\261\376\274\025\027\274\274Q\217\265<\340D>\275\021;q\273\327\217\004\274\237\036\345\274\306\352\211=1\026@=53\240=\236\262N\274N\370\271=)\352\367\274@\374o\275\031\327\340\274\277?\304=\221\251b<\271\336\201>X\236\232=\261\3360\271\016\323\305\274\341J\352\272`\261\252\274\363\276b=\037Uh\275\010d(=4\251=\275\2446\037=\222y\"=\306O\033\275\311\253G\275\251\243\202\275\301\353\226\275g)\310\275 \326;=\377\3622=\275i\251\275\241\334\241=\370\335 \274;\347b\274=\031&=\331\021\211\275\211\330\021\275\014\326v\275\211V\002\275\253C\236<\326\231\014=\000\333\370<\016\201\201=\023\360\230\272_\334<\274@B\236\274.R\250=b\177\337\274sj\022\275\223{\321\273\336\374\206\275\317\210\223=\032\304\255\275\267\275\233<\262\224\266<\221\246\213\274\014dY=x#$<\332;k;\265G\225<\3337\212<\340F\215\274)\331\346:{\336\275=Ao\235=\305\356\004>\356\367;<9r\241>)\033?\275\r\354\003\275\222\371\037\275kA\236<7-y\275\327\316@=PY\314:\242\254\365<{1\221<\371\350\322=\251\035\360<\270B\031\275\022\300\002=)Q\'\2754sW=C\244\237\274\223P\202<~#\\\275\'\256\371\274\321\310\307\275\2379\271\2748\030\203\275\313\234\373\274\230\257F\274p\345\264\273\353\002M\275M\025\032=\337\026\203<\t\312\t\275\360\266S=\367\006I\275\335Ie>?\252:\272\3414\304\2749\251F\2755\374;>\003f\217\275W\305.=/\222\336;\321\'{=*\212r\274\267a\211\274\006\223\256\274\274\rB\274Cx\033\275\003gr\275;_\311<\312\335\211>\340|\343=)\256p\275Z\177=\275\365\024\363\274e`d=\275V\325\273\275\241\n>\311$\315\273\373\336P=\260\237\222=JP\032=Tq\257=L\036[\275;\262\264\275*\200\3259m_\017\275P\3033\275}\020\266\275\321g\300\275{\314\267=\325\333\245<#\014\243\275\326\327\306\275\221[z\275X\222\014\275g\276\303\274G\310^\273\212\272V\275Br\304<i\341|\275}\0326\275\005\216\337=\350n\220\275\275K\025\275\256m\357\274\234\362\3619+\332|<\031SR\275\014\022G=\306H\271=|\211<\267(\330:\275U+\365;\204\257\240\274\260\315=\275\231\034\212\274A\347\267\273\030p\360\273\226\0061\275n\327\217=\366_q\274\350\244\272=\320T#<\'\305\327\274\024^\036\275\321f\"=\201\331\n=\357\000\016=\324\216\024\275p\3230=\336\304;\272\300\267\007\274h\341\224;CS\376=\212\n\220\2742\363\311\274Ym+>\371y\256<Y\021\033= \nv\275\247\206k<\276JM\275\346\364n\275\231$b\270\356Q`=\304\'8\275_\342\027=\222\320\004\274\264\364\300\273\246\037_>)uT\275>\240\r\275\355\334\232=?y\342= n}:\340\360R\275\326\256\005\275\360\007\302\275\222\346\373<z|\246<X|G\274\240\271\324\2743\272n>>\r\265\273\376a\215\275\265\252\241\275\310\311\234\274\016\205\234\275\271^\237=\271F&=\361Ze<\211B\357\274\014\357\236\275V\347H;\345\225\243\274\351{\t\275\234m~\275\302`\"\275\300\026B=\344\2719<\377\262\262<\317\254\203\275\241\224\025\275\021)x\27530\275\2740\"\\;`\256\202\274\034\3504=\331\311\270\274\353\233L\275A^\343\274\177\002}\274\237\270\205=\271\366\253\273\210\347q\275\217\200\227\274D\202\300=\r5\332<FR\325<dd\207=~\372q\274\243eC\273\243\216\243<pt5\275D\3671<\005\035G\275\307\207d;=G#\275\275\233j\275\320v\033>\337\201&\275\010R\344=M\312\036<\034U\224\274\032\326\371\274\262\002\321\275\327\347\217=\343\\\311\275\243\\\251\273\332\342]\275H\215\037<\323\2613\275\214}x=\323\177\005<\014\213\252=\n\234\037\275\272/\220\275k\202\r=<\267\006=4 \013\273e\010\222\274\310K4\275\271\265\317\274\026R\377<\202\216j\275\340V+<$B\336<~\321\341>\353H\363\274\256\0343\275\250W\250\275\010\221\001=\323\375O\275\'\271r\274\336\'\000=\213G\227\275\030\t\217=\375\277\035\275\2653\310\274h\005Q;P\313@>\252\205\313\274\205\326\262;_\203\'\275KV3\275\335\r5\275ZG\323\273RR\207<\274)Q\275\306\200H\2736\332]\275\210\343Y=\177\335)<\003\037\251\274\0209)<\361\307\326\274^\237\314\274\024~\223\275S\220R\273\0027\t\275\255f\311\274\330x\200\273\260\372\346\274\3427\212\275\244\364\256\272\211wv\273\331\275e=\262e6;\305\036\360\274$=.\275\307-^\275V\243\220<4\314/\275\010\023f\275\021H-\274\034\037Y\275\330\322\231;\352\304_\275\023;\247<\306\321\256\274\200b\035\275\200\346\226;\354\210(=\207]\374<+\362->E\020\330=\315\0169\275\230,\241\271\322\363\275\274\267}\247>\225\372\213={\261\365\274U\315\232\274t\224\345\272\256\257\210\274_8!\275\202\242U\275j\332\214<\264\345\313\275\326M\356<\336\216L\274Jo\335\274R\304\033\275(\325p\275\345E=<\274\217\300=2\364!=\032\177}\274\360\356\366\274>\365x\275\350\262\027\274#\273\020\275\2034D\274\366\324-\274\342f\222\275+\335\201<\216\231\001\275\362{\227<Ck~=\013,\234<\016p\223=\263\004\203<]j#\273\274\377c\275\351w\235:\320\276_\275O\017\357<Q\220O\274\274\325\201\274-*\314\273a\317E\275\034\233\347\274\314\342\364:.x\336=\372\277\320\274\355%@\274\203\214\233\273\022\245\241\275~\363\274=\354\224\217\274G\254\331\274\362\277\233=Y3J\275\243\376\310\274\202e\005=:|R=\345\343+=\350\375/\272\274\\<\275\313\343\353\275\n\3602\275\2466\220\275nA\334\274\217\327\320<\255]\205\275G\\<=\250p$\275\246\010$>hR\r\273\212\016}\275\203\200\314<M\300\367\274V \216\273\213\362\032=\025\032\204=\033n2\275\343\2710<)\356\353\275^\'U>\254|`\275\355\210%<V\327\221=\327\005\301<+%\007=\377\214<\275\374\313\243<\n\302\350\274\254\177\244\2725\337\216\275\253M!8\363\036\252;\343>\025=B\221\366<R\357\206=\374K\244\273d\2357\275\356kY=K1\306=\316>L\275\372\260\253\275\0164\310\274[,G\275_\213k\275\244\021\252;\253\023H\274SKz\275r\264\257=\300K\206=Z\204j\275&\355!\2753R\314<\313\330)\274\354\214\214\273r~\020\274\017\033\005=\313\037\227\275\250\034\252\274\271_\256\275\035\344\013=\000\003<=\337\"0\275\t\205\251\274\315\322\337\274\374\267\023=6\311f<\264\256,=\004\211\207\275\244\261/<\230W,\275g\322m=1:\225<g\327\'\273\260\023\373\274\364I\362\274>\035\245\275\227L\206\275P\243\273<{\022\331\2742\207\202=\304sp\274\214P<\275\246\211t\275m\275\353<GR\327\265i\337\363;$H/\275Lh\211\275\204\244\000=\274\n\356\274\033\313\200\273\250\315\r\275[\243\236=o\023\006\275K\261K<k\2152=\234H!>\313\235\372<\"),>\362@j\275\037<\231\273\257-\256=V\027E\275\277\260w\275\313D6\275\250\336\307:\323\277\027=\237\333\302<\212\257\021>\356\033\225<\250\223?\275i_H=\354)\330=p+\241\275c\352\345\274\252\333\356;\"b?\275\310\322*>k~\010\2753\233\036\274a\220\306\272\362:\030\275M\014\\=@\2535\275\360O\354\274\027\257\025>\265\247w\275\001\n\206\275qM-=\3758\236\275@\303\003\275\352 1\275\256O\277<\345\327?\275\315>\272\275\210b\221\275\247\220z\275\317T\224=\212\3551\2754\334\200\275/\344H\273\363\2214>\305\270\000\275\021\213\204=L\005\377=y\027\312<\224\217\246\274\327aU\274\036-?\275\215\351\223\275\034\243\303\275\266\317\375\274r\330\265\274\2559\223\274\376H\004\275\270\266\341\274\337\371\221\275\261\205(>\206c\243\274\2753V=\367\224\002>\210\000}\275r\0043<\0038{\273\263b\217= \002\211=1\243\356<\307\200\245\274\010$\200=\307f\242\2754\261j\274\334^\215\275\363U\250\275\003\201\014;\221\251r\2748\214;=8\3502\275\262\220\200\275\243\017`=\030\024D\275\321b\021\275\035\312S=\214q(\275\211+\220<\341%\253\274\314Q_=\252\206\017<\212\232\201=s\r\231;\000\202<\275\026\237\266\273|3\014=\273\264/\274=\330\340;\2518G<Ram\273o\251[\274\023e\350\274\360j(\275\206V!\274\003\206\216=\373\023b>x\021\345;\272L\325\274/#S\273\210l\204<\031\324\275\275\202U\320;\211h>\275QN3=W\366\227\2740\354W\275/\242\257=\276\321z<K\026\227<\272L\007\275\340i\231\275\005\216\265\275\231\220\335\274IP\021\275\334\3128:\265\341\334<\272L\220=$\360u\274M\003q=\201\325k=\221\'\t\274\035{\323\273\2777\004\275\231\235r=\215\360<>R!v\275\325\314\302=\243\n\032\275\275\274h>v\330\210\275\246\214\212\274\302k-=h\333G:\317\365\265=\227\270\330\274\311\234^\275\211\031w\274;\272\001\27558\327<\245\230p;\002=\256\273:Q\302\274M\245&\274\322\037:\275\211)\203\275\331f#\275\205\242(\275qX ;\312\032\312<\232\365q<\014\0109>\260\367\257\274\216\361\207<m\364\336<\247I2<\326\243\003<\3034\213:pn\201\275{\225\037>\252\242Z\275\340\234\211<\2402!\272]\210y=\030\264r=Vg\340\274_n\342< C\360<\372\026\370\274\242\303m<\265\007b>o_\335;\216\001\275=\371\265\236\273I\232\244\275\034\030[\275\377=\026\275\032_\323\275V+\240=\217\215\350\274\251\321\220\275\004\303\036\275\316\325&\274\321\'\207\274\340\363\377\274\2172\035<\010\032\310\274\200\314t=$\n\340=Q{\345\274\230\345\211\275\236\221\376\274 \211\211\275\303\315\016\275\375\223\305<\3034\265\274EK\t>\020\374\305\274g{\324<\371+C\275\301.\017\275\333A\301<|Z8=L\322\014\275\317l8\274\251\000\025=\231~2<\206W%>\301>c\275\343\022\223\275\354\226\005>`\264\263\274!6[<\247UD<y\nf=\325~\230\275\2059\340<\205m\206\275Z\016\004\272mG.\275\236\327\001\275\336\001\270\274\201\377\003\274\355\276\025<_\235_\275\316\313\272\2734M\377;2\355^\274\224\303\336\274\207\266\264=UF1=+\267\242=\355\202\227=((\364\273\250,\215\274\365&\032\2740\203\343<Z\r\252\274\214\314\312=\240\017\314\275\033\252\305\274Go\234<\227V\n\275\200r\256\274\230X\246\275\200\346\201\275\004\034[\275f%\216\274\020\372n=\275\300m= ;8\275\276\254\014>[\363\r<\341\250\265:\205\257\000\275\034J\225\274n`\224\275o\002\214\275\304\017\263\274M\242U\274|\232\025\276I\234,\274\271**\274\034(\004>\223\246z<\336\000v\275(]\205\275\336\016\036\275\273\347\357\273\352\257\247;\315_\t=e\320;\275a\277\205;3)\236\273\233-\362\274\311\371\211\275\233\232[=43\317\274\275i\037>\261\177\325\274\364B@\275\372+\362<=;\\\273x\254\367\271%[\261=\024d\334=\330^\200>\344\006\363\274\226\024\235\274\\\256\211=\322\317\270\274\013\315\210\274\rQ\374<\377\306\204\275\267Ey\274\20385>\222\250\300\274+z\345\272\0255\224\275\331_\220<\362R\266<hG!\274R\270d=\330\316=\274J\210\374<Wd%\274g[C\273G\253%\275I\212\333<\322\272\032\275\211\2529=u\257a=\373\023\272=\036\332\273\273G\231W:v\332\376<\033\004R=\355)-\275\016\177d\275\213\307\030\275\200f\203\275\314\260\303\274\nN\335<g\270\013\275lc\202;\316\341\016\275\337\305\306\274`\355\252\274f\343\277\274\205\225\307\274\206q\270\274\251\305\331=]\375\214<\365\240,\275\257\313\300:\211\0328=(\366\003<1\024\177\2747\350\263\274\255\262\347\2747\233\264=\302\2464=\260\274?<\327@\034\275bW\000>\343xa=?\037\177=^\364\261\274V9\204\274\267\366\263\273+\307\340\274\254\232\233=\273\304\277<Y4\021\274\366\017\215\274\375\275\305=\036\230+\2747\255\336\275\325i\333\272\230W\234;&\225\235=x\367\210;\242\020\302;\360\005d\274Nc\241<\016\214\320\274\332>\031\275r\302\236;,\241~\275@\'\226\274\235\034\300\274!\327\246=\235\230\365\274o1_\275\235F\031;\261\362\323=\337!X=\362.\245<8\022C\274\274\353\027=\373\245L\273\305X\371\274D\261i\274\354\330\243\274\261\356\371<\276,-=\341s\237=&3$\274/c\025\275\036\227\034\275vX\241\274@\236@\274\205 \200\275\t|\245\275$\014F=\357e@\275\035j8;\027\337!\275\312]\215\275\n\376\210\275A\365\310;\342>(=\007\263\362=\212\327$\275\227/\355<\3426D\275\017%\203=E\226n=$w\235\274I\252-\275\235{\310=Z\201z\274\262\300\255\274?\203\304=*\235\007\275\013\236\377\275o\206\367=\256\'><\t\332T;\034\367\367=\013\331%<\022g\212=\237\326y=`a \275\315p\240\274Z\027\306\274Y9\315\274\341\3753\275mU\321<\373\215L\274\235L$\275\303i\322\274\346D\253\275%\006\310\2737\037\"<\022\304[\275U\306\304\272I1;;\212\022\237\275\323$\306\274\376\362\245\274\336D\023\2753\220H=\247 \014\275\317#\240\275=&\254\273\375Xc:\214q\201\273\3054\370\274\350u\030=zz\267\274K\227>\275\t\220_\274b\251\231\274=\204u=|\230<\275\221\247@=\347\234\215\275\204g \275i\014o<\027\364i\273g\344\216\274$*\324=*\372\'\275\034\177\001\275K\251\010\275\210\020\333\270\324^\025\275C\336B\275 Hp\275\266\005\t>\310\021\r;\271!\313<\377=\322=\373)\000\275D\244\\;A\372+\274\277\323\347\274\304/2\274DU%=T\371\251;\277\2163\275\337\026\311<A\352\245\274\016\215\013\275\224\312\334\274\324\030\372\274pM\302<\214@(\273\2316\265\274\353L\207\275z)\221\274Mg\021\274\222!\000=\221\362\2307\035\321\026=~\376W\274\225r\245=\002\001F<{\3470\27521\312=vR:\275]\260\017=\333\222\355\271\317\272_=\325\261r\275\231t\307<?\027\033;\233c\323\275ag\233\275\253{\353=\253\344\270\274CQm=\261\237\276\274ni\027<\223W >t?\300<\323\010\017\275\032R\'\274kX\220\274\301#\004\275$\272}<\311x\200\274Z\366$:\204\035\277<g\300\347\273|tW=.\323\016\274.0m=\367\007\315\274\300\315\222\275\032\3117<\327ZN=\341\024\'\275\277\223\333<\350\"y=\023\270\221<>\312\014=\201\3406\275I\026P\275\305\244\351=\n\212\320\274\225\317\365=\203\233\001\275\007\246\240\275l\342\n>\305\314\320\275\224\211&\274\366\214\236=\021\030r\274,\357\265\274\2650\252=$\313\212\275Z\263<\275\024\344\025>+\037\032\275\346\372\001\275\"9\322:[8b>U\365C=\307C!\275M\355\235\275-f\020=\353L\375=\332\036\016=\334tp\275\024\315\276=P\024\023\274\310Dy=\241\003E=$\0054;4\345\232\274\017\250\024\275\302\331\355=\205\343\220\273V\331\360\274\3619\023>\271\252M<)E\320=\265\t\016\275\331G\200:,;4\275v\030\007\275\327,\352<{\003\\\274\305I_<\266\265\257\274\213\203\313=\210\020\235=\245r\262\274\253\224\t\275\331\031\215\274+r\306=&\365\211\274W\355`=9\254M\275\360r^>\000\302\226=3\261\'\274\2132\376\274\361J\002>@\351\266= \016\177=\021\370\262=\302`Y\275\303\362\333\274\331\307F=G\276}=\350\366\371\275#\261a:$\264\237\273\235\020\027\275\360\330\372=\343\305\344\274\306$\201\2749\032\001=:i\312=^\272\034\2754\351\321\273\000~\354;\335\213$>i\000\233\274[g\332=\031\r\r\274\002V\275\275\237\314V\275\203C$\2733\233\236=\207\236\262\275\277\314\375;QI\266<\322\352/>\334\035\240<\364\376\214<\302#\205\275%\305\021\275\321_J\275\372\201\255\275\367\274\n=Y13\274\206v\340=X\316\014\275}\363z\274\204\351\272\275y\375\007\275\304\321\003\275\010F\301\275\264\261\210:\020\327\306=\026~\235\274\320\302~\273_-/\274d)F\275/\033\264<\rMX\275N\313\027\275h+\337:z9\223\275%:*<\256I\373;#\310\025\273\020\316\241\274\352Z\007=\201]\340\2751u\031=\357@\031\275\232\336\225\271\300\032\253=j\353\201=\250\010\246;B\324\014\275(\030\240\275p,\366\2744\267\366\274\220tm\275\037<)\275\261\021\023\275.8\226<h\276\301<Hc\000>\375\207z<\314\320W\275\307\214\035\275\317\253j=\256&&=\223C\010=T.9\275?\025\210\273\326\212#\275\371F1\274>q\224=!\223f\274\3367\372<\307\2304<\361\220f\274\016t;\275\311\375\"\275\240\203\003\273\303m\200<\317l\341\274\351l\316\274%zy=\200|\306\274\225\007R\275\264|v\274\250\374\002\275\033\365\001\275O\243\324<\'\306\234\274\312 %\273F\003\362\272\211o\351<\320\376\265\274\246\342\325\274\302\266\250\2740\277X;H\301`\274\235\250 =e\227\370<\365\346m\273Lp\331\274\000\2138<\341\362\333\275A\002\200\274\241\371\336<\2167\237\275IY\373\274\t`\3149\346D\311\274\231S\226<\037+\236\274\002<\261\274\035\314\337<\020\357\340<\265F1\274\363\344\230\274\201\177>\275>\363\000\275\263.\225<\342t\232=\234\373\014\275\361\342:\275Dq\000\2754\337\033\275\'\257\3668t:\301;\326\232l\272\323\006\034=\317>b<H|N\275\334]\360=\315\027\026\275\202(#\274?\022\035\275`\225%<1#\200<\352\010\037\275\030\264\"\275\240\245\312<\200#\333<El*\274\217\344r<\321c\311\275\345\n\262\274\025\001N\274\364F\265\274\355\327t=\233\355\021;UR\027\275F\276\241\274s\234\357\274\034\305\014\275\335S\002\2757\204S<\276\352\344\274\333!\316\274\310\241>\275\270\215\250;\327\337\265<<\301\000<M\033\235=\014\242=\274+\227\302\274\376A,\275,\231F\274\265\344G\275\350\241\322\273*U\352\274X\337\324\274\351\307\316<\240ic\273\327\344\350<=\323\216\275\344\021\375\273\204H\323\275\326\305H\274\267L\217\274\022\013\344; \'_=\367\007g=W\307}<I\251-\275\334?\010=H.l\274\371\242\246\274F\200\235<\314F\027<<\277\346:k\260t<\246\207\361<+`3\274\214\222\032\273\217\311\314\274\017\301\227\275\370%\256<\0176\216\274\013IK\274\260\'\225<t\202\357\274LP\207\275\256\254\337;\263t\360<\3518e\272\226\262\272<o\236n\275\352IH\275\270\035=\274\313\354\377=f\233\352<MT\036\275\025\321\010\275\230\345\310\273\237V\2419\276\270\272;\213:U\274\306+\007\275\252dx<\205|\245\273\237\231\351<\236\312\343;\323\355\006\275\325\006\032\274v\356\207=o\017\231\275;\260\202;r\344p\275s+\037=)\273\010\275S\355\277\273.\224\206\272\312\207\205\275+\3074\275\200\357\205\274{\334\035\275\272\366\017=<\0324\274M\366\256\274b\221 \275W\375\204\274+\325\033\274{\361~<\003@\035\275\001\277\360\274U\375\251<\001\255\002\275\000\005\007=M\343C\275\211\313\227\274gW\277;\222\304\236=\352\207\025\275\275\302\177\274\373\243\222=\273\010)=\007\354\231\273\177\373\017\275p\267\224=\220\217\006\275\251\265R=\327lw\274\371XV=]\3531<\334\312O<\267\240\355=\020N[>(J\020\274\354\236\302\275?p\322<\356k <C\260\316\274m\367\025<\202\257\"=\264\226\365<j\037\357;\031\301\006\275\271u\302\274\275[\225>\266\327\265\2744\004K\275\300n\247\275\211\257N=\351\305\341=\236\032E=%\321\020\2759\307\327>\211\000\204\275*\204\217\272\313\'2\275WE\361\270\271\013|\275\361\3019\275z\tv;\251?\346<\377\371\001\276l\331L\273\210\227\222<\366p\"\275\221\253\006=\325\2211\275\273\031\353<9\327\363=\235;p<0\225\005<\025\320\276<\241\213\024\274 \351\334=5U\247\275}\322x\274\210\350\351<\277\313\220=\230\000\215<@\240I\274L\300\226\275\031\276e=\343\322\364\273il\212\275z\005\255\274\235\307b;A\257\344\274\333\364\220\275;\t\224\272\264\035I\274\301\273\275=\307\202\243\275\202H\252<\203\350/=\241\010\013=\212f)\275\350\036B\2759\324\254\274\340\013\365\275z\331\032\274\005\337\374\273\352\036\320\273\276\300\206\274\372\340\216</\311\036\274\221\230\021:4}r\275\036\026\226\275\2630);gIu\274~g\000\275\322\303\206;\246m\255<fE\007>\246\261\214\275l\355 \275\365\250\2519z\376\274\275\201\006\316;\307\250\255\275\261\217\331<\t\263\177\275\342\023D\275~G\004=yg\200\275Gf\223\272\260\273 <0S\031\275cY\301=\320\250G:^P\205\274\377\027\240<I\325W\274[\020\217\273mb\264<\271\260\177\275G|\333=0\260\365\274U\364\352=\303f\222\274\333ps\275\346\264\177\273n%\"\275e4\217\274+A\274\275\222\335\242\274\201Vu\275Vu\203\275R\026B\275-\003\250\273\365 m=\246#\024\275\260\241B\275\374\244Y\275Hf\034=2BK=\222\347\035\275\3668\312\274D\201Q\275\037>\'\275\032w\234\275+2P\275n\034\000=M\267\343\274\235hO\275\316D\033>\"\223\026=\312\246 =X\345\203\275\222\261z\275{k!\275`\313K=\014\245N\275n\033.=\177\356\266\274\276I\352<\265\300\221=\304\263M=\002\023=\275q\236\004=;\226\033\275\254q\032>\337\274\355<\230\330\375<s\376\231\275\002\267\243\275\221\010\023\275E\014l>\326j\270\274\033 \017\275)\262#\274\023\0064\275\321R\370\275\312\212\215=\031\317>\2749\276\031\2743\213g>~\035\276\274\305C\036\275]J\036\275\230_\217=\243G3\274\222\177\256\273\356K!=\237\320\334\274_;\004\276 \025\307;1M\271=\035\207\357\275\001\3225<\025_\004\275:%\006=\357\316-\275\310KJ<~\373\211=\373\206\224;\355\351\273\274S\363\375\272\212\212\222\275\317\240\031\275\350\036u<\337\330\337\273\361B\223\275(\372\234;\202\311\321\272\2118:\2747\224\217;,w>\274\023n\356\274[9\320\274\213rH\275L@\374\275O\316\013=\315\325\335\274R\366;\274[\321\303\274\317\tS\274\t~\261;\005\207\305\274\375\203%\275M!H\274\212\r\307;|\014B<\260\304\240<\3252<=\024k\314\274\030>\356;\206\212\230\275\217\305|;E\266O;\310A\220\2749\206X<PD\375<\266\260\034=\'\276B\275\361\014!=\246}%=XN\300<w\216\004>\371\357\205=\257\027*<F\3660<\240\325\001=8\371b\275\275\272X=HV\364\274W\223\205\275\315AZ\275uo\261\275\252Y\024>8M7\273de\001=0\002=\275\207\272s=\305\263\252=x^\244\275TG\214\275\250_e=b\324\306;A\233\030>\325\376\207<~e\032<\350E\357\273Es\351\274u\354\\=qmp;\212}\277\274\213\252J=\033\000\337\274\014+\250\274\241^\025=)\032\336=\004mj<\206\265\267\275\331\351\321\274\244\355\037\274j/\225=AO\370\274\250\322\034\275z\037w=\345\"0<\367g\326;\363\217\355\274\206\001\211\273\273\370-\275\355B4=\002\002\314\274\316\270a<\025\037\241<\266,\036\275\331s\205\273\037\240,\275\203?\005\273\246\237K;\343d\335<\350\177\251\273\265F\333<\323@<<\255\2759=\300\025f=\001)\265\275S\226`;#\247,\275y\374\356<\207\002\036\2748\257\010\273h\244\235=\375\026\277=\210fL=\356\207\241\274\352D\257<P~\002\275\263\226\254\275\032\307\225\275\227\212.\275\200\023\342=X^\374<\346\"\300<\377\353s\275\234q\222=\353\033\231\274\234\252\227=\023+N=\226\305u<\312(\256\273\371z\324<.\326=\275\t\246\t\274\372\322E\275\255\356\023<\370\3555=^\216\223\274\241q%\273\362\305-=iB\247<\225\220\005=\333\266\202\275\205\033\004\275\363Vi\273\243\004\017>\200\273\341;\267w\311\274\247\006\014\275\311-\n=/4a\275L\221\245=SG\234;\300jk\275\342u\273\274\236\374\016\275C\366\241<\255\275r\274k!\021\2757\274\n=uC\217=\331\370\264=\353a\234\275\321`>\275\367\347\201\275\202:==o\365o<\003\367\371=J\276\301<S\340\020\275\203U\034\275\213\207\360\275:\036\217=u\363!=\010\017\212\275\367N\342<\214\227\212=%\rk\274\321\3033\275\002\2659=\317 +=\253T\004\274ij\334\2754\263\002\274-\306+<\346\367\020\275)3\326\275\233%\334\274\201\336\235\275\037\025\277>\264\226\270\274(l\251\273\353F@\275e\211b\275:U\005=)\215$\275\341\277\371\274\335m\255;\032\327\032=\321\031\266=[ \034\274\231c7\275\022.\030=\367\017V=Au\t\274X\332\316\272b\253\345\273~\356K=\310\200\306\2757\363\335<\274G4\275g\324\247\274\302/\266\274\376\014\270=]\225\350\275\205\021\231=J\013\027\274\3534\355\274\023cH\275\3249\020=:?>=\305\335\034=\205\375\264;\027\022l\275G-\020\275\000\244\377<\346=\000>\002g\223=dI\016<\272\2223\273%\t\224\274\200E^=\014\\,\274\n\225~\275\031B\234\271U\270\244\274\014\273\330<\223:\010=In\002\275|q\031=\237\354\225<w\036s=\215\272\275<G\227\215=z\236t\275\005E\367<\031\312J>\t4\244=c\340\230\274hyy<\312\253?\275G\035\023\275\355\256\242\274\257\247G<\222O\211=\263\005\007\275\3450,\275%\364\014\275^\306\024\275G]7\274y\265\257\274\275\274\202\275DV^>\311\271\247<ZP\3629v\270[\274\3007\256=4\336\320=\374\344=\275F\214\273\274\313;\004=\303\336[=X\326\347\272\364\275\203\275\244Wk\275\276\026\"=:\357 <R]k\275\001\177\257=U\256\223=\304\007\010>\306\3614\275z\254\253<\016\250\225\275\306S\357<\276\324\233\274\346j\373;)\316\227\275\376s$\275\363\224\272<\373\033\217\273\025h8=\020\357u\275p?\267\274L\300<\275[(\203\273\340|\255\274\342\375\357<\371\212=\275\225\241\250\274(\"L>cAL=\277\254M\275\275q\316=\023\221p\274\324\231\315\2738\366-=A\n\343\274\260\003\035\275\036\212\326=\'\r\212\275\007?}>\231\"?=Y\t\202\275D]\324\275\306D\025>\257\370\017\275\320\327\206\275\362V/\275J\325\022\274o;6\275\032\314M;+0\315\274\215C\315\274o23\273\257p\005\275!\300\375=M~:\275I\342:\275\351\307\204\275\306\"+\275\374\215\324\274\005\276I\275w\340\216\2751\361Y\275K;\233=O\016*\275\245\220\036\275G3]>b\253y<\235y\305\273!\351Z<\025&P\273L\032\026=\362<\277\274\216\272\202\275l\352\035\275!\013\262\274\306\300\302\274V\361\316=Q\311\"\274-\337/\275&*\"\274\333\032\372\274\002VF=\273\3401\273\352\221\353\274\253?\256\274~\261\010\273(\304\027\275\233\036\211=D\302:\275\357\263X<E\222\367<G\322\375\274\227h\211\275s}\204\273\244\374\010\275\342_\356<\372F\030\275\222\212\275;\355\237\235>\371\014i\274|i\026\275f\230\203\275[\335\252;\374\256\331;\006\032\030=\016\227\260\274\337\002\024\274oIN=\374\262R\275\213\330W;F.\377\274\254\372d=\355\235\236\273\366\333\276:\032\3317=F\226\206<r\302\345\274\r\373\307\274l|\226\273tG\347\274\330\260X9\235\256\003\274\200iL\275-\347\317\274`cu\275y\303\037\274d\370\254\275\222j\033\275\223EP\275f\275\331\2744_\304\274\337\031\256<\014\217\217={S\266<\257\2202=\034\t\035>\034\005#\275y\255\206\274g\366<\275C-;\275P\314\006\275\250\3335>\254\304\247\274zg\321\274F\3346=\3376\230;:\312\325\274]\235\367\273\343!\256\273\263\271\306\274u\360\321=\035\376\014\275\016\266\326=7h\006<\t\351\351<\212ka\275}!\004<\362\235,\274\337\223\204\275\347@\017\274\344\312G\274\370s9\275\025\205\\\274\300\030\221=r\372\240<\347\2642\274\276\256\027\275\311M\270\274\'m\201\275\251\302\014\271\025\374\366<%\220\272=\237\224k\275\350\202-=\014\004\257\274%\226\376=\215\243\302\274\360\335Z\275)\340\301\274\333Z`=\231\366\344\273\275\304\350\274F>\215=\177\0104\275\273\261\310\274/}X=IO\225\273[%\322<\366a];\217Y\322\2742\350\033\274\277\265\342\273\020\200\035=\234\370\245\274\313\323\321\274\312\316_< +6=\033\001E\274\'\362\230<\210a\000\275\231b\221<\034\243y\275\371\000S\275H\244\237\275\"\305\203\274\214\377\335\275\3661U\274-\326!=\372\356 \275\227\362\221\275\177\325B<o\200\307=\261{\304;\353\303)\275\013\361\277\274\371[\013\275\341/\245\274_\004=>\037\3659\275Q2D\275-\251\267\274\326\3345\275P\342\234\274V\305k\275\370\305\222\275\301\304!>\216\231g;\327W\200=\200;t=-\0026\273\235\t\021\274F\344\215\274\032H\323\274\274(u<\007\217s\275\226\205\244=\363\303e=\231\007$=\302G\327\272\037%\216\274\330f\244<h\244\246\275\035&\256\2730\271\004<\320\252\221\275MU6<\216\027\363<\226#\264\275\005#Z=TB\205\274\355\356\2319W~\210\2743\306\251\275N :=\\\267\347\274\340\331F=\321=j<M\270\220;\"Z5;\261C\037>3\307\246\275\251\304\n\275WY\000\275\274\\\360\273m\275\240\274<\243\177=Z\237\231\274)7\340<\300\272\277;\300\030\232\272v\334\301:\353~\231=\254\232!=\327\243h=\203\266\007\275\"\376b\275\nf\270<\341\302(\275\321\001\214>b\333\004\273\220\266C>U:\025>\226PP<\031\022\t<\355\253\t\275\363.\212\274\357a\t>>\277\232\274#\210m\274\212\177{\275\2315M=[K4\275\211Y\177\275\r2\330\274\341\364\354\274<\250\036<\337w\001\275\367\346\212=\366\306\214>\016\334\203\274C\346j>\3275f\272q\017:=\351\354\036<a+&\275\327\354\017\275w\351\361\274\222\243\273;\201\257\r<\345$\210<b\017\004<&\000z\274t\tj;9\342\353\275O\024\t=f7\237\274\na\007\276\371\227C<\357\020<<\336\222%\275\335\337\236=n\333\260\274\tY\302=4\232\220\273\302wU\275O\205\252<\242\302\021\275\223\031\227\274\214t\356\274\354\202\177\275\210M\022\275\324\305\014\275K\022\030>\376\233\275\275c9z\2742g\342\274\014\270\352\273s\371\360:\327\302\212<\276D\234\275\031\265\362\274n+\215=\315\236\276\272\360i\377\272QP\355<\341m\312\275b-\023=\304\033Q\275\212?N=l\222&\275\344\367a\275\233 6\275u\276\257=2\353Q\273\000#~\275\032\256p>\253\310@\2750\337\260\274\276\277}\275\335\300a\274\360\302d\275\342!+\275\346 O\275B#\004\275\276\"<\275\r\316\255\274H\330\036=v\211\241<\226\273\037<\343\355\231\273\000a\014=\004\243\304\2756a7<\324|\204\275G\022[=\002\275+;\234\034\007=W\267\213\275}\303S\275*\264]<\267\241\305\274\356\207\315<\366j\260=7\014\001=B\307<\275\317+\241\275H\247\242<\254\227\225;\313\3322\275\034v\272<\267\240O<]\244!\2752\2523<\356(E\275k\243\330<\254L\363\273\2075^\274\005<\213\273\\\357x=\305\360\215\275\267\326B<\216:X\275T\243\303\275\370\244\234\275k\235\336;\240\341\232\274zZ\261<\234\357\034<\016\236?<\345\246\323<4\t\t<\367\347\251=\255\233\357\2756d\330<\257\177?=\203j\220\2751\224\273\275\273*\254=\215\t*\274\237\265;=\322]\263\273\345\271k<\312\302\215=\311/|\2754&\037\2753\006\233\272F%\177:\\\363\226\274Mm2=\033Y\277\274\025\327O\275Y\023,\275\207\326\211\275g\363\371\273\3728\320\274$\333\221<\314\314H\275h\257l\275\264\031\201<m\331\244\273b&u;\220\315O\274\322\326$\275\226|\246;\004*O<\021\363\204\275\356\002\253=\225s,\2757\273\355\274\246i\020\273g\356\243\274\326\306\233\275\006\202_\275/\311\271=\302\365\211=\321\3136<Fh+\275PQ\230\275\357;\023=D\n#\273\2138\234\275\344\232A=Z\314\207\273V\330<\275\007\251\207\275-\207\376<\222\252s<\255\177@\274\376\'`\274aB3<i\224\203\274\233\365\317\274\366/\276<\262\375\372;\266\016\371\274\270T\327\274\364|O\2751\371\253\274\210\352\233\274:\3678\275h+\271\275!dX=\207\272<\275\271U\200\274I\341\237\2748:\231\274\232\3727\274\353\364x<\'\231O\275\036\025\020<\375\302N\275\016\026\361<\326S\206\275mbA\275\021p\350=\203\202\002\272!\242\032<\332\226`=@\203}\275\254\314\025<\242\276\351<\013P\302=\273l\236\275C\0235\275U\374\235=\233\007\326\274\364\372\007=\n\355\240<\007\210g\275\202}\304<.\010b\275\263\242\010\273I\330\014\275\352\215O\272\244\335\014=t\256\352\273I\354O\275Qo&\275\341\347\n\275\003\007[<\320No\275\270sh\273G;%=K\246^\275)7[\274\201\273\255\274^\0358\275Yw.\275\031,\273\273Z^\237\273\376\300Y\2758>\301\275\254\331\275\274\215c\"<\031\340o\274\362\317\207=\300\227\266<\0026\354\2751\261\373\274\206\003\250\2747\037\213<\204\233A\275\222\310\202;9^n\275m\250\214=\344\317\013=w0\210\274A\221a\275\221d\236\274;`\017<\215\004\021<\031\362[=\016n\231\274\222\352\362\274\036b\377\275\004\215\354\274\230P\022\275\177g_\275\025\246\311;\331OE\274^\315\375\274\374A\255=\235@v\274\365\370^\275\303\3432\274\227&\360;\331\3023<\336z\313\274\"\244\017\275\216%:\275GLr=y\307\267\275e9H;\250\305N\275T\207&<.\252\203<d\326\316\274\345\354N\2750\204b\273\233\200\014<\014\321\022=\361\204\311<\266\275\315=\004X\003>\254\325.<\230\347Z<\2171\366\273\3309\310=\316\266\031\275\206\0049=D\265\336;a\324W\275!}/<q<\n<1\034\214<\2527\353\274\236\300\324\275,\\\233=J0\005>2+L\274N$)\273\3272\244=\255\037\267\274\260,q=\253IP=.\222\211\275\'>\034=3\272F<`[v\275\327\310\370\273\276\013\375=X\230}\275\272\214\014<:O\344\274I\032N>\370\276#=\026\177\342\274\232\265`\275\250X\202\275\366\335\362=\344b\237\275\237\002\020\275\357.\276\275#:-<&\201\347<\346t\367=\255\253\274\275\235\370\240=\034u\232\273=6.<Iu\264< \326\322\275\033\370\217;\001uK\275\307\031\265\274\177M\235\275\217\rY=\211\357\236\275.\251\215\275\245\026\325;\370H\243\275\242\211\224=\264v{\275\270\317\274\274`6\234\275\313\270\237=<\033\225\275\021o\326\274C\245T\275\315\310\241\273\367\236\226\275\254\330\351\273XG\320\274\320\275\006\275\212\274\346;b\351\303;\3263Y\275\251\222\330<\217\034k=\357O6=\177\260`<\312\343#=\001\204\005<XO\316\274\365\237\010=\324\016\333<\311\032\033\275\346\014\237\273\017\355\227\2752\253\324<o9\021\274\370*\006\275\022\263\207\274j00\275\322\236\271<\363q\000\275\316\266\363\274\260:g:N\210\007\275\272\306\373\275x\025\004\274\3025=>\014<C=\246U\177;\024n\276<\376R;>Rw\326\274\301\374\313\274\362\024\354\275\riG=\220E/\274\244\201-\275\323\210\345\274\344W/\271\261\310z;n\243-\274\206\030\261=\373\211\232\274\267\032\340\272J\244\246;f\007d\2750\321\335<\017\233\n\275\271\335\211\275\3017\035>\340\360\227;\335\217\310\274\002Mo=\3073\245\273W8\014\275.\"W\275\367\256\225\274\256\272n<B\351\372\273\225\267\027\275@8\021\275\226\255\363;\013c\350\274\211\365!>uI.=\215B\337<\335\313\211\274\227\350\226<\372L:\275\"\251\027\275|Z\301\273[\261\360\274\333\022\370<\000\202\245\275F\262\251<U\023\032\274\342\rp\275b\330\032\275~\354o\275w\365n=\022\365\242<w\276\313\275dW\033\275Gb_>\262\347\207\275\2362t\275x\375j=\203\232\005\275\2634\274\274R\346\036\275}\226\322=Z\222\337\275G\356\233\273~\367\246<\204,\306=\220\316O\273\347\370\321=\221\036A=\213\364\234=qI\224<\2024\267\274S\306g=\343TO\275\232\273\216\275n\253\307\273\357\302\014\275\256\264b\273\215i\242\275\004\306\364\274\200tC\274\030\320\347\274\354\202\025=@\223\244=\t\337\203=\224\004\254=\232\307\345\273\014\216*=\r\304g=\t\260^\275\373\264\341\274\200\0036=8m/<\373\"\037\274\252\261\034>\252\200H\275.\027\232=n\200\326=\340\247\251<\005\211\271\274+\244\376\274\216\343N\275\177\377\261\275\254\333\314<\256V\227<U|\255\274\r}T\275\005\217\241\273e.D=}\023\320\275\365\355\002\275\312\345\254\273S\206\224\275e\236s\275\220B\204\275\257q@<J\207\200=_T)\275\003}\342\274\364\256\230\275-\210\370=\257\311$=7\0041<\353\204\241\275\223\350\202\274\223\351\037\274\304\3650\275\212!\212<&\221[\275/\306\302\274\270B\205\275*\265\000\274\233\260R\275c/\032\275\2274\357\273\027\234\037<\000u\247:J\213\222<\375\210\373<\306\324i\275\317\227,\275\304\251\027\275\334\336A\274\024R\002=fq\000=S\031~\275\345\304\342=\215:@=\210bc\275\301\305*\275F\003;\275\022H!=\314(\350\272\340h\032\275\232\0325>\304\334\233\274<\346\035\275u)\344<h\341\373\274\260\353\240\274pW\271\275\377W8=U\361$=a\036.\275\243\006\234<\250(\303<?z\213\275\020\276\231\273!K\260\275\252\017D<\266On=\265\317O\275\350A\345\2747\325\234\273N\342\017\275\262\2703\273\243\242\301=\tPc\275\307U\242<\352\327\252;\2272\223\275\317=\036\275m\241\2739|:\226=K=;\275D\024\022\274\007l\007<aI\177=\375\211\301\274M8\236;\tq\002=\221<\021\275FW\220\274\205\257\231<:\024d;+\337\233\275\351\366\354\274\214D=\275\230\345\021\274\362\3249=\205\253Q\275\204A\207\272}\371\225\275\210N&\275\310@3\273\342^\232\275[\273\276\275}\231m\275U\335\235\275\265i6;\216\002\364\274\310\333\233\275\333@\326\274\010\230{\275+m\002<\307\361\261\274\366Pu\275\004\254\361\272\006\034)\275u\266\023\274\206Z\211=\032\002\275=ge\020\275/\302\004=\345\351\301=.T\255\275.!\373<\255\340\353\274\374\267\003\275qa\343;\005\343\304\274\307\271\267\274\275\252\024\275\240\213!<\325R\332=r0o=qYb=\2330\252\273Z\355\214\275\267\365\311\274\232U$\274\374F\236\274\"\276\320\274\244e\004\275D\251_<\300u(=:\375\365\274f\305\310\272\227\340\360<\320\342\377\273\022\331\201\275\203A\336<\274+\263\275\323\265R=\365\033$=I\3166\275|ar\275fi\235=g\352H\275\010\344\367\274\271\017\342\275\304\304!>/V\335\275E\257S=\347\315b\275P`\374<\255\367\274;\271\252?8%*\300;v+\210<\027\372\003=\330\035\201<\374\247\240\274:}b>y\365\033\275m\211\352<\252\335\325=\372i\215\275\366\310\312<\207.\210<\252\027>\275\3334\034\275\372\367\247\272\274\262\360\275Fl\032\275\316hd\275N\372\363\275\034\232\200\274\215\241\211=Y\032F\275\200\360\177\275\013\227\014=\356\271\264\2746-\250=\316\000\311\2743\204-\275\r\201\217<c\032\325=\000\213\311=\031\032\310\274l\223p;\302qI\275\235\337\203=\256xZ\275v\242\312<\277\025\361\2747\003\003>\301\272\333\274t\242+\274O\327|\275m\365f<\027%\361\274c\233\261<\217xu<t:\246<\2235\n>A\002v\272\001\001\236\275\327\255\270=\244\326&=\\\025\345\274J\2722>\267G\245<p9\265\27547\000=\324\016\323\274\222%\014\275\327\203\202\272\233\035V\274\030\017\343\275\017\221\244\275\000.u=\371\276%=EP\006\275\331\247\226\275\360\346\203<\213\3616>\277\206\017=\274\302\326\274B\'\363<\324\235\n=>Dx\275M\005\030>KH\337;\323VT\275\201\351a\275epF<k\037f\275\245YF\275,\006R\274\324\375V\274\273\322&\275\316\324\303\274\333\211)\275L9\270\274\217~\262\275}\263\256\273r1\n\275\354\370\274\275\004\037\356\274\330\267J=\370Sx\2744V\303<\355C==\363\220 >K|\312\275gK5\274\200z\366;\264\3733<\305\255\";\215\222\275=D\227\001=!\235\334<l\376\326\275\026\\\235\275cGm\275#\327\007;\260\204V<\315n\031=(I\327\274)\320\237<\312Y\3759]\300\326;\336!\002\275E\\\342\274\267\345\023<\254,\311<\356!\005\275\360j\031\275\3274\004>3\350\037>\031\250];+\230x\275\366\2756\275\245dG=D\362\001\272\270L\375<\023\206\370=\306\006\222\275\225g\003=\002\303\377\275\276\312\000;\245\372\004\275\026\234\374<w\363W<\031\037S=\217\020)=\212\303>=\244\202A=\343\005\211;q\320\207\275?\236\376:S\004%\275\266\250\212=l\257\352\274\301\027\202\274\216{\032=\023\332\230\274C\375\365\274=\003-\275\001\033Y\2759\342\262\275k\304x=\214y1\275\300V\240\274\304\023\240=-\223\212\275\334\365f\275^Y\364\2746\333w\275\374\217\354=\005\024\t\275\327\177\312=\372\327\n=\242\'\226\275\017\226\334\272F\361\276\275\273\331\016>\215\260\205=\032\215[\275\002\340\323\274\325\216\307\274\305W <\350\332{=\366\360\226\275 \346\222\274\331\263\204\275\3024\r\2747\354_\275\267\276H>\270\014\252<+S\314=i\006\346\275\227\022\351=\373[)\274\312z\203\275\374G\310\274\373\211k\275m\322B\275\346\320\025\275\223\330k\2734>=\275C\337{=\322\320Z\275\313\032;\274\000WU\275I\025\322\2751\202{\275\020\002\025\276c%N=E\354\245\275\276\370\323<2BS\275Mg@=\223\325\021<\322\017{>W\227I\273.\371\366<\272\213$>\274W\030<\250\360\021=`\300M<.\030\315=\tv\246\275j3\344=\274\270u=-U\265<@\306\315=H\311\254<\366\367\265<\266~)>>j\373;\246\333F\275\\ez=\314\025<\273_uF\274\001\001\341\273\271\031\355\274\257\211\006=\227\257\006=b\217\205\275\204y\263\275\215{\266=\t\346\255\274\367\340P\275\356\335(=\005&\201=`[j<\201\214\r\275I\260\252\275^\201\232=\2066M>\224\212\236<\341i\014=y\2361\275%\352\005\276\266\322\227\274\311\013\325<Q\356\316\274\277\203\321<\036\3546\275\332\2731=\220vj<+f\365=M\334\023=\265\344\312<\260\371\210\273\344\362\021\275x\337\277\275\232\201\361\275Ns\311;\002T\355\274\236o\273=`C\203\275@c\307<r\340T\274i\2733<\314xl=\272\036\242\273+\007\255;(\3343\272\025\350\317\272\320\324\205=\324\031\t<*6\217=5\237\000\274\031\213\217\275\371\2565>\177q\255\275J\001\221\275Z\275\204=\307\235_\275M$\220=\255M\251=\312\204\257\274\246\211\t=t\244\366=\307\007\265\273iP\245=&iG\274m\232a;\017)\322<\306\233\017\275\210\223\367<\016-\266\275\324\375\303\275\212o\334<}\200g=j\316\342=\217\277\'\275\t\373b= G\t=\273\340\353<0\336\204\271i\317\266\2757\365\340\275\230\202\221\275{\351n=\234\336\352\274;\260\263\275\327x]=s\177\037=\033\354\241\275\343<\001=\217\231\317<F\'\243;\305\000\325\274\363\004L=M\240\305\275&\020j\273r\346\340<\353\010\314\273R\027\310;\211&\307=\360\240\311\274\007Q\026=,\260\244<\204\251\334\274\230\253\211<\205~5;\346\246\331=SK\003<Qh\216=K\211\213=oV\273<\372\270w\275\203\266N>\322N\270=\354\206\275\274\2014\372=\321\022Y<\246\236\354\274\350a\230=\002\273Z9Z:q\275\'HX\275e8,;T`\264=\334\364\024\275\207s:\275\273\223\021\274\330*\277\275E\202\001\274\360B$<\326\253\264\275\304\030b\274\204zg\275\301\335\013=\204\037:\275[F\205\275\240\271\330\274\374\034\251=~\020\326\274\336\367\207>K\372\303\274\323\203\322:?\344\210\275\000\365\312<Y\005p=\027\371\207\274W\236\245\274HM\301\274\252\206\034=\335\000\236<\200t;\274h\027\345\274o%)\275\365\207\n<o\316N>c\222\250=\226?\'>\010O\213\274\221q\026\275c\260\001\275S.\336\274\267\202\230<sv$>/\326\312\274\311\262\271\274}\304\033=NFu\275p\341\204\275\332t\027=\371\000\253\273\376\207\241\275\004\305N\275\035s=>\221\370e;\211\237E\275 #\222\274TT\216=\000Y\300\275\014\273[;Z\361\035\275t8\212\274\242g\346\275\335~\260=^\352\302\275L\263\374<z\204\n\275F\301T<\032\223\253\275\022U\304=\010\354\234\274\025\037\321;\323\357z\273\201!\236\274_\014S=\207\202\202\275{6\245<\372\2027>\273\216\227\274\222C\213\275\3367\273\274r\364a=\361\332\236\2753f3;\332Q\024=\003\315\324\274\033\211\023<#\030;\275\264\3038\275S\022\207\273m\334\227\274\357\372\320<\000v\336=\032h\362\274\205\265<\274\205>7=\t\006m<Z\245\223\275\257j\254\275x\022\\\275\300n\372\273+W\225\275\264\247\262\275\313%|\2743\347\235<\261\n\206=\250-\362\274t\206E\275w\335\244\275a\337\037>IZ5=\277W@=\271V\231\274>\']\271.\346\301=\036\2627=P0\005\276=\204Z\275<6Y\274\302L\203\275e\253M\274yj\235\275\216/\210=\231UG=,5\266=w\323\353<\t\025\263\275sN{\275\021N\314;\371\365\017\2748\n\360<\230U0\275\254\233\271\274\3253\252<L\234C\275\275X\237\275LyU>\266\261b\276\272tQ\275:\345R<\256\312\310\273\006\353p\275?C}=o&\250\274\275i\t=Wk6\275<\350B>\221\360\374==\007\370\273\232\350\022\275(\300\254=\005y\377\275\031Z\022=3\371\252\275\014%#\275 O\364\274<\250\334\274Qw\007=\344\261\017=\rM\321\274\2147\311\275\365\242/\275\317\221n>\316\326\t\275\313\205\232=3\237r=\"\234v\273\202\232\013\275>\262\002\275\n\013><\306?5\275\256\332\230=\305^N\275\232\310\030\274\260\256|\275\3025M=:\024\310:\016m\374<\177\214\343:<\013\333\274\031\336)=\2619a=\273#_\273\345\216m\274\306\276j;\364tC=\203V\002\276v76<\027N\262\273\256\337\033<\316\313\005\274\223T\311\274wtQ=\276\323\035\274\265\273><#\363}=\276\264\303:J2F<m\227\240>7\274\245\271\317% \274%\352\034\275.vs\275\373\366\354;n\"\316=\357\215w\275\314\234\305\275\315\335\244\275gMH=\032\201X=;\036\310\272.\263\315;e\001\246<\023\261\000\275.\2250=j\246\344<\026e\020\2768\367\274;P\204l<\245\005\326=?\244Y=\tG\235\274\341\227\001\275\352o\324<\223\375\372\274\200g@=\223\367\316\274U~\034\275\335\376\232\275r%\225\275\301\327\247=\346^\247\275\336d/\275](\013\274\'\001\322;\271\371;=\235\371\372<\330\2730=$$\222=\"\3766=\352\356o\274\377s\300\274\035V\216\275\252\374\234>VA\331<^\\D\275Q\315\234\274\271ZP=\365\353\272;a\277r=\205\254\247<=\342\261<\373\324\271<\262c\310<H\361\232\2751a1=m\345\017=P\353[;\357rG\275u\211\207\274\314\305\210\274\266\2637>\252n5\275*\331]=\333b\007\276\336\322O=\000y\203<g\004\243\273\256T\013;\313\341y\275\344\354d=\253\213\227\275P7*=j\203\003>\243x\003=>\037\313\274\023\r&=\026\303a\275\236\377\245;\260\267%\275\231\233r=\"\035\244;\214x\312\274=\273\033\275\276\376r=F\210\273\273\rF\360;=\237\333;,\351\257\274\361\356Y;\243\024\316\274v\207D=\324pJ\274\367;>=o#\304<\260\322==\'\316p=j\031\262\275\224\360\320=\245:$\275\326\212Q\274YB\215<\014F:\274H\276(< ]f\275\241\301\253\274\020\034\216\275\204\241\353\274G\253\212\274C|\032\275\243>\301\274f\255.\274\346\372W\275j6V=\254\177S\275\333\255j=5-\274\274\375z <p\020\233<\276)\205\273\334j\340;4@f\275\207\324C\274\274\240/\275q\300\216\275\003x\304\274^\003\333\274\373\'\265<\234\307\2039\367\001\034\275\016b\307\275W\033\267\273W\034\250<x5\300:\207A\351\273q\217\037\275?\267\234\274\263\237\241:8\202f\275\263O\336\274<\271\364<[\345^\275\370\342U=\362%z:\221\244\025\275j(\006\275\202p\'\273.\327%<\032A\016\275x\332\312\275\330M\223=\037\321\354\273r\355O=\272\330\331<\216\350\215=\303w\353=rz\t\274\371\370\027=\240Q\263\274\352\302\262<\341W8<\010\224\357\273\316\362\234\275[!$\275\270\275\201;\214\334\212\274\357\203n\274u\356\r\274\027\365y<&Y\314<_a\330\275\317bi\275\217\222\341<\r\037\014\275\322l\010<D\253\266\274t\354\201\274\376\311\013=\'\317W>0\241\351=\003N\034=\0363k;\256\253\n=&]\260;\330Vo=(\307\247< \213\354;(FY;\314X%=f\ns\274\034\245*\275\352c\335=\226j\\<\371&C\275HA\001<u\214\023>\004\313\023=\224\225\206\274m\035\032\274\311\\\232\274#\217\016\274\377\204a<4 \262\275\325\227 \274_\376\014\275\274\203\265<\306_d\275U3\211\273\n\324\221=|\342\374;\004sF\275\276Fr<\201\027\202<9K3=B\360\204\275\353\250\206\2754\270\026\275NB\223:\320h\226=\203%\336=bV\037<\032\362\362;\365\013 \275\013\016y\2746\256r\275\257\347X\274\262\322\253<\035+\355=\240`\305=3\022\214\275\211:\241\275\255P\262=\350T\211\275\254\310\302\275\254\353c\275X\227Y=\311W\212=*:\334<XL.=R:\014\273?#S\275Ml\032=\317Q\374;\365\355\334\274f{\205=\021:n\275[\250\010\275\020\363t\274\260cj=E\003\213=\210WN\274\233\032\003\275\306\261\372\273\3448\007\274;\232H\275s\206_<\311\0245<\256\301\313:\316\3706\275\204#\255\275h\243\216=\341\004w\274\'\017\031\275\3578 =\014\277\020\275\260\243\271;\036*\261\275k\016o\275\337\3759<>\355\272<\272\035\332;\366\320\367=\'\340\310\274\326\023\317<\262\023\036\275\331\n\254\275\302X\246:\247\304Z>\227\002\260=\252\367\001\273y\330z<\217B\024\275\002}\235\274\345\260\257\2750!\376;k\017==\251\300\010\275\373+=\275\033A\266=\372AU\275\022\014\320\274H\t>\274N\226\025\275\366\3013\275\201g\025\275\270g\351\274\204\331]\272\210V\275=\275\010v\274\354\370\\\275\377\026\304\272u\300,>a\327G\274@\343\004\271\236\246E\275\271q\002\275\234\203\245<\326\250\221<\367\352\\\275Vf\326=\375ki=-^\020=>\331l=\347\313\006\274]\017\271\274\024\355\267\273\370\213,>\221\307\021>\'\314\226=\377\306\'\275\340\202\307\274\330\363\274=D\033\013\276s=.\273\263\261\226<WL\246\274\260\234\206<\364\375 <F\005/=\244\026\002\274y\201\177>t\356\227\275\246\'\244\274\272\322\200<\347\376\316\274\360xS\275\373\231\233:A&\201=\236\310\'>\220A\264<b\355N=\"\233\311\275@w\325\274\2377\005\276\370\301\001\275R\235\036>\243\272\027=\363\304\301=\232l5<\247\263O\275M\261\360\274_\246\203=\344\003 \275\036\377\361\274_9:\275H#\220<\343\375V\275\302`\251\275l:\026\274?\310c\275\250e\203\274H9k\274T\245\237<\016}\t\274\371R\210\274\222R\010>\261\017\212\2748m,\275:\016\332\275Q|\301=4\255l<\220\356\027<\331\001\302\274\t\255\246\274\321\177\352=\365\026\250=\312\016\330=\231\222\332\273\227G\027;\3259\340=\216\032\210\275\0026\335\273\nQ\007\275\274\3006\275\300\037U=\244\2341\275w\273\270<\203\322)\275\255X4>D\254\327\274|\032[=,gp=\270\333\236\275\021\234\034=\273\273\035:|\210\250\275\271\t\240\274$\265\334\275\030\355\231=\017~c\275\351\324\325<%U\342=\027$u\275\263\2545\275y\217\363;\251\341\212\275\013\357\216\275\220\214\002\275\036\354\035=\331\270\217\274\202\212\255=\256\2772<\"\354C\274\356X =2\210j\275\250\226\343;\021\263\354\274i%\021\275\245\214\250\274O\2129\275\204+w\273\264\016/\2747\016\243\274\245l1\273\001\016\204\275\306\250\276\274\300\225\013=\323\255\006:\315d&\274Du\267\274\004\376E\273\364\023f\273\233\344L\275P\321-\275/x\204<\020\323\317\274\346\331\365<\016\227\272=\236\212\221\275>n\275\275\351\224\250\275kr#\275\220\t\317\275\310j\013=\243h\264\274z\315|\274%h!\275T\235\200\275\204~\363<.y\227\275@7\314;W!\013\275\375LE\274\313?K;\370\271\333\273\263\233F\274\322\035\244=Y\007\320=H\t\016=\2616H\275Cj\323\273]\tS<\217N\201=\251\316_\274\r5V\2744A<\275\'\374\222=\245\272\t=A)J\274)\311\245\275\334\223X\275\366\213\210\275\025,\004\275C`\202=\376\235\006\272\230*\003\273\214H\304<\260\203\357;\377\263\227\275\205\353 \275,\333\020\275>W\231\275\251\233\005\275\326\":\274Y\2042\275\243\334o\274U\321\025\274,\244\271=\311\354\230\274\320\376!\275\233\345\017<\241\300\333\274\323\327\271=\253z\013<f\275\200\2750Kg=Z\343w\275\377r\343=}\'\345<\213o\353<\310\370\013=\213\377\204\275f\034\037\275\224\354*\274gI\373=\023\345\250=\001X+=k\240\350<\360\270\307\275\222\2512==\300\213=\311Do>&qF>\272\016\246\274\240\270\025\275\215t3<0\274\317\275)\354j\275\222\211p\275,\334\316\274\201\201\312\2748\035z=H*R\275\233B\242\275\002E1\275\325Y\333;\265\030\223=K\263\235\274\346\370\346<\306\001\225\274\200\332\317\274\307P\010=H\270\322\274\322\240\003=\342\253:\275\264\322\226\274PT\302\274\203\307\010>7W1=\2520\204\273\025J\031\275r\306v\275)\352\3539k\215\227<\212\"L\275\275U\346=\330B\240=P\033\312\274\240tP\274?6}<U\000\310\275\256\010\003\275\360iT\275\350\206\">\341 \321\275p\t\204\274)\301\245<|sq\275P\363\014=\326\022\267\274\355\200\311\274d\277\335\274\342UF\275\333*\006\275\303o\026\272\034\314\206\275\216\365\004\275\361G\342<\220\001\301<\372s\212\274\376\231\355<#\346\327\2745\252\252=x\311]\275\371n-\273\316^d<\255\2022=+/#\274/\372\205\2758J3=\234s\267\274\000~h\274\'\002\246<\3757\220\275Bu\325<\322\002\026;\005\360\272:}5\005\276\334\005\226\275\211w\367\274\262Y\201\275\236it=\234\260k>\234\032\355=\217\326\036\274R4\004>C\202\356\273\235\307\354\274E-W<[=\206\275\2046\343<\020\024\363\274\345\201\330>\316\245\333<\366\026\313\274X\351\315;\370#?\275}\254v=o\307\366;Z\235@\275\305\341\266<\332b\246\2743\275\366\274o\034\265\274\342C\222<<\010\030\274\360\361\006<\266\202Y=\022U\351\2731\021\234\275\033\206\245>t(F>\235M\031\274\031\212\207\275\232\003\304<_1\027\275\037\244\233\275\024\305\233\275m\275\002\274R\323\t\275\000\244\t\275\357\266/\274}t\257\274VW\334<\201u\312\275\266<i\272\267\344w\275\234\340\000\275\244)n\275\316V\"\274\253\212\363\274\350\t\225\275\227\255\361\274\037\237\236\275Nn\010>m\233\244=\256+\377\274\250t\210\275 \345q=,N,=r\273!>{Y8\275\036m\217\274\332\034_=Z\374\023<\3310\257=e}\315\273fg\274\275\022\010\255<\001\363\354<\300\336\\\275\215\245s\275NW\210\274Q\252\351=\200\200\217\275(n\227=\306Y\206<\200\374\243\275`\324\017=\006\254S>S\232\000=\374d\027\275}\324\347<\223\202%=+3\200\275\336\221z<\340\325-\275pk\205\275pV\303<\332\322\243<r[v\275{\031t< vT=\233\361C<\014\214\'\275\242\227\221<\351\376\373\274\234/\335=x\013\261;3\260s=u \213;&\221?\275\311\274\003\273\346`\260<@\2623\275\314\330\220=\365j\034\274z\231\333;U\257\220\275\332$#<wu\033=y\214\033=\230:-=\030\3645\272\364e\221<\030c\223\273a\233|=\304\201\324;[6b\275\005\223\205>\365d\037=\004\356\2768%\035Z;q4h<-5*>\2136\212\275g\r]\274\222\3602=U\226\"\274]\030\211\275\341\243\230\2752z`;|\2162=iV\234<}\tJ<\007S\210<\265m\361\274\016\221\225\274\245\253\353\275\233\231u<.H\374\275\\\256I\275o\230\006<\342\303~<~\373\345\2747\221\322;]c==\261\202\211\275\334\220Y\274%j\206\274D\366\204\274\"\224m\2745\234\006=\310q\263\275=\254\216\274\267\005\330>A\026U;m\251c=72.=\2333\013\274\254S\'=\346?H=\373\307\323;H\0166\275\300\220O\275\037\241\274<\355a>\2759S\242=#i\235\275[\323\347<L>\305\274\027=\211\275\243\363G<\031\204O\272\215\215\014=\334j\213\273\001\354(\273\244\035U\275\373\374\031>\000\276\337<\305>\207=D\022\364<\2379\017>nO\263=\241q\247=kr2=,\322:\275\025\026{:\312\352\327\272\232o1\275\376F\216\275\201,8\275\246\327];V\234q=\303W\225<W\333P<j\347\023\2739T\300<\202\337\n\276\233I\211\275\272\256\337<\021\373->\375\257\323<\0030\205<\374\372%\275\271I\313\274\370(\251;\341\r\n\275\024A\301=LD\0109\355\262\321\274\250\'\352;:<c\275(y\031=\310\364{\275`:\303\274\320\241\316=u!o\275u8\346=*.:=\274\005\240<\021oJ\274\330\233\233=\212\240\"\273\202.\206=Q\211v8AA\326\274\001\326\207=)}T=\027\222\234\274q\362\205\274\251\002Q\275\212\320\021\275\214\371d\275\322,\246\275\001a\216=\271\313\201=\266\357\256;P\314\233\2736\335\237<J\327E=/5\243\2752\035^=\340\314O\275\372\007\002=\315\314\374<+^\204\274Y\302\n>>\367\301<G\211i=\201G\361<D\271\034\274\033o\244:\035\354\003\274\223q)\275\023>\351\272q\311\t=\2263\027=\236\333\261\273w\023C=l\t5\274\226\342\252\274\313\265\206\274\r\357\027<5\005\013<\251\250\277\275(#\t=u\305\341\2750l\r\273g?\221\275\026\375x\273\300\2144<\241Xz\2737\'A\275/\'\271\274\327\037\227\275\177O\236\275\216\3718=|\335\234\274~`\266=\034\'\020\275H\007\017<\337\034]=\266C7<9\350\356<\374\303\"\2757\366[>E\274\274\274\366Al<\313\363\340<\323\202\377\274\345\363\037=P\265\223\274\032z|\2747L\013;\"\013\344==\271)\275\234\240}\274\330\031\246\274=_\354;/p\235\274re\360\273\200^\345\275\037\364\306\275Z\202\364\2743\217\221\274&\207\337\273\256\263\026\274U\031\320\274vW9\275t\376\235\275\356\251\254=k\233Q<\371j\375=\006\372\255\275\231\207X\275\315A\003\275L\256\204=\216\377q\275\273\366\230\274\325\262|=F\206\306<&,\004\275\\+\031<\331\007\331\273f\256\n\275\217.\351<~gJ=.\370\364\275\352\362\"\275\254\311\360<\273Nz;\362\032\300<_$\374\274\022\2312\275\225t\342\274JV\213\275JI\203\275\014\344\265=\341r\272<\366e\272=\303\227\n>\244y\007>\226\017$\275\214\r\345\274\333\244[<Q\347\223\275EU\344\274(\263\244\275\244\025\031\275\036\376\007=\020\222\n\274\211\277\177<\322(!\275\357\2141>D\r\353=\n\237D\275:)\010\275\311\025\246=\n\353t\274\001\025B=~\322\363\273\214\314\276=\3760\200\274i\000v\275\374Q\201\275\226\037\255\273\320\r\242\275\361\013s\274\265\320\017=&;\001\275\010\007\340=\314\r\342=u*\263=\216gJ=\371<\226=\343\204\233\275i&}=\n\200e\275\006\306c\275P\225\032\275\232\272m>\257\330\375\274\240]/\275\253\242;\274\340\034\270<\003\007\232\275\343\000\226\273\367\260\245=6`\263\273U\314\205\275k\225\030>\2131\255\274o~\216=\2239\252;^]H\275H\216w\275\312\021\204\275\200\013\205\274\025\322\240\271\264\350\020=,\343\337\275\356\351\271\275\375E\237\275\353@+=\023\275\241<N\344\251\274\2076\265\274\356V!\275\215O\270\274\245\375\230=\013\244\241<\003,n\275^\0040>[\007J=\271\263\275\274\276[\177\275u\232.\274\'F\306\273\327J\240\275\304\257\360<\234\022)=\334_\223=\257]\253\275\221\224\002\274S\022\350\274a\034\362\2745\231H\275\276\231\237=:4b\275\267\2203\275\213\014\202<X\322\210<\302Q\335\274\024U\214\275n \024\275*\023\316=_d<\275%\333n\274\356JX<\303\355\225\272\234\320]\275\030w\366\274d\332\230<J\244\344=\230\036\010\275N\322w\275\260aj=\n\220\016>\250\243S\275B\224\247\274\211=\312\274F\300\265\274n\361\323<\323B\265=\263\013\027\275P\301\023\275 \250\351:.\323\375\274\010\206\230\275o\370\353\274\013n\314=s\005P=\245I\272\274\334\306M\275\034>\031<\212 >=>\277?\275\365\2428=\006\\/;\212\240\222\275$\327j\273\252\020\226\275\n-\006\275&*\020=\314\276\216\274\354\215/\275\217\261\237;\362\231[\274\352\363\233;\265\301\301;\305\316\311\273\202\335\307\274\337\367\300;\3128\261\274\024\310@\275\227@\321\275x\235v<(\327j\275\315\263\355\274\301;^\275\234\ne\274\246M\327<s\230\330\273\376 \'=L\341\270\273\371v\334=\264\337\257<q\377\355\273fv\376\273+\307.\273\364\230i\275qj\242\275\237\033\016\274\333<\266\274;\004Y\274\310d\202<\325&\257\274\027I\257<old\275\004\372\002\2754;K\275\204\271\212\275\251\362g\274\004\376 >;]\272=$B\317<D\200\306=i\3534\275Vn0\274c\206g\275\207P\335<\027\276\261<\200\0378<Gc\240=\334\243#\275\3665\365\274\212Pz\274x\370Q\275\263\240\242\275\223\353}<\261)\266\275e\225l\275/\213\212=5\206\360=\253\037\327\274\376\270\004\275-\267\232\275\304\271!>\n4A=\332\226\'>\251\366|;\332M\350\274\240\216\027\274\233>\321;\340\337}\275N\277\034\275\354)\r\274\013\227f\274ok\277<\023k\020=\021\214\241<0&+<\300z\023\275\203N?\275\235\243s\275\001\356\235:K}\224\275F;\272\274\037\365\014=\254\2073\274\312uk\275\371\017\225\275\316\325:\275&\366\'\275\202M\236>\253\300\306<\324\030\241\274\215z\026>\367\010\200<\371\313;\272GQa<y\272j=\031\202\006<\366\037\201>Q\240\334=2o\243\274\374\030\361\274-\341\236=\332\311^\275\332\002\001\276\230S\241=5B&\275\002\037N\274\226\243\262<\024x\362\274Yv\327\274\257P\021\275\203\270b\274uB*\275\357\225\231\274\354)\350;\277\327\235\274\005\3155\276\035*\264\275\367\333\266\274^\004?\273\265\340K\275[\205\373\274g\272\006\275\334Rz<Q\221q\274\016n*\275^\3210\274\220\262\007>\340\340\225=\310\016w\274\234\366c:E\020\200\275\021e\023\274[\216\270\273f\314\\\275\334\220$=\"~\\=\255\233x>\207\025\300\274>#\374\274\333UA\275\314\313\274\275\275\033\306;/\360\216=\010\\\326\274\363Yo\275yr\244\274\221\237)\275\241\035+\275\332\233\224;@U\376\273\322*\004=\032\212>\274t`\t=z\317\013\275U7N\275\"us=\220N\235\275\002\247\367\273\240\246\314;5\234\262\274?\016\343\274`P\274=\346\344\303\274\304\034\\\275J\326\016\275\233Q\005\275\030\017\033=\243\235\224\274\301\253\t>\365G\037=h\350&<\334\325\267\273\351\037\326<\264\336r<=\376\351\274D\003\322\274\236\000\204\274[kt=\203\364g=\333\217\237<\311\255:<\264\211\332\275\347\323\022\273\210 \342<\315\337\201\275\"T\226\275\367\371\037=\220\315.\275\253\032\224=m2\307<F\034&\275uL\246\274\203&\n\275\274\237\237=\357\342Y=\037\357\214=\177\365\223\275\00747=\231+S=\022_[\274\323e\351\275]\257\246\274{\251\t\275tq\260<O\300\372=M\226$\275\314V\307:\346\'\207<\3533\335<\005\276-\274gI\220\274\2468\324<4\211Q=C\265\211\274\316\275\023\276xb\357<\006\356\271\274\240\025\234=\327\016a\275~\340?;\234\341\210=\025\200_\275\031\233\024\275F1E\275\313b\247<\374\243\242\271\2741\262=\026DI\274\201\224\315<\202\220\203\274\272\346\004\274\316t\365;Y\311Z\275YR\210\274_\371\351\274\250B\210\275\234\034Z\275r\222;>\315\327I=\203\t\347\274\330u\315\275Y\266\256=\372\326\006\275\334\224W=\026\320\272=\227\236(<\321S8\272\201\366>\275\351\336\214\275\264\324D\275r3\271\274\316\332t:\236\240m\273\320M{\2754\205\n>!\362\004\275\337\263~=cv\250<\321\335\246<\277\355.\275\n\344X=bg\265<\317|)=\241Uv\275\243\354a\275]\201\330;\267Tq\274.\304\001>Z\203\004\275b\021\241=\217\"\326\272\365\346M=k\326\365\273\247\252\203\274\024\360\277<\306\253\201=w\225\327\274\327q\235=@o\251<z\301\314\274n\315\301\274\344x\204\275S\024\327=\202I\304\273\321,}\275\333\337\234\274\3377\306\274\014H\260<\210\354m=K\303\037\275\346a\250\275\346\025X\275\2570\'\275\302\343\220=c8\234=Z\342g\275g,\224>W\363\361\273;\325V=\365\375E=\260\306.\275_\264`=\207\001\246\274\"[\232=\025\224\017\275\003\305\004<\013j\320=+6\232\275>\372t\275\227~\277=\213it\275P!\007=\263\206G< \323\362\274/\216r;\231\t\202\275f\255I<1\233\242=\303\261\n\275.\257-=\256\274x\274I\252\246\274\312\356\024=\374LF<I\016#<C\224\376\274\247q\027=\366\374x\275\306\213.\272\273\2662=\213\017\023\275%\275\364=\034\217L=~\254g\274\346\246\255\273\276\317\245\274\027\364\371;I\363\247\274\334\255r=l\340G\274Y\316\267\275\363~;=\202\333\353>~4\203\275\364\224\014\275\n1\344\275\321~\030\275(G\r=\020A}=\"]\340:\312+C=p\317\037=\317\243\335\273(\260\347\275\310\277`=vA\004<N\306\013\275\246;i=\004\227p\275\266K\266\272\234\177\373\271?\014\334;\366gZ\275\370\335\250<V@\221=k[\365<B\206\025\275\311\351\271\274\003\253\207\274\375\377\202=\214\340\324\275\336\244\321\273+4\313\275\216\262\307\274\261V9:\330Y\227<5v\001=:JJ\274K\"\371=\361n`=&\300\342\275\276\223\270\275\251X!\275\350\303>\275\roL<\3639>=\224\365\253\275\n\300N\275\356\203\240\274\367\300\031\275\013\373\027\275\342\300C=\223\265\375<\303/\245<\275\206:;\3346\245<S5\344\274.#\000<|\204\274<\r+\333=\342\t\207;>=.\275\311_\210\275\207$\352\274/\236\323;gpm\274\3552\255\275/\234\317\274G\374^\275\332=g\273OM\303;\277\351\211<@E\017>\202(Q=\332Q\254\274\006\204?>#o\241=8\032\356\272\234.\307\275r\031\220=N\270\231\274\264\366\366\274\335x,\276?}\352\274\275rd=\365\274\342<\013\220\004>\227H\213\275\207;\236\2754g\206\275YPM\274o}\317\274\244\340\037;<T\234=\363\342@\2753J\000\2750\272\212=\233\261\365;\271md=\004\314\274\274\263V\303\274z\207\004>\005%\036\275\245\321a\273\335\345k\275\033WT=\241\342\017\275\307\356\221;\262\'\001\275U\013[<\213W\224\273\250gD\275~\016\272;\233\027\252\275\320(2\275B\216\200\275\t\247\207\272\010\3142\275\001/S\2746\260`;\335\004\247\273\036\275u\275\016\222\007\275\254\006\211\274\013\257\313\274\024\225\237\275%\235\277\275\302\326\247\274\234\337\003=\265\031\223\274\251\336\022<\333\340!\274\205L\261\275<\216l\2752\301\032\275\2001\212:\245+5=\247&t<v\323\311\274\206\253\375<\243\300\242\275\016\376\242\275\255J\352=\270\337\271=\362\362\227\275G\3055:\334\306\016\275\225g\312\274\322\3227\274\210\276\372<\n\222\312\273s\323\017=VRh\275vz\255\274U6s\275\255\274\321\274\252\362\201<\313\232.\274\272<\030\274t\034\024<\336\205\222\274\252\215d=\235G\330<0\344\262\275\266\232\240<>=\361<r\257\021\275c\225\341<\351\275|=t;\017>\360\245\351\275x\224\215\274hQ\203=\270-k=G\375S=\360%\275<R\214d\275\033\360\251<}=\255\273\257\326\212=\250\303\000\275E\217\032\275\305\336\356\274\236\217\345=\363I\205<\240SN=\275\221G\275\000\253N=\264\001\346\274\000s\r=\316\346h:\225\210\266\275\366\013[<\372\253]\275\363G\371\273\002]C\275F-\004\271\317\352\314\275\n\211!=\373\303\244=h\367 \276\256\261\017\275\316\273\263\274\240\245\273=\234\356\303\275\315Z\314\274\342\201F\274\374\000.\273S\222\243<\231\247B\275\r\223j=\210\345+=@\371\215\275\236\334\213\274m \322<\213\312:\2755\304\377\274\006kw;\277\205`=S\376]\275\313&%\275yo\304;\225TA<\031g\232\275\037\256\034\273F:\022\275 o&\275(\013\272<\226\323\262\274\332x,\275B\322Z<\023\222E\275\247\365\264:G\n\026=\275\376\373=\342/\t\2759\363\304=\373\315p\275|\214\216\274\230j\352\274\371-\032\275\252\211\314<\315v\302\274_\230\245\274\343\210\031=\336\350\257=o\374\"=X\203q<M#\240\2738%c\275\204\273\323;\330\247l\275\260\270\321=}x\374\274\336o\262\274\270\336W\275\"\021o=\227&*=t\270(\275\177mI<?\301\365;\021L*\275\027\022\037\275Z\257C\275\377\274\022\274fix\274U9#\275\341]\206\275\271\332\016=\355C\277<P\030D\274\027\027\214\273H\277\313<\203t \273\374\022\242<\362\226\363=\003\310\222=\241\237\251;\351\265\207<\265F`\275\270*\370\274\270\307\364=\007S\\=e\222\231=\213\036\033\275\251\272\037\275\273\275\265\274\275D\314<qjE\275\3205\003\275\231\343\034\276E)}\275\"\310?\275\352\016O\275\351\251\244=g\033B\274\232\323\'\275_-_\270\"(\355\272\034\255\254\274]gT\275\363\030\214\273\333h\000\274\326\253\021\275Bo\251=;-R\274q\262b\274\220A\243\275\006\373n\275\200\244\027\273q\001\222\275>\305\025=M\256\334\274\266\234\325<\363m\017<\214)\332=\027X-<$\264\021\275D\t|<\"_\271\273\233\227\207\275X\226t=E\222_\273\204\332\324\275\003i\236=\345\250\206\274\314\204\245=M\311\007\274^\002q=\221\322}9\355w=\2755\031\002=i\002\235;\350+\200=!\003\261<s\356\277<\231\017\003\275\354\017N\275\212)\304\275X\221\020>\302\315\271\275\331\320\342\272\006\303Q>\312\324\031=\270\327u>Y80\273(\236\023\275t\001=\275\315\240\374\273\357\245q\274,\234\260<n\266J\274\244\311g=\246O\245<\n|\016\275\'\276O\275|!\032\275\035\'H\275\n\226z=\337\267\356\274\256\302\201\275\001}M<o*\313<\246\272:\275\226\223$\275\321g\216\275\026\222b\275\211\330H\275\303J\000<\321\325\363=\303\204\006=s\201\231==z\235<\267\332#=\006z\'\275\262\207A\275C\273>\274Q\200\376;w\347E=\014\377\010\275\347\255\343=\026\241L\273w\264\026=\252a\240=\212\212\216\275_\364\302\274\206S\274\274A\276\271\273\023\002.\274\250-\204\274\rL\031<I\313\247\274G\362\315=\226D\233\274,\377\272;d\321\236\275\315\270[\274x\206\001\274=\227/=\313\375d>\305\262\036>n\261\340=\256SQ\2746(2\274\313\307>=\003O\262=@\302\241\275\270%\031\275\317\377\241\275\260\016]=\314\024\374<\3604\232\274=\031Y\275<^\301\275N@\265\274<uD\275\302\245};\013\217\020=\337\212\264\275)m =\r\320\314<<\334\251\273\217\267q<\316\213$\275\000\017\330\274P\352\223=C\231\327=X\302\n>\r \271\275\000$>\275\250E\014\274\016\307P\275*#\302\274\324L\350\273\275\212\000\275\t\242\352\274\247\212\236\275&\352{\275\244\253\023=\303\3702\275\375\355\027=\212_!>\030\347\214\275K\034\3568\020\213{=\201v\351=\301\272\350;\001|<<#\254\020>\347;\255<\307-\202=q\035Q\275\265\001\n;\317\303\335\274`}\244\274\"\355$\275\3225\234\275\034\330F<\020\341-\275O\226\344<\003\263\310=\270\336u\275y\022\\\275~P\201\275\2621\240=\320V\232\275\264Cb\274\345)G\273~\246\210=\234\210\301\275\3741%=\213\036\361<\212\355D=<3\253<\243\237W<\261\211^=\310\356\270=X\301\202\275\352@\025\274\354\376\356=W\260\345<:\335\266\274B\362\226\273\316\020;\275\027\023\257\274\353\274\211\274#q^\274I)7\275\351\317J\275;\327#<2/\355<D\310\027\275\222cw\275\247\342\013\275\010s\346<!{\303\274\007\255\000>@\245K\275=!\027={\013\262=\255\266\322\2740\3501\275\340#\331\274\226\305w\275\276\226\275<\023w\327<\207E\375=\315v\370\273\361\205\317\275!M)<\321\3235\275\266-[\275\'J\251=\346&\212;\033Na\273\221\323-\275\262fS\273\233P\232;Y_\327<\232=\224;\212\223\\\275\206\354\017\275\302%0:\337\215\205\275\004\355\031\275\2265]\274eQ\276:R\350\310\275\026W:=\033\305\375<F\267*=hV\026\275\253[\225\275\376>\244\275&\351\323\275Q\002\260\275,!\324\273`\025}:\373\216-\275\016\331L;\317\267`=\022\371\222\275\214Z\301\273\321\360 \275\360\226\213\274R\016\r\276\t\253\037=\225\273\264\275\232\375>\275(\212b\275\217,\300=\2762~=(F.\275hh\031\275\262\r\347<Q\332\024\2751n\035=\221\347;=s\206\267;M\330\364;z\233k=\224\341\032\275\346\255w\275\027\314a\275\020}\301=\240\243j\275\2521H\273\n\261\007?9\373\266\274{\317\323\274b\336\202\275\273\334\233\275*\300\257\275\r\0272\275.\214\203=S%\304<a\365\"=by\251=\272\032\204\275\2435y\274\224i\032\275\262\262\004<w\303\333\275\3508\370\273\010,\203\275\350\027\332\275&#\013\275\306\371\363\2747r\014\275\350\273\001\275\313\031X\275x\004\264\275p\2717=J\250 <\255nu\273\036\325\203=u\010\353\275 \305\202=f\252$\273\224i\360\274\251\270\362\273\256W\211\275\026@\306=@\'\013\275o\332\023>\301\357\001\274\270\255l\2757\266\255\274\334\313\325=l\n\021\273\2266\364\274b3\233<\000b\205\275z\030\244\274\367{\322=(\202\243=Q@\320;\016\326@\274\262\334\250\275\001\017.<)\353v\274\373\035\334<\240\305\242:\366\351\206=;\004\333\275[\351\260\274j\317`\275k\327\237\275\252\250#=+H\331=\026\",<\321\216\236\275\211\242\361\2732\226\333=g\235\343\274\310w\315=\030\256\202=\024\"\241\274\362 V\273\215\331#\274\377\\\251\275\210\237P\274bu\262=\34136<\306\013\005<\013\337\001\275\007r\'\274\261\312\213\275+\346\256\2750\'g=\"\327\265<\376\236\336\274\262Rs\274\007A]\273~\270\210\275\205\302]\275\3416\203=\226\001\350\274\357\2340\275\022=\236\273[jb\274%a\014=Z\255n\275\357\354\261\274\304HT<\254m\004\274/\363\352=\205\t\234\275j[\001\275\334sW\275\215\203.<\225\267\236;R\037\022\275J|^\275\302\366\343=\013\005\205=~\002\331=\237\270n\274s\216\027<&\366\246<\313\013\217\275I0\230\274\3615Y\275\3400w\274r\320t=\234\345\326=\266B\260>C2X\275\313gB\275a\235\305;!x\326=/\354f\275yaT=\304\247%\275\354\224\240;\226\355O<\236l\272\275/\257\000\275\013\331\243\275o\340I\275\nxo=\014\202\r\274.\026\326\275\312\326-=\233Z8\274\027E\027<\323\213\210\275\243m\014=\251\371\203=Rlj=JT^\275Dj\023=sM\367;BV\272\274$W\244\275\337\005\302<\350\341\024=\367,9=h\027\232\275\202\347\014>\355\375\024>$+j\275\223Kb=;\302\234\274\272(\324<r\014\346\273%\231,<\212\344\333=\r\002\345\274\010\201\307\274\306\340.=\322d[\275Yx)\275oK<\273\202\024\234\275\344a\206\275U\313\006>\034\247P<?\346\026<EnO=+\242\272\274\351\346L=\260-\373<\204\\\013;\034qO<2+\225\275\202g\001\275KLX=\021\332\236\275\274=\267\275\331}\177\275\216\203>\275\325\326\311\275\204\251\023= W\257\274\330n\271\275\035\233M\274\203\007F\274u\261\214=\037m\275=\375\252\211\275\032f\217\274\362D\001>\260\217\330\274\363B\007\275}P\321\2741^\242<\334z=\274\343\036\251=\\\264N\275{\3003=\n8s=\371\277&\274\035z\004>\245\036\242\275\330\356%=i\250\373\274\317Z\217<\007\223\030<o\r\220\2759#W<\374\377\303;\235q\245:\223\257\217<\025\366\216\274\333n,\275\036\031\322\2744k\210\2759\256]=\342\314\306<wQr\274fc\231\275\014\311\252<\211\315q\275\355\214\034=\327(\001\274x\242|;\027\210%\273\255\2659<\266\207\024\275/\0012\275\t\035\036<\310\0223>\005e\376\274\r\277\344<\242<\205<\323\360\000=\t\244\230<\361\331w\274\225\374\017=|\343\353\273\335%\240<\267\274\346\274@\000F\273\241\333\000\276ub\211\275\203\355\241=\315\251\221<a!\212<\227\307P>\371:\236=E\261\225\273e5\323\275\204g\201=\3467\257<\235\265\206\275\001&\001\275\037\214B\275\340\346U=1\304\251\274\207\3377\275;\327&\275\371\t\330<Ux\2478\366\035\t=\227\305\360\272\211*\\\275\030\257i\275;\224\024\274\354\032\217<\316\236\247;\203aV>M\\b<\240\240\335<\301\253\226\274\261\274m=\240\032\035\275S\262Z=\251\2073=\326i\036\275\003E\022\273\304\362\000>.\323\204:\r\321!\274\341\014\021\275-\256\n=\325}\201\274\261t\272\274f\202\342=|\026c>1.\261\272\032t\270\274\007\314\340\274\302\t.<(*\002\274\345f\211\275\311fz\274\021j\323;\251\002\"=2\314q\274\205\351\177=z\211\241\274Q\302\013<%IF=c\231*\275A/3=\265\351)\275d\331\326\274Wx2:\265\205\0369\320\207\031\275O(\351=n\325 =\272?\247\275\236R\227\274`\2720=s%\227<u\221i\274\024E\025=\017\350\224<\344\202}\274\316\311p=\245\336\003<A\267\314<\024\343\212\274|T\003\275\024\376\341\274\337,h\275\304\355V\275\376\335\256\275J\367\014\2754\3213\275\"F\030<\250{b\273\001\304\200\275\036)E\273\234\314\220;f\352\231\272~\237\252<\330;S\274\354\347Y;\352i.\275:1\005\275\350p\234>b\005\016<\375\033\360<\244\327\344\273\371?\271;<A\003\275\254\177\373<#\331\247<v\354w=Q\205\245<\347&@\275\244\265\257\273S[\374\274sg*\275\344\310\212\274\314A\327\274\321\244\003\275\010-\231<\213xf\275{\3646\274:\261\177\275\007\272R=\257\256J=\234\023y\274,z\032\275\232\235\375\274]\320\253\275\326\356\376\274\374\030d\274\r@\232;\225#y>\341\350\023=\007\355N\274\004<%\275j\0036=o\200\276=\344\365\252\274\r\220\022\274~\211\205\274\r\274\221\275Ul\207=T\244\353<\244\224\031\275\374]H=\035\031\004=N\200\265\275\355\236\341\274\203\362$\275y\353\014=\320\020b=.\337\307\274\350@\355;x\213\031=\361%\240\275\376\343s\274\261\tW<\372\304\016=\227\364^\275\367m[\275\211m\r\275\037_\260\273q\365!\274z\007\010<M}V=\326\033\210\274J\260\317\275\"\301\202=\226\357\245\275\030\003o\275\021\202\245=wMT=\256\006\020\275\016[\217<gbH\274T\033\255=\252\307\017<`$\016<\240\235p=b\322\256\272\352\025,=a5\024\275\207\375:<\272\206\003>\2531\307<\300\026\t;\261\033\277\274\354\315\311;\262^\201\275L\372\375:\235NX\274 \201|\2743i\377;\353\324\313\2730\370\350<\365\341\030\275\375+\342=\261Q\216\274\233\024\030\275}\3456>\\K\302<\013\204\345\274\305\260\267;\021\254Q;b\364i\275Tk\336=^\220\270\275\353\004\032\275\221\240\203=\230\201\213\275\305\3460\2756&\366\274\022\321\232=\365\036\247\273+lg\275\277\317s\275\354K\207\274\217\360L\274j\007d;\255h\213\275\263~d\274\371\030\216<\230+\213\274v\216`\274\350\002\027=4\236@\274\361\220+\275\010\205\037\275W\346j=\222\340\241=\004,\365\274\2441\231\274\204\325\326<\265h%=\321\2656=#\354\374\274\371x\305<\250\336\340<D\314\321<\346Y\216\275\355\\\212\275\323\352x\275\220(\037\275m\2776\275\212c\366=wB\032\272@\021\300\275e\303,\275\326\273\226<\257\0031\274P\\\007\275/\337\215=\035\314\370<\242s\002=\"U*=\365h\\;h\304O<\276\025\252\275\341,`:\315\261P\275\032\250x\275\344\355\225=q&^\275\236\322(\275\242\334\302\275\327<\177<\224\305i<\300O\250\274od\371\275\275\270\267\274\320~q=\002\306\211\275$\000\357\274\0336\224=\010\035\237<\313\347\204\274B\333\'\275\343\336\225\274\317\033\262\275\347#\311\275\232\234\004=\030\263=;\323\033\234\275\027\2666\275\265\234\355\275\231\313\350=\300\324\030\275\343\375\277<\355*\021\275\240x\025>EnD=\260,\222\273K\226\021>z\370\237\273~\275&\275g\177\256=\320\006\266<\250\334\214=\365\214\265<zoo\275\002\025\357\274\266$_>P\355\002>j\364\036=\234\226y\275\013\031\335\274\361O\240\273W\326j\275i\017\037\274rm4\275\\\340\372:\274\257!\275)\357\213\274\264\212\341;\251\033\313=\262k\201\274P\361\017=\3472_>\340\270\252\274\'\344\227=])A\273{m\205=d\330\005\274\307\321\013=\013N\251\275\317\273\n\274\235\267\344<4\300\264;K\n&\275\344Z@\272P\210\223=f\021\'\275\306$\314=_\230\233<\001s\267<\036N\345\272!5\006;\335\264\017\275f5\206>\261I\250\273\273\363\270\275\236\027\251\2738(\250\275\001\204\014\275\tJ\004=\033\276\242=Rb\310\274\230\211H<\013\316 =\201[\217<\366\361\306\275yi\023\273\306\243\n=\223Y&\275jM\205\275\330\020\255\275\315`d\274\346\335F\273\220n\242=6q\312<CO\257\274\232&}\275\023Q\021=7Xg=5;@<\202\033\256\275/\351v=\256m\266<4fY<\303,\221=\273\327\177\275\256\021H\274\304\303S=jv\276\275\006\325M=\271T9=&\264\250<\3253\004=\017\021\013=\301\305*=\256\303\266\273\005\021\010=k:\312\274Z\246\016\275^W<\274\255:\027\274H6C\275\365Z\007\275\210\326\035\272\374\323\347<8\362\227=\t\035\276:1A\262<\370\324\276=\275\374\240\272Qc\304<\271\375\332\275\252\251t\274\205\206C=x\220\030;\331\315\343\273\254\027v\274\340\224+=\301s\216\275\372uA=\241*\203<\224\305\002\275\241\233\233\275\017Gs;\3423[\275-\037\355<\350\004\217\275Xa\360\274^G\313<\260O\243=\336\253\023\274\037\037\346\274\025\324\r>\025M\275\275\024\236\266;\261}\300=;T\350<#\300_\274|$D\275\217n8\275AW\007\273\021\340\023<\314\307B=h\3457\275\353\307g<\245\302t<s\236\003>eV\223\275\371\301\003>\351Po\275[\226\005>2\327J\275\020=@\275\2744\214\275\001\264\306=\006\024\000\275\005\301\246\2753\363\210\2758\214[=6Q5=\017\020\311\275\30645\275\3512\230\274\226\333`\275\034\244\266\274H7;=X\324\246=\231:\\=\274H\244=\250\t\273\274\3067.>\255V\360=\340K\200=\351W\305=\225\265\257\275\217\342\037\275\337\225N\275\326<\355\274\330Z7\275Y\006\202<\315T\313;\324\224o\274o\005\236=/w\010\275sW\266\275:.\374=B\264\\;\346\335\327=\304\201\017>\025q\263=\330\301;=D H\275s&P=\215\314\265=E\377\313\275n\005\362=\035\307\363=\031r\352\274q\222\010\274\301\327\363\272\330\332v\274xF\202\275@/\232\275AP\337\274&\204\227=\273\243u=\316\"\227\2752j\016\275A\360\256;\213\264Z\275\032\322U\275v\365\010\273\035\334\266<\240\254\335=n\323\226=\226H*\275^\235\275\275\225J\255\275\\f\343\274\343\024\373\274\347x\013\275\036t\215<\020\200\331\274=\004R\275e\345(\275\224\327X9I\233\r=\354\024\325=\270xG\275\351\177~\275`\025\336\273!*\252\273-\020*=\'\232j>\231dO\275\010\275\\\275\n\237\326\275\"]\025\275\017\371\177\275r\251\241=\373\242H>+\326\016\276\266\312\036=\\e6\276\270\031w\275\207{2\274\005\255\362\274Pl0\275\036.>=\251\352\237\273A\301P\275\036\002#<\177\325&=\244\321Q<\224\264n=\303\212\316\274\242*-\275=\237\230\275\351\026\324\275a\202\357\275\001\271e=\223\236\027\2733\253Z\275\354\211\262=4!\006\275\350\254\206<\020\273~<\260\350t=\326\\\006>&C\007\275\224\346p\274s\016\245=Cm^\275\n\021\316<\343\374\215\275k\204U\275\225Xn=q\231\254=\333\027J=b5\354=\200u\017\276\307\022\314\275\024\032\324\275\353&\024\274\002\254\256\275`\372\232=k\305\220\274\006\034\327\275\360K\312\275\312\223o=?z\237;\304@1>\303zb\275\306\014\332:\211\250\007=\263J\323=\354w$<Pk\313\274\337B\270=t\356k\275\004\272\221\275\020\366\312\275\005\340\353\274\372+\204<S\265\322=\237\320L=\004J\257\273l\360 \276\222\353\202\275\244\"\205=\207`\017\275\337C\350\274mG\025=r2\030=O\373R<\352Yg\272J\211\375=\202\274\275\275\025\372\317\275\000\032\201=\262\273\234\275\203).\275\016`\021=\221X\246=\030\323\242=l\303K\275\360J\211\275 Il\275\243A\035\275\017\246\300=\276\217\232=b\301=<\224\226\376\274S#\262=\364e\233=a@\261\275\010\302m\2754)\243=\230\366@\275ji\264\274\204\335\322=YL\245\275\263\273A>\321\n\366=\007\240\374=\023\311\005=\001c\354<\323x\230\275G\221\234<8\204Q=\033\315>\275\234]\252\275k\363\016\275\255!\351\274T\363>=\003\001\245\274\372s\004\275%\000E8\336m\237\274\227]\300\275\210\260\002=v\217g\273\230\377\034=G[/\275\377\367\335;kO9\274\231\033\324\274\307\305\360<\361\245\032=]i\177=\316N.\275&}\014=\342\324\276\273\303z\301<\336\263P\275`w\324=\323\201\177\274\237\233\003>\264}\214\274\343n\273\274\322t\251\274s\370\307<\235y\250=D(\005\275\2553\035\275\253\342\234\275\003z \275\005\023\211=;\232\334:_x>=\313\374\351\274\275\2079\274\221\t\2219q;\026>\230!\232\274~\234%\275\264\215u<\3724\025\274 Z\242\272\2224\274:\206\221\211\275<\363\365\274\232(\006\274\203;\337;\364\347F\275\345\217u\275\352\034!\273\3363\205\274\370%w<\335i\265<\251\376\270\274(\270\035\275\315\252Q\275Pe\337=\265\362\371\273\032`\265>\200\247Q\274b\215\255\273\363\246t\275\202\336>=\305p\257\274\003\035\001<\016\221\311\275\253\244\032\2755=(=\023\342\243;X%\245\275ck|\274\302$\256<>\361.\275l(Q<\361\316\356\271\220=1\275\364\263\256\274\007.$\275=\236\302\275\\jM\275Xv0\275V\211}\274 k\331\274f\375\234;sc\r=w\245\333=t\220\031\275A\214\336<\357\206\236\273y\204\277\274\225\177\247\275\010\351L\274|\024b\275\227\003\305\272g?\220\275B\321\301<\'\000==c\177\230\272\032\322\201\275\260\027\227<\333\210\332=\263x:\275\314\221Q\275\000\033\347<\037\006e\275\302\025>\275\'5\201\274vf)\275\000L\315\274\0162{\275\355:\244\275\202\304\325\274\'9\200\275!\314\022=$\372\t\275\350\304\204\273EF\241\275\225vP\275\274\367\241\274w\037\003\275\320\226\346\273\374\204\270<G\313\246\275\005%t=\232h\313\272d\227\214\271\353\301\316\274\263\376\365\272`\001\230\274\251\031\310\275W\252\251\275\036\270\331\274\237Z\240<\014\337\342\274\332\306\372<\325\'\232\273\261\036\251<\2768\216\274c\263\274<\360)C=/}\232\274\365\004\373\2758t\'=\032\313m>nR\244=(b\337\274\3402\207<\375\307\n\275\333\035n\275&4\237<1\024\343=1i\007\275UqR\274\201\324\251\274\324T\\\275\347\240\026=.=\027=f\263#\275\207\220\267;\366\205\363\271(E\215\275\005\3616=\005\331\375;\206\260k\275\323Wa\275\030\240w\275MEA>\'\350;>\351\224\266=\361\243\020\275\335\2019=\271\331D\275\250\204D=\342\310\035=f\213+=T\321%=\327yz=\306\r\230;W\2366\275\245h*\274\264K\261\273\370)\226\275]\tG\275\374\226\311\274\340_\205\275\335\003\302\275Vx\240\275\275\364\030\2753\253\377\274?\300\224<+?_\275\320\320Z=g>\242=\315\343\323;\037H\212\273>\237\031=\274\214\"\274\310\240\013\2753\207\252=d\270\203=z@_=\254Z\350;\364\207\244;\245@\241=\272b\311<\346|\017>\233=\360\273\301*I\275s\023X;\306e\037=R\211\204\274\321\032\024\275\241j\303=\313\335\025\275\027<\275;\353\010\215\274\271x+\274\332/-\275\246\212y\275S\"\201\275\231\036*>4Ia\275I\334\344\274Iu\220=y\263x\275\215\013\321<u#\233\275+p\320\274\311\317>\275\303\362t\275\300\237\006=\347-\311\274E\250\027\274\356\212\024=\036!3\275\360.\203=M\020.=_\326\235\274A\0326\275\032F\">\263\256#\275vQ)=N\250\237\275uX\346=\\\0229\275\345\375I\272\026C\205\275\220\252s=\244\032\262\274\331\327+\275Y\234\003<c\255\305\273\032\346\205\273\013\203\030=\001\356\261<:&\213<\010d\303<Fq\257=\177\324\213<\362_\347<]\374\244\274\374)\235\275p\202q\274\352x\236\274_\357)=(b\014\275$1\252< \315\207=\212dA\275\257\266\204\275\230\354O\274\234X\001\275_,\323\274JL\014>\251\n\231\275\215\210\302\274a!\230=\177\337~\275\344$\003\275\375\204N\275(\370J\275\037\221\235\275\030}!=6\252\374<\024\257\372\274I\024+=\261\301\004\275\341^\231\275\302;E\274Wal\275\305\236\205\273\025I\315\2740`\277\275\"\031\231<\372\2342\275\266@8\275\001\275\211<<\262\002=\213\000\235\274\203\345\360<\277\323\276>\310\200\013\275A\363\353<\353\tD\273\0307\214=K\023\204\275\350\263\273\273\226\362\230=\035P\274\273\272\021=\275\223\341\376\275\310\2705\273\213\036\030\275\332\375\225<\352I\213\274\025\221c<\271\320\315\274?\014Y;k%}\275\2731\243\275\177\023\337=W\227\317\275\366\006\373;\001\214\026\275\245\354\263\272\213Y\220\273\232\235\217\275\221\370\031=*8\\\275\240P+\275\002\370\376<\236%\276<\2002\024:\356\026\356\274\342r\001\273\177M\226\274%\370\n\275\364\317%\275\232\376P\275\376\025\313\274\304\202\356\274\222\034\013\273\246\243\375<\214&\t\274\035B\245<\214\t\002<\235\002\270\274\267+\017=\t1\367\274\365\356\017<\364\325F\275b/\252<\326\374\206\274H\336/=+\330Q\275\000\272\351<\222v\264\275\217N\010=V\025\251;\t:\\\275u\203\305\274\312gb=\356\305\"=\272\032\304\274K\t\177=\231Y\177=u\367B\275\314\335\025=\352B\211\273\034\r\203=\241p\214\272\343\265\272\275a\373D\275\362*\216\274&\030\273\274V\362\335\274\021v\336<\312\335\177;\177\276\224=:\235\270<\025\321F<R\025l\271n\256\205>\243\354\261\271~\313\205\274\303\246\031=\260m\037>\223\257\372\272\313L\007\274\323\213\022\275u4==X\335\000\275\377KS<\265c\205=\211\366\220\275i9\210\273\2601d\274.C\356;\365[U\275B\013\240\275\342\207\035\275\227/\025=\024r\215\275Wj2\275\364\372&\275\377\306\216;\342\334\346\274?\010\022\274\202+\001\275\006\3705\274fY0\275\270\364c\275\353\332\211;9y\216\275\217W\023\274z\366\367\274\2238\235<n~D\275iP\257\274\371\014\336\274G\370{\2750(\347\274\211\272\371=fN\213:\020\212W=\256\332\000\275\314W\241\274l1\220<v,L\275\243]\253\275BU\004\275\036\340;\275ey\026=\364\316w\275\356\206?=\0378\223=\266`\254\2759\272;\274\341\033\234\274\364\302\021\275pp#\275\026\001\242<\022F\215=\243\367\'<\320\n\260\275\253\2556=\343\2320\274\204\333_\272Pa\222\274\234\370\276\274\236\203\022\275KDG=`__\275%bB>\307\021u\274\322\200\236\275{lB\274&\202\010\275\'\256\352;\255\346\n\274i\325\\=\314%`<\\=\327\274\232\021\243\275`\223\235\274ji]=|\232\000\275\217{\311\274c\032\312\275:\3745=Gd\337\274\341a\242\275\201KW\275\337\264!\275\235G\322=t{\2359J9\210=\035\r2<\354t\020=\370\272\037>\366\367\227\274\311_\270\273\017\372`<w>\213\275`\277\272\274j\336\205\273\346\325U=\366\316\210\275\227\233>\275\004i&\275\310\014\321\274\017\001!\274d\226\345<Yv\371<\254\245j\275b(g=\266\272T\274Ne\000\274Qh\276<m\334\324\275\177N\206\274\266\221\032\275\302jm={\023X\274/T\216\275SU\246=\320\373\301=\326\\m<i\275\007=X\217\242\275\233\025o=>%+\275\241\243\321<C\3561\275\2341\211\275I\331\327<\207}$<\215iJ\275\246-o<NT\010\275\320\r\356=\311\206\010\275<\377c=Y\023\262<\365\242I\275\236\301\324;\002+T\272P\252.=P ]\275\003\261\273\275\372\025r\2757)\267\274\364\303\270<3\027\212\274\341\316\021\275\037\245\340;)\275\316=s\315\224\275\300b6\275\022G\211\275\025\322\263\271\270BY<J\354L\275=\006%<\024\224\257=\362\301\024?\270@\036\275\375\276R\275G>\t=\267#\234\275\334&\350\274K\272\253\274\020\344\034<\351j\205\275]\263\340\273$V \275Q:\326<\325\235\302:\364\341>\275\361\355G\275\026\237\326\275\036\314\337\273\0253\004\273\316\300\274<aLD\275\211\373\305\275\305A\034\275\005e~\274\025\205T=\371P\215\273-\035\207= \361\226\273\030=\213;v.\200:\340\3431\274\2613\367\273v\334\361<\343\254#\275\'/\234\275k$\336\273\335$e\275\366W\002\275k3T=\010w\205=\002\033\351;%B\231\275a\367\302\274\334\336\014\275\340\333\340;\370\300\304=\317c\000\2769i\276\275\335C\034\275~\224R\273\344$P\275\336\314\221=>\007D\272\370U\000=\261|d\275\032?\303=\2458C<=\026$=\245h?=?\223g\275wX\275\273\006>\320<\371?\260\273R\230\247\274\205\017\203=\340\010\340=\002\236\202<\235\312\337;c\312\233>Yd\307\273\376\275\364=\030D\036\274G\2258\275\027)\223\275\261\266\023=8w\004=\235\250\330<\231\0070<\301\213#=]\311C\275\024\266.<\262p\201=f\326a\275Rv\271\275.,+\273=\273\003\275[\362}\274\320y\323\274\365\206\275;R8$\273\252\215_=Yu\256\275^\300\221\275\036\003\377\273\225\211_\275\343o\032\275\005\3376=\364\265\366<&\3721\275p\340\352=\215\312W\275\273\267\371;\223\212\021\275/4\225\274\326\237W\2749\361\205\275\'\177\013\276-\013\214\274\266\263\332=\231:R>\000e\214=^\203\271\273\273\275&=\315\215[\274\033\272\235;^BP\275xp\240\274\236v\373\273\226\213\034\275i\337g=\311|\317\273vD\212\275\365dp\275\312\337+>\221\357\326\274\000\267y:\255\363\001\275\373\001\305=\034\244\000\275}\265\317<3\216\027\274\216\022\027\275 \301\245\274leD=M\267c\274\007/\263= \336f>\233\375\003\275wQ|\274\364\207\336\275+\323\020=\212\024 <|L(\275\240\204\355<\360B\255\274\037#\003\275\035\317\215=A+h=\370c\006=t>\000;\3252h;N\014#\275\324\264\'=\352\253\374\274|~\264\275N\224S\274\006h\247\275\200\024h=P\305\263\274avK=vg\206\275\256\233\372<\373\273\252\274\360\267\203=\'_\307<\222\344\313\275i\rx\275pI\210=U\220/\275\271\212\321\273\275\033\342\274\275\215\354\274\350\027^<\212g\023\275Bn\367;y\222\210=q}%\275\231=e\273ihE=\027\236\377\274\036\230\006\275\272\314\017<\340\326\346=\206Wp\275\211\267\007<\310Cj\275\365\023\242\275\025\204&\275\335u\t\275\0049\'\274\325\215\307\274V\354\361\274Z]\303=Z$\234\2747\207\310=3\226\270\273\337\010|\275\212Vy<\331\356C\275\334\202\345<\004\355==\035\\\231=M\221\210\274J\345\t\275~\266;\275\3570\203\275\302\257J\275f>^\274IsB=e\307o<)f$\274\"\032\330<\356\306Y\274H\365\200\274\221\224\321\273\361s\376=\276vT\275z\312I=\260\311\360\274\026P\376\272v*x=u\311~\275\251\013M<\334\000\007=e\313\346\274 \360\035\275?g\204\275\225\014\360\273\177\253b=M\002\006\275\345!&<IS\226<\263Y\367=\334\332v=\206\353\371\274\234\022 \275\246\376\224\274\362t\355\274\252`\217\275%\236)\275\367d\243<A80=\002\356\240=z\271n:\013\246/\275\232\350\372\274\001\t^\275,b{\272\244\240\204\275\360\244\022\275w\354\203=S\373p<\302Nf\275\177w\312=Bi1\275+\323@\275\264)\201\273mn\235\275\326f,;}\253\205=\2211\277\273\235\t\016=vj\237\274\026\261\200\274\r\320@<\240\325\007<\364f\355<?\343\276;Y\361,\275\275\274P;I\360\370=K\177m=\2607I\275lt\005<}\332i=`{\222\274\242G\272=vof=\2710|<\316@\202\274\213V1\275\024\271\374\275\255\036U\275\316F\256\275\376p\321\274E\276H\275\t\303\315\275\346\347\314\273\022\007#<\"\306\334<\377%\242<\3642\014\275A\020\315\275\370\261\010<\336h\324\274\263o\211=\362\204\031\275\216\321K=\017$6\275\037n\212\275\317\035{<V\001y<<(\251=\335\361\023>5\014\313\274+T\352\274 \316y=\177\'\t<0LU<\346\304\375\274\254G\263\272\347\301\006>\242/K=\010\020\231<\013\r\327\274Q#\361\274H45\275\252\037Q=\r\267\001\273\362\005\270\274\2421<\275\262>\233<\344\000\347<!\275\354\272\007\317\363\275\247\023)<\314c\366=3\004\214<K\2314\274\207\334\252\275\252\304\206\275\202\002\222\275Qf\'<\247\312c=\320\335\322\274\203\311~\275\263UT=\302\202j=$h!\274(\2251;Y_\002\274\254b\227=2\333\376\273\200\305\317\274\340&\212=\355\376\364\274E\320\035\275\361\226#\275.\212\373\274\337\353\304\274Dx\223=\235bn=CC\231\274.\244\366\274\302<\270:\343}\216=;\005\300\273\234\221\203\274u\377\003\275\'\277\234\274\005|*=\346\235\002<\337\373\376<\367(\032\273\214\262\252\274\242\372F=\227\373\026<\'\301\020>\262\016\317<g\036\360\273/$&<>\350\031\274]\207(\275w\376N>2\3127<m\335\312\274\315\336\023\274\302\037x\275O\376\t=\343\244\323=m\013\000\275\312\324u<\372\243\224=\333\037\224\274\312;u\275\377B\371\274\2064\240<Yc\017\275\225\355\220\275\202\316\276<_.\256\274\276\333J=\322\312!\275\017#\224\275\215~\002>\202\374\265\272y\221\003>0\231\216\275\376\363f\2751\3549\275c\252\024\275R\341\242\272\nGv=\336CB;W\034[;\202td\275]\004\300\273\232\245\031=a\305\344\274\370\357\023=\302\306\211<\315\271\026\275\014N\236;\031\350\361<\355\3258\275\014oG\275\366]\003<\001\005->\374\006\211<e\244\022<t\251\315\274\017\242\000\275\251c\306=DFb\275;\271|\275\325I\036\275k\212\207<\320\317\363<\2232\001\275\274}T\275\001S<\275\205d\n<\022\211l\273\002i\037\275\227\327c\275\030\336+\275h\213\221\274\207\307+\275\320\003\003\275-E\204\274\213\327\255\275\366\034\226=\274\235\202>\235x9\275S\260g<z\251J\274\364\253\210< \371\337<\343\206s\274\305j\321\275S\023\014=\266\262\204\275%\257\202\275&\354\020=H\021\210\275\003\244\324;\306\\\234;:*><GB\276\274\"\350p=\351C%\275\322e\325\274J*$=7\0214;J+\030\275\314\326L<;\275\177<w\204\013\275\374\"\201=\2047\277\273\316\213\227<\377\3671\274m\272\310\274\251\344\345\275\327\262\223=\260m\274\274\222\353\217<\326\303\231=\245\377\243=\235\315\242\273\016\026M\274#\324\"=O\007r\275L\202\206\275|\213\236\2753\260\315;\211]\017\2734\371v\275\357~\365\274\357a\006\274\207\241\263<6T\342<\315N\302\273\321\303\227\273t\321B\275>\226\023>\320\244#\275\024+\300<\020\033T<r\251\315=\305\311\300\274\322,d=:\367\334<\026\202\240<\207\322\204\273\003\221|=\014\2535:\343\007\311\274\200\'5\275\035^\"\275^Y\305\274o\236\256=]B\260\275\311\342!\274\'$\215;\354\261z\274\254\036\201\274q\276\236=-\022\356\274\261\001+\275\262%\366<{yN\275\\3K\275#\312\013<\377$\257=>.\375:*i\335<\013d\"\275\210l7\275w|\016=\211\033\215\275\317\306\375<\257)\214\275\031\2270\2746\010;\275I\350\225\273z\002\231\275\365\247`\275KN\023\274\344]\215<T?f<\274\315\230<\363= =\232x\203<\264\363i=\373\351\337\274\236\366\313\272L/\377\274\220|\362\271\355-\312\274W,;\275\203k\363\274\371\262\261\275\375S\033<\277\246_<\021\231`=\275cx<=\211\000\275\310\341\030=\225\257L\275\364\337\017=Z\212\330\273\352\245\200=\177{\235=\206M~\274\3242>\275\t\310\240;%Z\306\274\306\314\013=\341\236\267\274\327+\033\274\013\222`\2752\277\306\274\017\313\301<MqS\275\271\034\376<N\342`\274\344\217\216\274\006$\205=\333\322\023\275\254P\322\274\177|v<\017\"\251\274\202\t\257\272\314\320Y\275%\315m\275\221\306W=\214\2152\274\356\345\367\272\204\371\370\275\304!c<d\000\356\274\001\352\322\274)q!<{RM\275\324s\362\274\241%\370\274\232\025\231\274I\246\021<\025x\243\273C\346\204\273\221\004@\275C\323f\274\356\304T\275\336\330\347\273s\301%=`s\361\272\270\260\217\2756c\242\275\204K\203\275\024V\333;\345G\377\273\377A\255<\357\373&\275\274\020\246=\310\\\360<\343f\210\274\253H\017>\2209_\275E\353l\274B\310\274<no\007\273\271;e<\322vd=\224W\242=|)\241\275\310\335E\275\242\032\236\273o\336\023\274~<\356\271Cr\343<l\354\037=\021cv\275\014\025\214\275\213\277L<\220\271\026=>a\226<\264\351\335\2743C\005\276\006\354{\275 \033\362<\365\nB\275\3258\371\275\227e_\275\243\252\014\275\313V\243\274j\222\224\274\361\336\034\2753\350\220:\257\320\203<*\211m=\216\233g\274\260\032\337\274\216O\n=\234\267\225\274\205\275\241\274\037\n`\274?\004(\275w\253\274\275\263\230\237<\332|\234\275\321\237\006\275\311}s=V \241\274\037j5\274\272\323\034\275!\375\332\274\207\301\342\2752-\370\274\271\335E<\010:\205=\326\354\326<e|\300\274\200\'6\273pWF\275@d\205\274\351\272\251=\001\3458\275o\037\317<\224sz\275\277\243\205\274\224\302r<\343\034L<\377\020v\275J\213\321<\r\3164\275\205\374J=\250Q\203\275\351X\270\273\033z\321\274\205\3101=\330\375\263\274\334L\210<\314-S<p\374\333\274! \207\275/[\303\273\002lU\275\244\ni=*\246#=&T\240\275\327\024\204=\377#D=\231A9\275?\303\313=\225wT=%\222\344:\363K\343\274\247\363\336=~\237\351\274}\225\265=\260\rV\275(\231\352=D\025 <\201\267\217\274\220\010\205\275\032+\223<\346\372\275\274D5\332<\206\304\306<I\331\327\274\267\350\204\272\033\323o\275\243\324r\275\337~\225<\211\036.=\251\317<\275\264\367\327\273L2\014;\257)\242\275V\276F\275\240T\034\275\277\312\001\275\327\'\'={\262\231\274\354F\264=SM\345=\206\336\027\2755\360\030\275\2765a\275.\260\001\275\251\354f<,\262\274=e\227Z<\n\250k=\025\353M<+r\000\275D\265)\274\221\366y=\031\333\234\2753\313\265=\n-e\272U\262\212=\374\205\354\274\321\036\240<\332\'\224\274\332\227\250<i|v>\341C5\275\321\234\354=\004\2351\275\322J\216\274\206\377\306\274Vi\366=;\215\'\274\340\235\r=\216\243\003\274\377\0168\276\345\303\327<\323\337W<\220\nN=t\335\233\275\244\361\025=b#8<r\224\204\2752%\323\273\001\270\276:\364Z/=\\\266\035=5u\026={z/\275%_\027\275\312\357^<L\244\304=y\211\342\275;Y\227<\000\205\035<t\210!\274\344g\350\270\256Z\304<s=o\273\316)\204=\224&Q\274`\003\007=\031?2\275\363\374V\272\'\263\214=\331+\371\274\273{7\275\334\211\371\274\303\177\246\273?\340\030\2750\241\001=\026\311(\275\256\357\213\275\211[\301\274|\250\032>\177.\212\274\233=\300\273zIO<o\223X\275\313~z<\355\005\211\275\271\334A\275E\277\230=\034d\240\274L\313\274<r\355\007\275D4Y\274\330M\277<\331\370\035=\2360.\275\345M\220<\'\335\244\275\r>\204\275\232c\220\274M\206\327;\317\236\005<M3\033=\304\340\225=2\342\304<\233\031\3369\245\207\225\275\335\242\214\275\312\357\204\275\034\013\374\273\274\324\305\275\'\001\254=\n\307k\275\001%\n\272\361\020\235\275\264\344\227\274\277\313D\2755\235\024?E\266\214\275\031@\007\275\230&1\274{\3555?3M3=\227I,\275\343.\224=*\367\030\275\344\212I\274\310\370\264\274\346s\332\274\233\032Z\275\311\214)\275\337\337A\275\314T6=7`\365\274\237\300\244\274}#\036\274\030\036K=\211\300\204\275V\314\262\274-\312?\275\023\256\000=\'5\261\273\'\204\266;\2655\235<H\215\017\274`%\004\275\366\001$\275\321\023\376\274\2023\324=\313\347\334<\302\303\225\275\212.\211\275\352\264\030\275\024\265\013=N\364\014\274\334\207\310<\352{*\275\367\324)\275\327\024\006\275\337Z7\275s\253\266=s)]\274\212\005\215\274\324\005*=\265\201l\274rI\027>\346\266\257\274$\205\034=$!\024\2750\220\260\272\035z\200<\347XQ\275\370\321\270=\315\255V;\210\r\272\275\331Ax=\357zF\275O\235\032>\'f\231\272\321G\230<\316L\010=\376k\333\274n\365\253\275cU\033<\226\202G<\355\305\341<\256\335\000=\271\033k\275|\310(\275\261g\272=\021\262e<\201\217\303\274\350\245B<\340\215!\275|\270M<\340\307\246\274\360\030F<A\025\344;\226\010\257\275+\244]\275\277\013o=`\021\034=\311\231\032\275\373H\201\275\263P\313\275);\226=\220\336K=\243j\326=\220\377\r\275\005\233E=F\204\345\274x\rh=\203x\273;\254\004\210<\\\351{=\271\372A\275%\0311=\254+u\274vO\222\275\347\3732=\026\270\220:\354\356\372\274F\"\274\27587\242\274\3556\311=\334\271B;\2140|\275\271;\370<\2377,=\336\336\343\274\260J,\275\003o\320\274\226\034E=NV3\274d\'\261\274M\241\324<\224&9;\221\270\014=<a\200=o\226\025>\035rg\273\022vc=\250\217\216\275\231=\235>\210\373\"<\r;\021\275\234k\214<\342(\032>\204\366\336\274\377\030\263\274\364Au\274~M\220<\006\311\306=\025M\366\274\034&\214\274\315y\013\275}w4\273C\274\372=\274\340\024\274t\351>=\206\321?=\232H\001=s\347\313\274p\275\204>\315r\321\273\226\276f<\372\210\033\275\t\370\014\275\035(C=\320\366O=\2236\007\275OX+\275\311Q\366\274\345\244\220\274:\351\313\274\212D\002\273pf\204<\216\207 \275\031H\000>}\036a\275\252\032q\275\263\270\315<\243\262\024\275\213\014G\275rV$=v\233\3469>V\304\275}\212H;\262\273P;\220\304\244\274\2713\n\273\365\273\022>\322\301\371=~\231Z\275R\014\242\275\241\227\036\274[U\r\275\212\025\t=a\375\007\2756\3166\275]\r\260=\316\311.\274\202\351L\275\302B\374\274\262\001\264\2756:\034\273`\006\237\274\253\270<=H\031\257;\353J4\274[ 4\275\031\202\375<\244\'\230=\032\361\372<\r\021D\274\341\342p\274\210\2272\275\343d\314=\364\002h=`\224\231\274\033\270\250\275\255\263\275=:A\317;\213\346\232\275$m\275\275\005\213\223<\303y\355\274??\230<\367(4;\267\010\"\275\361\2501\274\370\375\276=epm\274\254\\\366=\355\013\327=\303\253\214\274\202\2672=6\026\245\275\206M\027=n\235\213\275>\312\326\273\365\001\315\2748\265\020=\265\002\260\274\027\362\313\274\352)%=\250\215\031\274q\322\251\274\301\023V\275\007\354\225\275l\346\036\275\234\2105\273m\241\207\271j\000\274=\036\370?;\333\305R\275\327\005T\274$\253\377\272\311\272\316<gEJ\275\252i\004\275\001#\030>\3526q\275!\255\340\275,\364\274\273\035eo\272\313}\326\275e\326J=\230-T\275\310\346\031\274\220\1770\274(1\357\273R-9=\033\213\331\275\301@\202=\213W\201\275\322F\251>\300\223(\275\312j3<c\337\231\275\252\357\230=\035\202\350\274\014r\202\275\341\205\244;O\320\300;w\200\331\274\240o\037=\013\252\022;\006O\226\274d\222\255\275ns\210<72\016\273{\355/=\003\233q\275P\215\266\274\002q\377\274a\225\312<`\300\351</\236\206\275\037\347\257=\311v\304\274\321\270\034=\315\252K\275\2303G\275v\254\230<\366\370\031=\322\343\363\274\336o<:\005\231e>\225\375\374=.\272\305;\2546\207\275\\\342\220:-j\300=i\202\235\274\375:.\275_\254\332<\355\242\223\273\355_\211\274\273j{=\\\362\257=\354\017\212\274\335F\001> \014\237<esN>\032\246\232\275\'8\225\274\014\332\343<\2418~\274\260^\217<\007\"#\273[\313\215\274f]\325\2736\332\\\273Q\"`\275)\347\021<\337;B=\340\273\014\275R/%\275>\371\350<s\367\005\274\3713*\275P\224\207<\243/\373<\202\335\242\273\365\354+\275(\223t>yA\226:\374\177W\275\217^\304\274\t\325\216=\237\274\263\275\022\0265\275X\251/\273\003\246\242;\224d3=lq\246\275A\341\252<\212\034X\275#Zv=\240bI\274v\324n\275l>a=3\275\276\274\236C\237=\226D<=\t\211\245\274b\227$\274b\221\002\2745\360)\275\330\377H\275j\221\370=\247e\255;D\207c\275\336f\006;\354\267\342=w\317_=\230F4<U\214&\273J\005\r<+\361P\275m*H\275\242a\203\275\315Z\003\275\024\306\320<\227\'.=\257%B\274\240L.=\346\273}=\275g\013\272y\230\260\275J\213\246=\234H)<\243\304\237=\354+F9\nL\366;ey3=\365\322\246\275f\221\201\274N\034$\275k\300V={AL=\034QH\274|\313\336\275\230\277.\275\361\302\316\274\006\027\205={\360<\275H2\234\275\267U\002\2756\312\233\274\360L\354:\306\322\202=c7\233\275q\3022=\330_\262;\313\324\230\273\006v\370\274Y\016\334\273\"R/\275g\210\255\274\265cH\275[\022\025\275L\261H>\323\221\032=\017\260n\2751m\244\275=\233\">I\317\345\274\267\216\204\275wwO\275\207\336\025\275\010\276y<$/\306=\261\253)\273\003\265R\275y\364g\275WW\235\275x&%<\224\357U\275\210\037\304;\025\243\227;8EU\275\034\375\315:a-\200=\247\362\232=\035\317\350;3=\'>\265\220\001<OnK;\370%j=\'\261J<v\315\214\274v\027\303<:\027:\275<\214\235=\'\261\017\275!\365G\275\027\232\025\275\337\260G=O\361L\275\203\264\202=Z\237\304\275\330\234\375\275\237\350h\2754\275\324\274\220\240.\274H0\310<\266\r+\275y\032\235\274\270\301\000\275-Y\251=\354>\026<\373\336\306=\336\002\344\274\355\265#\275h3\027\275\315\357L\275\244Y\250<\340\375\305\274l\261N\275\241*\234<\250\245\251=H\n/\275\036\017:\275pF\r<\230u~>0d(\275\264Y\031\275<\327\345\2747g\365;\271\316\244\275Im\214\274\004\347\311\275\367_\325<02\021\274\262\031\270\275\254?x\275e\323\"=#\272\204\275\310&c=I\275]=\266\222j\275*\035\007\275\231\261\310\274?\014\023\2757\223\323=\266\227U\275v\025\356\273&,D\2755B\335=\271\232\n\275E\213\360\274\327\205_<\375\232\365\274-\203\212=\347\246\350\273AZm<\222\033\241\275\'\353\227\275\254\230\027\273\237\377Q\274\376\233\332\273\177Z\217\275Qg[\275Y!q\2756u\030\275\310\337\222<\354n1\275\277N\340;g\020\t\275\010\315\024=:q\347\273\030zy>Q\244\027\274\212i\242\272\241\325\374\274\365/\326=\225/\330\273\374bc=\036^\214=\235\277\022\275=h\331\274\301o\217\2755\020\265=j*@\275\334i\245\274\373\376\275\274\234\0257\275\215\316\224=\231,\316\2749\230\034<6\222\205=\362LE=\373\316g\2759\002W=f.r\275O\350X\275\256\313h\275\374?Q=\365@F;\016\267V\274.\256\221\273\356y0\274Q\021\243;\013Y\350\274\226\325^\273\372\007\253<\271*\223\275\262\326\237<\311\310F\272\313\237\006\272\315\211\326=A\362\021>c\223\350\274\310\304\202\275\206!\375\272\000g\354<\214\021\351<w\323\030\275(\302 \274\251\345\354\274\031p\371<n)\222\275\251\025C\273\250\230]\275ik\023=\004o\033\274\367/\016\275(\224\245\275R5\'<\344O$<>\251\207\275\203g\372\275F\013\024\274\033\260\211=\312\035S\275\321#\243=\362\213?\275=\314`=\374\344z\275\257\217^\275Q8\276\275\242\007\005=\006Y\271\273\373\023\013<\215\331\324=\202\205\204\275N\024L\275\346\367\354\273\236\343b;\276\235\031=Yzr\275*\211\331<c\236\317<j*\330<G\235\240=W\316*<\030\016{\275\306\"\010\275\343\026{\275\247\254.=\332}\333=)\377\303=\342\244\327=\242\227\306=:>\361<a&1\275\326\217k\274Y\203\206\273#\200q=*\315%\274\302g\007\275\377rl=|\310\020\275\243;\202\275\234\214\\\275~\306F\275$\376]<\031&d\2758\255\302\272\232\\\032\275C2\243\274\366e\205\274\205\"H\275\006\320\025>\341\233z\275\256`\371;\376_\221;\322\211\303;^\241\217\275\0306\261<\265 \312=\314\005;>\251\332\270\275\240W~\275\306\233x:\002\222\036\273\013\350(\274\276\252\001\275\215\201\217\275\r\261\020=8\375\261=\306\353\317\273\026o`\275M\021>\275Q\005\333\274\023\266\t\275;\364\364\274>\227\214\274\n\202\375\274O\224N\275\233\352\247:e\036I=\301K\372\274\326}-=\3758c=\230\255\032\275\030b\211\275\214\302\231\274\334\325\251=;]\277\274\030\364{<]6l<\355\234\270\273\236\276f<kP\201\275-\362}\275pBC\275\260\243\204\275\300?E=\322|\302\274\323\312?=x.\013=I\033\235\275d\303\211\275yB}>\362b\214\274\346\374j>\001\326\230\275\023/0=\301\276\016=\371\315B\275\271<\027=G\336T\274g\013\360:\210A\027<\014\365\320=\251\363n=H\000\016\275\023e\235\274+I\000>\3376a=\317P\024\275\335}\360;`\374N\275F\212\271\275\247\t\212\274\251\214\270=l\003\201;\231F\255\2751\224\005><\366\007\275\374f\213<_\366\305\275\225*\217\275\271@f>ux\307\275.\242U\275\004\177\346\274\225\274\253=0\035\346\274\027\272\330\275\355Vc=\035\321\245<0\203\256\275\001\316<<\216Z:<\205\257\326\274C4\325=d\363\217=\004\342\235\274\252\210\373\274\307d\263=\366\227\245\275#\216Z\275m2\027\274\203\034I\275[\221\206\275w\265\033\275\275!)<\252s\000\275 2Y>\316\250\302=JSr<\246\252f<\325\240\\\275\276R\344;\2523&\275\270+\266<\337f\222<\223F\036\272_\033b;\365ip\275\036_\014\274F\"f\274Q\326S\275\025\213\346\273\"\310@\275,\324\026=:\014_\274\330|/\274`\250G\275\335\212\342\274\230B\025\275\256\203\252<R\355\276=\353\016\235\274\241nS<\003\312\323\274\315\364\000\275\257Y\362;\347H\364\272T\354,\275\322\036!=\233\210\214\275\2170\216\275L\215$\275\326\242y=9\376\231\275\311\267\263\275\027\363\316=\332\217\301\275\260\331\206\275^\\3\2759 \021;A7\324\274\2556)=\307\337\364<\263\227k\275\0033\271\274\022\363u<\264z \275\022Bn\275\352\3478\273g\342\247\275\307\310\227=6mE<6\362\332\273+\226\232<\000jh\275\2560&\275D\n\332=\317\337/\274$\245\217=\355\354~<\224\234_\275\014\336&\2742\373\330<\323\355\363\274\331@\275\275|\202\232\275u\r\224<t\364u\275\205\375\310\274yG*\2750\352\204;\304\306Q\274\304\336\254\274\376\320@\275\232F\241\274)\202==\370\375\022\275\332\026<<\273\033\204=\314\264\236\275P\264\361;2\007r=%>\016>\356\037n<\332y\251\275\306R\t<\026\226@=#9\215\274\177\252\316=\035\315$>\'\274\376\273\230x\346\274$\347\023\275\214\362\205\275\264\004w\275\256\255\361=\275,\267\275III\274\336\271\210\274\035\274\010\275K\252\223\273\314\034\364<_\204u\275\217\201\373={\014H\274\230\370\340<\321\246\246=\304)\307=\024\232\234\275\003z}\275\236w^<\033\2253<\247}\357\274Eaa\275\344\360\231<\3541\325:\240\330\262\275HS\330<Z\037\014<\020\"\024\274 \237=<\037k*\274\177P\032\275\0234\310\274G\363X\274\033ZF=|\241\010>\200S<\275\251\352\301=2\346\227\275\177{\351<\305pc\275\205\245/=\366\221\021\273\300\\\331\273G\244\035<W^1\272\305\033\006\274W\005D<\030\236\272<\373\274\363;VSm\275{\0168=Q\233\020\275\034^\357;\001Lk=h\246\t\275\342\3253>{f\237=\034\226\346\273\267~l;]\002\205<+!\203=/\314\374<o/\320\273s\317\337\274z\017\251\275\364y==[\366\321\274\270\262\220;\273\371\327\274\241\023Q=\023\033X\274=\242g\275\2377\365\273_\005\355\275ml\201=[\006\203\275\020\320b\275\234\264\364\275\312\313\252<\315\301T\275\331-\231\274\037\351\316<\355\346F=y\334\323<\004\331\217\274\325\027C<\304\322\370=\220dL\275\307\202\002\275a\372\271\274\234\272\022<\246\272\347=K\010G>\361\020u\275\337\333f>\346\006\275\274$\345\212\275\262\322\246<;c\272\2734\243\346=\273\216B=\221\344\274<\341\246W\275\354Y\253=\243\362x<_\317\372;\027\031\217=Ni\265=\017`\252\275N\265O\273v\367\201=\020\342\332\274|DM=\357\020\017;\n&&=\277h\000\274\300\307R\275\243\214p\275\234\032\327<b\033\216<\263.\271\274N\245E\275V\273H\275\025>\251<\304-\357\270\233$\371<\332e\245\275\231W\347=\350\340\213={\337\001=F\215\370\274S\013&>\210\222\233\275\027\216\216;\365P\212\275!\243h=q\224H\275\001\225|\275\332\327\007\276\373\376{=N$a<\264\"\206>1\014^\274\247\331\222\275\321/\265\274B\260\267<F\214/\275\215\014\236<(\025:=\350N1;\271\340\343\275}\317l;\347\337a\275\342k\337\273C\243\202\274\037\213\266\274L\221\360<\335\227\207\275\366Rs\275l+E=\032a1\275\245,\3778Go\343\275\241\270\320<lD\241\275\005$\n\275\353\314\337<\276\333\025\275s\3532=\244\353R=PG9\274*{?\275\277\004=\275\363.\344<R\251\357\274$G\324</\257\235\275\224`\227\275\t\002\355\274\0360*\275\207~5\273\272\222\t\275\273\253L\274\354R\255\274\017\337\301\273q%\346\274w3\214<\332\263x\275\312\357\227<\233\310\212\2757\350\002\275)\334\250\2745\016\351\274\261\235f\275\317f$\274vt\221<\001i\362;\242\255w\274\317\357\223\2743\207\315\273C\024\"=\257\202\361\274\\\310\034<\005q\233<w\2305\275y5,\275\267\364\014=\334\322\366\274\016<\256\274\366n}\274<h\266\274\001\216\370\274\267\t\200\274&\311\371\272\237ol=\352\224q<\306!\355>\026im<8x\317<\276\334;=\304\344\004\275_\365\021\274\316\272;\2754\306\005\275\301\003\341<;vl\275\267-\260<\212E{<v\211Y\275\3150\255\275U\303\026\275`7_\275\274\360D=\354\030\373\274(\264\366=\276\237.=\243\246$=\317X\374\274\343\201\342;\363\017\247=\350k\226\274\022=\000=\234\034)=C\240\242\275o\\\030<\326\254S<\nE)\274\257\031\244>Toi:\002\324\302=\312C\237<\005\274\013\274Y7}\275\251\263\326=`\020\333\274\245\304\202\274\366\375\236=\003\253\217\274\302U\307;\201\007O=\327\365\016<\006\264C\273\206\035G=D\017\315\274d\375\232<\242\033\354\274X\025\177=L{\242<\375\270\"\274{\205v\274fg\035>\246\3635=\n\351\007>\3638\002\274\251\253\325;_\254t;^\241y\275\244\327\367\273\356s\252\274D\360\315\274~\377\r=\242|\014=\207\023\t\275\253\317K=b?\337;\007\336\'\275\230\220\007=;\347\315=F\331\200\275\221\"\310\274\200\314\304;]\235S\275.\325n=\246\032\351;\264/\254\274\277\343\304\274g\222S\275\310\340d=\260\222\210\275Y\267\216=:\345\223=\241\346t<\'\014p\274\260\206\000=\334\225\014\275o\"\262\274B\203[<N\310\332=6\267N<\016\007k=\203W\323\273\335-\027=G\035K\275y\300\220<\274#\200\274\025\323\037=#8\277;-Js\2756\005\363<;AD\275|\351r<\274g\0029\311y1=0\275\233\275\003s\007\274@\326A\275Aq\213=\265CR\274Y\3323\275\354\303\020;\341\031S\275KAZ\2758*\356\273\206\315\251\274F![;\276\345\252<\345iL\272\226\365\r\275\024\360\240\275G\r\252<\t\303I=\006\261^\274\373\350\036=\340\202\214=h\2655\275\025\211$\275_\321\334\274x\345+<\246\256\033=\036\301n\274\235v!\275z\300/\275\237\213\220<\2148\305\273\333\257\214;q\222\001\275\276\010\034<\021V\345\274u^\227;G\360t\274\271\373p\275.\374y\275\363+4=\030\365~=X\274\014\275\313\311\257\275\353\204\357;\274\241\001\275X.\356\274B\360\260\274\020\002\250<\376\340|\275:\346Z\275%\013\036\275\026\221t\275\322\010H\275W\273\326\274\234o\217\274\t\233\335\274\201\345\272=\204\230)\275\356v(\275P\014\234\275\373&:\275\020B\310\275\240\260\274\274a2\341:\346\264\036\274\255\253\214\275\006\237F<\215~\261\275\024\370\210=\265\'\377\273.\214\000\276T\014\307<\307?\240\275V\\\212<\376\203\271=JV\031\274\014\373e=\010\021\266\273\342\227\205\275)\243H;/\030\262\275p1\236\274\2561\025<\222Ih\275\177\\\244\274]\234\007=\360\022\371\274\036\226Y\274\342\260-\275\364\344\252<\334\"O\275\376L:\275\n\353\251\275\356\2635\275\026\3129;*4/\275\223&r<\201\364\004\2759\315\201>^\230\232\274\354\326\315<\347\020\204\275\214\224\317<\276\255\356\274\332@V=\271gb\275\2152!=\255\267\221=\373\326F=S\332\'\274\371F\236<>\3023\275z\263\253=\265\247r=H\334\002=g\340J<2\313\237\275/\200\240=A\025H\275\303\246x\275\366\321\236\275\010\230x\275\352\352\246\275&]\'\275S\264:\275C\230\r\274\213\017a:.\316\376\274f\330|\273)u\037<\226\377\361\274D\212n\273\203\250\254\274\240\210T=[h>>\246\214\001;58S\275\266\\{\275\'\216W=>f\342\274\301-=\275\333\372>\274\"\314\325={\020\002\275v\027\320=Az\212=\320\274\364=i\275\230=-W\241\274E6n=\221\263\254<Tu\202\274}\301L\275\351\375>=\260=*9\212\260\032=\241UT\275\004a\351\274\302}\312;\323IZ\275s\206J=K\310l<[\204\363=m\024\237;&\242\267;\026\034\034=O\226\210=\022\364\t\275`\245\227=\221_\226\273\264\014\006=K\226N\274k4\360=\237\010\305<\t9\316<9MM\273\244\027^\275\226\317p\275\375<T\274\365\224\233=\014\336\334<\315\221\363<\003R%\275\215S\034\275\211U{<\227|u\275P\351M\274(0\250:\214\357\257=\263\307:;3i0\275V8;=D~\357\274\021\352\340;\222\333u\274\361\373\345=\350Y\245>\270\252\263=#\217q=A\265\300\274q\002\007\275o[\002<\265\017\313<@Qu;\300\261{=\367\221\265\274\0069\225>|\212Y\275Z\325\354\274\025K\026=\360\357\255=bh\341\274\362\023\361=\322\3701;\377\0260\2756Ci=Z\236\226\275\2522\246\275\265\025\246;\022V\241<\313+\217=\273\263\322<C\351\334\274\355\227\213\275bg\266\273\254\377$\275\232\230R:1\330x\275L\2275=\016J1\275\333\226\024=\025\342;=Q;U;\235\014V\274?\212\\\275\360\374\327\274\r\233\264\275\267\352\223\275J~\201\275N=\276\274\256\tN\275\030\277\004\275\252f{<6\n\220=/\240\333\275r#q\275\316\373a=m\326\013\274\226\355\374\274\326u\240\275B\2070\275\324\021\001\275\024\267\n\275l\312\230\275\273]\366\274\2673\355=\215\004\r\274\344\301\331\2735I\332=\200\0162\272\241f\235<j\213\345\275\033e\273\274\317\205\032<\313\300\314<\007l\032<\300\225\321\275\240\331\224\274\241B\224:\351o-\275\2515\022<_L\265<kw\344\274E5\250\274\202T\312\274\254ed\275\301\360@\275/A\363\274\271\217\224=\241\247\303\275\337\343\231\274\317\\\311\275L\265\376:\330\016*\275\275\250\256\275\204\324f<f\367\213\273\260\355\336\272)<\236=\277\246\265=\215A\001:S#\321\274\276\361\361\274\200Q\035\273m\027\002\2755\216\206=\2021\276;N\001U;\263#\311<\r\345\205=8\006\351\275;\312:\273\2328\367\274\220\340 \275#\243\246;\306\257o\273\273E+\275:\277X\275\351\360\252\274\201\305.\274\220\330\026\274fB\364<\354\021\334;%\347\341<\035\261\r\275\033 \342\274\266\035\\\274\360`\254=#\' <\224l\010\274\250\017\214\274\233\317\313\273\003y\247<&D*\275\202I2<eA\370;>p\001=4\004\302\274X\202{\275\274\t\006\275\tt}\274\223\tW=\035\314\204\275\024\363\311<6\372\335\274\016t\\\275\314P\354<]&\371\273i5\233\275\344NX\274\251z\236=\007]y\274\337\270\246\274Zh\264<\2560\372\275\034\374\243\275b\272\270<\t\030\215\275u\022\220\274\262\312\321<\322\'\000\274R\037\201=\2764\300<\223\022\222\275\370\274\020=\200\353\216=d\271\200\275\370(\246=`\362w;\373\033A\275v\2042>zO\035\275\256\271\300\273_\023\t>*\261\325<\351P\337\274\374\362\014\275\361\363\016\275\251\355\264;\254\2418\273\211^D<\236\352g<_\023M\2757\3440\275\2715?\275&\260\276\275)\365\207\275\234\235\373<v\234\260\274_\310+\274\007\371 \275\216\333\210\275*\032R\275\032\007\206=\220\020\004\274\217B\204\273}\373\252\275x=\214\275\206-\237\275,nZ=\263Yj\275+\006\021=\363\\\023\275\201#\0238\000Z\372\273\240\204\241<\257\3511;G8e\274\330\310\204<\264\243\315\274\001J\201\274\331\244]=\244o\210=\3071L=\26211>a\333\013\275b\225\002\274p\255\367\273:sV<EO\221\275\353\273\363<?,\007\275\314Y\250<\020\314\r\275\373\333\'<\367W\242=\307\351\307\274\352\352O\274\257\316M\275\336\224>\275h9?\275\312\275\227=\210C`\275^\354\230\275D, \274%\277\357<\317\343f=v\310E:\336\030\024\274T$\375\274\2635S<\262\202J\274\222\177\237\274q0U\274\337\262/\275}r\207\275\277[4\275\261\235\322\273\3079\266=\244%\036\275b\006A\275\254\2132;\205\016\003\275G\000\336\274\335\212m\274\345\244Q=\361\234\235\275\333\257\014\275\t\242I\2752\264\234\275u\371b\274\227\242\235\275\'h\327\275\006_/\275\234\0036\275x\224\263=\257\374\361<\315_\022\275\270\246\334\275\251\347m\274\003\377l=\t\323\200=A\364\"=\'\025\241</l\211\275B\327\206\275Y\200\007\275=B\330;@SP\275\365k\253<\216\367\021=U\341\372\274\365\000\313\274\"\360Q=QH\230:CI~\274c\034\027\2756\306\031\274\3261\342\274\241~A\275\320\306$=\3766\266\275\245\034e=\275\347-<\004\365U=\265\225h\2751Zw\275\256\317\025=\rl\311<\271\220\374<\343!\013\275c5\237:+\256[\275\340\235k\274D\353Z=\375\2141\275\226\244\010\275\206\013\004=$\301\\\274xu\022\275\317\306,\275\370\277\346:W\240j\275(u\214\275#\274\206=`o\376<\217_\205\272Qr\004<\305\277a\274E.9=(+a=\366\215\027\275Z;\'\274<\024w=\275!;<\244\226\301\274X\355\230=\323j\256\2758\002T\275N\274\251;\325\013.\273\307&\340\274rPj\272\'\033*\275\351H\274=\227\222]=\376\034E\274\375\320^\275\203\247\177\275\202\213\255=\201\367\236<\266\367B\275\315\024\224=\306\210\031\275\314\037?\275\307p\342\274\201\367l;\214\n\350\275!\031\226\275\315/n\274\305:\216<\367F\325<\363\207\202\275 \255X\274\371\351\260\274\360[1=yo\017\275\214\035$=\366T,\275\n%\013=\306\206\227=JM8\274u\227\231\275Z\277\026=:4\230>\221Z<\275\020\250\234=\365\3769\275\200i1<\327\324\314\274\370\"\'\274\257\362\220=\227:\377;\271\210\r>\002\350o\275\277\034\020\275\004\t9\275\362\265y\275\315\325\237\275\253\371\001\275\271w\001\275\361d\010>77\274;0\2532<\000\207\362;\206\023\"=u:\010\275\221\\\211\274F2 \275{\350k=k\211\374<\376}\312\2747\336\370\275\032\245\214\274\336\301\237<0\253\202\275\300\005\305;\363X\010\274\"\267u\275\0008\210\275<\272\300=\371\0359=\344\333E>\010F\222\275\221J\307\275\"++\274)jX=r\221E<\306\'\\\275\030e\\;\231\220<\275r#\251=\255\021\350<X\231]\275y\205I=\260m\214;\036H\225\275\350\250\247<^\363\331\273\214[r\275FC}\274#I2\274\302\321\377\274\241y1\275A\241G\275\005\260\364\274\222\212\023\274\362\2251=q\016`\275\270\006\247<\216\305E\275B\037x\275\0245h\275c\255f>\367\370c\275\230\010\201<iz(\274\333\360v\275\331K =P\035\010\275\266\304\254\275H\024\227\275\251\335\2048\026\370\207=R\244F\275\337\347\231\274\3678\200=gAX<\272\344X=e\024\252\275\237Cc\275@\001Q\275$\177\377\274=z\t\275\300N\211\274?\034E=\346\036\354=\026%\312<D\377\310\274\257\241\275\274\250\007N\275\016\034-=yf*\275a\301\035>\337\001\235=\236\376K\273;Fe\275\310S\006\275@-{\275/O\206\275x=C\275\230\234\204=\352)\201\275\"\361\\=\225\367O\274\364\324\t\275\331<I\275\223E\327\275\235\332\376\275-\266w\275\351\336\210\275\\C\021>q\3447\275\007\216\251\275t\244i=\200\326\347\274\355\377\250=\343\267\231\275;\264 \275|\3612\275\266\0216=\325ud\275@\267\014<\361\3238=\355\241!\275DW\376=\311E\\\275\357\223\275\274\320 \023;\304\345\345\2741\275\242\274\205\026O\275\351\350n\274\353\031B\275\267Sa\274\305\301\335\274\231\366\300=5\310\234\271\216\031e\275\0210\001=\246\343^\275i1\207\275R\270u=\234\353\222=\255\026\232\275\001Hu;\027\263\3129\021\031\351\275\267\304\354<\251\251c=3P\226\273\266O\222\275\264\367\226\275C\275]\275@\250\030\275\034\247\270\273clb\275\275o\377<\371q\313\274mSl\275\300I\254\275w\366\004\275\271;\231=\007P\207=0\337\275\274\010wB\275\243\273\033\275\253\014\234<\274\2757\2750J \274\357t\021=\374\334\343\275V\224r>\223%\260<\243k\261=\034\2572\275\356\261\007=\272}\014\274\001\214\236\275\225#\000=\207\355\010\275\027\201\241\274-\211\230\275u}m=~\345\365\275\361AH=\267\321\"=|d\204\274\377S\276\274K\274\374\271\327h\250<\257(\254\275\024\245\222\275\363\354Z\275\r\276Z\275\337\367~\275\237\223\014\275\25757\275\001\311\253=\233\350\224\275\314\356\211=\010\260y\275\367\372\203<2\221\212<\330s\341\274B\357\226\275\263\r\307\273\351\003\211\274\3768\031>i\257W\270\372\355\343<Wq\326\275\317C\376\272\251\310H\273C\0052\275_\346t=\002\024\214\275\n\376\303<\254\206 =DJ\252\275\207\037\327\273\034\212\r<\014vN=\325\354\027>\322\207\204\274)i\224;\313aN\275\014\204;\275P\347\305<\177C\302<\227\022K;@O\013=\274\253(\275\371\177v\273\035\227\200\274Bpn=\323h\234\274\225\260R\275\3017\222=\213\365\342=\tT\226;\031\007\330=\024\243[=H8\177=\251|\342<\226c\257<\316\000\266\275\230h\'<sJ\001\275\244}\351\274\364\247\013>\221\021\202\275)\262\304\275\r\360I\275\211g&\275q\222`;h\034\202<9\"\221\275.\371\251\275U\251\316\275_b\014\275\344\361\243\275\004\306\237\272S\2241>v\277\230<m\316O\275\331\233\270<\335G\236\274\274k\351=\202\2245=\365MQ\275\004$\330\274\375X\231\274\025\264\007=?\351\351<\331f}\273z\346\031\272u]\277\275\315M\031>1\211\007\275\274~\233=Y\'\300\273\373\330H=\332n8=\234\224b\275t\005v\274dPp>K\0335\275M\312=<n\032\007;\372\023\256<\025\247\346=32}=\213w==5(\214\275.s\222\275C\361I\275\253e\230;\242\272\017\275\340\t\017\275A\235\335<\334\253C=6~\203;\351\357.\2757\214Q\275\007\014K\275\247\310\224\275<\276G\275\017\373S=\006\007\232=\320u\035=X4R\275\"-\272=)\350r\272\225y\'\275V\r\013\275\202\351\305\275\270\3618\2756I\261\274~.\263\275\227i\260\272\014\237\337\275W\361\267\274\204n\032\275\253\340\217=\003\325e\275\265M\251\275\330H\245<)\347\033>\334\372\177\275\311EU\275e\267\256=\271b\344\275\344c\225\275A\266[\275\360h\201\275E\274\215<SN\005=\361\260\272=\3458\202<\367U\306\275Z]\337\275B\341\236\274\245\026\312\27449\362<ao\224\275QRF<\330\274\224\274\034L\020=\373{\324<\022\363\231\274Z\214\232\275]\021\027>\233\037\\\275\251\375w\274\336\246\030=\363\345\036\275\206\0273>\244\311 \273\023A\321\274$Hp\275t\2167>\260\251\314=\225\023\330\274\342\317_\275\353\266%>\354\255\353<\271\355\202=PP{\275\\\367\237\274\3327E\275\344\330\020\276\365r\354\275\203\344,\275\312\017\005<ed3=\373\371\251\274\371iT=ay\317\274\352\372\213\273\367\206\270=b\272$>\226\260\234;:\334\215\274\274\227\272<\202\317\217<X\031N;\317\272\236\275\201\233{\275\234\231\305\274\316&\272\274\260\304\356\274t\312\330=\270\370\327;\210[=\275\2358\317=p,\240=>\307T\274\356\'\326\274<\313\306\275I\037.=<\257=\274\2247\036\275\247\253\320\274\\\340\375<\216\375A=\331\336\014\274\204TD\275M\361\"<\333\273[=\366\332\261<Y;-\275S\306+:\241\320\322;\236FO\274`\315d<\211\313\214\275\372\263\331\274\365\352\246<I;L\275\271x?>W(U=3i\365<\367\212T\275\361\311\300=j8\315<0lQ>>7<=d\273\214=\351\\J\275\023\214\355<C\320\316\274\'\322\365\274v\026\333<\202[\205\274\372\374`=:P\024\275\353\033\220\275}\250T>\3748]\275\264I\033;\216\313p<\243\250\346\274G\016\031>m\207\"\275GV.\275\246\361\332\273m\313\342\273s{\032<\313\222\327<\337t\225=\031@\303=\270\\\251;\226\301\023\273\266\241_\275},\233;4\007\334\275N\241\250;C\267\277=\267\313\345\274yt\211\274Kc\027\275\261\nK\274\332\235\242=\377J\316<\022\333\241<\346X1<\351\032Z\274\223\347\366\274Sf\313\273?\254\351<k>\002;\340\310\344\275\010\031}\2750\245\204;\247\337\"\274\317@\254=l1{\275\177\371\344\274\263\274\205=\372\020\335\275B\247^<@\241\211\275\2649\226<\301\273\231\275\274\201_=yR\240\275f^1\275\036R\006\275\232l\005=\\\270\362:O~$\275\027CV<4X<\275F\320,=\307\246\306\273\302#2\275\014\337g<\341C\207\275\3648\325\274\367\202\252;\352zA\275\304j\022\274>\207\305<\036\243\025=\275D)\274\374V\211\275D\350\377<\351\362\006\275\370\335+\275\030Z\030\273\277\336\326=@@>=\373I\265\274F5\003\275y\021\253;\312O\000=\000z\213<\354\261\327\274 p\311\274\0309\331\275\307\362g=\210\237\265=\372Y\346\274\267\014K\274T\311X<\232\241\274\274e]c<\316\352m\273t\364\235=\037t\274\274\225x\347;\277J\202\275n\027\327:\274\306<=v\237\232<\375_\243\274-\270\220;\260\251I<\010c\024\274h\203L\275\255\020\236=gz\257=\006\251\"\275\313\366\005\275:\2618\275\314\203\013=\321\372f\275U[\231\275\215\265\263=\213\337D\273U\254x\275\035\r\000<\274at\274\005\301\345<\377\222\263:Z\025\325;\336/\010\275\326}c;\3239\215\273\206\010\373\274\335\020\'\275\276\255\305\274\0358s\275f\266E\275\366\005\266>;\303\034<\264\r\221>\263\352\017>\304x%=\241\003l<X-\334\274\025\265C=\3334j\275\266\274?;3\233\r\275\370\227\256\2737\305*<<8\214<\251S<\274\372\312\r=\034\266|>\302\002O\275B\001\240;\365+,\274\023\005\036\274\270D\003\275~\2148\275b\220\037\274(t\003\275\251\026\207\275\013\223\26062\026+:\333i\271=\273\332\301\274r\315\220>\225\301\266=\362C\300=$.\002\275C7\244\275\017\027P<+\237%\2755g\201\275\255\204\217=G\034N\274\257}\212;\037\342\207\275@\3463\275\326\260\030\275\325\017\261<\226<\257;\340\363\231\275\362\024\274\274\352\007T=\343\255\000\275[^\300\274\235!\374\274j\306\247\275!rz\275\3425\036=\353I\212<\332y\177<\260m\177=uP\332\274\267\262I\275MF\017\274D?m\274\001\251\270\275\222\255\322<\226\n:;\004s <\021\252-<:\370\352\273\322sz\275e\310A\275\275\244P\274\235\216\303\274\022\337\223=\334?\273\275\243\024\334\274MD\351\274\241J\'\275\004\264=\275v\317\035<\345\301\213\2754V[=\322V\004\273S\\\305=\254T&\275K\317\356;8\305\032\275\003\000S<\215\244\227\274\334\240\307=S\217\000\274\217\312\025\273#_\233\274\354\221=\274\333\351\177=\001\247\213=\232\335\301\274\177\321\216=)\363\337\274\224\002\265\274N\021V\275\317\211L\2751e\256\274B`j\274\373\217\363\2748,H=\362\027w\275@0,=AW8\275T\230\\\275\357~\235=\312\000\036>\277Bl<\2755\323\273\0063\237\274\035fl\274\265\330\226\274H\264\003=\312A\303<:\005\273\274\242\202\024\273 \336&>\376P\270\275\'\005\253\274\303)\241\275\007+4>\232\201z\275\253K\227<\227X.;\264\277\207\274^9d\275f%\034\275\276\004\255<\2174\227\273I\360\021\275\305~\022\275\247\327\007\275\177/\350<\223fW\275\341\n\240=\356\202\222=|\350+\2754\350\004=\373\342\031=\365\324\022>A\t\036\275J\344\210\274h\252\004\274\306\261\251\274\316\035\345<i\337\215\275\242\313\242\275}W/\274\305\250\037=\210\204\265\274\272q\373\273\225\006\022\274\307\352\032\275\005\352K\275\036\255\r=i\"\351\275\022\256\273\274\014;w\2759\243\332\275\375\236\010\2757\220\277\274\345D\314\274\304}k\275\034\351w\275\200%\224=\274Gx\275p\255<<\025 \217\275\271\014\363\274\301\366\337\275\250\330\021\275@q\n<\321L\005\275e\305\366\275\003Kg\274H[&\2746\036\244=\311\366\376\274\374~\331=<\010\016\275\201-y<\276\000\370\275\241J\364\274\215\354\206\273\030?\237;\2406\227\275\302\232\016=\257\021\231\2745\033\235\274K\373<=k\344|<05\n:)\201H\271\310\275\316\274`\021\263\2749\353\230<\273t\314\275\301\375\036<\252\223+=\273\377\027>\264u\207<\006T\263\275\n{:>E\273\202=\177r\262=Q\026D\275\334k+\275\351\007>\275G\310\205\274j\236\221\275\234Z.<\203\351\203\275w\327\271=\302\366\264\2741\247\244\275\n\327V\275\246\324V=\342\2123\275\2663\225\275\344\373\n>AN\335<(:\325\274\240\217\365\2730\021\217\275\373\234\364;l\254\367=\316\350H\275\306\212_\274\223,\023=\027&T\274\0271\324;\2610O\275\331\335\202<>\244\017=\354i\341\272_\013\004=\224\200\267\275uQ\017\275f\262\220=\220\216^\274\024\237\245\275=\222\241\274\204\200)=\256\034\033\275\2412c=\350\363\321\273)\336\021\275\365\373\206\274B\251/=\246=\260\274\374v9=a\002\330\275MiC\274\202\333%=y\246\235\275\375z\247\271\210\223\306\275Y\201y<5$\t=~\023\024\275h(\223\275\204\361Y<\256qM\275\214j\r\275\323\351Z\275\341\204\346<\246\331\237\275~g\355\2745\022P\273\333\324Y\275P\0136=y\314\377\273k\365g\275\354\345\253<\230\257\177;n\245\003>\034\213,\271\371H0\275\266\036]\274Rw\215\275\271\367h\275-\322\377\274\354\357-\275\334\323!\275\253\313\004>\366\223W\275;\260 >(pc;\322\007\211\275\204kW\275\010^\212\273T\331^=\262z\'=\234S\003\275{\347\205=\250\242.=\345\204\243\273\225\273\264<\202\343R=\231\261i\274\376\252\307=\263!\335\274\3414\256\275\263\220\363\274>o\032=@\304\237<J\024\331=\225\221Z=F\033d=\332yH<\242i?\275\320P\315\274\343v\220=\311[\244=\346\263\263\274xc\307\274\215\3352>\021\322\207=\n\270>\275\\\243U\275Kp[\275\317\030q<\366B\274;u\257\344<J\317\367\273\254\007\245=\226\246%\274\332f\356\274~^f=\205eo<\3578\006\275\224Q\'\274\365A\336\274\035\007(\275A\203o\275\233}\0357\205\231\032\274\376\227\207<\035\r\211;\352\214p\275\223J7\273q\266\2559\001\270\224\275\023\0055\275o\023\026>q\241\202=qxd<\326`p\275\251\240O\275\221/\261\274\215\214\277=\2453\310<\243\0108\2755}%\275[[\013\275\347_\014\275\200\341\303\273\231`n\275\364\247\n\274\016\202$;\315\205\231\273u\215\027;\322\006%\275\224X\252=\321\236\373<\363k\016\276j\352\r=\350\240\013\275#\334\346\274b>\236=\247\2129\275?\371/\275mK\234;O\013e=\261\233\364\274\331\344 <\314\211\017=^7U>D\033\374;d\252\224\275J\353\364\273\211\\\320\274\246B\304\274\310u\321:2z\002\275\273\345q=\007\355\347\274\034\322\210\274\361]\324\274\026D\014\275\265\025:<\025\370\265;\316\366\206\274f\364\010\275\253\360\216\274^\003\342\275\251^c\275j,n\275\022\n\036>\034q\242\274I\267\221\275]kI>y\207\025\275\016\207R\274\343e\214\272\274\235\222\274!\017\252\275)\350\270<\270\257\275=D\311\276\275\345\036\033>\220\016\233\274x*q=u\360\211;%n<<m\n\247:\024\r:\275-#\022\275\000p\005\275\263s\033\275\341\255\201<\241f\307=\261\240\034\275\333f?\275q\035\364=\312Po\2730<\307\274P-\275\274\306\2464\275\0358\013=\361%>\275\347\272\325<\307y\240=Y\231\222;\276{\220\275\252,,\275\246\017\256\275!~z\273G\257g\2757\373\265\274\207Nj\274\275\260*\275\000:~\274\3162\264<Q\212D;\303\354\301\274tlh\274\023V\013\275N\200\377<\360R\376\274)\273\023\275\254\272\267\274\307\345(\274Rq\352\274\256\374!\274\'\2700\275\237!\\\275\275\024\270<\374%@=\336\241W\275W8r\275\374\324\215\273\372\205\230=\357\027\006\274S\345\263\274Q\364\377\273\232\016\371\274\021\013\243\274\000\2627\275\365\024<>R\000X=\327\217\201\275\343\006\252=R[$\274Mg\036<\177X\036<@\nO\275\204\363q=\255\250\344=\220}c\275\213!\326=\250\321\260\274*\346\357\274\207\236\355\2744~\272<t\037\364\274\017\343\004>\245,\326\274>\353\003=\215\302\266\275i\325\213\274\213\342\211=\323o\322\273\330@\330\274_\001\035=\013\240\265<\022\025\341\274\000u\022\275\307\251\323\274\275\310\034\275\362\375\":\250\3571\275J\254L<\223\362C\2758\335\002\274\320\335\261=\013\215\352\274\000\273s=MiV\274c\t7\275\257\233\362\274\014C?<\016\236\220=A\261\005\275\201\242\236<\237y\200\274\270\024\005>\033\263\301\275\243\363\006={\363\210=|\031\213\274\272\367Z=\230\250i\275\325U\212\275s\251\314\275\373\306\022\275\350\311\007\275\227\3100=&*\352\274\312w\302\273d\006Q\275L\275>\275s\314)=\326\026x<\032b\232\275H\260\237;1\363\025\275\270\251\237=\244It<\216\377e=\237\301\022\275\035\300\023\275LH\346\274i\3012<\343\300(\275\3038K<z\220\361\274\300\231\212=\356\216i<}V\233=\246x\255\274\224\356\214\275/\337x=L\303T\273\035\275\321\274\207&I\275_\032F\274\035\226\037<GWI\275\205\307\230<\246.s\273^\313\377;p7\275<\230\020\032=|\220Z\275)\254\001\275\273J8\275\025\217\240\275ekK=2Sa\275\376\330\257<Jn\005\275Ks\001\275\001\366D\274Jf\200\275\207\264\234<\026\2655>\225>4\274\206G\275<\013\321,\274\023\344I\275z\013\025\275\367\033\377=\027\324\323\272\t4\232=\336~+=7c\206=$\263\304\275\035\310<\275\324\333/\274\033\256E\275\'\371\007\275\26471=\217\311A\275\247S\240=~\3450\274\266O\'==`\343>\247d\342\272`R\362;\025\204\213\274\267\204)\275\247j*=\205_\300\275\213\354\033<i\001m<R\253\262<e:6\274x\226h\274\035\311\270\275!I*=\t)X\275\321\215I=\370\272\004\276M\242\177\274\251\361\372<v\035\300\273`\233\010\274m\326\024\275\326}[\274\365\2179=vC\026\275;9\037=*\266\315\274\250\365n=\272}H<\304\"\261\274Z\274{\275g\307\005\275N\326\231\274!\037\311\274\323\263\241<)3\237\274$\220\347<\3647:< s\270\275\327\223\310\275\335\341\245\274Z\365A\275\002\221\177>qw\277\275FL\r=\303\301\037\275\374\360\232=U-p=6g\001\275W&\223\274c\256Z\275\353\'@<\003\251\211\275\026z\246\275d\177\363<\210{\242\274\347\033\207\275\227\354c>6\302\222\274\360\243/=\223\226e\273\223I\254\275\212\013\010>~\235\362;\207P\026<z\300\302\274\030\255w\274\253\236d=.\301\r\275\233\274c\274r\225\312\274|\310\331=\244\256\010\275\242Q\235\275\227\372\242<y\204\006\273#0\023>\201H\020\274\366b\211=9\251\204\275\230t\254\275)\270\372\274\334\257\274=c\252/<\036\\\014: 4\000\274y5\270;\360\024c\274\350\324\002\275aD\233;Q;+<v\335\230\274\027mW=4\200\315\275\366!~<\302\252\245=\024\3557=\375F\240<\227|H<\320\204M<\032\237\320\274\360\371\234\275\205\031\217\275,\025\365\273\315e(\275\275)\221<\243\364\312\272\026\334\252\274W:$=\232\214\274;>\nU\274X\261%\275}\246\210=\0071~=\r\2552=\003\253R\275\3517\n=\021\\%=\277\ri\274^kv=~,\320;\244\330T<\007\337\356\274n;\264\274\031\\A<\025$\210\274\377&\312=\224\240\312;?kr\275\037j\323\274d\022\306\274\367\343(\275.\377\377\274\204\"\304;5\262\241<f\242 >\273\0228\274v\203\203=\3555\205\274\257~*\273f\262\313<FZ\010=\200\3069\275X\313\250\274\241\315\217=\303*\214=\347q\212\275\247\260\351\274\203\343\256\275S75\275\201\211\243>\'\201\201\273\004p\037\275y\210y=\246y\311\274\252\340,\274\00798\275\326\301\344\274a\024\246:r\003\r=\215xy<@\002\261=\341I\311;$\207\216\274u\373K;0\000\225<@e\322\274\257\311\034>A\263\356<\247\2568\274\210\006(\275\226\276\261\274\277\274>\275\017i%\275i-\226\274\343\346\305\275\236\177\037\275\243\372\014=\307\357\261\274U\305\345\275\tL\322\275\377\323\222\275#)\211>$\356\261=Fi:=\351\346<=D\367!>\035mJ\275\177\214\356<\342\tq\275\357\227,\275A4\234\275\277\340R\275\t\017\330:\262\242{\2742\254\'\274\010\341w=\332O\341\274\363\001)\2754\033o\274x_\014\274F\210\362<\3218(\275SY\030\275\316\007\203\275\273\035\224>\260\214\004\275\037\032q\274b\223\352=T\324\327\275\304\377\202=\243\264\322=\r$\367\274\263A\377<\232Y&\275\310\220\n\274%\367w=\247\243\"\275wm\364\274eU\233\275\333f}\275\226c\350=0\212\356\274\315\266\200\274\033`\253=\333`\272\273ER\007\2756H\250\274\315\005\275\274\215\022v:\263\031\n\274\'v\372\270\261\'\260=\341\237.\2753\317\365\274\331\265&\275\272\022_=\267\275\304\273\356^r=.\031\372:\313\366\004<\363G\223=\000\271$<N\323x\275\344gd<\226\236[<\217\321\376\274>\023$\274\006\005\027\275g\232_>U\030\037>\001\\(\274\252\214\225<\337\377\314<\004\214;=\372\336\017\275\257\217-\275\356R\214\275\202\304\177=\275\t\034\273\310\031\313\274&>G\274t~7=\347P\203\275C\377\226\275hJW\275\226\274\326\275\342\037z\275&)J<Dd@\275\203\271s<R\241\337;\244?\244\275\004\303\265\274\302\366\265<\277\357\254\275\322.\006\275UfC=D\305p\275\241<\031\275:<\023=\\\251N\275d\310B\275a[\335\271\000\343>\275\206\220\003=\203=\007\274\217u\223<\322\253\273\274:H\362\274\213\'\244\271\033\274+\275|R\033\275f\031[<\221]\305\274.\005\357\274\356@\313\274\247`\000\275\333.N\275d\226\275\274{\376\241<\352\"E;\r\372\327=K\300\036\2755\255\204:\217\335J\273\235\037h\275k\252\341<dM\027=\331\357\025\275\326\013\271\274\226v2\275\333z;>\364.D\275\227\321\374\272el\024>\'\035\322\274\274f\007\275\023U\t\275\004\305\324=\016\026\177<<\301`\275\235\245d<\001\246X\274Y\344\213\2742\200\201\275\331L\336\274\371\217(=\230\033\230\274N\357\203\275\010\307\r:\363\237\217\274|P\247=\n<\016\2751\004p\274\310\013\n=\237:\237\275\352J\214<V,\317=\207\261\277<<\313$\275\321\221>\272Mu\225\275\016\300\356<j\320B\275nm\252;\216\311\343<\357\314\005\275RJ-\274\274\205G>\036\265Q>\323\326\357\273(\316\t\275\"\212\244<\341a=\275\325\365z\275\335\271\260\274\304\364\334=,&\207\274\013\315\r\275\311A0\275\366z\222<\345\305\276=&\270\017=P\213\344\274eQ\235\275\376E\340\275P\327\232<\206Q\344\275\263aI\275z\246\304\274\341\247\255\2747\016\333\274{\234\237<\013\347C=\2161\201\27521h\273\177z\230\272\364&\322\274\023\177\363;\235\006O=\000,\234<\"\355\000\275E\265\263<\261\t&\273\350\320\202\275oH\303=\262\333\255;\353X\246\274Rd\235=\330m2\275\247\363\226\275~V\n>qu\201\274~\242u\275\242\241\216<Z\013\301=\221\306\256\273\227\212\357\274\241\033\010\2769u$\275Y\361\256\275q4\351\275\335\210\257<\245g\227=\307&\031=\376\237\020\274\316\254\025\274\244\030\327\274,\271U=\031\234\035=ty\"\273|\227\"\275#\240\025\274E\035\350\274\241\377a\275\335\216\035=^a\036\275m\034,\275\251[\342\274O\364N=\ne?\275\234qx<\303t\206\273\332\377|\275\031\277\206\274\322\300b\275\326&\334\274h\364\266\274$q\\<<\026&=\023t\316\274\273\253\014<\357\r\250\275\230\311\207\274\377\234\021=\242 \037<\325\264b<S\n\335\274\272\343\205=>\234\010\274L\362\024\274\324l2\275\311\232Z<&\305\201<k\304\362<\254V`\275\025\215\202=\221\3376\274\226\037,=T\016\030<xO\231=\006\n\253=\317c\307=\266\022Z\275\242\227\212<09\004=\311\271\002\275\020\356\266=\246\335\003\275\372?\034\275\237\362C\274\020N\265=\241 \201=\341\276\202\274v\266\257;P(\2679\256\023i\274\035\030L\273\227\202\031\275b\275\232\274$\031\312;\0222\303=\233\213\205<\307\363\307<\276\222\312<\307\223\367=\201u8\275\020Xs\274zf\350\274\200\334,\274Vo\355:b\220\222\27443T<s\233\262\274w\363\034=\224M\247\274\216\334\304=\035\007\253<\261\211A\2743\240\024=1\352\372:0\020\246\274G_\030\275\266\211:\273\241O\351<\030T\221\274\217\310y\275Z%\237\274\013\271 <7x\372=g{\014\275\013<\230=\211\220\n\275\276\372\202\270\213yd\274\242\023\301<gBe\275:\213R\275\212I\216\273-\220\006;O5\003=lZ\361=\323\354\251<\016p\013\274\302\201\037\275\224\226\241;\247\365\316:\254|\006\275\205\014\322=\226\204\253<\233Bo=(\311\261<P|I\275D\324\241=\014\3003<HR\227=;\260\013\275\353B\313\274QoZ<_[;=\335\231j=\311\265\364\274\002\276\252<\232QD\274\2345\024\275\276\244\243\275]\013\337=\333K\207<g\207\200=\020\224[\273W\364y\275)S\000=\375Zx=-E4\275C\256\016\275b\000\016\275\022\367#>Uv\0349<\326x\275z\376\027\275\345;\026=*\271\203<\300\360R\2755\373r\274\342\001\372\274\365\024\317\275\325Z\377;\036#\213=\004\300\\\275\347\272\016=\236~\275\273\304\271\230\274\231\337b<\033\300a\271\214bX=\2758\241\274\nX\263\275\214\245u\275\235\306S>\316\373\233\275\233\360\014\275\3775\000<\024\024w\274\212\277g\274\240\010\333;\324Td\275\3644T<\234\3159<\337u)>\221&s=\377*\362=\325\360(\275Q\214h=\3138\030=\341\301\276\275\357\357\205\2753\036;=\375y\305\275\372u\255\274\223\367j>\022F\300\2755\\x=[\013%\274\t\306{=\347\267\227<\2075\242\274F\034\323\273\177\306y\274\206\005\377;Ig\231\274\\\267\254<1\231\025\275\027\014y=`\336\307\275\234\335\330=\315\324\24490\'\022\273\261\030\010\275\300v\303\273\273\265[<\242\010\225<[M\220>\250m\327\275\344\250U\275z\233\341:sT&>\321S\213=\210s\231=\370\211\337\274!)\'\275d\315\021>~\367\030<&a\272=\306\014\206\275AR{=\007\tA<\224YR\275>g&\275\220l\300\275U\020,\273\262\336\014=bT\273\274!\271\253\275\323\237\007<\326\017\031\275w\245\032<\315\3569\275\247\376\033<\265\214\214\275\235):;t\240\314=\310\233\335\274JE\302=\337\337\036\275W\037\302=U\000k9\365\031\352<\304[\n\2752\263\030\275\261&#=\036\016U\275}r\031\275\225Q\254<\024.M=5\313\027\275\3263;\274`\367\276:#r\266\274\212\263\354\273\335\250F\275\342\354\250\273a(\246={?\003=}b\267<c\237:\275\3570\341<\255\211\206\274\035j`=3K\365;\2236v\275\354Y\217<\347\270\210\275N{2=\247\212=<\213\254\362\274\371a\305\275\234?]\274Vf\212;\270\'\354\275\374\210\273<\177\206\330\275\213\212.\275J\351\022\275IF\340<\227O\205\275\220\303B\275\367u\364<Nq\272=_\232u\271u\207\305<\226Y]\274b\246e\275\266\324!\275\tJ\022=w\350\256\275\312\340\006=\206\334\274<n5\333\274\210\234X<\224\220\014<yL\310\274\\\316\303\274,\026\014=\244\004R\275\014\215\016>08\222\275M2(>\'\301\204=\277\320\002=\2217a\275\227\316\210\274vz\'=i1\206>[\"\001=Q\302\330<\213\305\224\273Z]\322\273\251-\262;\263\220\272\275\274\263T\275\311\034\264\274\207\330\227>0A\033\275_\276\221\274\322\212\020=\231\216\r\274\275\246\214\275BX]\274\244KB\2743\013A\274_\005);}\2617;]\363\t\275U{s\2759\273-\275~\034\351=t\363\351\273V\376/\275\314se\273_\265\216\275\203\223\227\274g\322%=\326,\375<)\221\217\275\005-\250\275\346\301P\275\365\253\257\275\303\336/\275\377\335\241<\006s\234:\364\3445={\211\210\274\317\342\\\275\307p\"\275\242<\037\275u\032\300\273\301\027\233;(\035\250;\t\312\017\274m\017\323;e\237\004=?C\373<_W\327\2747\372\257\275O\007\251\273Y\316\246<W\272\353\274\300\340\251\274\240b%\275#{F=z\207z\274itf;v\311\014\275`\013H\275r\245\003\275\\\253y\275\323\370H=BI\001>3\360\360<\021\257\246<#\210p\274|\301c\275\31533\275\251\2336=\004:\025<\335]~<\330\301\253<\325d\022\275T\232\254=\005(Q=\020\341\275=\326z\257\275\220*\030=\026\213\017\275\337\035\001=3\014\026\275\305\021\202;\341\304\203;\233\273\014\275:$G=nX\002\276\341sU;\'\250\226\275yw\035<%\270)=\315L\211\275T\371\251\274\337\004\003\274\315\335\004<\342\303\306\274u\371\263\275\244\2116>\235\300\n<\\\014\326=Y\207\206=H\337\225\275hn\207:|\014\324\274\221MX\2756\232\030=VvE=\222$\243=A<\t=\243\222g\2742A\334;\361\035\346<r\260\002\275=\t\370\27471\327=\351\271\336<\335\025C=\033\313\237\274k\301\246\275\304\241J<\276!+\275+\232\200=\375\177z=\025Jd\274sl\251\273\223\340q<\203\312\023=\242>\017\274\320\n\t=\264~\217<2\014}\275\032=d\275\232A\365\273\274\256p<^\020\3758\232\305\002\273\020\267?=g=%=-O\031=\2440\373<\313\nW>\213\216\256\272f\300+\275\250\260E\274\214*\200<\230\007\224<H\346|=\255?\006=\251y\256;\247~\001=\351\302\275\275\365\006n=y\037V>\360\021d\275\335\030\300\275\245\034\300;\322\013\352\274\272\357\213\275\266L\225\274\3076\217\271\031\222\227\275I\005\'=B\024\261\274\361\325\214\275\251\021\336<<B\271\272\367\341\364<\260\372\336;\250\205\220=\033\353\361<V#P\275\221F\227\275X+\010\275\314P\203=\364\277\037\275\001YR=(M!\275)\316\000=\030\'5\275\301*\250\275%\254\334\274\243\371\200\274\3068\256\274t\023\265<\332\216|\274u\265\300\274\350c\317<\357\320h\275\357{K\274F\343L\274CLn=\024I\013\276P\331\315;\325G\r\275\334x\350=\324_c\271\340\250\032\275M\224\274\274\245B\3659\20106=(\'\207\275\360-^=\360k\335\274h\316\017\274\337N\215>\314NY\274\370\025m\274\361q\272\275\271\375]<w\356\242\275\236\337\210:Bm\254\275`\225I\275d[\310\274\352\257x\274\214\211N\274q\304\204\275S\224\002\275\230\032u\274\217\201\235\274{\275\307;\313\3448=p\2657\274aV\325=\235\200\362\275\"\363\237\273\205\033\246\274\352\261\303\274\327 <\2742\272q=b\3367\275l\320\240\275\2367\210;\036\257\260;\235\023.<\001Q\035\275[E\232\2754M\226\274\224\245\342<\230\207\276\274(t\027\275}\347\323:\322\031\221\274\217\3671\275\303\247\365\275\255\017\321\273\355)\n>#\371:<\352\274\366=\357\221\344;\005?\230\275q\335\242\274.\350x>\204\235E><\231\227:\322)\374<\270\256%\274.\235,\275\224\347t<\246\374\007<O\005\331\273z/\265\275r\211\321\274\373\372\224\275\274\310\t\275\217\370;>\255\305c\275\246\266\010\275\216\230\3339\205C\376<\250E%\275\353\'4=\316\310t\274,\024I\275\223\274\372<j\253\034\275__J\275+\316\367<\217<\036=\000\216\244\275<\023T<\324\337\265\273\270\'\212=e&\236>=[\341\275\0166\226\275\370|k\274\324n]<\030}\037\275\330\003\311\273\361\213\030\275j\233\203=k\264\226\273\2024S:\201\232\030=\340\333p=?\327\231=\334~D\275\312,\203=\023\253m=\366\375\236\275f\002\017>\367\247S<9\365\201<&\224\242\274\305\270\224<\323M\230\274\3430\243\274\036\371h\275\332\211)\275\357\027\335<\0211\"\275\263c\261;\255P\020=\30572>\251\251C\275\350]\214\275\335n\205\275\rs\264\274\275\254\321\275y@\264\274\200p\371<L\3712=\023\371\337\274&=I=\360%M=\236=\222\274\317\023`\275f\341\265\275\036\234m\275\300g\353\273\317\311\211\275\007\237\023==\351\345<\351!\274<;nf\2752\313\010\275>\177\261\274\304\206u\275\000\323\211\274\266h\363<\343\340_\275\006\3500<- \316\275\322\026k\275\271\353\033\275\304\216T<M\203K\2754\010n=y\265U\275?\034\207\272\316=K\273\r\321\330\273\376\311\251={=C=h\3702\275\005\036\204;\3307\250=V\231\205\275h/\035=0\205<\275\363\270B\273\256\334\336;\022r\0029\025}\005=\313\010\277>\235l\206<\246^J\275\321\215\263\275\256\306.=\362V\234=\001\205\033=\233\341A\273\257\\O\275\235\315\244\275>,|\275\2633S<*\254\316\275\216\302?<K\006\033=\026\210\234<\262\n\214\274z`W\274y\007\327\274p\370\243\274\252\300-\275n\344\324;\332V\235\274\214\302-\274G\374Z\275\326\350\"=\324@\307\273B\374\r\275h\267\216=\225H/\274d\263\225\274\317\252\016\275T\312\177\275\355Y\'\275\366k\356<4\242~>\021\341y<I\303I\275\231\036\r\274#R\222>,\350\255\275\305\275\303\2745\2526\275\270Z\327=\320\353\031\275\002\006J\275\236\274\300=\036\014\177\275\354\261\001<\335\337\242\274V\312\232=\024$B<\247\274\204\275\206`\026>S\032O=\004\224\360\273+M,\2758\307m\273\244\224C\274=\252J<\237\324\233=w\r;\275\350\345\334\273A\342\325<\344\023\347\274{*\024;\301i\305=\366\317f<d\306t\275\244J%\275\033\267\032\275\200\024s=\241O\310<6\004\034\275xh`=\317\330C=i4t\275\034\322\372\273\004\005!>0-\200\274K\364\027=E\243\030=\230]\004\275\215\325\036=\260\217\317<\020\t<\275,\366\304<\3065g\274\345U\276\274\311\203\376<\322M\346\275~\035\345<\346\013\215\275}q\010\272t\224\374\272\272\035\366\274\324\317\003=\021~\023=\020\352\207=a\364\016=G\205i\275+E(=\203\352&\275\221\360\215;*3\337\2740\017\212\274Bu\000=$\346^\275W\324\200=\335\213\262=<\212h<\340M\202:\026Y\362\273:\016\005>\323\225\236=\331\030o=\223\240\261<Sq&\274&\241\272<\030\257\005<\216y&\275\370\230\235\274n5\231<vGt<J\021t<\023y\216\2740^_\275\335\345\230>\0050\027<\310\343\316\273\327\220\033\275\3172\300\274V\251\204\274\213\177\224=\206\310\265\274YJ\223\275\212\232\332<\206i\301=\255h\323=\275\304\247;\256~H\275=\276\226\275\2101\246\275S\271\260<U\263\277\274\363\337\177=\003{\225\275\325\313\217\275\367\310\246=y\314\030\274\207\2176\275/\200\252\275\222&\311\274\260\345#\275\307\255\247<P\330*>\360\345\263\275\276;\r\275\352\0258\275\264_\366\274M<_<\323\253\320<\001\204#\274\367s\240>\355\310\301;R6\005=@\201\206\274\"I\3059\2246\215\275[v@<\024GB<(\313\000\275\357\2309;@\340\221\274\233b\020=\245\275\242<kA\311<\242^\225\274\244Mh=\030\233\"=#\037\016=UQ\267=Z\014g\274\023Y\000=\245QA=,\232\213=\302_n=$\252/\275yz\311\274\356I\262>HD\250\275\331Y\304=\035.U=\t9\361\273a:\230;\026\232+>wZ\332\274\346\205\263<\350\230\310\274\215\023*>\276\302\205\275\252\322\t>\263@2\2750i\210\273\272}6\275&\374s=I8I\275x\3139=R\266\251=\307\313$=\247\003\253\274\333s\227=g\221\201\275\315\307\221\274\004\030\237\2736]\373\274\364\007\037<Z\206E\274(\333\306<\004\237\210\275;\355\001\275^\017\254=>\217\217\273\303\007g\274\276>\230<\025{{\275\352\224%>\\~\355;\210\330\032<\004\0172=\365\017o\2751\350\004\275\231\275I;\000\346\250\274\337dV\2758k\007\276u\030\001>\"\321\372\274e~z\274b}\320\275\nx\307\274\222\356\000<\020\375\233\273SH\022=\214\215\212\275\324\231\005\275\255=\344\274\336w\301\274{\305G\275\334\277\267<\335P*\275\360\357\251<\372\221 \275s\263J\273\274\266\276\2746z\177\275\004\014f\274\336o\024\274\260\344\204\275\275\326\021;\250c\022=.m<\274\035\203\230\275\271\351\223\274\315\266\000=\303,\352\274w\330\366\274f\0314\274j\212\342\274\226\353\304\273\250\200\354\274\033\3617:\363M\203<\325\277\264\274\022\300g\275\3359\277<\246q.<j\317N\273\005\032\">\330\330\265\273\275Q\"\275\361\0258\275\324_\356\274\024\2442\275\236H\321\274G\204\276\273\274t`\274f\006\001<\021R<\275\030\262\242=\317\004\355<\257\013,\273\207\213\270\273Z\036:=\320\300_<\353\036T<C\353\312=\231>l\275\266I\000\272\334\203\226\275\007\307\310\275H\331D=@7y\275\317\036\257\275L(\265<$\377\265=\372\224\204\275\212\343:\275y\257\021=\235`s\2752OX\275\2344\t\275H\214k\274jp<\275\375\373$<\322\353S\275\001C4\274\230|t\274()R\273\344\272\023>\005\275Z\275\033\357y\275;\221h<M\204T<x\213\272=\343\2324\275\225\257e\274\220R =Z\337,=\273L8\275\364\346\334=;\315\000\274\023\225\237\275\246\206$=\363>\214\274h\001\\==f\332;\002\005\373\274\242\233\321\274\224\226^\273\220\204\351\274\246@\215\275J\2730=\363\304(>\364\031\036\274F\024\"\275\200V\003\275u\263\020<^\344H=o5X=w\315R=\033\017\200\275{\037\255\2744\325\230\274S\344w<\007r\n<4\235\030\273]\327:\275\313\251]<\304]\210\274\257\016\342\274\272\352B\274;&\244<-\003\254<{Q,=\351<\001\274WIu<\2023\355\273\252\213\254\275ooC=`\206\273=\t\227V<\034z\305;\330\026\243\275\235\031P\274\004\n\2519\000\3539<\305\313t\274\301\007\207\272{\232\264\275\217B\'<\235}1\275\362\324\230=\354$\321<lG)=\02560\275U\014\006\275\3737\\=E$\027<\350)m\273\245~K\275^\242\366<N8\364\274F?\034=\327G\022>\026*\201\275q\331\255=\370\r9\273M\226\222=\022\270\312\275\366\0001\275C(&\275\257\021\213\274\021\246\026\275\250j\021\275\351\333/\275!\206\033\275G\306\317;\221a\333;\321+8>\233\235(=\343\213\224\274\230\357\003\273\214N\344\274\270`\023\275\260;%?v\226\242\275!\252\231\274SX\211=\t\322\241<y\323g<F\2578=d*G<u\263\352\273\002??\275\241Z\275<\240S\365<\207@\211\273\264\3538\275\000\360\030\276\272\300\270\275\0148\032\275\340f\310\272T=\201\275\365\003\212\275\212\336F\275\203Y\222\274*\271\270\274\217\244\034=WS|\275\300\240\223;%\361\263\274\216\246z<7 \241\275*\307}\274\340\004\234\275\264Mg<\016\216A<\277]c=\037\307;\274\276P\354\274\\G\001\274\333f\303\275/\364\270:r1\367\274\025\026\230=zE\006<\005+3\275\232\377a<[\302\250=\032x\220=\361]\376\274\032\314L\275\2032\234\275\317\304\013=\274\273\302\272\231\225\320\274\370\200\243=\200\324j\2740;(=\253\373\344\274)sA\275\257\312\356\274p\341\030<\350\372\267<B\352\255\275\035h\314<\331\245\037\275\373\r.\275\325\233i\274\323H\212\2754\\\314\2742\020V\272\266\250\r=V\225\024\275c\326k\275\330_\244<_u\007=_fn\275\373\2024>[\372\242=\246\263\033\275\372\022\361;\360\026\231\274\265\260\233\274\217Gj\275\223\265\246=\356\313\231\274>\005\312=\342\177\327\274\231o\007<\032\340R\273S\213B>\306\230X=\005\234R=\206)\322\275\323{\317\274u\037\263\275z\032 \275\256k\037\275\353uC>\251<|<\357\237\271<\276\025\334<\177l[;\306\321\276\274\220\277\315\274\375q\335;\232V\201<\212H\033\275\255P\370;\263\210\272<\"\023&\275\263\257\361\274U\020^<O\222:\275\203\356\252=\226BS\275\252\016>\275&\177\352=\255\376\257<\324\340N>\022\177\306\275!\374T=\254)2=\342\0066\275\034\302X\275\236O\267\274H\020\016\274\277\344\321\274n\007\213<\326\266\230\274w<\014=\000\034\306\275E\374e\275\356\316\247\275\322\257\021\275\006\212B=3\021\203=B\331\212\275\236\237\215\274\342\3620\275~\252J;\327\357]<q\274\274\274\'\037Z\275\231F\210\275Q\203\270=\205$#=o\345z\275\036\3332\275\237s\274=\217&\037\275+h\230\275b-C\275\244\207\t>q*j<\235\241E;68\r\274J\254-\275y|\241\273S\266\003?\231\211c=\201\363\305\274\350\346r\275M\254\244\275\341\177\320=\016\t\027\275\240\376\026\275\232j\370\274`*\227\2746\253\025=O\374-\275\270\264G\274\240\346j\272-\301\033=\326\344\024=\343\036\301\273\006\027\240=g2\316\273\233\005\"=\360\222\006<\300|Y\275~\327\231<\nN\305\274\203~\027\275\034\353\256\275\236\216\276\274\2768\303\275\345L\236\275L\311j\275i\265X\272\266\251b\275K,G\275\210%\300\275L\243g\274\005\211P>\247\241\237=\336\337\227\274\354\034?=s\002\220\275$\252\010=\376\253\305\272\361\002\355<\243\325\232<w\321U\274\334\262\332<\365\010\332\274-v\023=}\245@\275G\352\245\274<\020\205=j\020G\275c\254F\275\0100\337\275\356S\001\275\271j5\275\254A\271=\251\345u\274p\270A=\3156\374\273\202\341\374=O.4\275\307v\010=\351\203r=2\313\215\275\223\300\345\274(\207\225\274\010\014\362\274i4l\274\365#}>\274\242Y:\331\311\266\275\262m\342\274\347\240\221\275\0263u\2747&\364<\0143\260=*\366\232\275\264\276s\275\245L\243\274R\217X\274\333\210H\275\014\3064=\022\362z\274\235\373\240=\265\016\016\275M\263H\275\020\'\014=\016\273\225;L\254\226\274[&R;){\201\274@\215\320\274:\321)\275\346\020y;\367\275\251<*\250e\275}\235\253;V\232g\275\213.j\275!HH=Q\005l\275\364\262C>X\237N\275\334=\250\273\240\2306\275A\017\033=@aC\274r\213\034<\372\321\245\275C/\254=\025\331\007\275f3\201\275\227\207t\275\230\333\252;|\301L=\307d\354=\223\260\230\275\'\343-\275\246\373\035\275$\320>\274JM\330=\210WJ\275\340\001\020=PR\326\274\2756\304\274r\322\032>\200\347\2029\374\312\330=&\024]\275\240\365\277\274\267\313\314;GJ\314\274?\204\023\275\316\312\327=\215\206+<187>\000\227\365\274\032Z\365=\227\302?\275\305\032\377<\037\201\t\274\327\022A=\024)\203\274\247l\035>\204\202\316\274\006\211\327<\010\212\262\275\'a\361=\360 \025=\226\234\231=2\225\253=\236i.\273\361n\375\274}\342p:\327\302\335\274\317\370\017\275\212\266\274\274K\014,=\223\264}<a5R<\354X\002>PXx9\006\017t>\203\345\230=h\037\000>\352\177h;\250\252\032;\201\221\371=\020\3409<\257\374\231\275\236Z\373\274\220\204_\275\n#\004\275\347\316\004>a\344\363\273\272\026A>ht\234<\225\343\343<\375\\\031\275\2529\325<\t\365/\2745l\231\275\361\356\'>N\371\204\275\212\366\210=\242~w\274\305\004Y\275\204m\260=\245\260\026\274\267T\207\274\331\022\206\274\365\215\311\274\206\337\267\274/\002\264\275\0163P>M\357\037=\267\307\224<\010\024\353\274\256\017\226\275\367\014\002<\022\016\246:p;\017=\353N\351=r\370\370<\353\177\216\274\241o\023\275a\265H<H\263\014=\013j\037>\241\270\227=\373m\230\275\206\277J\275\262:\351\2748%(<\312\3375\274\334\272l\275\321\365`\273s\333\320\275\300V\203\272c\322\202=\304\300\026\276@\374\211\274\215\352\373\274\316\344k=[\317.\275O\274.\274\322\221m<\301\003\217=\255G\016\274\330D\t<\307|\021\275\347Y\211=\207qt\274\300\312C\275Qd\230<(/&=\361zR\275\241\222\364:[\320e\275v\2062<`\201,\275m\347\314\274}r1\275\252\201\366;\347\346\230\275\344Eh=Y\227\305\274\352\301\003<HGX\2751\231\235=\207\235\357\2748W\304;\026\350\025<\234P;<T\332:\275E\221\206\275\342D\315;\334\351\261\272J\2102\275\234a\026=9`\250=,A\266=\004G\014;\260dM\275@&\203\275\235\3309\275U\264B\274R\026\322=G\324\231\275\226\021\365<\240\212\251\272\240!\206=\345\372&\275\262\013@=\371\006\267\275I\205\214\274\261\234[\275z\310\230\272\342\224\232\274b\232\224;\252\207$\275g$\036\275d\302\216={\357\242<\276r\333=`f\201\274\345\237;\275\223&\250\275<\226O>SS\213<h\353\365\274\340B\202;c(\321\2744\232Q\275\270\351F=\314\255+=:\033\202\275\340\010\306;\270C2<&\355\364=\213\221\213<p\331\211=1Vk<\300U~\275\024\241\242\274\315\3154=\226N\224\275p\364\033>M\236j\273+\321M\274$\247\220\275\217G1=\"\2472:;u2\274\204~*=\002\014!=\252\027\237\273P\032\233\275\337y\214\274\252\235!=\324x\320\274\373~\373\274\252\020\213<\227\271\024\275R~8\275\314\247\307:Bs\244\274W|,>\263\214\277=\373\352\207\2743|\224\273\250]/= \003_<\205\341\223=\261\177\364\274S\267a=\340\006\340\274\206\225==\242\223\213\274j1?\275\325\025\302<yZ\315\274w~\320\275\3653\336<\300\300\214\274}\322\373\274BJ\322\274\025\377\024\275\251\210I<\tef\275\343\020&\275\333\253\320<\334\207\377<\364\252\005>\365]\271=.\203\303\273\rG\331\274\233\254b\275\013Kn\2757S;\275t?\327\272\276XX<X!\362\274\357:\247\275\270\245\204\275\021s\271\274\314\207c>G4\350==\262`\274\200e\324\275=~\250\273\013\273d>\022\371\037\2748\\\272=6\371\214=m\322\230\275u\204\322\274\n\330\247\275\3053\236\275\334IL>\257\360\037=\321\243(=\362R\030>w\010\265\274\234\351\203\275\336K\326<\316}\206<\321\2202\275\347\317\260;\223\372\354\274\235\242\205=\223\005D\275\2177U<\322s#\275\026\350\033; \371/\273\214\205\377\274\327/\331<\203\344\351<\356pu=\350\377\265=\313\023\251\273c+\230\275J&h\275:\206\225\275\222\000b\275va\364<,!\226<|mP\275\230\232\345<\336\017\036\2747.x\275\355|\356\274\357\270<<\331\233`\275\001A:<\310L\010\275\310\317<\275\277\250z\275\341w\342\274\225\260\266\275\344\337\313\274\274\036\230\275\265\001\201<\232\367\303\275\327-\032\274\213\340x\274\254\245\220\274d\327K\275\354\232\250\275w[\033\2738Nw=\341/\307\273\0032\024=\213\212<\275\326\022\006\275\252\003\216<\213D\223\275\327\017|\273l\325\304\274`\026\255<c}\014\275\3064\037\275\261\020\203=\276\314k=\227\266j\273u|\203\274x$\263\275\370\317\025\275_B\325\274\325V\251\275\255\0301\275\235\370\204\2741\237\217<}\341\013\274\332\316w:\232Nq\275\370\033\231\275\021:V\275\315\010\007\275\224\210&=\3557\327\273\202\347Q\275\343u\t\276\354\014\002=]\321y=.vH\275\271)\230=\230`\273<M\277Z\274\343c%=\354>\016;K\377\331\273\324k\223\274\357\000\362\274:8h\275\215=\372\274h\204\027\275g\353N\275dI\202<S\263\237\275\01612\274\260\206\343\274$\024#\275\307\226\257\275\346~G=\275a\244\275q\234\020<\256\2458\274\340\330\223\275\305\320\037\275a\337\223\274\214;#\275\036\246\034=3V3;G*\336=,\030\356\274\374\372\354\275\210]\032<N=\343;1\227\214\274\256\267+\275\302\030Z=j\315[\274X]\317\271\214c\317\273\007\\/\275iY|<[\022\006>cg\372=\301\347k;O\273\336<\210\023\010\275#\351\010=\014\313h\275\314\270\232\272\315N\322\274qOQ\275\364;\210:+\347\'\275\315$%;\354\240G\275\372S&\275\016b:=\022\306\262=\375\340\353;&\331\203\275\020*\246;Qmg\274\315\351\312\273\275\346#\275\005\300\226\273}\021s\274I\220\315=\030\r\337=,\202H\2757SE=y\322 =\033\023\220\275\t\202\222\274d\276=\273NE\210\274\255.\205\275\371\304\313\271\366\010\200<\000\217x\272\203\213\220<\377\343\335\273\\8\002\275w!\261=Sb\302\274\230\316\001=\211\225==r\004;\275\r\316\020\275\246e\270<v\353\212\273\263W\236=\362b\350\274\314\014I\275d\261\315<\270\335\346<\230\313\370\274pH\230;^\341\377<\310\374K\275\0135g\274\326\2327\275S~\373\273o\312X\275\214\031x\275\3523\025=\245\201\370=\355L\025=\345\222\322<O\270c\273g\355\342<%\200m\274\230\234\253>\260M|\273\200\253:\2756\313\177=c\371\273<b%/=M\322\216\274\276{*\275\355\224O\274EM\346;\254\244\230=\253\247\024\275#\027G<\243D\337\275\372l\324<\362\032\200\274\264\024r<\002\361\002=mC\227\274\273\222|\275E\306T<?\236\026<\331/\327\274g\014\265\273\311\226\343;\351=\270\274\334V\222\274\370\214\237\275\353o\227\275\277\340\031\275\245J\n\275Q\274\020\275\274\234\233\274\325\247\003\274\357?d\275\213~\262\274q\301\216=\206\227l<Q\214\264<\255\007\257<r~V\275\254\2461\275\230\016[<\005K\231>\336\006e\274~\300\204\275A\022\321\274KFD=\331a2=\304i\240\275\254\354\273<e(W\275#\210T\275\263\306\227\275\370v\342<\007\312\004\273\223\371\032=q\354^\275Ao\023<\265\316\177=\300\246D\275>\344=\274\365\327\035<!e\024\275\326\004Y\274\373\037\023<\034\364\017\275\202\372\020\275\252Q\034:0z\257\275N\014\005\275\274\246\225=s\247/>h\332\247;\376\235\320<\213\311\374=o\327\355\274\373\376\305\274Sf\227=\205\311\372\274\223\250\227\275\26276=a\267\200\273;\335\312=\032\263n\275%`A<\230\344[\275xr\240\274w\246\346=*\036\321\274\250\177\027\275\002\366\355=\017\247\223<\353\036v\274\262\212\262<\323\\ \274@\021X\274\235\366\252\2746_\036\274W\336\237=\347\'\035\275Jj\225\274\177\252\n=\363\335\275\274\355&\273=kT\025=\374\234G>1\222\211\275QTI\275\303\224\221\275G\213\316\274\261\232N==\277\301\274\023_j=c\211\005\273\367oF\2756\276\356=\203\322\326\272\334\367\205\2753i\256=\234\212/\276\243\241\232=\325\023c\273Q\325\257\275\230\215\"\274<\225\007\275]\323e=\021KI<\312\353\370\275\236\357/\275\022\250C>g\341Q\275\333\375#\275\215Kr=P\312\215\274\346\3573\274\324\336M=\346\212X\275>\341#=u\036\245\275\207d\276\274>P\237<|\340\266<\027 \306<\342\276*\275\nI\204<\253\260s\274\343\202c\275JS\333;Yy\375=\332\'2=\265\335g\275^\020\241=y\233\231;\030\025\365=\227\006\351\274\216\345\322<\277\362\234\275\357UZ=\301\3616\276>\256\271\275B\312\350\274M\235\014<\376N)\274\327\202$\2756\254\250\266\377\034\321=\207\333g=;;\322\274f\235\205=\372\320\356=^\255\204=!(n\275,A\311<\244$\244\275,\322o=P@O\2756\n\374\273\276\312\307\272n\230\275\275\354\215\206<O\001g\275w:\030>\273t\264=u\002\202\275\312\365c\274\333\274\271\274\030|\203\275\305CY\275\240e\261=i=g=}&\272\274\353>\215<\232\237\260\274\365\2022\272\273v\036=\305\375&=6\371\032>I\377=\275\271Q\221\275\031\001-\275\244<\207<_\rH\275\233t\331\273\317h&=~\246\026\275h\307\334\273\311ZQ\275d\366\037\275\020\264\277<\351C)=\375-\335\275\316\035Z\275\337~\221\275s\321\250<%!\"=\003\340F=\273xy\275$\213\036<\006V:=\211\373\312:\227\274\226\274\215\371\\\275\215\377\260\274\316\026\222\275c\314\315\275\257\026w\274Uk\263\275\250\371\177\272\203\037\"\275\253<\030\275\204\003\235=\375\033\237\275*\232\246<\375\242x\275\272d\312\274\232\304E\275f\031\026\275\037\276E=\314\325\365\274.\034\254\274\265\t\211<}\276\214\275\241\270\213=;\327+\274o\300\n\274\3475\275<,J\2619J\177\325\273h@\230\275\303\000\000\275+\242\026\274\232\030\367=\230\344\353\2734\013\204\275\234\326\275<\245\212D=\335Z\233<\204O\205=\034\275\224\274\325\223\243\274\240\352\027=\036*\010=?n\033\2740K\262\274\234\001,9\353\333\001\275\325\251G=cK\022\275P\266t<\350U\'=f\023\374\274\307\207\201<\303\233\235\274\364b{=\215\365\224\275~\310\010=\004\377\263<\3131\306=\344gw<\020a\033\274\267j\343;\201k%\275\274I\247\270\224\202\263\2732\310\377\274\017\222\252=\314\335%=/\013\035\273\320a \275\345\375\003=-f\333\274p\315j<\n\225C\275\202\205\312=\031`\214<aC\254\274\242\257\312=~\206\341;\350\203l\274>\204\217\274\362\036`\275rc\364\274/r\340\274\017\024Z\275\355O\024>\001wG<\252ib=\323\316?=}\236-\274IDj\275\r\247\330\274\256\037e\275\374\262(\275![\205=\345\363\337;\222=9\275\205\224\224\272\0322K;\277\022\270\275\353\375G<\350v\031\275\205\266e=e\250\324=\033\345\343=\277\314b\275\016\006o\275\265\330\r=\275\262E=\250\340J\275\300\224\222;\242\246j<\250\333r<\203\325\376<X\223\231;\316H\013\275\315\213\017\275\343\027\216=\326u\264;\255B\271\274\344a\004=\022\177\010\275\004J\316<\272\tW\275\344\272\177\274\324\355\335\274\262K]=\242 \257\274\254Oe\275R\375V\274\323\306m\274\375\024g\275\322\013\312\273\331j\273<\261\262n\275\322MN\2748M\202\275\312\014\243\274\243\216\033=<\216\214;=\211\261=\243\200\025\275\004A]\275\203,\312=\276O-\275V\274\331\274\317\202\021\275\214\275\230\272v\343\240\275P\222\003\275<\271\266=C\314\247\275P\322\231<!\261\n\275\365\205M\275Co\031\274\'\263n<\270F\006\273p\234(\275\247\023\240=\344\376G=nR\215=\341\305\360=K;\345\273,\232\001=\006\217\006\275\307+\341\273+\226\r\275\357\007J\275p\245@\273v7\264;\003\356R=`\267\235=\236\035\372\274sh~<\371\010\210;:\222\342=-\230{\275F\017\244;\366|\202\275\177\002\025\274\033\343\214\273:|\227\272\216\347\271\273\260\010\255\274v:\222\275\301\213e<\354tI=u\256Q<\366\322\304<\375\201\250\275\356N\221<\231\373 <\344+\223\275\201\014\320<au\237<\3738\352\274+c|<\240{\200\275\312\203\233\274\363\370(>\002\351\337<\324\234d\275\231\226\356\274\237\374a<aN_\2748U\240=\301<\202=Y\216 \275\016\023\034<F\372\342\273\021\330\201<r\326\372<\031\274\312\275U\275\261<\265\3038=8<\265\272\304l[\27508A\275\t\213c<\341jz\274\353\037+=\231\347p=\376\245\322\275Z\t\232=\370\251/=\311\361\257=\341I\027=\215i?\275k$\210\275\354\n&\275\221\202\230>\375\355O\2753\\5\275\022q\242\274\273\243\032\275\220\263\331\2742\300\006<\246\353\203;\333X$\275\200\237\323<\213\2575=\347.\034\275\024\223\274\274\034X\217\275\263\257\213=x\331\312\274\037\356F\275\234\225\222\275\034\213\220\275\261G\333\273d\261#\274G]\206=\370a2<\352\251d\275}4\263=DhX\275d\343\323\274\303\036\241<\320\2054<i\326\263\274\2727\030<\247\267\303\272\222\362\223<\3108\240=\260N\364\2749:b\275S\367\333\2744\357\211\275\250O\203<\362\251\335\274\213\030,=\200\310&\274\213\370]\275\221\033R\274}L\014\274\372\224\246<\300\367C\275\272\332G<\354\253i>^\372\211\275\366\260_=\214F\272=\274\032Q\274]\2050\274n\242\035;+H-\275mIn\274>\003\225\274JS\344\274\372\2503=l9\307\273\n=!\2751\020\226\274}\305\334\273\314|\253\275=\353 \273\214\311\254\2756\017\313\274\006,J<,\200w=S\312\213<^w<=d\233B\275\271*>\274\352\017\317\275\320\223\276<\371\006@=w@\202\274\306=\272=>\265,\273\2230\004\275:)\004\275R{$=5\300\305\274j\245 \274N)\035\275\320\337E<\264\207\203=;\2761\275C[\341;gI^\273\300a\374<\371\203\004\273Z\307\367\274z\363\035=\201\332\306<2\n\246\275\370[D\273H\375\"=\267\337g\274\356\306/\275j\223@\275\302\030\331<R~l\275(I\320<B\211\216>\375$\023=\232\307\377=\3677\216\274\254\234\\\275%\211=\275@\246\353\273\336-\034\275\316\354\365\274\262\352B;rV\210\274\354$Z\275_M<\275\303\301\370<\233\310@\275\035\315\222\2756 .\2755(\\\275\377\330q<\255K^\275\213\013\215\274[\334P\275\260\272\307\274-X\246\274\234\375\251\274\304\200\037\274\210\324\261\273\312`\252;\372\356\300=\374\353\237\274+hI\273H\360\357<l]-\275q43\275\270\223\370=j\213\346\274o\030\203\274u\037\"\275Z\317\312\274\236\335\257\272\200%\024<A\323\222\275\230j\377\273\333\211\274<\256\035\251:\003]\273;\236\247\251<\t*\253\274\233l\215\275\315\314$=S`N\273\000\324\230\275\330\226\202\275Z6_<=\263\311<\372\2611=]?9=\325N\335\273*\033\034\275\026V<=\305\271\300\274E\020\306=M\375\377\274\0340!=am\323=\025\233J\275\216na\275?\3116<i\206\024\274\237\326\207\275a\200\242<\025\315d\275\031\263\031\275\356\313x<\226\'\004\275\230\206\347\274\221\376\2639\244\270\240\275\361\271\312;\365\204=\275\270K\345\274\323\265\201\273T\335\206<2>\203=\340!\257<\217\233H\275\356\005\375\275\025p@=l\3728\275\362j\216<\212\251\030<yH\201=:^L;\031F\026\275H\351x\275\275d\027=\262\177\347\273n\201\025\2747(1\275\210!4\275$\3469\275J\014=\275dpP<\n\306\371\2739\026\240=K\177\"\275\317Q;;\335y1\275b\264m\274W\353+\275`l\346\274|\222\001=\202\325D\272\031\246V\275r\261A\2745\365\016<84\252<w#\202\272\212\264&\275\\\221m<~\226\322\274\337\377\014\275\341^\250\274\230\213\333\274\375g\022\275\3624\033=/\255\242;\337\026\264;\212\203g\274\004\205$=\t\362\r<}\017\214\273xF\310>M`\243\275\301\306\016\275t\027\372\274\351\323\255;s]\027>\341\252\370\273\225\2043<\344g=\274\252t\261;\212\261\220\275L\325\244;BE\200<\227\017\013>sg+=\032B\305\273\033\332N\274s\217\246\275\312\203\006\274\356?\006\274\220\315\030\275K\026N\275\277\034\203\275\203\265\313\274GNO<l\242*<\022\3409=Ss\007\275\242\361#\275\016`)\275\014\207\234=Xfu\275\177Z;\275\361m6\275\327z\360\274\357\t\004\2755\255x\275\215rZ\274,Wo\275\2059\316<\245\366y\275g[\265\275\242\312\010\273\310/\326\275\362\346\272=\026\225\331\274\334!\264\274\302\326\354\274\035\226|\275\250=~\275\"\255?\275\n\202\301\274!r?\275\345Y_\274\377\327\347=\006\014\236<{f\372\274\013`\303=\335$\025\2748\330\342\274.:=97\363\037\275\235\221\206\275|\026\343\274L&t;\001\001\324\274\244C\337>T2\022;\024\356\017\275\321\237J\274B\356\260\274\372\311\231\274\r\340!\275|S\036<\347\206o<I\2066=\233\215\341\274\217,\365<\346\026A=\302\246\222<\277\277\026\275k\254@=B\224L\275\370\315+=\262\307\022\275\026oq;\334\301\014\275\276\203\202=`\304R\273I\\\'\275\2309\263\274\357\r\'=^@\254=\331\337\202\275\343`Y\275\317\351\317<\270m\022<\\\214*\274\204x\225=\032\244\261\274\355\214\244\273F\3237\275|\225\351>\035F\035\275\303\357\235\273\236\312\021\275 S,\275\301-\216\275\203C\036\275[\177\337<-\3106=\311\177\363=k\005H<\000\346\322\274\222\327\013\275\2176\236\274\336\266j\274\374\311\377\274c\333\272\274\265W\253=y\\\216\274\346%\003=\260\260\275<\223i\202<6}\016\275HI\241\275.\360\207\275\024\245\207\273\230\343\271=\310\006\007=fa\303\274\352l\036>o\225)\273|r<<m\334\204\275\376N\022\267\326YG\275\246\306\317\273\221\264\332:\301>v\274\300y\327\274|s\351\274\254@,\274^s*\274\240\274\243\2733\326/\274\242\0026\275\022M\220\273|\230~<r\313\362\2734\320e=\006\215P\275\312\2644\275\263\035\275\273Fr\t>\364\225\212=UAy>\2447@\274I\260\357;-\235*\275v3\202\275\230\004\030\2755\0058\275\261X =\347\320\233\273\247\244/=\310/\215<NL\r\275\316c\212\274\310Z\373:\350h\200=nHh\274\033Nb\275\274o\216=\033\264\024\275\237\310Q<+h\227\272M\210\265<\320\347\032=\215\215\014<\010dm=\344\305\224\275t\313\251\274\340M\262=\314\274\365>\007I[\274\036d\216\275\025\230\201\275z\250\245=\000\210\265\274(\027\357<\321\275\017\275\233\021\005\275\rr\207=\237\026\032<\331\027\274\275\004\2373\275r\212\235\274=i|\273\3020\225\274^\213\203=F\316\303=3\332\016\276\004\202\220=\376+{\275\232j\221<}@w\275l\253~=\225\266\264\275\272\375\206=\271D\362\274+W\353\274\366h2\275\264\265K\2755\020\235\275w9O\275>\310/>\264\333\200\274\266\016\025=\020\253\216\275Y\031|\275*=\275<\210\260<=Uk\276;\340\201\236\275d0\342\274\256\307V\275\330\203R\273\242\344\202\274\243\265\203\274\230{\211=\020Z\227<=wf\274y\253\'<_I\230<hiA\275\177\027\325\275\254\254\304<\311\324\024=waJ\274\205\2137\274\220\370E\275\341\343&\274}\017f\275\272\257)\275RH\007= \203\025\275\250 \377\274jV\013>\\j\273;*M\337=\250\275\237<\020\315\222=\343\255\304<fn\021\275\000@\033\274\326r9\274\356\3013\275\240y\226:\323\006s\275L\323\214=\270U\021>\3572\215=\274US:\264\327#\275R\326]=\243`h\271C\377\213\275\020\330z\275>B\221\274\r\333\303=\265\235\346=O\240\266:9\253\220\273\247\017\026\275\307D%\272\035\340\006=\270\r\320=\323j\013\273\342\r_\275\0012\352\2747{\220=\340>,\2741\014i=,d\005\275.\016S\275\272H\273=\351\223\017\275\006\013\020<\356\376\246=\'\270B\274c\325\320<\205l*\275\230\274i\275\202_a<\265\207o<\303JQ<\304\377W\274\020\344\233=\216\317\370=3[M\2732\230\206\274\371|\306<\334(\265\275\002\311\364=\245l\034\275\270\016\237=\020s\364<Fl\002\275w\335\371<\273\240\003\275\307\001_\273T\246\n\275\004\023\214\274\315\303u\275\266\206!:Q\371\305\274\363\276\205\275\254\267\177={\\\261\275\370\354\342\274\273T\304\274\357Q\227\273&^\243:=\017\305\275\2418s=\211\230\273<\230\322s<rB\257\275\233c\275=\255\356\014\275\344\257\010\274\316\361\023\2751#\216<\023q\263>\307\227\r\273\366D\331=\201\362\303\274&\374\371\274y\243\215\2741g\035\275\r\255&;\265\377\222\273\310*\335\274\362+>=\347\312\317\275H\330\362=\263+\347=\365\241\\=\204\342E=\346\014i\275\235\373c=FN\225\2750\245\203\275\0133\r\275\340\211\211\274\337mI=G#\261\274\247\020K\274E\345\\\275e\224\021=\202\247,\275I\330\237\274R\'\200\275\030\020\206;T1\247\273!\330\026;\312\275 <\004\232\205\275yA\002>\177~\307=\211\237\300\274)n\214>\264\240\377=\351.9\275nF];\217\237\226\274\026\336\204\275\032\334G\275\346\200#\275H\227p\274\177\336\260\274\236N\257;\0327$=@+\247\274u\264G\275Z~o<\216\375\261\275\201K\273\272\316\023;\274n\322~\274\030}y=\244\010!=a\350\301\273QM<\267\267t\026>\275\315y\275\245\275\\=\307X\251=)\2760\275\341\200]\275\215\250\n\2754\334\323=\275V\017=i\350@\275\353\340j\275P\006\213\275\3412\370\274v\005\325<=\243\301\274\231U\333=\263\270\236\274\222R\311<\372\221[\275\235\346\246\273z\377\201;\252}\037\275\315r\013\275\264Qz<\013\307Q=\021QB<[\226>\275\367\225\312\274\014\026\'\275\345\270\033\275F\025\232\275\272a\005=G\005 \275\325\372\340\274\231*\306<\200\311H=`\\z\274\010\246=\275\013A<=\345\026\234;\366\307\205>\342\211Z\275\211\330\032=\232\376\364\274\356<\n<\225G\"<A\023\025<\026\246\300\274\375\237\000\275\346\006\324\275F\363\034\275h,\323<\306r\363\274q\030\364\273%z\022\274\231\2505\275\314c\206\275\361\237\r\275\353\227 \274\320\217)\274k\007\030\274u\341\3539\253g\365\274\322O\235<p=\331\273P\016:\275E\366\320\274D\357i\275\263\203\332<\357\301\035\275\033\000\310\274\253\342C\274\2603*>M\225\274\274*|\006\275G\000\241\273\222\2462\274s\235\316\274\363jN=]\251\332\273Hc\020<v,u\275\267\324\021\275n\246\303\274\200\265m\274y~N9L\352t\275\216bZ\275Z\021\212=D\311\201<J\'\207\275\203+7\275\217\237\026<\305\352\241\274%\001x\274\315\035\221\274\363\212u\274\021(\261<;\027\022\275\r\227\265\275\371\253o\275TP\314\274\027\366S<\237\351\225\274\206#\255<qe\201=\'\272\001<\3440\265\2736\326\033<\302G$=U\325\n\2757\333\003=\2736z\274\224h\213\274\033Bj\275QA\217<\\S\002\275@\214\t\275\367e`\273\257o\007\275\343\226\246>E\376\302<yw\'\275\010\357\232\274\004HD\274\254\370\240<y\020\026\274\371\227\037\275\002&\024\273\254\261q\275u\017;\275\201\363\002\275\320g\333<\242ch\275]\177y=s\335?<l\232S<\014=\031=\343\367&:lQ\274\273\215\001/\275\371(\276\274\3448\n<;\243\3619\314\300t<\274\002-<\272\2156\275:|\236\273?\032\316\274\305sZ\273\276\272\313=dm\275<\213~\217\274|\354\254\274\356Kn;/\2236\274\213\367\233\273\321I\217\275\311*\377\272\317ql\275\367\261\270<\005\\\255\274\351\271s\275\225\023\013=0g\035\274I\247\373\272\366?\255<7z\'<&\0005=W`\351<h\243f\275fZ%=\002\266\232\275\312\355]\273<\002\233<\232 \315\274x$|\275`,\350<r4\320<f\005(\274\031\207\013>\251\263\216\275\313:\210;\007\326Q\275\330\\\226=\270\346\352\274\350;R=\376\275o\274t\246\037\275\2615S\275Z\327\014>\236,\321\274{\270\336<U\237$=\342\003#\275\324\352\256\274\330\204j\274\353\236\277\275U\261\207\275\221\346w\275\222\177\203;\020\264\203;lV\265<\215\3717\275$\2672;\236\275\304=9\016:<L\232\177\273{\373/\274H\242\'\275;\201\002>\210{\245\275DT\221<\216\341\'=n=\330;\204\373\335\275M!\364:\233\261\364\271\0134Z\275\216\035\230\274\263\310\014\275G\263\t=\261\230|\273\214\376\020\275J\334\223\275|Lt\274\344@\303\273\241\232\304\274\2702\334>\006\352M\275^\216\000=\342\346\254=\026\306\314=\346%u=\276\026>\274\340\016\236\274cM\362<\021\257a\274\224k(=\310}\252<\225\210\253;}\3046<\341\2716\2752\356\341<\354\262\304=/\364\363=\270\2524\273\213\257\207\274\372\245E=\357\022\300\275\033\361\035\275|70=\252\276\207\275&\3312\274\000\233-\2759\016{\275\326\300\346<\347\247\205<\214]\230=\337\321\034=\005\302\007=|\034$<~@\241=\303\312\222\275;9y>y\206\246;\263\247\022=\314r==D\207\013<\327\247\310\274F=\001\275\307\330\301\274\375\277\200<(\227>\275:D\202<3\0317\274\327Q*=\273\010\220=\367\'\360;\322\231\364\274\372aB=\320\374*=\"\320;\275Y\244\202=\376\361<\275U\234{\275\212\024\227<A:\030=L\020\261=Z_\017\275\354\000\204\274d9\036=\032]I=)\325\203;Y\337\225\275a-N=?\024\267\275l\262~<\276\325\226;6\340\017>uo\347<\202\335\241<\335\347\247\275\017$\246=d\256\235=\353\231\377=\332\003v<^\351\267<e\3353\272\341\001\322\275\006M\356\274)\302L=\340*^\275\014\204F;\277\316)<\030@Q\275\274\347\301<\205\311\301\274\312\367\177=#P\340\274/k\301=0m\203=c\321\372<\374\311I<\017\233l\274C\2316\274\355JR\275xl\356\274F\324\216\275\355\215\213\275\224Y\000\275\010>@\275\362\375\256\274}z\325\271\365\257\305\275\025\262I\275\301\000\356\274\365\'\010\274\221$\301\274PD\000=\020\372F\275\205\263@>z\211/\275\327%\250<\206\246\226\2752\214f=\250]\216=\273p\000\276\372:\013\274I\345\272;a=\277\274i\000x<\002b\016=\360\220\"\275;\305%\275\032-\341\274\r\314x\275\3516\210\275.M\227\273\336Y\273==\374\031<\311\203b\274X\344z\274&4\260\275\240j\234\274\223\256\024\275Bu\243\274\212\312~\273P\t\216\273/\254&>y\300%=9U\277<\367h:>\tz\310\274\370\331\277\274,\265\224\274\304\361M\275\357X=\275P\177d\274C\362M>\210[\255<\247(\243\274\356d\241=J\301\026\275\341P\342\273\221=\346\274C\332\026\274\n\305\023<\246\227+=5h\302\273\233Y8\274\247\244\215<\321L\221\274\252\nI\275Z\375\353\274)6[\274\235v\204\275\355\260\344=~p\r\275\262\334\373\275\246\251\236<\367\2232\275=\242\257\2757\030\226=l\346\330=\250\200\273\274U\340\275<>\330\355\273S\347 \275\363\252\243<\023\021F\275A\270 =\nT2\275\364\322_=\264\3367\274P\354\322\274\251i\335\275\"\210p\275s\037\014\275\371X,=\371\364\205<\216\332k=u7v\275\006\316\205<\206\274E\275:\033n=\222&6\2753\034\334=\246,\026;5\251\023=\237o\t\274\357\202]\273z\037w\275\351.\276\274\337\025\303\275Dm\002<\2332\236\273>C\361<\375Q\257\275\034t\'=q\257\250=n\2745;\211\3649<\317\205\216\274\346z\345=P\370\004\274\002\323\257\275+\232\325:\252\202S<\202&\307=\326\336F\275Jr%\275\361\312\234\273\206rY=\211\350F\275\322iE\275\355h\177\273\315?\005\275f\316\356\274\3071\232\275=K`=\350%\t;\227\271A=o\317>\275\026\274\352\274<\332n;\020\365\322\274\210\362\276<\342\000-\275\270*\371\272nve=a\010\035\275j\3319=\260N\335\275\340\333\334;\336_\207\275LXA=.\247j>4\362L\274\347P&=\331+\032=2\273\216>\254F\266\272<g\022>\362\205\335\272\370\037\241=\351\005\212=\274(K\275`\350u\275!+\207<W\232L\274,\201\322:\373\262\336\274\337\016\210\274\026Z\r=\205T\303\274O\034\024\274\rTW\275\336\234\214<@vJ\275\223M=\275fV\351;\320<\340\273\326\025\255\275f\361\'\274uoX=C\363\010=I\002O\275\320b\362\274\236\250\352\273\000\025\305<M9\351\274\032\024M\275\253py\274\274*Z\275H\342y\275\230\343j\275\030-\206\275\313/\306\275&\342\205\275\306\320S=F\250-\274Od\024=q\234\253\274+C\302<\341E\230\274ox\210;\363=\220<\254\360\302<\341Y\303\274\276\216&\275\254)\210=t\371}\275$4\203\275\352\350x<\'4\016=\343<p\275\t:r<\240e\223\274\003\024\230=\021m\014>7\365W\275^\213\021\275Y&\003<\261\007\217;h\025D\273\027\212\201\275\305\260\003<\302\204c=o19>\376zM\275\206J^;p\2761<\025\265M;\214\267\224\274\272\"4\275_3\266\275\330\273\230\274\016{\211\275\323\336\227\275\026\332_\275\310\277\262\273<DS\274\227\3126\275\374\tg\275\231\025\356\275\272\277\014\274\266y\354\273\364\250\003\275\363\003j\275)($<\363\326\350=\250C\376\274\263{8\275\263\223\211\275a\341\226\275\355|$\275\265\020\375\274\327\222/\275\005\364\256\275\324F\027\275l\243r<\035\274[<he\213\272\376\223D\273\222Q\373;\200\017\310\2747\236\355\274<\377D\273\003o\202=^3*\274C|\007\273\177\007\361\2743\257g\274K\270\037\273\324\276M\274+<\032\275UT\341\274\335\207\001\274\2161\301\275\327O\207\274\206Z6;\355(\215=\205A\327;C\323\223;\363\000Q;x\254\035\275(Sm\275\365\306g\275\242\032M=n\026\010\275~\303]\275d\3714\275\246Hl>\365\277\215\275\367|\200\275\002\353\204\274\346\207\022\273h\277\301\274\366u;\274/\245o\275\353\256K\275u\336\234=r\212\272\274h\032\201<\254\236\322\274\242$\035\275\377\335:\274\023\302\354=U\257\321\275\267]\213\274\035\003\306\275d\243\203\275\001\204!>?0\362\274m\200\233\275#\313\t\275W\243U\275\257W\216\273\310\036\030=a\177@;\237<\240\274x\305\303\275\265\364@=\004\254\265<Nt\244=\324\261q\275$\375\206;N\300\243=$\254\007\274\177H\177\275\254\276\016\274\350\330O\275`N\024<\007U\024\275\"\333+\274\376Tp;h\301|\275 \332)>oO\267\274\336\311%\275\031\277I;g\270\230\274\n9y\275\355\303\335\274\221}\'\275)I\213<\325 \305<\017\027\216\275\322\242\241\273\334\203p=y4\\<\332\"w<\252\256\220<P\355\277\274H\252\224\275\002iY\275\332\227t\275\016\351\343\274itU<\327\024\326\274\356\n`\275\270\204\230\275\026\2116<:\376\227\273\312\331S\275\351\360\023\275\3132\004<wZ\031\2754b\323=\272\022\251:uF\376=\223\304(<\364\347\237\274\236\335\240\274\342\315u\275\253\343\376\274j|\010\276\253S\375;\360f\226\274t\317\t> -\227>\271\376\037=08\342<\257\256\325;m\233z<\356\206\227<\363\207\354\274\261\215\001<jh\221\275\217\032\203=\210x\007;.\\\r=[\247\321;\334\002\025\272\340\376\236\274\216\213\221\274A\2658\273\'\205\256\274\210z\363\274=S\032\275\230N\222\275\201Cq\275``\264=\353\345\354\273N\1770\274u\367\r=T\376\000\275\206\207\265\272\250\304\275<\256\220P<\302\330\205>!\032g\275z\353>\275\304\373\224\275\3447\247<\031\261\354\274\315lS\275\315\3729\275\342a\207=\014\303\247<X\250\356<(\021\301\274\004\264\351;\217\336\306\272\244\277\230=I\026@\275\033\014a<k\335\231=\357^\263\274\216\236\300\275t\0254=-\250\305\274\3249\215\275%\366\332=]\274\013\273\010&\036>\031Kt\275\2542\331\274~\330J\275\366\306\212\273\323\265\346\273\253\036\025=\215&\210=6?7\274T\274\207\275\245bg\274\3629\233\275\264=C=\273,u\274\374\034\211=\363hH\275\362\"\270=\273\273Q\275\0268\253\274o\372\266=Nz\262;\363\376+=\306\314\240<\005\316\225\274i\353\217<\232\313\224<\01053\275\241\360\027\275\231\035\377=K\014\005=\036\025\214\274\335\340\3749\235~%<H\033}\274\034WE\274x?\352\274\363\377*>eL\t=\217\007l\275e\243\304>\026\201\364<\024Qw=%\377\020\275\234\223\217\275rd2<]W4\274\3429\344;\232\376\261=\334:\031\275\256\035\005=\266\277\376=\250\030]\275\222\332\210\275\335\014\265;\360k\201=\275:5\2756\\\'\275\222\"\212\274\362\301`<\306\270\272\275\'S\000<p`\177\275\256D\235\274Zi4\274\233\373\302:+\3456=\027\273\326<\213\323\373<+mb\272\376\247\300\274\205\340\345\273M2 \273c&I\275\346\205;\275<\232\204\274\214\213\335<z\034\020\274\214B\017\274\017f,=\335(\275=\001\265\202=:\005\005\275\233{\333\274\260\2300\274\326P*\275\310\332\317\273\222\003M\274\262$)\275\032F\271\275!3&<?m`=\013\206Q\274a(\"\275\255\266\231\275\327\200|=,4\240;s8)\274g<\202\2724\353\275\274\031\240+\274\362\350\220\275\254\262\366\2744\350R\275\225\007\001\273\363\252\"<+\020\257\273\272\245g;\350!Z\275oK\347<\245e\222\2714\341\240=\354DA\275\264\260M\274\311\242\027\274\001`\203\275\037\363\241\273\237H\271\274\307\t\326\274\363\362\032=\342\0040<\273\262\237=\202\212\220\273Q\322K\275_\202\211>\005\304\261<\335#\206\274\227Y\305\274\'5\232\275\263\203j\273\307\277Y<\313m.=\305M\"\275\027a:\275/\256\250\274{\312\213\275A\373\207\273+\236\224=m\376\254=93y<\362s\r\275\241x|\275\350\3376\275 \005O\273\324=N\2751\207\244<\212\325\010>O\263\211=\030\0216>1\006K=\343\331-\275\315f\216<G\261\n<\342\231\210\275\307o\231;\254\014\'\274\316)\255\275\376D\357\274\325\001\336<b\362n\275\210n\016\275o\"\250<\023[\267=\221\376\034;X\200M=,H\200\273\330Y]\275\003A\316<\033w\375=\230M\212=\0252\211=i\021\030\275\366\373G\275*\373\312\275\325m\027=[\3724=$\217\317\274\263*R\272{h\303\275t\215r\275x\024\022\275\030\006\257=bf\006=\336\031C=\nB\263\2745\246\317\275\363\321\033\2752\326=\274Ok\236=\255\261I\272\"\367\032\275\313\026\271<\004\205\215\273\257\242\345\273\374P\002\275\006\032\234=n#\261=\002\001D\275\ncD\275\024\303\361<\325\241g<\030\036-\275!9\330\274;\242Z\275\226B\375\274\007\277t;\024\271|\275\204\307\325\272\327\357\264\275\327\357\234\275I\364\000\275\n\3111=\341(2=\035\257\254\273U\214\237\274*\334\214\274\354yX\275a=\r\273,\013.\275\300y\266=\240\2120=5\010\272\274\321\276\253<\326R=\275\221\177\223<Z\211`\275\014\023\t\275\255n\232\275\335iv\273\032\t\277:*m\032=\032\361K;\207\357\303<\232\315\207<@\373\233;\177\366+\275c5a=\223\232\235=p\2637\275\216\303\224\275\374=O\275\261U1\273\001\315X<\263\007\226\274Z\240\242\275\276\266\033\273\255\204S\273A\327\003>\361\257\020=(\337\206\275\335pd=K\341\217\275[\001\211;igI\275\376L@\274\271\355\231\274\003\243\333\274\274x[\274\204\241(\275\037\361\206\274\322\261\377<*Ku=\031\002*:\360\352{\275\034\035\007>k\375l<`\354\356\2743BK\275\223\2307=@c\216\274\001<\n\275o\341\317\274II\203:\241\227_\275\210d\257:\251\212\003\274f\260\212\2752\030\033\275\326\002\215\275/\034H\274^\252\264;\202\314\266\274m)@=\311\266\310<\214\341\267\274~\304K<\340\351\230\274\360\n\312<0F7;\343\374\314<\227\240\036\275\251x\023;\255}\357\274@Q\216\275\032\253\335\274\323\362\017\275jI\200=\337\221\200\275\037S\213\273\3371\000>\245p\237\274\356\203P\275}\t\037=\273.\201\274_.M\275Tk<=\351\241\005\274K\220\241\275\230^\376;\274B+\275\323\340\002\275\301\365\224;\020\203I=\003\334H\275=\301\222=\377\323\241=A{\177:E{`\274\267f\025\274m(R>|\314\235\273\352\350<=\304Ci\275*EX<<j\022=W[\240\2740\333l\274?[\223=\304\364\210\273\241/\207\273\031Qp=\356\236 <\373\304\036=\331,\202\275\332\365\232\274\245#Q=L\007\376\273`\250\350<\323\307\253\274oM\257<\360R\036>\356=\274=\024\271\206;Zq\020\275\033\030\320\273^\272\231\275\3031\207\2754\257\356\274\324af=#\267-=\374\257!\274\242\002\235;\365\333 \275dP[;\331PX<pui\2754\000\245\273wA\000=\372\251\356\274\360\203\375\274\353\247\026>\343\307\350\274\311\277=\275h,\247<\333_\336>\206\270[\273\372,\022>\202\263\264>\330#\222\275,\334\212\275\260FY=\357\232\377\274B0\301\273\204b\206\275\203\232\t\275\0351M\275F\t\031\275Q\"*\273Or\217\274lB\310=\275\314K=\236f~<\355\346\240\274\2033{=\254m\261\274\277(\233<\003S\301;_a\351\274y\236\246\275O\2255=#\310\363<AV8\2758\217s=\013q\212\275\234\300\245\275\266\261\230\275\224\202Y<\313\376\246>\262]\314\275:\235/\275\302\335\006\275\322\304H\275\013\252f=\250\357\327\274\200\327\342\275\327\036<<\330\017\216=S\032\306>\2045x\275\215\262\350\274(\007\024=p\322\222\275: \257\275\247\232c\274\031\324\305\274\030\275\t<\235\'\"\274a\377^\275AK\002>\250\226P=H([\2758X\334\274k\317\220\275\241\345\023\274\251\274\032\275\325e\204;k.J=\203j\204\274#w\235\275kN\326\273`\001\364<\272\244\343\273\020l\377\274Y\274\032=\346\214\326\274/\n\264\274NB{\274\213\330T\275\375Y\335\274\027\345\273<P+<\275\201\343\"\2754\253\311\274@\264\250\275\322b\222<p:\337;\335\377\213=\'[t<2$\330\274\311i\322\274uU\352=cn\323=O\246\344;9hR<\023T\035=S\304p=\342\215\177\275\312R4=\340\267$=\237)\226\275\307\327\306<\226\"\275<v\271W\275@\276o\275/\261\300\273\316\352\010\275\235#x;<\300\365<rg\317<\003=\205\274Rv\302<\034\274\326<p\221A\274\364\241\227\275\345\230`=\364\302\345=\220\341;\274\345/\353=g\316\267\274BU#=\205Yr\274\006\302\237=@\362\355\274\224\365\272\274\320C\242\272\237#\346=j\370@=\343\317\223=\234tP\275\332\202\346<Z\367\263\274r\005\251=H\005d\2757\2362\275\202\346\236\273\311\235\001<\\\202X\275\016\216\t=\231\373\320\273\241>\277;\304\177\316<\241\251\266\274\242\323\274\275M#s=\177\313_\274\362\306\030\275_\340\242\274\353Z\033\276\201\353\345<\202.4\275\246\2032<\245\325\331\2753\2417=\363T\036\275y\023\265\272\204]\346=\306\356\205=#(\337=z\034\256=\004r\344\274\210\343\027\275\212m\006=!\321\263<\204>\244<\362\261\261\274%\376\n\275\002\272\322\274\331+A\274\326\240\037=|\332\276;\217\343\371\273\r\242\025\275ei\272\272$On\275QS\020=\2020\204\275\n\177)\275\254H\211\275\304\364\350=\321\221\020=J\023\250\275\361\222\317\274\nP\020\275/&\214>\307\"\004\275\310\004\337\274\305\232*=\374\346\230\275?lK=\241\026]\273\251\314\214=\250Q(<\010\260\020\275P\317\371<?os<O\255\007\275\204\005\370\274\032\300\031=bsZ\275\317\340\272\275\025\215\242\274\332\303F=\007\262N\274t\210\026<M\233\037\275\215[\216=+\301\234<5\250R=\21309<n\241z=`Hi\275\241Pk\275\'08\275\301\257\235<Kp5\273\313\213<<I[<;\210&u=\340\"\330<\357\272\244\274K\237\021=\213\013\003;|\177\326<\337\214\251\273\262\202\010\275\271\004\342<Wf\010\274*\326g\273\360\211\'\275\344\352\372\274/\237r\274dM\021\275\r\000\000\275\207$3\273K\246\227\275/\256z<O\364\212<nk6<d\340\362\274\246A\311<\017)\025<\366\215\215<\026\037?\274^6\231\275\353\354\n<*\250`;\336\345U\273\244\rv<\311D};wu\t\276d\314[\273\014\300\271\273\222-\244<\262t\252\275\036\273\262<z)\264<L?\016<\371\263L<\027\345\021\275X\256b\273\222q\277\272y.\211<\242\335\021=\032\335\314\274\263\326\023\276\222\377\246<7aM=\223\331\005\2757\\<\275\010W\214=\213j\307\275\000\014n\275\006\2757\273$n\306<r\372\'\275\306\312\207\275<\225\210\2715\003g=3\334\347\274\376c+=\227#\213\275$E\321\274`\335\324<\210\255\000\275s\232\277=\276^\371<X\243v=\230\2133\275<\"\023\275\214\376)=\021\021\016\274\361\224\363\275\350c\237=\236\362)>y\313\232=\244\235\376=\252t\255<\364>0\274\373q\351<\356\'\014=KH\224;\364\230\213=\2157W<GH\010;\240\tT\275z\206T\274\226d\341<M]\336<\253\377-\275\347_\315\274\245\256\003\276F[\n>I#<\275\262Px=\267\031\361\275@w0\275\227\350\211\275\322\246\031<h\006N=\304\333\207\273\225b\364\274\366\004\274<\237\0020<\224\304\220<P\333q\275An\t\275\355\255\207<\3668?<C_\352\274\026\267\371\274%O\242\273g\262\301\275\212\244B\275z\001\237\275\257<,\274\206\252\206\273o\306\305<\212\017\322\274\302\271 \275\\\267\016=\331\263\200\274\373\350\247\274\235*\216\274\352\372\305=\304rq\2751s-\275\326\301X\274\245oD\275\214\336\213=P\021&\275&{\371<\321\356\'\275t\364\240=\010B\360\275\254\350\026\275I\204\366=\322\001\017\275\034\361\210\275\007\0326\274\343\377\036;\346o\223\273\326*I\275\232F\314\273\032\310A\275\022\255\252<\242\310\024\273\211\312\352<d\220\016=\212\353G9\260\367\317\274\001\230\023\275x\022\235\275\350\371\004\275\014\354&=\2200\216\275\242\030M\275\014~|\275\247\375\235=\302A\331<\r\356\320<D\312%\275\263\226\347<4I\240\275\347N>:cb\326\275@Y[\274\000\010q\274uT\032<\031\360\206\275\221\362I;\221\215\242=o\226\203=I\036\220\274\342z\355\275)a\270<j6\302=\033\007\023\275\026;J=~\337\346\275\273\226u\275\216\251!\275\212\301\002=\330\203^=\277\223\254\274\256\023E\274L\212\325\275~\302\250<\353\325\023=\273W\200\2747W\250\274M\323\n\274\213]\277<z\226\r>\211\350\235\275\274\312\311<s\313>\274\032\332A>\325\316\035\275\255\327Q\275\004\245\302\275\027\0047=4\367z\275\264\331\373=\271RH=g\314\374<\307\320\003\274\321\311[=\006\265L\274\317cR\275C\007Y=\223(\212<\311\325\354\274\214t\212\274\325\026\263<\361%\201\274\344\n{<\332\325\027=\364h\002\275Ce\267\274B\326>=\357!\222=rd!=G2\'\274.\304\200>$)\365\274q\325*\275\350\261\3049\2237L\274S\210\226\274i/\205=9m\271\274Nq\032=\205\346C=q\276\002<\251W\274\275\351P`\274\037%\026=\264\227\277<\016\334+\275\262\241\332\274\226\345\320\273op\270\275\257\241\255\274\\lH=\016\377D\275\263{g<\306\311\302<X<\237\275\233\360\203\275Z$=>\212\350\302;\336\t\245\275\031^\371<\326|C=\367\350\"=\261|\036\274\342\252q\275z\010[\274>3\226\274\253Sq=\205\205\000>k\243S\275\342\371\030=?\006><8V\234\275#O\"\275\2475>\274Z\351L=A\244\022\274\203\231\326=F\337\237\274\205\t\001=P\006b;\346\374\312\275m]\341<\214\377]\275\313C\220=\020\366\020>\003m\206\275(\233\241\275\301\321\224\274\203\010\214\275\204=\232<c_g\274\216)\016\275\013b%>o\215Z\275\272N\032\275\260\204#\2754!\202=\376\324J=;4\203\274b\200;\275\220^\275\275\266\223\247=!j\266:\223\325\372\274\310M\027\275W\243\322<\310\371\002=\203\337\024\275\270v\203\274uu\346\273v\030\240\275z\331u\2741\346y\274\037\031\240\274\001\005\201<\316\"\340\274\326\244\250;\264\266\034\275\273\202\314;9\2455\274\266\024\202;\202\356\334\273N\277\336<\333\204*=\366\317(\275\340\226\246;\345W\202<\2453\026\275\224\2513<\366=\321\274\213\034\331<J\210\262\275\037\232\264<\276\006R=#\270\035\275\251\351\r<r\254\262\2752\335\003=k\220{\2757\366F=~\212\016>\200,+=\373o\227=Wu\310\272\207\346\005\274\215#\201\275\376mt=\332\267o>O\025Q\274P \251\275U}^=KV\240\275nJ\242\274\022\366E\275\354}x=\336\226\010\274\342\001\273=mMM\275cA\217<\331V9>\215)\302\275\305F-\275\211\357\021=\376\264+= 1\007\275\026\200\317\274h\307`\275\271\340\003\275M\374B=\023\322\347<\013\030\204\275e\305\223;\301\271\224\274\213\325\330<=\270\\\275\370e\177\274\016g\270\274\314\231k\274\205c\322<x\376\265=\372\177\345<\263\004\205\275\3768?\274\330\3023\275Z\261f\274\377v\211=\263\257\302\275\251\266\320=>\273\353::\326\213\273D\022\236\272\265O\203:\252\346\205<sO@\274\247\005\034=\250~\233\275@g\300\274\201\267\213=\rSA=kX\314<\345\027\320<\n\006\244\274\001\302\373\274\373u\351\274\020E\206\275\323,E=\013\310\253<\201\032\331\273\201\237\220<N\221\264\274V\324H=7\250r:c\004\271\274|/\177=\245\330\310\2755\346\340\274qS~\272\306\337\237<\205\224\001\275\334\245\303\274\016>\n\275{\315\232<\027\240\356;7jR\275\332\275v=\302u}\274\332\r\034\273\312\270\245=^\343\035\274\267,\336=\247Go=. \305\275\213\224\207=\206\356\275<\302c\372<\032\244\305;o\226\311\274\357g\346\274\336}\226\273j\200Y\271}g\307\274\032F\024\275\333\226\220\27538\003>}\355\013\275\350C\214=\217,\'=\007X5=\243Q`\274\377O\033>#PI\272\354^:\272=\016\031>\264/o\275\222\224\255=\344\307g\275\036\"^<\253j\000>\226\240\024=\205\030)\275q\342M\275`\325\270=\002\3711=\265\253o\274\374*\272\274\262!\\\275\n\236\224\275;\237\233\274W|G\275%\326\230<C\310\235\274O\231\322\274$\315\004\275\010\334\256\274l\274:=f\220k<s\271\366\274\017y\276\275\272Q\024>\224\213\"=\177\032\033=\004:N\274_\233\272=\223\200\233\275<$\200\275\375ME\274uC\314;\221\267\200\274\273{e=u&\314=\234j\270\273\251\334\201;#\202\274=\324h\034>\242\"p\275\036n\206\275\224\234\353\274S\006S\274\245a \275\220\334\352\275\\\275\252<\216\202>=\350\315a;:\037+\275DwX=\375wm=u\344\206\274\305S\325\274F\375j\274K*\206\275\302\344\316<[v\222\274j|\321\274\300E\313\273\233\353F\275z}a<\214\023\033=\334\217j\275s\330\314\275\267\201\372\274h\322z\275\225\211\205;\016\235\324\272\343\266\333\275\325\236v<\247)\014=\366\325\210\275pL:=\344\373\\=\373\362\211<\377\336v=\263\376\243\275z\027\031>\200\310\020=:B\225\274a1\035=4\034S\275P\263g\274p\230\205\273\tL\216\275\246\000\220\274\241d\322<\321x\271\274\315r=\275\035\320\005=o\231\250\272\013m0\275\247\363u\274\250\350M=9\367\314\273\322\214\031\275\251\306\325\274\315\2002=\227D\270=\021\344\255\274i\304C=X`\350<\206\251P<\00327=76\251\274\245=\320;\233\337\215=\276\217\363= \371&=\344\017\275<\207\305\270\273\001\213D=\177\366\373\273Z\016\003=4\257\035\274\204\232\332<I\221N\275\250\234j\273\216\276$\275\021\222\221=s\250P=\312\302K=\226\214\201\274Xl\212\275_\310\333\274\013\260\353;\263t\222\275P]%\274z\326A=\252z^\274\201\336\232\275d\330\037\275mn\265<a\207\211<\205\261a\274\245\310\022\275{Z\030<\214g\251\275/\002K\275\265,\013>\031\220G=\360|^\274\277\214\342\275\376\376\215<\273\217-\275x3\030>\332\035\263\275{\372i\275#\024\240<8\031l<\350\3072\275\222\270(\2747\224\317\274\254\242\216\275\340n_>|\373\256\274\230\241\240=-\207\207\275X\375\237;\224\330\216\2750T\356=pn*\274y\320\036\274\025\017\r\275\020\242@\274Yj\206=C@\227\274\034\242`=\2178\337\274U%1\275r\244%\274<\024\013<\211.\260<\265\364k;\277\360\231\272\260\007\317\274\3209\304\275\221\n2\275\025Z\375<^\203\241=,\341\225\275\001\327\371\274iQ&\274+>\234\274\326\241\240\275*\022\224>K\200E\275\024\324\031\275]\261\316\274\002+\224\275c\312\223<\256I\214\275\313\256\311=N\036\371\274\233{\236\272\331D\226=s\033`\275\022g\243\274\036\022Z\273\334J\251\275\243\013\276<\0039\'\275\243U\233\275\267\313\373\273\314\357z==\260X>\300\253y\274\274s3=\020Ri;P\354\250\275\333\374g=)\272\206\275n\334$=I9u\275\n\n\235\275ZI\273\274\007e\233=#\275J\275\306\364\030>=\257D\275J\261\212\275\353\3068<\276\363\t\275\366\031\245\275\302^\252=\250\333\237<l\'A\275\216MQ=\026\205\314\275\271\221\367=\001\243g\275C g;\230j\332\274\204=n\274\311\303\361\274Tj!\274/\240\001=\'`\270\274-\213i=\315x\014=\312\330\253;*\t\335\274\247\'\236\275\272\323\036\275\326&\n=z\237\243<u\206I=\267t\343=\202\241\210\274QaA\275##\275\2748\216\235\275\001q5\275\212\027e=\020\244\327<\031\347\013=\357\251\263\273\245)P=\243\206\032<s\331\224\275,Qq\275\037c\034<\261\350V\273\007Q\320=-\234\223\275O\004\272=\032x<\275\0349\313\274\337\'\304<\202\213\022\274\334\341\357;Q$\220=\020*\347<\tn~=\325\225\244=a\375\262<\001\345c=\271\343\r<\372\363\006>\"\273&\275\236\025\344\273__\262<\221\362F>\035z\234<\307J<=\013\314\331;|\202\237<ELt<\245\233\231\274o\000\201\275/\205B\275\333\024\320<\247+\307\275d\245/\275I\350\214\275\336\213\273<\006\367\203\275\213\030\024=\242\317d=\250\344\263\275\351\333\276\273\250\371\355=8\225d=\267,\'<\223\356\257\273\274m\244<\n\230\375\2759]\021\275\\\000\307\275u\315\262=\036\307\\>G\253G=\004bE\275\320\207D=\313\232\\\275\367\243S;\373\356f=@\345\013\275\004MU\275y\312Y\275\275Ts<\313\303\216\275\202\205v<q\337\313<`\346\277:\213-\006\275\321\344=<\356\263O<\307\271L\274\241\301\251=<\026\342\273\024\334*<\305\340e\275R\2159=\320\022\330>#\027\340\275$\270\202<K\221\255<J\226\035=\313\325\023<9\326\2139\272\310\217\274\335V;=D\235\250</\2549=\270\317\203\275V\033\256\274\242k\256\275\260\270\302=J\024\373<\206E\277\275\030\235\014\275\024\000\271=\243\357\307;\007\354\361\274\370\206\003=>Q\352:\004ur\275\326\230\005=}p5<\227L\001\275\240\360\346<\256\266\240\274K\201\247\275\262\305\350:\352\364\275=\354<X\275\241\355-<\305W\017<\2057H=\243\227+\2758*\352\273b4\206\275 \264\227:EO\305\275\206a\322\274\027\204\312\274j\2265\273\270B\205=\365\325\335;\221\003\371;]\211D\275-\020{\275\373\320\320\274r,s\275\3450\201=+\0054\275\006\021\356\273-\212\257=\013\314\016>\232\021c>\217\327\031\275|\'\326\273\236\271\021\275\010\236\212\275\202\256\375\274\262S:\275\007\200I=.l>\275&\335l<\344$\351;\301\016#;y\274\225=;\222t\275^8\227\274Y\237x<\355\306\201\272\262\\Z\275\332fK=:\340\356\273\013\255\001=\224\363j\274K\205A\275\r&\216\272cV\321=\333\3322\2755Np\2730Ba\274j\232\211\275\32038>B\\\263=\262\334\211=(c\330;\374\277\033=oM+< $=;\034\017P<\355\357S\275\350\376#\273\037\356\214\275f\2751>\312\352\'=HU\215=\r=\261\273\226!\240=\267\335\332\275\361\025b<zQ]=&\242\345=\233\274\310\275\263n\243<\032\244\200\273\227\0079<\322H7\275\335\316v>\325\207@\274\312\0168<\320\336\203\275&o&=\n\264\312\274j\342\212=\267\374\344\272\002\205\362<A\210l\274\273E\224\274h#L>\336\357\206=\025$\177=L\304\316\274#j\004>\371p\354\2737\230\264\274\314\242\307<\351U\002\276ed\006\275\204Z[\274\222.\216=\004\253\365<\256\214\216=\253\262\202\275\003\202\254=\007\\\257=\331&\330=\313\031\224;D*\250\274\376\250(<m_\203=\211t\300\2751I\253<\003\326\256\275;\235\307\275\211\004\237<]\033)\274\013\217\244<\204<\253\275\340\347\245\275\"\235Y\275P\353L\275\037!\344\273D`\327\273\253-\306<p\331^=\211\234\034\273\260\016\234=6+\032\274\340\364\220\273\027\350S=\251\3631\275\350~\275;4\360\377\2742\363\370\274\243v\313;P9\253\275W\325\211\275\330\031\302\274\234\240\305\274\026\203\342=Pn0\274\233\230\233\275[\n\317=\361\263\245\274W\201\r\275\335<u\275\251\224\300\274\206(|\275\255a\254\274\242\020\200>\223\205\r\275\020;0\275\002\373m\2741\363y<.?1\275\257i\030>\345\016\216\274\352\226\t<:VJ\275\304b\203\274\317\'\000\273\030\032\354\274E\3677=\227\304h\275NQ\307\274\330\307A\275\001\2528<Z\373\031<\020\264u\274{+R=\005\216\306\275\264\010\360\275)\246\215;oX\017=\017\303#\275`<\236;&\360\217=\307\341\212\274\033]\347\274\271`=\275\034lN<\361\316\305\274\021\274a;\261i\320<bq\367\274\003[*\275\226$\317\274\3243\350=\252\210\246\274j\307\270\274\"\304\n\275\350G\030\275\245\005\247\274O\351\302<\353\263P\270\210\214l\275N2\353\273\262\366\225\274\245\252\017=P\263\016\275\230z\316\2746\252\350<\224@*<\334\345M<\330]\233<\244\320\r<}\016q=\216\177-\275m\334\263;\301$p\275\270r\274\274,\346\220\275\260F\214=\244c\347<\225\327\033<w\177\206\271#*\317=\024W >\266B\031\275J\344\221=-\"J>\252}\233\274\373a\352<\357\004\273\273\027\316+\275t\021\232=\227$H<\205\003=\274\033\317\364\274,5\244:\317\252O<\366\024\215\274\237s\320<\245\205q<yh\247\275\007\212\325\275(5\027\275\374\032\210=\255\277\217\275\267\265\235\274P\364\214=\3541\r\275\352|\031=L_\201=M\356\350\274\345\360J<\236\021\320<i|\311<\021Bs\274\030\317G\275\246O\217\274\3505H:H\373\r\274z@\323\274\350\177\177<\330\254\355<\021\322\227\275~/\026=w\361!\275\332\301\250=\204\2324\275\023C\211\272\225g\267<\222\344p\275\364\235\270=FQ\273;\333u\231:~c\252\271\270\325\031\275\233\026\350\274\035\267?\275b\032?\274\014\031\276\275Y9\037=\030\007x\275\032\002\312\274at\266\274\"[V\274\273\264\211\274\330v\362\273\341\303|=f\260\270<2\375\244\275]\356\246;\306h\375\275}\337\273\274\361m\'\275h\265\005\274\305\2775<6 /\275\177p\306\272@xb\275JQ\264\274h\232\000=\351\022i\275,\266\255<\247\021\020>\306\236\"\275\254f>\275\202ih\275$\037->6\022\\=\317\274\220\275\333\213\205\274*H\004\273,\363P>C\020/\275\"\232\213\275\027A\307\274\3012\013\275\353\022\t\275\262w&=\355\265\032\275\375\215/\275\260I-\275\210\337\365\274\024\240\002\275\035\270\235\274\332;j=\230\234o;\252R\353\275\310\223X\272s%\311=\254\272(\275+\rG=\t%p\275\242\016}\274\323\220m=\025+\301\275\352\312\377\274\177}\200=t\'\237\2743[\036\275\226\260\210<\334\004\025\275\320B$=\333q%=)X\247=\274\372\236=l\236\233\275/\370|=\211\301\247=<\322\220\274\302F\200<\2560\006\275\362\235\341;\351\224\312\273%\3744\275\336\026\007>\007\230\267\274\014?|\274\021\350\240=\325\211a\275\2237\216=\016\246M=\231^\300\274\260\0146\275\334\213\013\2742`\241<D\003\244\274\272\305a\275\002\331I\274c\276A<0T\303<o\036\022<\327\251\300\274\212\301\325<\356\0063;\303\3717<\026lX=V\213>\275\230+\332\274H\330\223\274M\246\014=f\006\203=\370\275\036\275z\235\304\274+<\263=\367X\340\273Q\230\033\274Q~\252<\307\000\r\275u\310`=\211\205_\2736\350$=,Sm=%7\014\275\277\323\013>\377\366\251<\177\370*\273\306\221*\275\353\334\022=\243\0261=\377\034\000\272l\375]=1\265\362=\373\334\236\275\201\025\230;\227\350\275;MX\211=\307Zs;\242\2637=\236\324\013\2751Jt\274\'\206\353\2722-\221;;U\316\274V\n\300<\343_W\275\247\265$\2753\360\265\274i\316\020\275\367c\332\274\321\306\253;\231U8\274!\376\330\274\264\372:\273y\353K=L\003\027;\350%\006\275SER=\210\311\332=\177\261\031=\264\200H\275\240%B\275D\335\202\274?\231\\=\234\002\270\274\200\004\312=9\004\003\275z\027m\275\322n\240\275\310\365\r;\374\304:\274[\277\007\274\344\245&\275\356*\307\274\216L+\273\336\256+\273\365h \2759\224\351=\255\304m=l\370\231;0(4=\3036\t\273\351\266q\2752\322\232\275\205\024\031<`g\002>\254w\'=5\256e;\277\366z=/\303a\275\201\";\274\302_\237\274]\375\306<\363\344\353\274\371\227\327<M\313\021\272g\026\t=\313\307\205\275\353>5>\2521\327\274\251La\275\341=\235>\256_g\274\230\374\270\273.\300K=\205\225\376\274\320\265i\275\271\364\222;|s?>X+G=\244\245\024=9\320k\274\277\027\251<+Ao\275\033v1\275\330\221H\275\003\365\253=\230\017R\275\363\333\370\274\324\360\214<X\315?=\004\227}\275ip\207\275\344\221\307<^\3755>\306\352\016\275&Q.\275:\245a\275\340}B\275x\224]\273\266\222\344<`5\t=h=\247\275\003\375\234\275\336^\220<\237\277%\275 \t@=y\303\273\275\010=\004>G\303\341\274\017\274y\275q\313\271\274BAt\275\375`z\275}\013M=cI/=\317\263`\2736\n>\275\'Pd\275\023$\337\275Q\304J\275\353\025\377<\364z\206\275\200\327\222<\377i\247\272y\033\362\274\222\371\'\275\303N\375\270#\243q\274x`\213\274y\210\241\275x&\325\275hX\215;d\263<=mM\333\273\374,\036\274\201\260\013<>>\300\274c\377N=\211^G\274\2164x\275\236\374\213\275\355\343\341\274\014\'\306<\024\314\340\274\353\337\036\275\'#\343<\004\253\006=\357\275*\274\221K6\275I\271\022\275\331\351\266=s\307\216\275\273\004\326<TN\222=;P\316=\246v\252\275 \264\216\275c\362\016\273u\335\235:\206Z\356<\261\250\035>>rS\275_\214\220=\2510\214\275\231\226H\275>OX>(w\300=\025\367H\275m:\n\271\r\301\246=\364\037)<A3J=\323\225\250\275\233\014\205;P\005D>bq\003=bK\241\275\204\357\302;\200\366\376:\326&\001\275\337\302z\273Q_\001\275\032\024&>\357#v\273nV\252=\326aK<\317\314\200\274-ND<\303,\007\273\017%\031<\303\350%\274\336\035%\275\333\316j\274\207\366\035<\363Zd>\241\370\302:1\2033\2754\362\032\2750r\202\275\027\335I=Wl\000\275\241]\000\276\343\\\202\275\017\2767;\251\\\212=\222Y\r=\216\017\n\275k\356M==\254[\273\231\377\226=\005\341\351\271y#Y\275\263\033\224>\257\316[\274\331\200?\275\363\314\031\274\323\363\020\275\200(\261=\200\370\303=)\264\331\274\215q0=\270\\ <\340\026b\274\244Sw=f\023\202<\314\371\014=\220\177_<\336\215D\275\311\025\023<~I\234\274\354\371\016\275\235\246\312>\004YQ\275\223\343\236\274!\177\316<\177Hd=\324\006\364\274\332e\210\274\025\336n\2754\253V\275\023\031\237\273\010]\343;\000X\220<\224\240\354<\325-\245\274\\m&=E=K=4\032F\275\027\246i=\334\352\216=\231q6\275\245D\256<\037f\031\276\276\006\n>D\276\002>\2165L\275D\035Y\275\354J\211\275\215\261\205\274q$\240<\305\210\222\275T\223\"=}&\240<\010\265\301<\231=\345\274\004\235\265\274\242\203t\273\346\223\207<R\276\034\2741\n5<\344\272\353\274\345\340\223\274\2336\254\274\000\177\252\275\211\310R\275i\355\206\275\326y\215>\213P\250\274\240\"&\275\0367\261\275\307\302\204=,\337!\275-L3\275\276\324\3119\301g\001\274lC\272;\272)\231\275\203f\330<\220\300\211\273\365\307{\274\026\371\205\275\262\241\233<\322)@=gs\265<\276\231\014=\203+\227\274\n\263c\274\tJ\217\272\326+\324\274\372h!>r\t\024\275\254\254N<\306\240\374\274o\3307\274y\3530\275hJ^\275\347r\307\272\010\363\200\275\340\234\003:\013\337W\274\000\034m<\373[/=\367=\302\274\205N\200>\331\204\021\275\233l\240;p\3502\275\203y\307<\357,\025\275.+ =j\3311=\223V+\274\354WV\2751M\270\274~\336\377\274\330gA>\361\346A>\204&L\275\237a<\275ej(\275\313wX>\347\177\342\274vO\235\273\021\355\205\2751A;\275\275\000\202=d<@>`Q\261<\334\377\237<Z\037M\275\246r\310<E\252\004\275C\323\201\275\376\3776\275\372hM=\241\306\202\275R\003\247<\2205E\275\234\313S;~`5=u\027\206\274<MJ=W\365O\275\332I6<F2\036\275\370\016\335\273\341-\270\275V\n\333<\360UY\273\177\377\223\274\301l\272<\013\254a;\315\026!=X\371\026<\344\3511>`s\362;\355Ea\275\315\356\266\274\t\354\236\275\021\326\356<\337\264\357<\211[Y\274t\335\004<\262P2\273\037\343;\275i\007\260\275PS\036\275\240w\372\273H2&=V\205\030=\355\327\032\275C8\222\275&E\237<x\323\361=P\005\315\274J\360\203<\311Z\275<\214\024_<\263x\217\275\361\245O\275\\E:\274\030R\364\273\005\214D\275\262\231\210\275\223\341\334=j\221J=)\014\336\274\356\003\301\275n\340\'<\036\266\351=\256p\016\275\303l\237<\031P\352\274\3073\276\274\210\351$\275m\'\275;I\256\273\274\325\"\344<\322rM;f\202\212<-\220\351\273u\370\236\275\223:\005\275[W\031?\311\341J\274.\313\326\274\205w\364\273E\374\033=\000P\215\273\376\266\226\275i\003\270<qD(\275\302PL\275\343\233}\274\266\236\225=\022N\331\274\005\2266\275\247\250c\275aU\300\273\357\320~=E\250S\274\026\366\031\275\244\204\006\275,\367\225\274\303\324\203\274\350`7<\032e\005\274\037\362J=sN\'\275\245\210d<h\363\215\275\341\004-<\r\004\200\274@p\\\275\030\307\251\275\351\025\202\274\233{l=\3222\332\274\"\201+\2751\363\224\275W\245\365\275\347\270\261\274z\336\334\273Q\302\267\274*\207\256\274!\245\010=\377\271\367\274\277!B=i\357\231\275d\014W<q^\246\275\032\2320\275|\352\274\274#\363\243<\031\232\334\274I:\271\2740\227\224\275\255&\'\274\213\215\356<\231e\002\274\320\214\332<3:\264\274\000\255\231=\352\t8<!\010\301\274\031\301\016\274w}\022=N\233\t\2756\215\362\274\356{\210<\332L?\274,\317\235\27431\006=\367\334h\275\301R=\275\025;\234;\303\374\355\274\2224s\275b\261\330=xO\224\275\250\243C\266;\225I\274\256\3105=@x%\275n\214\207\274r\373\266<\002\326\201\275\253\2527=\307\230.<\263)\336\274H\375\313=Fc\354\274\356q\237\273[Y\t\275\362\224R\275Z\211}\275\'_<\275\035\236U<\034\"\034\275\332\372T\275\306%\324;cL\303=\367\302V\275!#e\275O\001\356\274\303]\247\273\351\215\260;\247zB>\2570\301\274\277\202}\274\326\371\000>\024\000\013>\263\354\3549:H\n=rO\332:\303[Z<\025\231\237;\360S\237\273\370<\234=\316\213\272\2743J9\275\214\rv\275\207\025\260\274\005z`<\0363\033\274@&\332\274\343\221\240=\362\220r\275\025_\027=xl(=i\016\200<\\\327F=2\031\035=\307R7\275\2124\022=\364&\014\275\255\214\203\274\262\233[=\200F\242\275\021\003\035\274\226\375Q\275@\354\301<\272\244\220\274X\027/<\341E\222\275\245\355P\275x\306E\274U\nI\274\336%\210\275V\325\001\275a\204{<\233\320$;\356\312\247=\363\034\234=\355I\242\274\375\215\247\274\247g\203\2755\375g<\363\r\246=\221\325<=\363s\270=N\340,\275\303\323\271\275\243\313\223:sx\310\2753D\025<\027\203{\275\016\314\020\275\017*\360<\352y\234\2741?\354=\304\234\010=#\276\277\275h$\367=\201\346\004=\260\357\367\274\361\005X\275\255vl<\376:>=\276\217\017=\002\343\3778\200\030\204=\035\t\216=\034\364+=\241b\216=\002\262F\275 8i\27506\267\275\357oD\275\004\234\254\274\373\225\200\275i\276\363<.\031\257\275$1}\273\275>\224\275H*\'\275N\"\375\274O\316D\274\233\037*==\033\242<\014O\202;\001\205\237<\336\261\263\274\225t\375<\340\213\275\274T\371\273\274)&\276;\037\321\221\275\245h\203\274*rZ>\363aM\275\362\275]=\306&*\275\367\332t=^\362\311<\2338!\2756\260\034\275\251\226\032\275<<5\275o|@=V$\275<[R\212\275\342(?=Z\270\260\275\376\362\254;C\233\203\274\373\341x>y\335@\275;\245+\274b:e=\307[K=\207l3\275\030j\274<fH\201\274\247<k\275\247ie<\222O\262=l\245\n:H*\267\275\215*_\275\230\2748=\200T\346\273=\334\200\275\325\025\246\275\253\344!=\227\365\226=\357Me\275\200o\253\274\354\364\274\274\023\"\243\275\001\366\302\275\014\031D\275yq_\274]\215\222<E\\o<\t\235\243>\333\354\305=\017\273D=lT\3049WD*\275\336\345\366;\314\031\234\273\207r\354\274.\203\035=?)\035\274\2637.\275\030\327\300\274\333V\207\273tf\026\275\324\005B\274\002\336\337;\246%\247\275\364\r\315\274\021\n\322;Z6L=\226\r\363\274S\220\026\275~,\014;LEM;\305^\307=\257\037\026\274:\267\223\275\007\233)=\025\367]=\350\315-=?m\023=?\363\265=\250\307\377\274\\\006\244\274\236\037\360\274\020~w\275@\222\370=)\004#=\222\252\'>\277 \264;d\336\237\275Q@\236<m\352\223>\307\000z=\023e\262=S\273F=^\031\367<\334\004\370=i\240\025\275\370[S=\375\306\204\2750\223\373\275\230K\000\275ar*=\374\\\021=\250\024\264\275+\227\001\2759\274\276\274\223\345\300\275r\2470=\036<\256\273\331\\\032\275\350O\000\276;\263\027\275\346\262\341\273\342\261\037<bs}\275Q8\333<u\216\031\275\033\377@\273\302+\017\274\222Ye\273OS\374<\220\356\252\273\250\372i<\326\340Y\275y\236\004\274\346\351\200\273\303k\232;\376\177\357<3y\372\273\271\344\017\274O\211>\275r\233&\275\226\003\331\273\363&3<\273\t\"\275\353\\\207\275\234\374\252\275\226\203\231\275P\210\217=\374]\234=W\260\202=\020H\311<\005?\033\275\313\377\365\275\221\235\320= \245\273<\200\211l\275\027| =\304@N>\221\266K\275\3200M;\334\361t\273\"\215\'\273\373\016\235\275\225\305\323<\231\034\010\275c\020\037\275B\244\024=\035\017N\275Y\306\357\274\005\333h;\344\215\343\274HE\350\274\026\225\214\275\207\367C\275\273g\243\273\305].\275\202\243\233\275\304\356\227=\326&o>x7\245=\301%T\275t\026\205\275b\274\021\275Y}\346;\365\230\314<F\253\210\275i$\200\274M\177<=m^S\274$\250\324\2743\035\355\275\335\026\212\273:\217\227\275\"\303\030\275VR,=N7$\275Dw\266=\335\340\217=\342\360\025\275qK\005\275^\007\354\274dZ\010\275\332\253\035>\223\355\364\274B\002\213<\021\370@\272\301\261\300\274\357\370\320\275\326p\033\275\241\237o<\264zG\275\305\033b=\321r\371\274I`v=\3563\200=\317;M\273\r\324\256<`\307N>j>,;\220\335R\275\233\223\346=\265l\350\2741l\202\274\243{\025=M\276/\274\363\333&=\202@V\275\212\316\261<\344\353|\274\214/v\2756\031}<B4#\273QN\343\274\322E\352<L\025\367\274\272\327\367<\346\322Q=\202~\002\275\004\255\334<;\372i\275n.V<wA\001=\331\343]\275\177^.\275\360\341\224\274(F\026=\3325\200<\201\246\016\275\016Wy=\261\223.\275\334^\245\275%\345\275=C\246m\275\332\033\332\272\326\261v\274\206\311\021\275\010xI<\216>\264\274FC\351\274\234G\362\273\0162X;\325@\006\275\267\r\274\274i\215\261\275\267*J\275\256K\250\274\'#;=9\244\265\273\201\364\025\276!\337\311\273/\030{>\253\376G\2740E\212\274\246\247.\273\217\204\325\274C0A=\346pS\275\006Q\033\275\213\3710<\314\037\233<\2567\240\274hT\203=\346\3260\275\352#\r\275\205\213Z;\202\273|\275\372\341\210\275\226\3411\275\006\210\242\273\014\362W\2756f\035\273\373\300Y\275\241\245M\275\330E\267\274\231\364&<\350qn<\333\302\311<~\004\210=\203\360\027=\364\0078\275R\371)\274\\\'\266\2758\230\367\273\207b\353\274\014\373\276\274\212\250\326\273\271\307M\274\255\230\n<\325\246\201\275\354L+\275\246\031\263\275\216\214\373\274\035\255G=\226\364a=\234c\335<\340Q\200\275\n7\030\275&*_\275\307\262\254<\270Q\343=7\255\025\275\232$\267=\031\035\222\2754\006\032\275\\@\017<\265\226\001\275\3332v=\241\354\250<\251:\303\275\345Z\240;\342!\325\274\177\302G\273D\367\022\275\376\222\340\273\312\372\";\351\233\343;\354\226\232\274\365\364\362\274C\327D\275\301\341\311\273{T_=\200\t\347;\000\"\030\275aD\260=\306[}\2718\264V\274\325Q\017=\261p=<\016\276l\275\026\216\243\274t\255\276\274\223\\\212\274\376/\023\2756h\211\274\256\355\t=\253\214\211\274\274[\r\274*\242>\275L\336\303\274o\274\206\274\250\207\254;\371\207x\274\217\211V\274R\026#\275G\332=\275$\215#\275Z\032:\275\271\267\205=+\"&=\2673\266\275\310G:\275!\024\216<\332d~\275\322\326==\215\275z\274\340\300a\275\352U\323\273<\275f<\300\370\032\275\331\032\216\274A\020-;J\251\310\274\r\341\356\274\335\005\257\274\202s\237=\204\211\213\274\371\035\252;J\375\366\274o`\373<Jf\263\274\303&S\275\215V\366\273\346\r\267\274\303\023(<\231\2500\275u\256\002\274\024i\333\274\2578\363\274\261\227\364\274\341&*\275\201[L>\213H\274\273\307\224\023\275r\263\034\275\030\nT\274d]v=.\261\307<\032\211\270\274\017\355\212\274C\002\333<V\nq\276c5\253=\361\365\267\275\020J0\274\302*\001\275\265p\245\275\002\255\020\274\316p^\275\022E\364\275\321Y\214\273x\355g\274\254g\000\275r\032M\275\274C\206\275V\252\017\275\177T\342\275\343\355\307=\216\263G\275\363\340\222\275\304KU\274\324\3229\273\355d\010\274\362N\265\274xX\307\274&L\273<y\222\264=\207\0223\275\323RA\275\376g@\274L\307\332<\177g\317\274iW\277\273\366\203\365<\335\250\242=\024N\203\274\207\035\222<\352\014\345:\315R\353\274\225=\257\274]\371\357=\227\335~<7N\350\274\311\003r<\204\0003=\231\260\360<D\221a\275g\230|\273K\014\231<\026l\331\274\201\373\013\275\341.E\275\336\331\233\274X\3353\275\276]7\275\035Qq;\361O\221\273\255\017\313\274\374\024\277\274\346\207\215\274\250f0\275\364=\277=\r\327\002=\260]D\275\275\333\262<\235Q\253<&\300\324\274\247\3763\274\344\213\240\275Rc\214\275\336xB\272\345|<\275K\262\022\275i\215w\275\016\016w\273\003\257e\274%m\301\274\003_*=\025J8=XN\241\274aj\224<x7\222\275\005\370R=4\370.\275\025\336\246\273}\031M\275\251\255;;\034zV\274G\240\017\274&\213\244\273\013\204x=\261\205\326;\302U\362\274\033y\027\274\370\312\201<\026\314\036\274\205P\024<\241\342|<\370\307M=)\222X=\034\331R\274JD>\274$J*\275\317gj\274.\267\363\274\306\344\325<\010\016\251\275\216\273)=\256\346\303;\346*\275\274\255\377\026<\024`\016\274B\374\022\275\264Z\374<,\177r=\370\325\207\275\033\300\256=\277\326\204=\225\255\212:WR*\275\031Q\243=G\236\355\274\342[O\275\340\350\275;0B\001=\013\006\346\2741)%=0_.<\374\342\"\275\324\213\241=&K_=\261\256\203=,\017\000=\024\312Q\275\275\320\222\273.\320\351\274\223%P<\313\317\233<*\371\270=\210U\325<\257\016\t\272$\324c\274\222=\332\273\025 \253\274\251\330A\275\302^\367\272\032\241\340:P\253<\274;\200\031<\234\273\374<#\223\257\274\r\251\033\275\336\'>\275\365Yb\274\321\240{=.S\266\273\355V\263<\330y\240\274\233t\320\274\213\375\244\274\r~E\275\001\354\321<\223\203\327;TW\252\273\232dY\275\3538M<\302.\243\275\000\205\332=x\255F<:\324w=\255\277\270<j4_\275p3\003\274\225-\003<\022\370\014\275@Pd<\323J\226=Vw\316=Q\177D=\253\001\311\275o\020K\273\366T\026\273\221\274)\275.\311\306<;:\310\271\177\264l\275\305\322\\\275\251\355\241<\320\034\356\274\'\316\245\274\026\241r\275)\233\212=b\242\341\274\021z\230\275V\314\\=TF\023=\321\t\243;\317\002\212\275\310l\332<]\266\364<\001F)\275V\337\333<\250m\343<C\031\342\274\002\030=;\273\220\262<\250\003M<\036\350\267\274\215R:\274\222\224~=\342\235\177;1\254\306\274\300Q\351=m>\315\274\342\226\334<\331\223\261\273w\n<\273-\267b=BB\"\275e\343\264\273\261f\032\275\365\234><\376\262\362\274R\340\247\274\315\016&\275#\310H<\212\355\003\275L\024\205;\"\232\236\274S\027\003<\365\226r\273\032\245p=\021\2213=e\251\326\273R;\310\2742\257O\275Z/\227<3\271\022=\334\222\264\274\002 \241=\217=3\275\305\345L\275\200\212\267;\271]\237\274\022|\244\275\223\350\027=\252!m\2753\213\242\275\371\365\n\275q\021\330\275\003\365\262\274\324U\310>$\214\236\275h\267\311\273\254\217t\275N\036\272\273\007;\200;\242@\256\274\343\342\356<\034\027\027\275\333\234\226\275cO\216;s\004\247<\2354\374\274X\261_\275\376D\250\273Y\256\241\275\364\310\000=\327QE\275\216\256\002\272\342\242>\275\243\357\227\275\350\246\343\274\330\357\376=\200`\240\275\303\342\031:\376H\024=\307\352\304\274\001\022\355\274@\013\324<a!\213=^%\250=\211\263\376\273\320\361/;\024\245a\275%\031\202=p\353\207\274_\374\304=_\027\272=8\370I\275&\327\314\274~\271{\275\241\034\350<\327\236d\275p\227\233\270o\327~=1\3119\274\007]e=TM\223\275K\333\256=6\024[\275\304\0375\274\177\302i\275\201\334\312=\337u@>C\224\361\274q-\343\274\266\352\240\275\307\351\237\275%f\273\273Z\342\211=[o\014\275\'\364\002\275\361\212O\275\224\020)\275t\364\233=6S\261=\340\204]\274\350\312\340;\210|\300<\3729\036=\251*c\2735\313\344\274\256\213F>p\211->Q&\344\274/ \225\275j\013\230<\3463\227\274\207/\"\275?\216)\275\230f\221<\312\016a=St\245\273\202\377 \275\t\252#<:\324d\274\301\310\367=4\022P\275\2155\217<\264lB=\233\277\316<\375\361\022<\025\032[\275\354\251\032=\220}\215\275pN\005>\323\2361\275h\035\210\275\373I\363=@i#;\216S\221=.\247\340\274\225\352@\275\032~\252=\222\251D\274C\330&\275\364\000p:\r\3700\275l\3146=j\265\272\275\271\351\277\274\200\315o=\341\032\022>\336A\267\274\375\210\205\275\244I\321<\267?&;PN\n=Cp2;[\034l\275\304\211\220<S\005z\275T\204\240<\370j\362=:l\"\275\350\357N=\207r\201\275o\312\220<\324\025\363\274#}\230=\306\005(\275RW\277\274=\260\341=\302TR<\306\215\025=\236\000\201<\035\373\263<z6\347<\210M\024\2751\234D<\232mG\275\237\027\222\275\241\362\026\2751\n\n\274\243\275f\275~>\016\275o\375\310\274R6\256\275/\263\347=\244\274\"<\257\207K\271z\372\031>\353\334E\275\263\276\214\2734\232n=\260_\020=\262r\301\275V\245\264=i<x\275\251\260\262>\320\0226\275\275\311\213>\036\000 =\376\217\017\275\203\233\224=@\017E=\355\177\221\275\236\"1>7\025\207<\026\203\366;$\177\361<\360\303\233\273I1\236\274\r\365\277<l\362\216=\246/\n\274\254G\256;*\235\021\275N\024\023\275\005\371\326\273\230\217\035<\204\241\220\275\021*\332=b\305e<j\307;\275\2039\t=\023\363\324=\2475\033\275?\010\202\275\364\037>=\274V\020\273\010\320P<f\n\252\274%\325\253\275\267c\241\274\305\020\245\275\314g(\274\321\272\254=Kg\203;\\~K\275\242)\311\274\341q\324\2743\352\353\273\323o\013\275\226l\213\2740\016\271=2\004\007=\\\321(<\322rn\273\314;\020> \010\333;\014)F\274\351\314\016=&\223\014\275\244W:=\342g\035\275d\260\264:\350\300\026\275\240\377\315\274*\347\3379\241/\246;\236\004v<\231s\022>\344\002\347=\224z?\275c\264[\273\036\310P;|\334\034=\251nG\275\357x\n\275\345\3277\273w\210\213<\252\376\377<\367E\206=;y-\275\374\364N<jl\016=\177H\\\275\244\271\032\275qT\337=\355\371\336;\222\352\342=\336\200\207\275I(s<\020\205z:G\256\264\274\237\241\026>\207\026\346\2753\256\202\275o\032\t\2751\272\375\274\005$\236\275\037\002\320\2756\2373\274I\264[=fw\031\274\261\237\240;\301a\220\275N\353\352\273nW\310\274\010JT;~\220\020\275\257\343\323<\217\335\036\274\226\337E\2750#\214<\016F\210\274\033\022\223\273u\226\202=d]x:\345\027\340\274\266(=\273L\277\265\274\335\365\005\275U\241R<\237\310\022\275b@\216=\0144\336<;\343|\275N\224\031=\222]\276=V\261\210\275\r\316\211\274\014\321w<o\020\004\273M\343\034\275\033\003%\275\240\277\035=\354\320\256=\305\317p\275\nZM\275\037\027\270<\246\n\246\275\006\010M\275\313\267\252\2752\261\037\275\030GY=\024\247\200\275\216\025\242\274G\273\321<\0055\034=\326\3453\275\265\027\267\274\207(\376;\276\263\2149\243\276\236\275+\260\276<\376=\263\273\237t6\275.X\326\275\263\365\373\274\327\017\021\274\002R\254\274\005,\302=\222\353\236\274\375\253\322;t\\L\275B\314;\275\266\302\230\272\342\233\036>}\"\030=13\302\275\270\3301\273~=\027\275\350\356i=\023\262\013\274\325\373\020\274F\246\211<\357t\365;]\202\265\275J\372\215=m\035\367\274\204o\230\275\263\313?\275w\276\312=4\027u\274Nf9\274\020\267f\275%zI\274\006\357!\274\370\024\227\275\177\257a<[\2245>\233\026\202\272\355\335\320\274B%x\275\347L\257\275\333\220\351\274\271\177\033=\010\3208<\275oE\274\330\267\205\274=\227\207=\317x!\275\211/\016;\376c?=\273\365-\275\034F\325<\346\271\344\275\215Y\370\274\342\307H=\331\371G\275\326k\026\275\210e\261>?xP<\005\366\215\275%\270\332<$\233\256=\3350f\275\352\236>:\242\233\276<m<\352<*\215\356\274\006X\260;\360\207\321\274\227\264\202\275B\372\211<u\254\300=W~T=\337\221$\274\\\237\301\273\323\037\226>\03518\275d,;<\310\224}=k\263[=\307\311\363<y\373\'\275 L\277={\302\027\274\250\213N<q%\024<\325`=\275\020\005\277\275\033\334\342;\307\316\273\274\216\236\234<\235v\224\273M\345\261\275 [\376\274\333\374\234=|b\372\274\345\3650\274\305\017\204\275\304\025\037>\254@T=\204\277\363\273X0\265\275\345\207\332\273\346\000]>\345O\236\275\315g\266\274e\031\021\274c]\254\274O\301\204\274)\342\274=\375\214\203\273\311\361\223\275=E\000<-c\245<\r\005\373\275\341\225\303\275I\306\005< \021\233:\264\225*\275\362\247\024<\263_2\2740\323]\274\247FH\275\310L\261<\342\360B<\256!\366\274\341ic\274\237\rZ<\302\224U\275\314q\263\274\326\331\037=\273\320K\275\031,N=\364D><\002\232(=?\260\'<\327{v\275\317<\212\272\313\271\215\274b\267\205<i\307m\275\233\310\276<\216\227\254=-Ot\275\253\352o\275\251\223\210<zO\242=\321S8;\'hH=\313o\272;\230Zc\275\216\233\234\274D)\013\274z\026\261\273\200\257V\275\314\260\216<C>\'\275\306\206N\275\261\217\316\274\343`\300\274,\275\210\275i\244P\275\377\327\021\275\031\234\177\275\376%0\274M\326\\=z\357P<\206?*=%\377\026\275R\264\364<?s\345\274\212\'E\275\007^\267\274\250\330\007>T\217 =\274kd\275\351\301\320=\246\277\033\275\225\263\337\274\254\251\370\2742\344\323\2744\243l\275\2640\354;$\340\215\274BV\330\273\315\0318\274\246\276\345<I\314`\275\336\007\335=\352p\243=\306Z\207\273OF+=&\006\220<\234O\004\275\311;6=\221\253\370\274\206\365\352\272G\331U=\004\241Z\275\246%\200=H_\024\273\020\020\250;\026\364\034\274\225\033:9\371\273}\274\342\315}\274\234\312:\275\227H\222\274,q\224=\313\272\027<\023\275\306<\364\377\017\275\206#;\274\206\030\276<\361\304P\275\315\323\230;\347\306\317\275VE\031\274\231\235\317\273K_B\275]\307\243;\310\345\217\274\330qF<\272j\251<[@\224\274\013,\002\275\013\006\265<\\@\021=\3551\"\275\342\262\346\273\263\347\315\274O\032\\;/\022\247\275\327\303\031\273\330\010\330\274J8$\275\247\335X>\233?5\275\215\303\232\275\251\033\212\274\356\205\206:\356\r\206\275M\274\355<\304\373\023\275\313\014\035=\0222\244\275\007V6=&\354k<\321\225\315<r\"n=-\230\034\275P\0337\274+\224\000\275\327\314!\271\255\311L\275B\260\206\2745\312\226\2749\324\274<\362\017n\275F\324a\275\272\244\213\274\317\247\321=\255C`=|\306\202\274\272\303\206=\346{\200\275%\301I<\366\347\001=4?\344<\rf\"=\212{\000=\247\036\337\274\277\345\027\275\342\311\251<\315[K\275\327v0=4\026\023\275Z\354\303<\310n$\275\377d\350=\223\311B\274\025\230\276<|\022\010<\362K\235\275\356{\354\274\362\3334\275^\037\202\274,\001\247=\301\340\006>\374E\346\274\246\352\356<w\177\035=\353\211-\275m\342\330\275\rF\216>\350f\252\273\376.\025\275\230\306\307\274\252\222\005=\214\262\242:^\277\000\275\037\261w=\211\206\372\274@pp\274\367:}=\372\205\010;\301dH\275:\2358=0\204\357<\256\331\245\27498\373\272\343D/<\351\357c>\033\262\377<\324\030\306=\355\007\033\275,\363\364\271\3519\177\2757>\034<[2\223<\351K\341=8\277\306=Tz\326<\250sR=T9\023\273\222L\205\274\316\027\330<\2725}\273\031\020V=\2454\375;HS(\275\334\370+\275\342R\205=\222\312,\275OU\205=\206\240\221\274|\314i\274^\177I=\027\326\036\275f\367J\275\002\225\207<\341\223\207<\361\035f\272\231\323\">\216\355\036\275\346\331\"\275qO\350\274\327\354&\276\205\010$>\357\037.\275\211\266S=\021\200I\275\230\3409\274\365=\201=5!+<\363]\320;\275w\203\275\242d\314< <\252:\342*J\275\006G\026=W\361*\275\255]\n<&\375!\274\252+f<l\3135=\3720\025=&\177(=24\234=\276\360;<5\313\330\273\230]\304<\361\017\033<j\n\341\274\3527\020\274\372\321\354\274Q\366\320\273~$.\275 \307g<\255\313\204\274@\243D>\033s\331:\177l\242\274\265H9\274\343\001\n\274\037J\203<\271\2304\275\237qD\275\312`\002\275D\253\224\275$,\323=\031\232T\275H\034\231\275\2540\022>zj6<\225\214\320;au}<\241fz<\233\332]=\212h\371\274+^\204=\237e1\275\211\217W\275&s\375\274U\017g=n\246}\275\256\316\033>\037\224\031<\022\244{\275\005\r\223;UH\242\275\361I\252;\355O\252\274_\226\322\273\372\243E<\020\377\006=Q\360\033=\305UH=\371\306B=\000@\r\274jW\031\275\010X\035\276\322\216w<\350#;\275\007C\032=r\002\276\275\257}\253=\276#\"\274\232n\256\274\003\203\007\272\020\370\342\274\241\210\314\273\301\376X\275\020\361O\2759\267\024\275\237\315.\274 \016\216\274z\372m<\344\214\241<\234\207\323\274\177\337\2209\215\231\216;\031\232\203=\304\024\304\274\261\215\266;V\257S;M&\032\274r\253\222\275v\306C\274\306\246R\275\374\257)\275`eC\275s\354C\275\244Q\320\275q\270\257\274N\240\331<_\231-=\370\017\213\275\271\203\361<Y\267\"=\373\005N\2752\333j\275%\031\275;\361/E=\371\327*;c\252\312\275S\363\353<c\"\302\272\357\227\231\275\351\3578=1* \275=\030\201=\363\000\205\275\223\236\240\274M\316\207=\212\234\332\273%v\030\275\237\311\036=\254\345\005\275<\333\232\274\205\035\350\275\232\344\020\275m\037\037<\250W\231=\240)^>r\230<\274\025\336\314<ms\315=\262\211c\275\016q\244\2748\241G\275\312*7=O\205\377<\336\232\332\274\262\206\215\2746\037\007>\313\261\013<\246|6\275\235\n\261\274\250\275\207\275$\241\264;\216R\001\273\017\254\327\274\257\202\267\275\215\341N<\336\177\245\275.\013\214\275}A\"<e\257\244<\3760\350\274:\346S\275C\260V\275;\355A\274\302\t}=\024\334\347\275\252\256\274=\221 a\275\\\211\265=\222v1\275\014\326_\275\340g\017>i\356\214\2758\314%\275\300\320\257\275a\206\022>\214G\300\274BnQ\273_\232\010\274\026\215\233\275\327P+\275yj\266\274\331\260^\275\376O1\274\362\t\201=\206Pw<~\343\304=\273YY;\204-i<=\223\200\273\\\354\036\275\",\363<\001\033\200=>v\351<\233\305\334;\340\314U\275\275T\260\274\223\2401=\212\014\327<\037\256|<\275\302\224=\026\374}=Q\2342\275)\373\035=\275\363\313=\344!==\316|\252\275vjc\275|\215\001\275\226\366\265\274kB\026\275\021\321\025\275\274K\212\273>3\025\275Y\250\003\275\033\236\222\274\364\221\'<^\220Y\274\216\271\002>$1\222\274\013\036Y=\347\346I\275+\220\023\271\340v\007\275zr\024\274\247\321\n=R\223>:\250xV=\217\334=\275q\344\217<\n\344\024\275\r\361t<\000:Q\275\273D\217<C\350.>\016\016q\275\2337\035>\367\034\224=\263\\\007>58e\274\035\211B\275P\375\037\274_\223q\275N\276\343\274\225\025h=\001S\335<\023\331\223<W@e\274\237\\\322\271\265y\205\275\r~\304;\037l\223\274\035~\\\275\020\343e\275\302\222\250=\313\310h\275\037\364\216\275\230\326\343\274K\234\354\275n,\332;x$g\275\024\315/\275r\374\003\276\373\335\334=\347&\222=Os9\274EM\275\275\310c\026\274\2555Z\275L\017\344<\241\216R<\245yC\274\027\324\217\275\242D\213=Y\221:\274\263\251\376\2759\216\2729:\306\351\273g4\214<6\250\236=\3647\333\274\320hT=@\300\376\275;k\243\275:\035\354<\034\023\314\275$\310\256\274\273L\257\274~q\026=\347\324\324\274!K4\275\026\001\206<4\306\031>\332\362\030=\325IF\275\243\202\251\274b>n<\316\017\370\273\007\207\335\273\377\ro\275\3214?\274\032(\323\275\227\3612\275\\\032\352<\315\2019<\264\263\370=\356\3215\2745\205\356<c\312\376\275l\241\177\275\303_\014<\323\036\\\274;r\327=\307\231D\275\215SL=-\251\325<\316\344;\275\314\365\034=\003@\370\273=L\356<\2754\234\273\207\005\t<\016\033m\274}\220d\275-\321\264\274\375\361\232=\177\373\341\274\206K\263;\tp\035>g\266\366\274\225\225)=j\265l\275\026\211c\275\353b\345\275\026\024\316\274\337\227\207\274\253v\\\275\205\316\014>\374:\267\274^\320Q>\361\247\253\274\022>\220=Pa\366<\263\206d\275p\335\356\272>\341\037\273\223|\243=e\377\027=\006\326L<\362\254\270<\305\355\362\273\352(]=V\033\250\274\365\361\331\274\277:\322\274r\031\256<K\314s=\244\032j=?rX=<(i\275\025\332*\275\366^\377;\273{p>8\236\\<\300:t=\t\033:\275\177\245i=t\t\245\274\332\235\354\274\326\310\221=\236\321N<C\371\252\274\302\224\204\275\351+\206\274\007@_=v\001\367\274\031t\374<\225\262\211;V9\302\273a\311\302;\t\3764\274\003\367\304\274$\036\365:P\3662=\305:\270\273\267\220\032=\343Z\002\273j\364Q<\032aD>\314\026\355\274F\034$=\003I\241\272\'i\274>\357\325\210\274,\363\201\275\250\3543\275\2323\242>\331<\220<{Y\177:\211\017\022\275\275\334\033\275\260\350\371<\0023\203;F\354\216\275v\000D<\035n\221\275\231\367\347\273f2\244\274\201\323\001>\352wS=\337\021\005\275\346d\016=\203\2637\275\334*{<RP9\275\344JG\275\252$\004=\364\364\225\274/\204E\274\320\374\210=\017a\360\274\257\357\226\274\323\210\352\275c9g=\261\t\233\274\373%(\2754\000\271\274E\016\227\274\257A\236\274D\337c>h\371\276<\350\214Y\275\340Qf\275\364\227\001\275\313\201\326:\244\016#\274\220\031O=\203\037Y\275\226\354s:\312.\025\275\033\327\2768\267Z\000;U\352E<\315#d\275\320b\306=\353o\r\275\022\017\212\273\222\245\240\274\r&\321\274\003x\204=\363\246)=tu\034\274\330\341\365:Ww\n\274\231\010I<oj\207\275\231\260E<\343\337<\2755\310\374\274\304\013\350\274P&q=#X5\275\374\261\207\275\316\373\263\274\201\350\\\275SV\350\274/:\207\275tA\366<\212\2526\275\207=W=\017\363\201=\310\310\324;}\351\321<\276\032\213;(\026\036\275~\215\024>\267\351\333\274e\027-\275\005\033\204\273\2561\214=8\373\325\274\371\203\210=\227\020\001\275F>\300=\220cg\274\271\201\244<\207\200\306<\351\353\207\274\354\370\253=\204\247j:\033\311H=\260\356\203\274J\265\220\275+\0036\275c\005\007\275\220\\M\275c\007-\274\013C\341\274\375\300];\363h6\274\210\361\017\275\213\313\342\274\016\020\264\273J\317c=\207\\\002\275F$\'=y\'\234\274\372\270\226<\334(\265<\027\025\"=LJ\230\275\036\340\224:\007.\202\274>\347\377\273n\237\374;\365<\355:\350\351E=\020;\004\275\271\365\323;\335\013\205<F^u\274z\257\002<u^\203\274).\230\274l\0145\2755\002\235<N\312\300;b\210\013>\031];\274\300\355\362=&\236\232=\003\204\222<\227b\002\275\035aB=\313\362\177\274\205w\316<\205J\340\273\351\346\034\275\330h*>N\313n\271\217\272\255\274\006\332+\275sk\014\275\220\236m<?\226\304<\321\006\030;\345\021\302=xu\302<\310\363$\274\345\340\025=\313X\007=\t(_\275\247\303\271\275\331\335\026\275{\266\362<{\306\202=\\\317\320\274\302\235@<c\367;<\345\360\373;Nr \274\214\274\230;\322\3024=x\264\337\274\305_\034=a~4\275\225t=<+\334;\273RQ,\275$\266f\275\322\005\025\276\027\260w\275\004\206C<\r\217\270=\203\221m\274\240\377\n\275\325~L\274\010\274z\2755f\005\273\351\256\371<\210\373\327\272\363|\225\275\016P};\0039\364\273\350c\201\275\222\210<=\323a\256\275P\231\t\275\222\266\307\273ak\320:\317\313J\275I\230C\274D(_=}\010Q\2750\303\245\275\352\342\264\275u8\233\275\317\357<=\351\363\311:\364\346\262\274\246\313\036\273\003\205G;\371~\214\275:\325\263\2731!\007>\350S\232\275\213\306V>\242\007\303\275\256\274&\275)\326\302=\355\3222\275$.1\275|\260\311\275\343\262\216\275h+\316\274;\315\204\275\037\360\021\275\305\273\202=1\226i\273\272\371\306\275\343\207-\273\351\277>\275>?\220<\264\331\301\274\026\247\003=\316\032\376<\307\316r;3N#\275>\371\260\275\022\3423=.B\274\273\3202\370\273\023\205(\275\341L\356<\303\327Y\275{\321\250\275\277\010\264:\332\037\263;\232\343D\275\\\373\353\275\\\024 \274\241^\020\275d\035\213\274\321B\265\274e\340\255\275I\233\370;3\3701;-\244\373\274\324\210\344;\255\236^\275\217{\025=\211V\t<S9\325\274\204\303]:\345\217#<\274Y\367\273\302\"\016<\357\351C\275ll\202=\'J\301<\004\203\256\275\200\302\374\274C\037\214\275\323+&\274K\004\001=\221\217\347\274`\266\257\273\3222\204\275\363\2203\275\217\301\204>E\221&\275b\373\227<\355\241R=\305\327\003<\336\267\t\274\246K\255\273\0339|\2736\211\323\273\001`T\274%\nx\274\226\214\037\275\320\237\002=f/J\274[\031R\275\227\234\316\275\352\327\177\275\327f%\275\320}\201<\010\2344\275\254\315\013\275\3712\237\274\353\374\216\274X_\177\274\265\366\372\274\326\016\362\274r\231\364\274\315\002\n=\305\200\345\275\246J\221\275$\261\201\274]\303\r=\253\333\005\274\016\325\312\273\036\362\301\273\\4\312\274\235\005\360\274L4;\274\254\240 \275\316\\\225\275 \320\242=\256\034\374\273I\236&=uo\322\275\322\253Z\275\032[\305\273\261\246>\275\256\375\232\275\247\270M\275u\3312\275\000\212\361\274\310\027\234=S\215\351\274WO\254\275\345\222L<I\343\261;\2627\231\275\222\340\363;jS<\275\320\030\212<\254:\335\274/\242\213\275\274Y0\275\\8<;-\366\373\274\360o?\272q\004\202\275\262\347\217\275\327\036\240\274\017\274z=\323B\217=\222\266\034\275<\233\202=?\017\007\2759\030\233\274k\304\215\275\237\210m\273e\324\n\275Zm\371<\344\355?=\315\236\313;\341s\314=YQ\236\274\264\372~\2756\240\220\275\275-=\274\247Q|<\330x\200;\303\261\000;)\336\305=s.;>\230r\206\275\204j\230;\3109\213=\274x\024\275\r\327\207\275\331\\t\275v\360\371<\314<\021\275\0321\277\275\210\215\025=\037\243<\275\205K\003\275\005j\211\2759\010{<\235\242\357\274\337Y\212\275z\263f;\234\316\220\274\274\337\244;y\264n<\317\004\317\274\3202R<.\2342>\363u\257<M\330+<\010\0254>\020\304\351<\345v\017>8\263I<gr\"\275\206\277\003\275x\300j;\037[D\275\214\257\200>\260\271\031\274\370P\203\273\234\001G\275\270\271\'\275\360\313[\275\363\311\331<\021M\"<\354\347\342=\276\'/\274\361\236\000>H\234<=\221\311H\275\273\206\333\275\261Ea\275\332K\224<\351\304\225\274\236\217=\275\270Q\360=\306uV<N\247\230\273\206\tf\275\311L\231\275-]\204\273\032%[\275\357-\\=(\356\375\274\226\377\270=\275\373\t>5\331\260<\312\032\301\272ozg\275\320\362#=l\256P\275u3\023>\315O\002=\377\301u\275\316%H<k-\313=\016\242u\275W\236\275<\333>Y\275\257\300F>\337p\t=2\202\\\274\3364\353\275\007\255\"\275J2D<\311\031<<\310y\327:\365\261X>\324\271\t;\210\r\024<\n\221\202\275\230\353*\274\377\370\264=\354\333,=\253\'\212;J\017U;\265\037\321;\252\037\254\275\232\367)=\230\342\270\274\031Y\010<\260\240\"=\360Q(\275I\257\036=GLX=\025\201\000\274$\202\222<s\267\316=\214\303\"<Y\210\263\274b\022\373<\225\323\260\274\323\034O\275#v\020\275\273\360e<\220\230\311\273\005\204\217\274]\334+\274\000Z(\275\235R\362\2742\311l\275k\177\"=\235\262\337<\\\251\226\275\303\272u\274\240\306\230;b\360\374\2743\311\264=\362\272\330<0b\024\275\352\013\006\275\362_\272\274Q\036\322\275\317&\020>=\256A\275\306\330S\273\307LH\275\312\333\007\274\211(\3129\267t\200\2752\320\340\273&\273\347<\250M\216=w\027\224>\r!\217\275sA\305<\021\361\276<\240\021\013:\202\036\2479\246{\230\274\216\277\310=(1\200\274\324s\234\275I\275\242\273)\022\271\275|g\\<\256\016x\275j\357\366\274\3219\311=e\300.\275\361\351\022\2753\337\n<j\300A\275DT\273=\322\260\211=\245\270\t\275\"\306\305\274\243/\300<\307R\245\274\225\322\010\274\257\367p\275<\317,<z\214\002<n\225.\275/\266\t=\224\000G=\276\345&<\223\336(\274\337U\026\275v\310b=f1(\274/}P<\2564\247\274\237\026P=\202P\322\275Z\2409\2752v\355\274\326@R\275\343\343\274\275\353\300p\275\021Dd=\340 \304=\251N\210;\330\260\276<o\205*=\366\343s\275V\361a\275\274\243\234\274E\210\026=\252\372\001={o\233<BrM\273B\0138=\246v\314\272\032\302\230\275Ue\251<\226v\004=:\204\313\274e\365e\275b\227f<\n}\271< *\'=\002\242\221<-\232\270\275\334\367\026\275V\t\206=,F\263<\337\220\025\274{\341\264=\346\262\227=\307n\345<\270\002\003\272\033\"\214>\306\2718\274qoW\275\316@\352\274\212\0140\275\366\335\251=\"\260\267=\223\306K\275w*\352\274\310\221,;\372\273\376<\216\330\257\275\010\334\324\274\302\003\022<) \236=X2\353\274\233d$<\242\331:<\251E\221\275\341\354G\275\r\253\350<\2531\217\272\206\247\216\274\310e\316<\261M\024\275\233\323\213\275*\263W\274\370\274\255\275c[\235:\263\261\215\2750VT=\221a<>\277\004$\274\317\262\377\274o\306M;\261N\265=\036j\005=<\031\247=[\212\267<[\340b:\207QS\274\307\303\237>#\264\005>\036\014\230\274\305\006\273=AK\010\275\324\372\201=\352x\356<\367\207c\274]s\346\274ji$\275{\006\332=Xj\277\275\271g@<\370\236}\274\024Q\203=\257\227\234>)\023\271;\301\320\222=\344\222.=\317!\366<\356D:\275\253\201\376\274]}\021\274\307\264h<i\226\203\275*\3055\274dD\027\274\014\027\277\275\371;\027<K\206\\=S\343\031\275\253\002&<\017\311G\275c\342\256\274\327<\367\274L)\032=\350\t\026\275\312u\214<\225g\276<\331J\217\275\253@[\274\037\301O=\017\244P\275\302\tC\2754\016y\275\366\220y;h\314=<\263\275\210\275\263Eq\275\033J\265\275U\350=\275dL1\275\334\325\304\273\350\337\340\274\300/\267\274z\215\233\273J\337\177<\033\317\033>\003\310\225\275\220\177(<\035\0212\275M\322\333\275\372\032\033=\343G1=lf~=\255\030\311<\375\324\204\274\307\336\027=\364\036\265\272\377\'Q=\366pU\275\335\243a\275\210\'\001\272\0369\">E\005Q=\201e\200\275H\336\035\275\013?\312=\305ut:\212\346\312\274\277\0163=] \246=\362\232,=\270#\327=\200H\031<\210\252\205\274m\2738=\234\325\207\275fs\016\275|\034\264\275)\306\025>! \213\275\025\323\034\273>\3355\274\231\315A\275\302\217\204<\267\326\310=\220F\370=\203\245w\275vz\240\274c\352\272<\210\005\301\274\032\0014\275\371\352\002;9\377b:lu~\272\n\274\337\274\326\2426=\320u\336=p\377\214=(\017\225=j\246\275=@\326\260\274\\_n\275\264\350\224\275\373\336\247\275\002.\260=Dri\275\343\021`\275\242\215\323:c\030R\275\2153\213\275\375\213\365;\315y\355<\233F\315;\334\327\312=\341\347B\275C\2441=\313O2<y\350\226=\262\322\266\274\344I\257<\330\372\240<\227Y\242\274\325\273.=\014o!\273\346&\'\2750\207\226\275B\320g\273\353\223\351\273R\r\"\275\201\223\350<\002\301~\274f\346\264\274\253\273C\275;\3754>\225\306\035\274]\002\'=\355\355E\275(R\301=+\212\230;\375E\374\2745VM\275!\026\303\273\023\377\005\275\033\234\006\275\'\221Q=A\324{\275\3347\017=\266\037\321;J\210%<\250\002\'\275\364Y\275<]\006\006\274\214\030\005\274\270\312W=\205\3508=2\242\355\273\367\360\307<\315\177\036\275\035\030D\275*b\246\273\262Rg\274b\222\346=\366[o\2743\362\360\274\377\202\030\275\325-\'>\013\351\023=\332\023\261\273\247\356\022\275\360#\322\274\310\323\354=\356\353a=\336\303\306\274G\221s\274,\206\224\274+\036\345\273\206\230.=\027l\213>\320\272\205\275]}\333<\226\256w\274\351R\336\275\253\241\024\274\007=z;\242\206\214<\330\355$=\232\365}\275\273\3774\275|\315\366=[D\304<$\325\366\274R\272\274\275GT7>D\023\213\274\343x\325\274\013[_=3\231d\275\276\324\201\274\303\321\001>\342I\273\273>\2108=m\320:<\211q\201\275#\027L\275\377\017\233\275\017\007\206\275\023\004j\274(>\273;1?\320\273\250\026\004\275\335Y\017\275\206\030(\275\227\023/\275\375\371\203>\177\360+\275#`V=8\365m\275\rQ\226\275x\325\311\275\331\316\373\274\300h\005\275\332\276\354<\322\232x\274K\256>=\272\r\244=~F\004\275\014\000\232\272\224\244\t\275H\216-\275Vtq=\023\023\271=\254\330\024=\227o\n=\340\0058=\205y\035\275\242\021\216<\244\226V\275\347\361\357<\035\321 \274\216\224\362\275\221\223q=f\023S\275v\307\005;\314uH\273\217Y\020>\272q\030=\324e\004;\305R\373<WE\211\275\207=\034<\023xx<>N\227<\362\347\327\274\370\210m=~\334J<\334\322\310>\230\\\352\272D\331\215\275\"*|\275sz\272<\301\326j=\"\304Y\275d\224\360=$\020\216\274\203u\347<\0066\326\274\211\342A\274u\370k<^\375x\274R&m\275\026\250T<\316\217\240<\247\310P\275ga\310;\374Z\r\275rC<\273\251\000\017=AW\r\275\234\374<\273Wp\271\273\233\344\376<\203\313#=\232\235\311\274\000A\363\274\025?\201;)\262\033\274z\330\344\274\032\244k\275\313uO=\3703\271\274?\2201;\037\030\000\273\366\003\301\273\002<\211\275\006\303\261\274\t\304\252<\262@l\273_N/\275\036JT;j\302\034\273\006S\\\275>\333\266\274\366\320\007\275\225\241(=\335\034\364\275!\007~\274D\265\037<7&\034\275g\211\334=z@o>\245\334_\274&\220V\275\237\013\027;\372d/>\302\200Z\274\217\335\343\274z\235\311=\007\3521\275\030v\240\272\033\241#\275\252\3015\273\273\263%=\007\234\014\274\356\005\374\274v~/\275)\323\014>\207C\200\274\311#s:\023\302\343\274\322\201\244<\023\230\032<^\205H=\371\177\316\273\024\237!\274d\362\316\274g.]=l4\244=w\332}=D0*\273\261\272\375;:L\256=\314\267\362\273\267\307\247;l\225S\275\240\367\223\275\241\231\367<\003u6\274\363\004\257\274\260c\207\274\327S\246\274\014\223\220\274\024P\277\274gl\223<\026\235\237\275\201\016\002\275\324\210\301\274\275H\253\274\254\272\201\274U\246p\273\032T\322<\\\000J\274;\204\217\275#jB\274WSv\275\342\304K\274\341[\254=\023\r\230<\025T\211\275z\240\375=\377\201\005\275T|\256=L|n\274\234G\237\274[+\237\274(\371*\275\250\341T<\363\004)>R\3262>E\347\234<\263>\313=\360f:\275\244\001\215\274[\350\205<\202\251\363=zZ\022\2754b\216<R\'\357\274\037B ;)\343\305<\244\270Z=X\300\377<\235\355|=\200\323-<B\tn\275\200\004-\273\254\262&=zC\304\274i\362;\275\227\217\301\274\014>l>Z\016\270\274\265#\244;}=\211:7N7\275u\361C\275U)A\274\232\213\311\274h\345\273\274\316\036\367\274 \203p\274\006\361K\275]\246\203<\320V\232=4L\274\274\272l&=M\226\263=\021\367\257<\244\002J\274\341M\303\275y\231\003\275\223ZR<n\0279\275\321\377\215<mr\233\275-\337\244=\262F\274=\344\231X;\037^\266\275\361\2138\275\272\202\271\274\341F^;x\353\244\274\311\343\273\272\377+\237\275\025j\034;#\241\024>\013\n2=uv\307\275\377\201\217\273\233\3335\275\364\246\023\275\206\2751;\277\274\301\274\2108\342\274\250\247\351<q2\220\275\241[\327\274\013\305\313<\330\255\337\273\314\300\030<\322\277\350<\252M\203<h8K\274\252\232\224=\3034\301<(N\365\274NB\016=\241\210\200\275\265\302=\274]\275\215<\032\222`=#\217B=\303\242U=p\262B\275\311\301\217=p\036\022=U!\240\274L\306\034\275\026=\210<c\255\031<W\325\361\273\022\256\324=:\310\037<\250\273j\275t\311y\272so\363\274}49\275\024B~=\203\337\343<\347\325\316<\204)\033=\200G\345<\036\241\n;\005B\355\274\007\224\302\274\025)\217<\226\3453\275~8Y=\311\354n\274#\332k\273\"\274,\275\262w\233\274\237\315\n\275\237\362\337\274s\377O\275\016M\204=0\321\001<\377:\206\274\222\345!\275\260\033K=\251\3561\275;\217w\275\325\271\317\275\361\277\216\275A\203\252=\373-\337\2738\2153==\352>\275\217R\352\275h\275\251<N\352\376\274y\200\036\274\324\327\205<<\301\302:\355\263\235=*\307\214\275\346\001i<\3146\332\274\316-\210\275\353|\237\274U[\251=N\3064\274\035\251/<\364\230@\275\341DR=\342~\014\275\242\t\217<\325\217\346<0PO<\301\000\216\275\330\024\213=\303U2;\n8\311=\357\254U\275^^\345\274\261\217D=\004j\240=\262\206\177<\341Z3\2755\243x\274B\270\037<\263\034\232=\"\372#\275\000H^\275\226\225f>>\227^=\364\003\023<\322\271\341;j\014\353\275\027pe=\002\210\017=k7\203\274i\211\273\274/\257\254\275\003\376G\275\205*\207\275\347a\244=\237\305\265\274!\236\220\274=\343\244<\246\310\036>13\243\275\307!x\274\217/\036\274\220#\003\2750\246\243\275\367\375\337\274\230\003\233\274eF\311<\340\204\345=\374C\363\275{sM\275i\033\246\274\350\\\233\275\0045J\275\363\372\375\274\313\034E\2759\371q\275(\035\301\275\363\311\217<\345a\200\275\252\342/\274\027,b=\007\244(\275\303\302\254<\273\212\212=\355\367#=\363@^<\332!\263<\220\022\370\274a\205\342\274\247a\265=\230\320\342\275\354\250\306\273\321P\347<\237\337\324=*\332\213\274\005q\274\274\030P\036=\'\343Z\275z\003\3337\007Gc>\301\263\006=,\206\020\275\231\273I=\323\265\254\274\236x\317<\345\004J<\240%S\275Z\201\246\2755\305\241\275\250+\210\274\3007\306\275G\324\211\274\234w\313=\224RA\275\235!\213<P\336\266\275\235\301\223\275r\335\245\275?9\330\274&$\335\274\365\251\204=\342\326\261\275\363\236u\275\n\377\312\275\316^\301:\235h\312\275\215C \275Y<\264\275\247\036\355;\3058q\274\\\n%\275\320I\022\274\362\207\320\274j\311\001;\370i\230<Z\243D\275\377X\352\274/\177c\273\025!\221\275\221\326\366\273\002\t\221\2734\003j\275\004\000\205=H\334\220\274\274O`:P\001\356<\342f\233\273\235 \246\275E\313\253=Ud\312\274UR/\275\234\216\374\274V/\332<\366\260B\275\013x\027=\026\211\226<\362\326\214<\202\352\271<\340\2069\273\306\rB\273\233\303,\275\361\256\021\275\206\2761\274t\002\202\275\272\034+=\363\271\236=\203\330j<4\213u=\213\272\242\273Q=\362<<I\017>\3202\233=\243gF>9I\001\275\0243\025\273\034b\203<\325\032\354<\203\343\275\274B\361\330\274\256\312]=\253G\r={\242\367<p\322\276\275 Y\031>\177\345\257\275%\020\203\274Z\337\367=\025\276V\275\006+)\275\322\214J\275\031\371\263\272\202\010\317\2740g\265\275\006\013\001\275=\352\270=_\312+\275\000\2700\273\250J\001>\245;\002\274\311\307.<\037I)>\256c/<\034\022\311\275J7\234=y1\332\2746\232\"9\216\032&\273S\023`\275G\002\223\274#\3300\275\244S\335\274U,\216\274\230\374\366;&=\356\273\276\374K9\3154I\275uU,\2759\017C>v]\264\274F*C\275\372\203\316\274\364\031\031\2743^\226\275L\243i\275g\211\252=\256\001\331\275^h\031=3i\262<\215\r\025\275\321\nb=\002\035\001\275\232\356\344\274\201]\007\276GJ\205\275\026 p\275\036a6\275\347\"?\274\237:\236\2756\"\234\274\263\341\013\275\305\207u<\334\"\224\275b\203B\275\001\216\202<\rn\371\274B\010f\275\374\026%\275j;\231\274\371(\243\274\347\024\014\275m\354\020\275-E\247\274\335\"(\275\363\261L\275\214%}\275\334f\357<\272\363\334\274\320\005\310\275\302\207\236\275/\271\227<\002\010\204\274\267\375\347<A\004\307\274\225e\327\274\375\317\235\274\215z\253<\346\007\370=d\307\236\275\245\235\252=\213\"\213<\t0y\274\007t\267<\320\007i<\262=\205\275\3252}\275\301\270F=\266\241\033=\\\346\346\273m\261\305=\001\000\236\272\346\356\014\275@\\\335\274K\274\030=\256\266\351<\\\352\003\276*\022{\275l\342\206=x\326H=\373\"\027=\2128\306:\177\005\022>S\215\211>,\304J\275\362iO\274\224%\002\275 \355\177\271\215\250\032\275;\273\245=^x\027\275\n-#<\324\024\017>\002\020\367=-\271\252\275\240\245\355=-\200]\274\377BQ\275T\311\215<i\202\273;dt\366\272F\215W\273\252\207K;\334\236e\274\013\002\221\275OG.;\031^\021<\3275\252\275_D\234\274(\363\313=(\247\336\274\374\271C=\304MT\275<\007\210<;\252\222\273~\370\363<vqM\275M\215#\275tO3\274\260%\334=\001r9=I\037\366\272)8\003:N1\016\274\010\016\006\275+\253\355\274p:\205\275-Si<\002\311\037\275A\371f>h\230\000=W2h=|\251a=I]y<\327!\375\274\253\351K;\372\225V\275\316\212\332=\243\005\002\275\254/n<G:\027\274{\001g\275`\204J=6\265\n=\351\336\317\274\005\rq\275yQ\241;\336\365\033\275\356T\035\275\337\247\017\275v\340\022\274;\362F<\324x\305\273\271\362N=\207\332,\275\373\013\237\275B{L<H6I\274\231\310\277\273\345)\264\274Br(=\005\223\223\275T\023\213\275\3211b\275c\324!\275\202TK\275\2613\001\275\216\315S\275ar\363\273\262g\334\272\006P\230=\244\036\215\274\237q\220=\211\033I<\002.s<+L\014\275\3530\340=\365\202\220\273\353W\235\275\237\263f\273TO\206\275\001^\"=\267\276\025\275\315\354\375<\277\243\031>4\357U;\305\306\235\274\362\207\240<\244\300\254\274r%;\2751=\336<\\D\242<\262\222\366\274\343\344\"\274\302\234\257=+\311I\274\345`:=\343`e\275\241\222\363<\351\td={[\272\274\242\263\002\275\373\225\217\274\276+\206\273\376\317A=+\030M\275\356\014K\275\300\267c=\200\365\003\275L\242r<\321w\325=\234\237(\275)_\003\274\020\344\256\275T\370\346;:x\227<\206G\210<J\307+\275\202,r\275\020\273<>&\306\022=w\312\210\275J\255\344\274[R7<\322\327\377:W\355x\2743[\211<m\235x\275\031\243O\275\'\311{\274J\024$\275a\251\226=\341\225\016\275\361\266f\275\276\216\001\275\327\332\356<\333U#=\200.\013=,9\326=\307\035\227<\334\036E\275`\313\027:,|\351=\2260)<\273\212v=\360\021\235=\235W\366<\253p&>\021\322p\275\205\345\206<\256\021S\275J\223\214<\024\3024\274\033\253\327<\013\361\335\274\255d\267=\300\374\030=\265\262\351=\303\311\211\274\232@9;\327\027\025\274\242\331\007=*\206\316\274i\274L\274\177\2213>\303{\205\275hK\307:r\322\233\274~\342E\274\3716\270=\305\360\002\275\361\356\272\275}k~\275\275\340\241>e~G\275\212G\213\274\246\034^\275X\203\360\275\006\326[=\032\026\177\274\301\t\273\274e\266\n\275\261\271\203\274\"9\'\273lQ\313\275Y5\037\275x\022\233;\334K\021<n\231\366<\300\370\026\275\367\304D<V9\r\276\014\010K\275*}<\2746\277\253\274G\270R>\207jK<\n\"\342\275\031J\262\274\016\250\306=W\030\277\274\177\014\227\275\354\257\217\275\323\247\010=\263\325s<\t>\202\275L\261N=}\223\004\275\023\006H=\202b;>\316\202\033>\357d\005\274\214\224\231\274j2j\274G\325d\275<\374\027\275\360\327R\274\247\301M\275r/\201<\021Lf=\322E\\=L\230%\275\321\276\233\274\372\266\265\275(+M\275\025\266\237<\343\014\320\275-\257\004\275\316\376\264\274\361w\030=\321\177\254=)\006\007=\316\315\004\275\3768\325<n\272\215\275\232\221\350\2748K\372<\242c\210\274\306\313\003>\372P\032=\360\034\020=\215X\323\274&\347!\274\270!\252\275\236lo=\\\"\"\275\210\350\314=6\200\272<\321\023\320=\350\352\253\273\340f\221<f\245\243<F\t\"=\275\\\212\275;\206\267\274&\210\301\274\036\232%\275U`\200\275\245|\005\275\3042\206=J\326F\275\306\036\234\275\3177\013\275#\230\007\274\323\002H<\314pz<\244\266\355\274\331\311\331\275\005\325f\275\356_\201\274\024\261\221\275\001P\244\275\2306\025\275)\337B=\310\212f=%l`\274<\027\233=bH\004\276\223\210\246\275\315\342T;$\301;</\036[\274MT\204=\0217\355\274L`\360<;C\356<\254G\027\274/\3773=S\273\232<\247\335\020<Y\256c\275\357-\217<\270\205\333;\0379\220\275&\205\037=\230j\225<{\300\306<9\3516\274\372$\214\275\207\277\006>\213\307\021>\373\332\223=EO\305\274\214\220\261=<\244\027\276\317t\202\274\003>#=\270\275z>q5\306<.\210F=w\373\345\274\201[\336\272[\376?=\304$\205\273\260\356k\274\316\272\032\275\352\037\222\275f\325N<\r?\327\274\221\340\360\274\311x\010\275\035\321\244=\351\352\024\274\212\243r=\321\314\t\275\261A\207=\345SY\275L\022C=\000$N\275;\007 =\251\363\250\274R\270\233\275\371\236[\275KJ\304<V\246\312:\204\t3\275\350\265\256\274x\201\340=dDw\275n\2209\275\251\366)\275K\256P\275:\021\322=\375\232E=~C=\275Lw\302\273\335\216\301=\030\274\017=/d\010\274aQw\275\370\300\333\274\362\355#=D\3644\275\350\242\206=>\014w\274\323%f>\277F\204\273\275\225M=\325L\253\273gH\255\275A\203\255=\240e\263=b~\312;\037\027\303<1\005\207\274\346\267y\274&k\325\274(\240S\275\\\350\257=\nx\t>7~\375\274\251\213\333\274|\374&<\275lL\275\374\272%=\263\247W\274i,d>\214\351/=\352\323\373<BI\032\274\220\343\362\274Z?\243=?\004\254\274\375\227\032=L}\214\274\334L\006\275?\211\001\275^\260a=\270\333\024>\213\331\223=\003T\302=HQ\260\274\355h{<\311\314\031=\203NY\274\n\317!=\320\305\265\274\344?F\275\252\203\261\273\311\347\216\275y=\250:\026\025\263\275\357\225\337:eV$>&\264$=\275\222\366=C\227\213=\316m\315=\036V\232\275\303\222J=y\353V\275{\243d=\270\201\222\275z\320\n\274\226\2733=3hg:\216/\206;\262c\232\274\036Y\024=!xj>\270\275\013\275U\034#\275 $U\275E\357\312\273~\257\275<\240\262\336\274r\001\026\275\266\246#=\251`\307=\311w\n>\006y\275<\001U\243\274 \247P\275\226\202\010:\334lA:FL\261\275~\177Z=\340\312\321;f\262\233\275\346\213\360\274\211\217\225\274\317\245\033=\003F|=\350\350\005=W~\202\274\262\304\347=\232\234\207\273)_\375=\277\227?\274R1B>\256\227\221\275\255+0\274\352@v=\332G\236<`\266\227\275(\242\026<\"\020\325<\254\362z\274\270\206\315<\371\211\n\274\200sq\274\306\230\365\273\235k2\275\017V\225\275J\2159<\306\350z=i\276N<\332s\004<u\275\354\273\340\000\033=\013~\027=\004,\233<\271\247\024=w\032p>@\326\231< \270 \275\032\010\225\275\354]Z\274\345\233H\275\346Hu=<4\r\275\t\371\215\275\212\364\306\274\303Uu>z\342\356\274\340\352=\275\364\216\244<\325\204\275\275\255&\r<\205\316%\275\214\375G<uTv\275,~n<4$\226<N\254\254\274\241\207l<wy\340=\333-\310\275\276\261\t\275\241_U\275\'\024\327\274\275\201Y\274\323H\006<\224\205:<6N\325\275\200\233\344<\177\253\r\275\245\207\237\274-\014\016<\322p^\275V\241\274=\300.\221<\233j \274PN\021=;\216\203\274\332pa=\212\343{\274\37572\275!\370/\275\266M\260\2757\350\344\273\014\002==\275f\307\273W}\034<\352\255\275\275\375\231B\275\360\357\021\275|V\261\275/\272\">\224G\013\275h\230x\273\341\017\260\273\333\232I\275C\355\365=\356\230\264\274h({\274@\034\017\274\214v\240\275v\t6\2751\254\334\274\023\211o>E\205\332\274\037\'\016\275\314i\253=\nB\255<h\336[<v\026\000\275\027\305\213<U\223\034;\232\353F\275~\221\312<D\005\374\273\252\ts\275\366k\352\274\2236\246\275rX\360\274`\014c=S\342\354<q\274\236\274\230\010h;vhC=\356\003\032\275r\263\003\274\0045\211\275\303\240\246\274\311>T\275?\323\210\273\254 \374\274\341\340\313\274\323\320\033\273S\371\322\274\356\312\021>\021\342\002\275H\014\305\274\321\231\220\274\263xG\275\342\016\360\272*p\252;\024\310@;G\335\377;\252\340F\274\331\t\206=\013\260\026=\275\013\313\274?\310\217\275\3073U=\222\275N<P\336\274\274\250\016a<\301\270]:5\250)\275\007\316\240\275\240\036\r\275\354\037Y\2747\261\223=\212\343\242\273O\211\246<\304\342\213\273\203\262\200\273\t\335\231\274\272}\216=:n\245\275u\010\035=c\356\341:\215~\235\273\010J\001\273\300\356\035\2752\177y=\347t\220\274!fS<G\310\255\273H\324\232=\374\2437\275,:-\274n\360e\275p+\271\273\2025\t=\312\271i\273\300!\214\275\246\275\010>\356$C\275\210\177\006\2750\216_=\242\244\334\274\3265\376<\274<\023\275?K\346\274\336\276^=u\365\312=\235\037\"\275Y\014~=\234\252\301=\320j\030\275R\244\372=o\341m\274\034b9\275+\371\305<\250w\000<Z\235h>\371\225\264<\013\266\201\274&Q9>\363\016\027=\376Z)\275\342\346\r\275y\373\347<\n\373\201\273,\2741\275p\371\260\274\014\376\n\275;h\332\274\226\206f\274\314\212\323\273\231\365\275>\014\322\020\275Q\177\233:Bh\305\274\2568\257<\302\330\204\275\271\305\364\274\020\343W<^\371\256\273\377\234n\275\223\232l\274zt\000\274\222\220\216\274\250\351c=?Q[=D\370\373\2744\"h\275\302>m\272H!L\274<s\261\275b\253\307\275U\n;=\237\031\020>9\256\273<\202\215D\275\362fz\275oU5\274\221\025\014<\316_\037<\202\245\006=\1777\316\274\223\217\227\2741%L\274\351\227\245\275{8\276\272\373\254\277=>)\224\275Ct\306\274\203\t\266:F\363\252\274\342\272o\275hp\n>\373\177\024\274\212\032q\274\346s\210\2751\300\361\270J\022\312=\0148Q\273\0339\377\274W6\261<\331\020\211\274\027\002\274\275|\\\177\275\337\222\302\274|.\323\273\010)X<\316&\016<t\222\214\274>\021=\275\330\223\370=n\033\020\275\306\321\024=\020{`\274\"&\203<\330bE=\366O\226\275P\0102;\376\241/\275V\205#\275.uz\273\266Z\231=b\3123=\222\017\315:Z\304\342\273F\207l=\210\305s<\362\016\275<\373\376\346\273\023\004)\275A\021G\275\273#\001;\277d\033\275Ux\370<\323\025\241\275\367x\237<\313H\207<YV\275\274Y\320D\273#\213f\275u\233\271<\275_\272\274:j\014\275u\273\250\275\023\241\334<\374g5=X\310\254;@S\310<\220\026\223<\303?\377\275\263\324f\2751KH<\305.%\275\030XH;\014o\023\274\023\267G<\251\025I\275\010\277@\275k\267\321<;u\377\2743\221\311=\027^\224\274s\302\202=\230F*\275\274\331c=\236\0253<\3256\231;q\206 <-\3353\275\317\324\304\273(\241V\275\213.V\275\027\203\035\273\260\017\250\273\372\005\337;\026|\201\274\3016\275\273\322\232\263<Z\225\207\275O\213/=\243\346\200<|\232\264\274L\021e\275B\370\311=8\324\347;D@\244=\374\342\317=\006\003\340\272\272\270 \275\251(8\275!|\235;l\256\235\275s\215\r=\330\303E\275\026\'X=\341\224W\274-\237\233<m\263\030>\3221\362\2747\357&\275.B\273=\023\266\217\274K\352D\275\2273\266\274\013h\237\271\017=\n=\277oE\275!\3241=h\370\271\274\341\376\206\274\231\253\361<\036\234\033\275\315\376\"\274R\013\"\275MM\207=#f\221\275>Jb=at\321\274$)\023\275\030{~\275M\355\215\273\322\177\252\274\013\312\024>\330m\020\273\017hW<\373J\241<\010\320u\275\200^>=\207\327\000\275\321R\216<I\362U<\302\374r=\225\307\027\275\0002\\=\2700(\274\226\203\371\273\340*\203;\332\2666=%1\035\274\342\2131\275\271\302O:\020\371X<u\307N<\345\243\200=|2!\274$N\237<\275)\313\272\227\2601=\022d\022\275\336\211\344=\222D\303:LI\273<(\350\212\275\276d\376<\210\352\242=\322\264)=y\222\256<\267]9\275x*{=&\320N\275\347\237/\275C7\257\274\206\341\201\275\357\344\361\274\274\032$=]\361\364\274v\316\317\274\241\016D<\344\363\220\275f\367\312\2736\216A\274gA%\274\274\263\3179T\2346=\206\264B\274\317\226?\274\272\345\206=\377\356;\274=\325y\275,\000\305\274QR\321\274.\305s\275cd\303<\323\332b<\237t\033=\377>X\275M\217L\274P\352>\274\247\344C\275\033\277\023=\347\317\312\274s\351\016=\256\t\275\2744\350\214;g=\336\274\212N\240\273\234\035\217\274^t\276<O\253\347\272diz\274g\362\346\273\264\371(\275f\267!=\272B\257\270?k\222\274\013\373\202\275\271\207\352=\r\216s\274\016B\247<#\203\"<9\351\025<(j-<\277\235\026=Q\247\362\275L[/=\260\222\341;\201A?\275\035\327\254;<\216\033\275\t\303\364\274\037\316\205\275>I)\275\004\214z=\232\200\225\273\\\"<\274\360U\020\271\214\232\332\273\003i\023\275I\310D<\237\203\216;\267p\230\274\216=\031=\003\346s\274E\2450\275\364\346\373<\265a\254=\352R\262\2732Jg\275M_\251>{4\302\2755N\007\275\363\n5>-4(=\350\232R>\024^\373\274\352v\037\275\273\327\030\275\307Z\306\273m\275%\275\237\250Z\275\r\223H;\365Fb\275y)%=\314\275>\275\263\"\276<\251\003\036\273o\234\365\274\365\315\364\274\\\017,=C\036\003=/k\002\276t\021\005\274\256\230\235:\277\310\220;\276\262\221\274\223PF\275~\312\205\275oO+=\260\245L\275D\244\355;\276\271h<\"\225\205\273W\253B\275\361\223 <\357\226}=\372e1\274\036\364~=^\346\200\275-\006\017=p\001\230\274.}\264\274\240Fh\275\032\314I>\214\240\246=(\026\346=\246\301\031\275:\034\326\274\305fB;{}\271\273w\300\022=\363\244\316\274\364}\271\275\3071,=\025\336U=K\212\221=\354yx<\000\200\246\275x?\200\275\005F\r=\300\373\034\275\335?P>\275zl\275\360\213\013<\001\033\037=|A4<\303i\215=y\357\366=2\274\376\274\334\262:>\240\335\010<\353\231\267\275\255K#<\373-\020\275\302)\256\275)\031\333<\261\251\227\275\204\323\300<\\\004\014\276m&$\273\311d\006\274\317\307\275=f\354b\275\341$\364\274\311\036\022\275\n\352\276<\345{\264=0\355:\274\002\177\030;\222\203\035=\373x\303\272\332g\236>.\214\242\274\355Q\335;T\355\262\273\365M#>|\244\277\274Y\340]\274G\326\001\275_m#<v\004\002\274v5\253\275\331C\257=\352W\"\275]\267_=P\212\247<]\257/=?\310/>\2643\376\274\233\341X\275\375\253\036\275M\357v\275?\367\021\274W\267\253\275`\220\224\274[\231;:v\3350=\021\347\335\273\3640\345<\264\'J\275\230\017\276<\006;1\275\036h=\275Y\321M=\263c\201;\347\000m\273\010\337\262\273\023\340\361;\372t\243\275\017\006\222=5\t\267\273\277RE\27571\377\274{1\342=\2360)\275\\nN\275+\230\240=-32\275\303|l\274\271\323I=_\227\203=\3639\373=~\217\006\274AA\200\275\275B)\275,C\214\275\264\335\233\275\302\340\002\275\374\013\255<L\217\233\275~\276\256\275J\230\334\274$)\265\273]\276g\274|xw\275\332\313,\275W\362M<&[\366=\265\000a\274I\245\222=\373`\010\275\007\335\212=\006\351\237<d\353\013\275\365>u\275T\330I\273\266\217B\276G!\343<\231\273\327<\234T\251\275{1\037\275\204\261\003\275\323\241\370:\365\203\225<\353\017\370;\266w;=\351*\311\274\222s\235=\276\"\301\274yS\024\275%8%=.\322h\274\304T\t\275\355\370\320\275\367\373\030\275A7\306<\370\350\033>n\232\337\274\235-x=\0132i;\234\277\220:<\250n<\304\340;\274;\006g\275\304!5>\003\023#=\345\317<\275\375\233D\274\376\344[\273(|U\274*\033#\274\023\314_\275\034\314!=Y\243\\\275A\321\355=![\022\274\005\032\237\275pO\250\275\037\214\270\273\2368\376\274`\002\234\275\242\317\321=\351\367\204=\307\260#\2757\327W\275\020\226\334\273)\330\\\272\336\230Y\274\325q\3079\312U\006\275-\205\360<u\027\003=\363\034\037=_9\324=\365\270\221\274z\373\020\274-\010\023\274\'\005\367\274pm\215;\006\361\226\273,g\225=`\024\336\275\230\351\003>W\344\366\274\023\372\'=>\037\226=Zn\266\274m\370:=\243>/\275\247\3118<\254\355\\\274g\244\241=\337.\214=\003\231\305\271\177\256\212\274\212\257\004\275 \256\250\275\332\311\007\275\270*\226\272\375\222\006\274M\314G\275(\257\037\273\227\356%>\242\230\023\275{\326}\275\230,)=L\364+=\357\236\270>\267\244\372<\257\304<\274\345\032\023\275\242\247\227\275\336|\177\275\337\221\013\275\334h\223<C\342\t=\316\267\303\273\021N|;\023]\016\274\202_\021\275&\210]\275\243\016\240\275\245)K\275>j\230\275\240o*\275\335\316T\274\240\215\322=\304\340\001<\345\025\240\275OO\025\275\032IT;\343\312a<\267\376A\275\266\207X\275\261(\t\271@\376\205<\266\306\002\275e\234}\275\301C\215<6\'3\275Z\3126\275\306\327\031\274\251\254\321\275,\023\270=\252\306o;y\375\262\274\217\306\226<\0057\366\275\214\272\027\275\327\343Q\275\033\363\333\275\\N\324<\230\335\017\274\257x\036\275\337,\241<K\026V\275\336\010\003\274\301Ot\2759\346\001\2757\367\013;\367\267\254=N\370\253;\030\"\304\274X\\0\275q&\203= \335\347\273\275b\023=\250z\314;\215F\255<\311\t)\276\3172`;n\"\303<h\234.<\360J\020\274b\331\356\274\352=/\275%A\232=(\373/\274\007Y[\275J`\300<\307\026\220\275*y\022>\306\332\241<\2521\270\273\366\270I\274\340i\212=\261\336\213>\270\277\025\275\271\350\250=X`\336=M\246\001\275~o\201<*.r;\323\233q\275)0\356\274\352c\345\275\225\004\216\274I\203\234<(\306\210\275\343b\226\274@\r_\274\024\352\271\274\177\001\347<q-\223\275\333BD\273\3243\021\275\276G\033\274lXg<Exk\275\343\217\001=\243\316\352\274\014\300\201<\276\206~\274z\243_\275\326\336I\275\307\310b\275\033\234\216=Bu\347<\023\271$\2758\237\224\274,\203\335\272\304\344%>\222\341\351\274\337\366K\275\\)~\274\312G\231<#K\254\274iG\223\275\316w\357\273\277\271\242\274\374c\014\275B]\234\274\346s\361;lC\315\273!\177\323;\206{\265;\270\233\365;\316Y\306<~\232y<d\220\321\274\004\306\305\274\343\255\272\274t}\202\275q\253s<\021\006\027;5p\277;ny\263<\2609z\275\241\367\004\275\031\332\037\272\031d\260\273!\026M<\360\240\234;\300\000U\274!*\"\274\367it=\230\344\254\274\236\201\243\274\347g\323\274\300\3228;\026\233\320\274\303]B\275Go\027\275\204\307\016:\353\3255=\244\332\036=T\342(\275\3426\035=\370)\0279{\250\262\275\306\027\310=uE\277\274.\361G<OD\031\275\252{F<5v\356=\310\337\332=\351\231n\275)\245\253\275A\016u\275hFk\275K\314K\275\363f,\274+8T=\231\320\247=G\005\374<o\311\r\274\220O\370<\275\002,\274\223\276\321\274A\021\317<\254\340\320<\330\307\003>\220\213\301\274\312\256\331\274t\016\000=\241\270\036>\234O\246=\251\322\017;\256\026Q\275\366ek\273:\202\375=kx\336<Q\367<=\261=\201\275y\326>=\207\223H\275\340C\263\274\355\\-=\341\277\325<Ub;\275\261\246\345\273f\010\363=Y \304\273\275\361;;0)\304;\207\330U\275xG\242\273)Pg\275\300{\023=x5\203>\223\353\310\274\340\206\345<\317r\212\274\230\225\240\274\330\321\002\275\331\023`\275\034\221\034;\031\013\360:\351\274r=P\276\204\275\231f\310\274\0204\004<\224\344G=\360\236\356<\n\362\250=\202\037K\274p\031+\274\334\226\271>~76\275\353@\223=\343h\243\274\037\005\212\274D\327\335\274\272\241z\275\005\373a\275\244v0\275#u#;Ug\350<\177+ =\3566\326\2742\000\227\272o\304\316=\221\204$>\360\026Y\275\374\"\310\274\t\263C\275\331%}=\216eP>\013\021\254\274\n\267\203<v\271\272\274\350\2178\275\3245\006> =\317<@?\027\274\374\251\006\275\027\205\234\274t\037A\274\330(\t=QW+\275\337\376T\275\261V\253\275\363h\221\274V\336\205=\353\021+<\272\331d\274\\\314?\274Z\306n\275\31321=\353L\345:\264\230\255=\372\370\346\274>\017%=\220\376\036=\271\337e\275\037J5\275\210[\006\274\031-\222\274J*\023\275\367\320\326\274\325G\013\274\250\314\237<+V\212=!z\210=tW\273\274\037\315\204\275\250\371 \275\211\322\007\275|\345\004\275\331\002n<\306\241\273\274\327@\261<\307\327\332\275*\365\211\274\255\213P\275D\236\261<\020\242,\273]\323\360\275m\246\226<F\270*=\317\360\366<\255\274\365\27495t\275\343\275\200<z\330\261\274\300=E=E\303X\274\324\225\001=}7\274\274x\311c\275]\373\236\275\373\016W<\211\210\335:\216\3638\275w\324\301<\353\273\247\275\271\266b=/5\035=\000\261\253;\324r\024\275\276\324<\2746\016\261\273\010\027\222\275\035\345\003\274.\021#=R\237\032=\314;\014=\357\264\260<\216P\025\275\235\000\026\275\272\311w\273\010\211\217\275\212\365+\275\257\206>\275\304p\005\275\351?\274\275\333\306\241\275\366\336\362\274\010]b\275H{\"<zDG\275\r1\237<\n\240\342=p&\250<p\033\212<$\270e=\0031\006\275XT3<z\376\013=\331\330\301=oP\203;\346\023V\274d_\224\275P\310I\275\272\237\030=z\355\210<m\321\263<\246s\345=.\214\322<\216W.\275I\344\310=\254\177-\274h\300L\275\344)\202\275/\372s\273\376{0\275\362\350\213=\373\367\342=\374\013A=\003\362\242\274:W\310\274m\315\t;6\303|\274)\034+\275\320-^=\253\027\372;~a\255\274\036\266\240;\021D\013\273)\212\237=h\006\031\272\301\225\263\275\267\211\013=%@O\275\0165\235\2756\341\223\274B\303\313=\023\177\220\275\323\263\"\275\005\263P\275\361\210\360\274\335\231\317\275\366\227\277\274\347/\311;t\337-\274{m\375<\rH\214\275\306s\207\275]c\236\275Q\202\031\275\204\355\330\275\210\230\312=\335\361\032=\247\031\322\274\322\020T=\346:(=_T\323\274\\\204\217\274K\212\242=\311\276{;\216\377\343<\035\013:\275\224),\275\276\334\000\274\326\266\227\274r\024\372;\332\325\275\275\315&\222<\205\026S7\316(n\271\240:W\276V7\265\274\355\177*\275@\266\216;\302,\006\275\271\231$\275\301\013\372;o\264^\275@\022&=\'\341C<\357\231&\275\352\372\325:\336\265E<\202\242)=g\253\224;\016\212\227=D{g\275\031\264\365\274\224Kx<\r\013K=mSB\275\342w\351=S!\036\274\234\223\034\275_\313\214;\251\007^9\220\226\357\274\"\272*>\311\276\376;\261\3360=\t5=\274\3605M<k27\275\313\303\022\275Y\235\024<\027\342\232=?\210\010>B\000=\275#\037\254;\322\227M\275\351\216u=\235y\331\274V\263\257;Sc\024\274\204\2259\275\266\202\356\275\266\3523\275\312\262\212\275\370\272(<\243\247\261\275x\306\204<J{o=\226\242\307\275\232s\r\275\340S\234;G\374!\275Fl\274\274\t\227\025\275\325\253\322\275t\320\226\274\354\361\315=/fW:;>\035\274\244<\211<\032Y\234=\234\316\226\275\026\035J>\022(\231<\250g\261\274\255\341\217\275@\'\033>\261\376\335\274\272y\026\275\004\323U\275\271\222`;GP\204\274+\303\230=\267D\340<SI\223=$\370\033\274\026\301\203=c)\305\273j\203\365\274\204\225h=\257\310\265;\3008Q>\000\324\232<P\202\255\275^\266\r\275\024\357\375\274\262\231\357<\t78>qGr\275\327\231\210\274\225\247D\275\034\336\231=y\366\251\274KK\177<\260\0079=\032\334\177:\257[l\275n\255\311<\352;\000\275\242\"\220=\317\353\311=\227c\200\275\2200`<\017s2\275\351)\213\273\201FK\275fi\027\273\207\227\210\275&\360\240<;\333J\274\223l-\275\004\211Q=2\264\025=\222\227\335\274\030\231\252=]\321\203\274\241\375Q\275\3432Q>\310u=\273\003\002\324\275\315\004\227\272P9\364\274)q\231\275r\032#\275\"\215M=\024\221\260=O\322\245<\377s;\275\305\255\034\274x\\\020;\270\010>\275\3532\222\274L=\223<\347\367L<\364<\250\2747&\221\275F\327\023\274\210\270\277\274\227_\362\274\330@>=\3367{=^\236\252=x3\330\274\276t2=\346\222\204\273)\220\200\275\2004\227\2758}\213\274vz\203\275\275\262\006=\334\315a\275\3709>\274S@Y>\020\235\270\274\016\262F=[\310\310;M\251\017\276\333N\260=\251:\t\273\330y\354<\027\214\\\273\332\227\324\274\202\366\205\274\211\205\010\275y\246e\275+\332\202;F\214\'=\345o\031=\341[F\274\364\206\030\275\236\260\344:y\225\222= \210&<\342Q\023\273\210\241\001\275 \364\r\275Q\265\306\274\337\323\003=\037%\006\275\364\352\264\275\347\305X<\215y\217\274f\030\024>\253N\377=v[\200\275\322`\307\274\231\320\001\273\267ND=ii\023<s\300\021<\272*\006=\263\245\214<J\271\254\274\361\270[\274}\273\342;dg`\275\324_\024>\25412=\256v\036\275\n\362\000>u\377\356\273\211\344\025\275`TA\2759\332\247<\002\347\220<\306V{\275\223\332\337\274\377Kb<-\276\'>\303\375\206=RQ\227;\314\336:\275\t<p=\300\177\355\274\206\221\265=\320\232:\275\277@\005\275\025l\020\275Kb\"\275\200.\205<\237\036\"=\2216%\275H|\032<\257\247\226\275=0\241:U\233\251\275fQ,<\303\374\206=\037$\216\272\334\377\035\275\244\332\035<\237\3171=\310I\324<\244&\376\275\321\371\034<\023\353\006\275\331\022\231=\177\210\004\275\247\225\371=\026\204J\275\245\026C\275Bx\337=+\326f\273\210\310\223\2758\351\020\275\216\025<=\211\204\251<No\211;%\327<\274\215I\316\273S\305\332<\205VN\275\251\325\217\275\245\346\233\274\310>\276<R\346\242\274\223W?;Y\217\306\274\226\317\255\2742\263\362=}\232(<\270]\257;OL<\274\327.\200=&\222\376\274<\312\247\274M\037\303\2743X(=<\273}\275\177\322\251<\000S\'\274\213\334\266=\262\201\037\273|\261\277=\231\025z=\371\230\\\275\200&\025\2755\300\177>!\0306\275\233\202\022<\224b\267\275\206\342\356\274\374R*\273^&\263=y\226\241\275wp\022\275\340\302[\274\312\301\007\275\310\361\322<\344K[=\336\305\225=\035\313\376;\2448c=e\3057\274b\340\221\275yO\357;\301\242\316<\275\327\"\275s\367G\275#\234\313=\317_\326<\366\223$\274j\326\035\274k\315B\274%5\241\275\241\236\001\275\005\346?\275\205\351\'\274\334\352\210\275\317&*=\234-\215\275\346:Q\274\216U\016\275\037\010\365\272\326?%=\010\335C\275&\243\255\275\251\374\'\275\217\014{=\234La\275\022\272\034=,\361B=\017\307\221\275\271\037\023=\363\277\327\274\302-)\275\253\237\207\275\300\255\206<\231\014\255=\037U\010\275\375\325`\274\321j1=T\321K\274\362\306&\276z\010\304<\347\360S=dh\360\274\310\006\237\275]2S\274\177M1=\243\035\277=\336_\014>\335\221\226<\376z\337\274S\221\001<\246\214!\275^\201\331\275\211Y\345\275\315\264\361=\000\2175\2750>^=\253\002\256=\271\205\033>\333sQ=\361q\276<\322\254D=9\263\323=jh =\231\\)=\322N\206\274u\312J\274U7\230\275\374\213@\273d\020\211=\334\241\227=\024\216%\273|T\301\274\203\346\003\275\021m\223=\253\2100>\037G\314\275\352:\232\274Bi\255\275\002>O\275\311b>\274\376\027e\275\260:\006\273\215mF;\275\227G;O\344\220\274\316)\001=\275[\325\275\330Z\016\275ueT\274\315 \315\274\264\261\027=/\263\203\275l\265p\275\254@v;\230!\212\275\277\370\312\274\224\016d\2748\235\026=\001G\240\275\367=\235:\032c9\275\343\335\342\274\316\201\033<\304U\035=\030\227\023>\\\014V\274V1\215\275\nR\205\275\312\035\202\274\237&\330\274\243\034\364\274{\275\033\275\227;\311;\032?z=\354Ld\275\033\262\201\275\262\027\234\274\3076\261\275\303p><B\333\227=I\253\354\273i1\232<\364\361D=\260p\270\275\321\013\027=\256\214r\2752Y3\275\317\202@\275\207\203\t=\254*P;U\027G=\225\236\217\275\216\020\231\274S\262\301\274\031\211U\274:\220\200=t\355K=\206\235k\275(\265\240=\253\367\326\274\035\230\227\274&\204*<\027\032\013\275?\237\203;\301\350\322\2744\307\233<\2404\247\273\\\'\3028`\246\345=\354\275\001>\222\231\210=\244\202u;:$&\275i\020\361=N\242\264\274K5I=s\244\245\274x\327\036\275=\203\325<\356B\'\275B?\320\275\357Q\332\274?\223\321\274\2221\274\274\376u\275<j\217\223=[\007 \275\377\234\237=\271\271\000<\'p\216\275\322\342\276<\210\311\005=\355\313\024\274\360\234\223\275Do\231\274\004\005O\275U\235d\275\016sv\275\177\311\345<\346$\005\275Ng\n;\034\245\033\274\302\200\201\275\300\021\014\275V(\341\274\332z\364<\200\252\225\274\344\243+=\303Z\260\275\022\231?\275\3220\001\275J\021\226\272\030\235\000\275\315~\301=\247\210G\275rY\006\275\266\304N\275\266\277\202>?/\311;5\356\213:\023\021\203\275\3430\330=\300\016\352\274\217wm=\030\260\013\275\225.\216\275\366:\273\273KiV\275\302\266\323\275E\1772=U\243\315<\346\"G=M\214\t\275\230\333\230\275L\000\036\273\254\000\261;\270/7\275W)\363=!\320\266\273h)8<\221t\n\275@i\021;v\007\234=\3104_\273\314\264\237<\033Qt\274G\325\350;g\030\356\274\216\247\337<\357g\236;Q\262\316\274B\3207<\303\177\340=n\'\324;\033U\013\272\030\371\317<L\352\370<\2342\310\274H\000\360\274WN\035\275\3307\327<4\275!>\303 \275\274\014\335\375=<T\231=\226\266\224\2745\275\236\275(\350\264;\023\344D\275\221;\227\273Vj`\275\333\312\202=rf\205\274\254hh\275X<\016=\367\026c<\337s\354<\033S\003\274\273\200/\275\333c\365\272\206B\204\275\353\032\313\274\224\034\027\275\215\375K\274m\352n\275\207v\202\2756=\014\2759\343\027\275\354\266Y=\355\005\177=\202\021\023;N\363`\274\207T\024\275\010%\252<^\342\305<\275:-=j=\245;\342\366\362=\366\010\254\274c\232k\274\003\375\031\273\340\203\226\275v~\366;R2L\275_\222\335\275X\267\250<.\351\'\275uN\306\275o}Q\274U\224J;\305\243\201\275\207\006\035\275\212\221D=\025\301\023;\333\3649\274\235\336\310;\275\3001=\303\232\207\273\266\361\247\275%\302\304;\332\370\241\275{\220\032\275\222\310O\274<\340\251=Y\026L=\031\366O\275\362:\267<\360\267\020\275fI\343=\363N\035=\311\376\236<\266\312\354\274\360\021!\275|\000\025\275\330\304f=\373g\t=\n\234~\275w\376\001\273\362\007\231\274\204\246E\273\037\013\241;\036\205\007\275\253\317\376\274\3243\036>\357\\\307=j\363\030\275\251\253\342=\356\037b<\372\240U\275\273{\373\273\377\251\267<\254\013\030=\006S\352;5\000\235=\251@]\275\321\207\272:p\\\006\275\261\t\373\272\2716E\274cs\027=Q\325\014\275\035\223(>[^\007\276O\302\"\275D\346\n\275\r\034\354:\311j\202\275Y\233\"\275\2709\364\274\236\006G:~\030O\275\217\241\017\276|^\223=\002k\205;60\232=\177N!=I\213\352\274\330\016p;\266\031\306<5P\233;\275\031\036=Q&/\275L\237\244<\215\370H\273.\3735\273\322\233\220\275\335\340m\274\361\317\207\275\010\014\010\275/\244\340;\023h%\274\352\201\216\275\316\000\237;\233$\265<U%\343<7\255\272\275,-\204\275S_5\275\377\2624\2756\252\247\275\320\221\226=.\363\022\275\225\3447={\230l\275j\301+=\204\010T=j\035\001<\231\214Y=\226\325\212;(\265\373<5\366\276\272\035\200U=\266\025}\274\024)\013\275\027\326c<T\n\003=\252\216\212\273\226\206F\275\026\203\266<\213\026\010\274g\327/\274\3649\t>\002c\023\275\2375\257\274\200\317?<\257\266\000\275a-\221<\205U\243\275Y\237\304\275V\233\032\275\354\206\245\275H\002\345\274:\2302;\021J\277\274\343C?\275\006\2139=;}\000\275\264\006\344;\220\3143\275\241%\237\274\033\336\256\274\275s*\275\234\027\036\274nFr\274\032\333\r<\225\345\201;\241\233>\2758\321\035\274 \367\026>\002\013\253\274\212\251S\274\317\277\225\274\363\250\270=\021\237\351\274\312\254\206<\312\020$\275\317\351(=G\335\370<Q\351\335\273\344m\237<\020j\305=\225\000G\275\rJ\251\274e\325w\275\034\242R\275+}D=\313B\314\274c\341\327\274o_W\274\312}\325\274\374\310\355\273gbB\275\264;\306\274z\200%=\264#\270<\3518\024>\336?\370<\316\237\006<\374\276\320=s\375\024\275\353\250\016\275\333\006\266;\240\244\205\275h*\313\274*\333\221>\023\026\323\273\026\331\341=\306\376\267\275\376C\203\274P2,=\254\260\206\274\r\022\225\275d\r\036<\373e\203<\3209A\275R\302\260<\003\276\242\274\337\325\231=\311+\007=\302\250\360=*\017\377\274ul|\275`D\206\275\262\216\035\275\202\033N>E\220\305<\037\326\226\274\347\360\224\275x\260e=\t?\374\274\302\004\305=5j\021\275\256\330\267\274\337wM;Y\377\370<\352*Z>\t\201\036=\2270\366<\274\230\306\275\313_-=N\362Z\275\303\002\221;\013\230K\275\314\253\310<\210X7=X\024\210\275T\214\215>\332\004,\275\302\332\031\275\3623N\275\226\003{\274\237\215\312\275\2446\372:\276\024\301;r,\375\274\233\0303\275\353\251+=Z\225\256;\215\302\030\275\005\320\371<g\352\007\275\013\345\203<YL\323<S\362\351<\177\260L>\303\207\007<vH6\275)]\312;]]\213=\004\332\231>\360\224\251=\365\344\026=4\300\233<\255\257\216=s\267\004\275\314\340\226\274\210\212^=\257@{\274k\353\362\274\024\240\202\274\335\016\256\274\025+D\275{8\316\274\355\307R;\205 h>\261\357\323;b\rF\275\244\037y=\315\3114\275\372\333\246<\207\021\242\275U\t\357\272]\316a\275\024\331\001=\3134\346\273\367\310D=\253!\321<\260\314D\2754ET\275\351f\223;a\366.<;\214\035<\202\036:>\031\370\010\276x \324<71\n>\376\312\242:E\023\302;\352\354\307=\006\302\220>\256\326\221\275\253s\241<\004\265\323=\215\251}\2747V\001\275\314\270]\275#\235\\\273\2409\017\275\n\017l\275\001{\r\274\030\0325\275\312l\251\272\352^\265\275I\370\023=\351\245\255\275\305\340\010\275\001p\254\275\341\213\232\274\266e\332\274\362\016\222<\332\275/<c\244\257<:p(>\257\352U\275z\213\247\274\274\324x=\3529T\275\205W=<\242\301(\275\313s\333=\256L\266\274j\235\206\275K,n\275\177\317\022<P\242r\275\3749\243<oN\210\274\255\036\234\272;\000\004\275\243\266?>\373?\213\275\356*\216\275\325\262\315\274\024\363\214\275\352>,\275\247\302J\275\351t\264=\366\345\331<\024\345\260\275\372\343\246\273\303\320\210\274I\307\260=\253\370X\275\201\210\177\275\351\323\301=\322\274o=\324X\334=LQ\261<\226N\217\275\r\313\230\275\347T\220\274a\236G\274\334\3467=H\263+\273\000\246\215\274^\361\033\275\322\322\235\274\201yg;\t\037\035=iR\004=b\001\277;\305[\212\274\375\222\201\274oo\222\274\212\246(\274\330\302\217\274\370\351\346<\006\346\263;\324_\211\275\224\252\204\273\333\200Q\275\360\262\260\274F\252\231\275\301SJ\275V=\001<\307Bj<\022e\022\274b\276l\275\241\021\254=l\210\321\273\254\3702\274&\352\r\275E\365u<-\014\240=j}\205\274\230\\\234=$v\014\275Q?T=\306\257\"\275R\207\206\275\363\030\"<%\\_\274\242\350+\275\036&N\274\377>b<\3515o>p\276\245\274\340\234J=\352\2252\275 V-\275\255G\177\274\267>\324\274:\251u<\272\324\362\274\346N1\275\342\330\334\274\017\343\235<x\r\331=\222T\277<,\003\346<\177\273\'=\341`-\273E\203\303\272xf\354\273\035\200\222<[G\335<\266e\230\275oH\313\274~<#>\344Z\275\275\021j\203\275\373y\202=\014 \316\274\374\3312\275\207#z\275cVo=e\005\243\274\333?\254<\350\014\301=/\031\217=Z\311-\275\332\264\337\274\017I\030\275[f\363\273\307$\177\275\023\215\230\275\362k\241\275\225\350\224\275P\261\321\274\3578\364\274\223\311\010\275iu\251=\376\'\357=\245\265\224\272|\237\036=\266f+=\257\027\357=\223\376\216\275\t\265\002=2\377\236\274 \213\301\274,\334\226\275\203\222g\2721i)\273\020_!\274u\340\204\2753\260\244;\265A\326=\n\274\302\275\202\372\027\274\244\rA;\363\243\r>\220<\204<+\311\005\275\376\000]=\250\231\001<]g\303<P\250a;\337\220\023=;e=\275\230\203\\\275|]\320\273\002\037x=9W/<\363]C<\206\267\314\274q7?>\265E\177=\225\334\302;\201G\273=\241\251\311\274}\212N\275%W\362\274+9\306\274\033Ds\274\247~\032=\241a\206\275Pu\301\275\377v>>2b\024=\341\374\301;D\261\021\275\024\345\006=$\014\215\275\230\335L<\363.\370;=\325V<\331\325\267<\2004\211\275uku=W\232\223\275\323R^\275\326.\">\023\237\\\274\242b%>\322\312\377<\n\312\317\273ht\221\275\326\341Z\275.\217\2769\255Rd\274\357\254/\274\203-\006\275(5\022\274\n\323\270\274I\201\r\275\262\366i\272\243x\243\274\3208>\275\021x\324=\225\335\n=v\276H\275\265\213\335\273\223\0069=X\303\321<ZpW<\240FB\274\353\220\247\275E\0061\275\300M\024\274\270\241\305\2742\211#\274H$\320\274\236\251\353<\221\343\031\275>\347\342=\014\306\351\275\344\277\t<d\354\330\275\255V\362=7\247\244=\365\273]\275-+\266\274K\335\261\273-\2378<\264\002_<D\343\337\275\3302\326;\033\211N<C\314\224\275\340Vh\274QY\026=\350\315\347=\353\375\215<-%L\27356\036=[)\260<\224\341\354\274\023\234m\275@B4\274\221g\023=mb\274=C\204\337\274|\370\357=\271B;\275$\032w\2759\177.\275\252\016\005\275B\216Q\275\331\203)=\360a\265\274\314L\377\273\325\211\323\274\017\332R\272,\306\006=\255\272\315<\021\255L<\307\226%\274S-\352\275\362\005\362:\3012L\274\3713$\274\020\344\241=r.\373\275\313\323\277=\234<\024\275I\217\321\274\325\366y\275\336\315\000;\3672q=\273%\232<\212\006\001\275~\303\367\273\215\361\237\275\235\321\013\2753\252\020=\215r <\235\250\373\274\316\022\231=\\bN=\375{\205\275\21510<\003\305v=\000\214M<\022\207\322\274\353\016d=\377Xz\274I(\260<\305\324\215\274\037\303%==\017\006\275\177\323B\274\033\005\303=\024\356 \275\367\037\370<\017\302|\274(\373\037=\n\245\014=\024\220\372\274uJ\037\274%\352x\275rxz=\273\217#=\300\021\273\275m\262/\273\320\244\201=\220\003\351=\242@8=,\327\241<\373?+\274c\264\203<\300 ,\275\366\\0=\333k\312<,eU\274\034\317\033\275\002H\317\275\277mz=\342\345\232\2754=\254<u}\231=8\232+\274\357A\252=\2024E\275\305\215\365\273v\264\240\273\326r\315\273l@\376\274\355\362\334\274e\311\345<\377I$\275\314`\"\275HZ\212\2756\324$=i\010I=\203\'\207<\365P\353\275 \327w=@&\263;\302\346\234\274\316G\217\274\260Aq\274+\264)\275\345\221c\274rB\026\275\264\266x\275\313\027\243\275!!>\274\004\220\026;\200\023\242<,v+=\370x\234=\335!u;\350_,=b6\\<\266<l\275}@/=\336\032\231=hM\316<\272\323\020\275\242u\224\275v\366\323\274\235\027\"\275B\\a\274\240\201\'\275SL?\274\234PJ\275KL!\275\035\236\361=\230\222\016<p\341;\275i\372\273=\003\r\272\274vZ\324;5\232\023\274@F\024\274 \001\264\274\360\313\032<\031E\200\274!\017\275\274\336@\177<\312\231)<\r\342\'\275\362\304P\274I\207\006\275\266\035k\275J\332\177\275\347\331\277\274\231\271\247=ZG\r\274\177\020\024\275T\227V<\025\007\245\272\223\030\275;\n\376D\275\327\335\365=\363{\010>g@\203\275 \210?\275\352\"<\275\312\316\346\274\'\221\310<\245\271\302>8\273\n\275\374\372+\275\227\rq\273`Y\016=VWB\274\003\207\036\275\007B\313\274\3323h\275\020[\205\274)]\367\274s\266/\275\331H\345=;M\007\275a\235r\275D\261\224<Eq\231\275\320M\362\274\360j\253<Wk\253=\272X.\275^\300\014=\315p\210\2720\326h=e\332\374:\\\247\215\275\314[\022\274e\253\365\272\224})>?\221\026\275)\236\211\275\234\307\332</\326r\275\217~W\274Il\001=\037\2759=\035\262\231;\351\367\202\273\257\324\032=\274\265\246\275(\210\276<\335\260\031=\355wT=\271\003L\275\271\003X=\306\352\353\274K\241S\275j\232\032\273Tq\201=\341Dz\2748#\354\273c\333\r\275\365\211j\274\271\265\344\274\374^\030=\002;$\275\'\251q\274?\310Y=\221\367\376;\020`\350>hZ\037\275L\313\331\273\022C\202\275r\200?<\245b\344<\275\221y>\366\353?<\251\222-\275d\325d\275\016\315:=mY6\274?\250\225\275\340ym=0\314\025\275\365c\234\274\371\236\257\275(\0047\275H*\266\274\020\376\205\275\366\337\2339\177\311\246\273\324\213\212:\353\263\251\273\336\375K\275d\333\336\274\353\360\206\274\216\247\226=\210\356\004<\307\320\010\275\316\244\234\274\351\321\r\275\021X\321\273}\036\033\275@\034\037\275\356)\214\274(\240j<@a\307\275c\362$\275H\020\250\274M\323\374\274\306\212\277\275+\214\247\274\212P\006\2744\031\024>\270\2733\275\234\227j=\255\2772\274\360Z,\275\303\212\316<\356\234\027\275z\214\'=9t\013=y\305\r=\221)\235\275\2267\361\275\314\346\200\275\335\365(\275\302d6=4D\346<\337\241N=\260\036\201\274w5\320\273H\377\201\274\255\355\355;;\272\370\274\226\2500\275\253X\273;\370\016\220\274#^\035>y\320Q=9\343\262<\246\244)\275\3152\013\275\002\347\t\275\017\341\001\274\254}\363\274\312)4\275\006\301@\275\"\361\';\317\317h\275p\220\311\274\354zq\275FG\275\275\031t%<\237\014\342\274\225I\200<\222\351\033\272\222W=>\327(\206=\030S\t\274\370\265\275\275\371(\325\274\324\340[\275/\312\243\274\325\2405\275\20618\274\300X(=\220!\271\275\251K=\275\277\216\307<\255\004H\275\341\244\327=9\025\000\275\364\025\022\275dC\033:\377\271\343\274v\276~\275\207\024\261\274\232\313M\274+\343\207\275\321/\305<\336\177\241;{\340\345\275\334\021;\275\215\200z<\266{\264\275\252K\232\275\001\260\001>gnK=\215\226\340;\220\214\233=\340$\010>\003\345l\2759\025\254\274\365\344\235=\267\'\332=T\r\212\274\315\264\217<\212\265\237\275G\377\344\274A\2735\275\3306\216=|W\025=*\014[\275V\246w\275\226\262q\275\nB\205\275+0\245\275l \316\275\274w\256\274\366\231 =\301\274\371<\251\261\261\275\347m\242=\314q\253<\036$\234\274\000\022\300<\371g\336\274w\307\253<ZP\267\274\374(\321\275\355+\250\272\232\215\025:\010\236\263\274*\267\236=\215\354\210\275\240\032\266;\026\346\221\275T\241\332\274\241wF\275\345F\210\275H\360\212\275\372\021c=Ke\200\275e\201R<\234x\311;\201\241\023;rp\013\275#\023t\274\230B\022\275\323iO=\263&\225\274(a\240=\304\360\235=\002\\(>\211D\374\274\017\345\200;\3656\002\276\244\220\336;\332o\263=\272~>;\240\024/\275\373w\235\274\213\002\204<\211\332\007\274 \334\000\275\347\3675;\303\306\020=\244\316\247\274 \232\345;\033\273\244\274\355_\336=m\r%\274g\303\331<\360\323\013>J@\233\274W\337\267\274\303\251l<+\351\235=\355\356\330:\321\356A=B\"\263\274Q\026\233\273\357\332\031\275H\266S\274\311?\013>\021\315Z\275\312\373 \274\\\321\001\272\376H];\214\250\356\274\301\316l=Mi/\2754I\330\274\332|\243\275\264\324\257<\352\361\262\274q\037^\274 \274\263\275\t\005\250\275\017P\027=E\266\001=\316$\205>\20530=\257j\331\272\232z\255\273]P~=\215.\327;\302H\263\275\003F\232\275t\023O\275\340j9=\tf\217;\345\034\272<\270\247(>6\202r=\\\260D>12\037\275C\365<=\322\233\003\276\236\240\t\275\373e\002>\324\310B=\216\310\267\274\233\230;=hG\263\274,\276*\275\3753\022=CM\325<\360#e\274V\331\351<0\032\377;\242\036m=\'\025\026>\222\320e<d \016=x\021\006>\032\372N=\001\240\271\275\216=\344\273\245\300\247\274hZ\243\274*\\\217\274t\226?<\027Ph\275\373\344\272\275\017\035S\275O\346\024\274\017\037\255\275\221f\\\275\210\355\"\274H\224\356;\360X\222\275\017\202a\275kx\214\275{\316\265\275\333\272\214=\035\306\236<`\\A\275Pb\372\273(*\211=\033`\017=n\340\350\274\213\360k=\316\006\215\275\241V\024>\377\216\267\275E>\256\275\314\260\272=\324Y\227\275!9\034\275\272(\334\275\027\247\344\274\231\320\263;\201\374y\274\224\214\233\274\263\352\023>\352$ \274B+\025;\230$\226\275jX\246\274\226-T=\nl-\275\305\367Y<\261\251\026=\030_\262=\212\317\035=\340C\205\2751\262\263\274\365\325Q<q\035\353<\341WF\275\266w\202\275(!5\275HM\013>\363\001\204\273\272\225\006>W\307\325\274\217s@\275\0033`<}\304\273\275^\003\255=\\\025\021\275\354aR\275\231:A=uP\016\275\274G\206\274x9\265\274l\2405<\036\004\t\275\207\3257\275\352\007S\274\312\026\333\275\300T\302\274\177J\373\274r\n.\275{\002\301;\n\347\306=\233a\362\274\301\321\002>\000\267\347\274\n\225\214>\363\024\276<\242s9=\271\340\334<\252\243\257;\211([>\025\023\322\275*\221\336\274\013\n\326<?\213\256\275U\370\213\275\021>\013\275m\026\346\274a\311\344\274G\004o\275\017}\277<\244\237\235=\205\330#=\005\277\024\275*<\212\275p%K\275yy\202=\3316\016=M\240\215\274\314\246\262\274\030\'\235<\351\326\303<Z\024\246<\262i_\275\357.\242\273\002\236\216<\032\"\004=\346\214\200\275\376\236d\275r\353\364<)\256Y\275v\344^\275%y\273<$\370\321\274`C\264<H\276\256\275\021N\226=!1\271\275\371\256\375\274s\0357:\371\t\220\275h\022\304=\341\262\324\275\274]\227=(\313\200:\342\240\t\274-)\n\275\263\311\315<\254\223?<\232By\275\326\"\372<AV\371\273\372\220\006\275\231\257x\275\234\346\223\275I\253\200\274c2\275=\026\310\272\275\332\364\'\275\247\221\276\273u\323$=\337\203\356\274\313S\036\274|\235\016\275\240\205C>F\035i\275\n\356\207\275,\312\003=\201\256\262\275\n;\214<wA1>X\"N= ;\031\275\377\002\224=\230\034\203\274\016\216\257\275\034p\276=\311Q(\275\202\366\252\274\026l\352=nl;\274\353[\363<\233\223R\275\351\032>=\t\245\346\275>\013\177\274V\344\250<\324s]\275^\026\037;\022\276\210\274x\0018=;\010R<CC\203;\214\335\260=\322\305\333\273\2159\n\275\r*\257\275\014G\245\274u\243\276=2\035\037\274\213f\033\275;T\240\275\"|\362\274\014O6:\235\236\213=.\371\262\275\022M\360\274\007y\235=\320\212\233\275x\263\215=\230\273\211<\326\013\306\274\013\303A\275_H\247<\265\023\257\275\275\036v=\227\361\213\275\210\335\023\273x\r\346<H$\034\275\243\314r\274\'\312\275<\265z\024\273\006?M=L1K\275\\\036\001=E\225\020>?\200\027\275\204\205\236=K\025\241<\341\244\006\276\225\356\223\273\231\337K:U`\351\275Xo\355>P\374q\274\226e\360\275\0221\223\274C\202H\275\243\305\313\273\377]:\275\365\005\351<\370!\005>\257)\360=\357$`\274\266\223\255=\335\326\261<\362\237\342\275t\'\222\274\\}\224=\367\250\351\273o\360\255<\372y\311\273y\026\332\2759e\231=\267d\211\275\247\331(\274\3171\345\274\374\204i\274\363\326\215\274\022\306\221<\256\335\207\274\205\0245\274\267\376,=\007\230\241<\270\271\004\270\222\240\243<\217^)>\323\361\307\274)Y\227<K\246=:U@\220\275\2701u:/7\332\275)E\230\275I{V\275K<\251\274\315\202\356<\232(\223=<J\335;-s\230\275UhL\275i\031;=z\210\004\275\n\202\224\275\357\375\205\274h\353o\275+\004L>4|*=Im>\273\207\004\276<\241\204\326\274\357\001O\275nJ\305=\306\326e=\300%\261\274\272$\211<3\215\212=Xk\213=\272\201\330\274\035\277\037;\004\346N<\003u\332\273\343b\023<\"\347\266\274\234\220\320=\256\204\322<\363\271\346<\026\000\253\274\034\007\277=\334mG\274\341\332\305\274yB\337<\217\2244\275\374(s\275.1\006\275f\3275\274\210y\367;\340\353\036\275\351\255\312=\253\\y=\036K\247:\346\374\300\275\232\206\214=\216\031\022\275hF\243\274\303l\016\275f\214\250\272\217a\315\274|\257\r\275B\343\327<\0364h\275q\323\336\274\375\273\231\275\315K\000\275x_\007\276KLJ\274\000\353\273=\2268\214<)/\317\274\342\312\306\274/\254\261<=\034\000\274\304\212\354\273_\033\332<L\257\014=\201\316\205<Z7\003>U\351\376<[\365\010<\247\243x\275cSG\275l\2478=u|\203\274\033\375f\275h\260\211\275\'\347\265=3\3211=\014=\374\273\354\236\014=q\340\301\275g\207^\2750\224k<0\253\216;\364\210\007\275iZ\310=\177\332>=&\000\247=wa\017\275B\366\264\274\234\355+\274\301Y\205<\273\217\371\274I\237\254\274\356\217\002=\351)S\275\004\255\023\274\351\244\002<S0P\274\264I\n\276\350U\226;*\303\277\275P~\014\275:\341\330\274!\275\346\273\t\371U\275\271\227\253=<\202\t\275./C\274\203}\017\275o\240>=\312\n\223=y\225&=P\363M<\022\334\032<.\254\200=\033\3774\275`(\027>\004\312-\275\363\367\035;\232S\340<)\363Q\275a\343\355<\236Q+\275\206\035\n\275\255\305\211=\344\\\216=\t\023\031\274*\357\325\274\374\215\315<i\265\346\274\214\350a\275u\227\023<\342^=\275\270\201\316\274\033\351\026\275\201\010\r\273\276\020\305<;\240\273<\360\200\356<t\231T\275\372\370p=P\215\322\274\316&I>\014o`=\256\300\004\275*\005\360\274\271*\007\275\245X\276=a\273\307=\224\377\371=\025\"\345<\213\3409\275\221\022\252\275\372\225\034\275n\214Q\275\344\214\351=\030\201\032>.5&\275\300f\241=\322^\001\275\351\365\030\275\314f\244\273\300e\032;\2075\327;\022.\264\274V\265\360=\347^\337\273\244U\321=\225\322\\=\001\323\"\275\013\346L\275>5G\275\342Z\347\274\317\305\366<\367\247\327\275u\271\007\274%\230g=Et\020<\035\023\353\275\3671 ;#\322Z\275\315\311\013\274d(\233\273q\001\017\275l\240\224\2742\216<<O\254;\275\017\234\007=\316f?=\371\351\246\275k\037\352=\314\"\n=\013\226\214\274r\220W\275\216O\352\274\034M&=DI\017=\226\247\316=v.\276=\026\347\216\275\001\223\261\275\220\275x\275X\033`:*\236\005\275\263o#\275\274f\375=\360\201<\273o\211\247<t\0060=\014\373\227\274W\367%=\3467\005>8\342\355\274f\363w;\007\007j\275\245\316\252\275&iP=7\224\337<b\357\205\275\216\273>\275\336O\267=Z\250A\275Uk%\275\026~m=\277\325\363\275h\354w\2754\331\t\275\373\303\233<\315\374\343\275Qe.\274\207\347\366\275:a*=&\337Q<a\270\370=\016\242\246<\235r^=F6\001=\267]\320\274\263\351\255;\032\300B\275niD\275\034\000\207\273\240\'\267;\034RA\275\350\230\331<A\315R\273\231=\236=\266Xb\274]Y\332\274q\217Z\275\325G}:\032\303C\274\201\344\255<(*\212<x\263\021<\007F\356\275\354\350\217\275\240i\261;\231\324F<\332\337==Z\013\033=\266\322\243=\361/\334=\207X\347<\307C\220<\267\203\301\273b\212\020\275\324}\340;\217.\033\275\002\312\205=@\250\250=Y\245\247\275\341:|\274k\337\302<\275V\023=\206\353\371=\231\246\177\275#*/\275:\004\333\271\261\332\362=*\321h<\337\247\001\276\035B\262<\013\034\364=\345\272\316<\321\375\031=\227\255C<\262\006\327;q\024\034\274\ty\335;\001\033e<^\314n\275\262Q\262;\205rX\275\2043<=,\305Q=\010,\232=\223\211\n=\204\265P\274\315\363\270=\267\347p<\326dK\275B\267\277\274\361#?\2742\272x\275\t\241\321<\244\314\263;\346 \233;\345\312z=5\336\035\275\216\346\222<\000KH=\200$x=\320\347\375<m\250\310=C\260==\013\322\210=\017\276\203=\267\303\365<\2415U=\366\355\233= \023\360\275\r&\004=e\267\221;\362Eg<\222\030C=\332Mr:\030`\207=\014\321\033\275g\005;>R\255\324\275\001\306\033>B\273\263=\262AE\275\2027\202\273\006\345\323\274\367\\\034=2d\220\275C\'\n\274\001\222Y\2701\000\255=DM\025=.\017\035\275v\372\n>\216\276\214\275\2462a\275\230\235\344=\351\366\322\274N\200F\275\263\024\317=\255\356C\274\201w]\275u\027\351\275\262\213\306=\372J\211\275\274F\230=2\\\034>\217v\026=\\\357|=<\373C=^\217\352\271\341\350\275<\344)\336:q@a\275Vr~\275\032B\303\275\306\\z=\306\360\303:\225T\n\276\252\032\335\274\370\331\025\275Yy\354;\231\037\357\274.z4=\341\305\212;\343\354\002=\036\234\224=6\344\364=\373T\300\273\306\230K\275n\301\002=\177\345\230\274k\200Z=e\271K\275\'\232\020=\216\216?\273\317\216L\272\032\321\276<\247}\014>q:N;`\245E<>^z\274J\3168<\221h\372\274b\250\000=\315[\013\274\"4\030\275\240\003\263\272\2743[\275\274\263\022<\227\216?\275\226\251\206<+<\213\273o\312g\275p\025\202\275n\357\236<\272\236\247>r\377\333\274\344\347u\275\373\210\305\274\212|v\275\255\356\303<\334\272\323=\354\310\210\273rZ\226\272@kq\273N\354b=\371h\261<j\024J\275\2757\360<\306\355\216<\334\235\350<H@\234\275\274G5\275-\330\342\275Y>q=d<\030=q\352\032\274\255\223\n\275\020w\313\274&\323\346\274\177\266r\275\030D\310=\324\256\330=[\n7\275oR\267=]\350\250<\340\253\260<.\350\207\275\235\026\037\275\377oN\275\010\033\206\275:\332f\274\212\313\"=\312&\035:l\374\320=h\334\247\274\310\324\305<\225A\276<\312O\343\275\302x\024\276\355[\357;\346\364\336<l\330K;Rw\001\274\027q\225;\235&\262\274\206\n\220=b\221L\274|\r\236\275\337\006\313\273\031\005\027=\n\250\002\275I\177\300\274\000Mi=:#\033=\220B\344\274\271-z\275`\3510\274\246\002\321:\033\010\222=\231\375{<\220\311\213=\233\312\207\274\364\363)\275l\312:\275\"\016\r=\245,\220\274\016\330w;\371\231\001\275\206\217\354\275\217\342\221=E\366\230\275\2324f=\241\374\272\275\376GS\275U1{=6\365\200<\316j\233\2731\363\226\275\262;\022<\350\0066=\210\263\261<\023z[\275kMj=\ndy=\021I\034<J`\252\275\3062\206\275\212L\215<I\025\357<(Fv=\2346;\275\0260;\275\202PQ<\211f\020=\3207\241=+\216\246\274b\217D<\023i\270\273fz\266\275\270^F=\336\272\233\273\255z\302< \335#<\234\313\336\274M}\345=\314B\201=\314+\032<5g\342\274\360W1<]I\212\274%\335\354\274w/s\275\36032\275\224\366\242\275\330y\251=\274\376\253=X;\375\274\372\232u=\353/\377\273[\321]\274y\366-=&R\\\274\236\235?\274\027\212\316\275{Zo\275\305u\224=\305\272\376\274\3267\260=1\355\030=\226#X=\326\312\354<\005\2352=\0004\223\273\t\245?\272\346\213\325\273\323\225E\275\267O\203;\373k\304\274\310\350\264\274e\236\225\274\323N\303;\224\215\020\275\255\244\251\274\223\366\274\275r\210\203\274-\227B;\243V\277=\212\326y\274S\321\245=\331\274\211\274\205\241~=\027\232\331<C\374\\=WZ\315=_\322\213:9\357i=|\372\211\274K\010\254\274\276\3711=\302\"+<\026{\234>Q\327\331\275\201o#\274\023\222\370\274\220W\014=)\262\353\273\222D6\275\276Pg;\223\2459=\206\210\374\274\226\227\233\275\324F>=\026,\306\275y=9\275\031t\032\274\307i\263<R5k\275\343\235\332<x\217b\275\270\252\355\274\'L\334<\303\301\034\276\243\205\\=U\016\321=\n\250H=\005\324\027\274\355\\\356\274\327Iq\275\266\345\n\275P\356\210>\251\205\232\274\021$\353\273\321\001%\275\205\016\202=\213\274\022=\257t\342<\345\201\010\27597\r\275~\001\320\274\265t.\274\016[2=\360\2525=fl\363\273S7\330\273L\341==\236\246\255<>%\336\274\021m\222\275\323\013\022\274:\301\000=\256\375\243\275\231q \275\253\264M=gf\322<b\3036=\247\366|\275\033Z\003\276\253\256s\274\317,\202<\260B\002?\317I4>ue\335\274d\005{<\360\211\367\274\230\272T<R\242w>d,@\274\255\315\224\275\303\222\317\274|\352\340:j\220\254\274\027\253\326\274 \261\006>\207om\274\030\326\324=*\344\223=\331\361\366\274O\314\213\275\207\003\030\276\275\250\253<\361\0005\273\245\371\025=\210#\022\275)\357V\273Yw\203\274\340\321P\275\335\034\311<\332s\024\275#\004\324\274\302,\372<\332\"-\274fCL\274\305\202\t>\310\361\207<\373\270\002\274\355\0312=\367Fd<\277\024\245<W-\214=f@\327<m\333\375\274K\257?\275\233\'\277<\256\376X\274K\001\010<\343\311\260\275\001\202\370;\271\217\021=\360\010N\274Tw1\274X\266H=\333~h=-\031\213;U\023\r\272\216\231Q\275\007\354\227\273\2012G<E\006\204;\304l\025<\'C\373\272\326\254K\275Zk\335\274\240d\312\274`\304\207\275q\034\3769\205\247\252=Rl.=u\237|=\363\211\213\273q\273\241\275\303\226\275\274r\342\221\274\347\342\304<\367\376\025\275\372na\274t\230{\274\321\261\203\275\002\343/=`\247\230=7\252\315\274~O\225\274\254\003i<\251<1\275\342\201\371<\201\237\214=\365!{\274\211c\r=\333\301D>\002!%=\337&\213<\2559\200=<\331\222;;\034e\274Z\241\022\275\001\234\002<>7o\275\256\313\214\275?\201d\276\301n\232<-\211\233\274\263\347\335\274#\337\t\274\277\305\026=\330\360\241\275.\255@\275?>M\274psg\275Y@U\275\001\250(=h\006\241=\325Z\201\2752\376u=\301\n\276\273\347\037v=D\377M\275#\273h\275\307\022\233<kX^=m\350\357\275\267\013p\273R\322\220<\321\002\257<\373\333\253<#\263z\274\357\337T:\277+\260\2758\213\010\275\237\344)\275\341\334\246\274\375\330l\275(o\017>\226\256!\275\007\362\330<La\232<\210\341\202=>\344v\275\322\025\311<F\250\351<e\232;=%\356\210=\177\273\313\274\326{m\2731\333\360<\2763y<\207\214&=iQJ=\321\347i\274\310\272\230\275;\325\223=\217H3\273)\236\214;P\274V\274\236\2230\273O\304\306<\257\225v\273F\202\035=e\263\270\274\363_\267;V\030Q\274\'5\010=\347rr=\351\330\231<\361>\242=\2137\003\273h\366>\275\325\213\275<\006\227y;\266y\252\274\347B\250\2748\242\237>\327@6\275\035\236\':)\353\300\274\212C\241<\364 X\274\037\017\222=\342S[\275\376i+\274\364?\316\275\225\330!\275\260\220\220\275\230\337\233\275\022g\354<\227\014j\275E\206\326;\332\220\337\273\377l\210\275\ruy>(\353>\274\030\255\030<L\216\247=\346X\251\274\2377\003<+$\342<\305\350\200;q\021\037\275\220,\310=5\333\031\275\022\2552\274,\256\265=e\3003>\023\t\301\275L8K=O\270.\275\336r\312\274*!\356<\261\253\221=u\333M\275C\010\352\275\3050\300\274y\026\214<\014\260><e\231\232>\333\375\231\275F\257q<Y\255\361\274$\240\241:\363a~<\353\352\337=2M\001\275\3445C\275\2569\002\275\024\3132<\322\214\262\275_\240\000\276\324tv=\270\242\237=V\366\314<-\206\306=\023s\n=\210\r\272\274\316\000\242\273\352e\202=5\240-<\266@\037>y\251\300=\344J\223\274\234\202\216\275i&\352<[\256\247\274\215\024\207<\211r\355\274_\225\177\2755X,=+\365R\274\375L\202\274\000G\366\274\202k\301\274,\351s=I\326L\273\030+!\274\023\345\177=\003:g=>\232;\274\213O\267;.V?;\361\215\334;\325\341\023>U\2506<\002\374:\274\\\237\366<\276\2016\275Ra\221\275%m\261;\020u\240\275\300\243x=\305Q:\275\347\254,\274\020\315\020=04\225\274\261\203\370\274\232\270\247=0L\250\274\347\346\023=X\3705\274w\223\270<?\313\030\275\225E5\273\253\364 \274`\037h=M\247\335\274\257\007J\275\264G+=\216\230\031\275g\225\032\275\361\001\347\274\320+\3609:}\367\272\342\333\320<3\275\214\274\335_\002\275\225\310J\273&\354@\275r?\343;\020\370\246<\000\254/>\021\240\014<\223\354V=\210\352\356\274\365\257<;\201\016\214\275\357\202\255\275\375I\235=t\361\255\275\033\022\356;\226\267\210=\220\035;=\211\201\006\275/\202,\275\004&\003\275QO~>,\366;\275QnS\275g4\306=\331\374\254>\323\347\354<\021\310\357\274p:f:\005\276\317=\014\312\201\274z\223\002\275\\\200B\274\361\002\230\275hn\032\276\222\005;\274v\002X=#\326p\275:{G=BBW\275\302]\003=k\016\271\273\246\224N=\226\333\241<\317\356;:\301bI=Bk\024\275\212\245\324\274\201\204\252\274\356hR\275DA\355=x\264!\274\251\345->\234\t9=\207C\242<-e\307=\245<\247=\2079x\274\032\267\257\275\344lV\274\266\333\010=\246\244\272\274\232\005\200\274&A\312\275X\347\310<\273+W=\237 \251\274\211(\252\275N%c\2755\204P\273\326q)=\361O\365\273\253\260\231\275\233n\"\275\331\346\201;\273\r\250;\300\325;\275\241\230\244\274_c+\275\325\352\035\274`*\350=\227\350\366;]y\312\274\351\314\237<\246\233\341\274\016\265\n=P\314I\275\215\324q\275\301uR\274\342\221\254\275@cW<\251\324r\275O|\323\2757\314\014=\335\357\241\275\350_\306<\200\014o\2759\305\333\274\226v\334=Fbl<p.\370\275\3559\200\274\361\211\200=\354\032\311\275S\372\036\274\342\244\033<H\212\205\275q\302\231=&m\n;\r\311\324<=n\221>uw\234;\232\"\021\275kcA\273Du\345;\210\032\306\274wR\n\275\"\273\276<>g_<\204\037\210\275\255Q\275\274\025\267\270\274\310\371\274\275d\2654>\250\311\315<R\236\315\274d\202\267\275\213\304\375;\261\317V<}\021\005\2758k\267\275\375\353\t=\360\3662<\025\334f8=\236\345=\356r\024\274dC\346\274\0070\330\274-\314)>1\230\036>Q \'\275\031L\375<#)#=\231\336\"\274\372\370G\275\027\\m\2741\332\025\275\026\260\235\275mo\341\274?6\211;\265K.\275c\236\235\275\242\374\216\273\t\334\032;\343\366q\275\354\377\004\274o_\243\274\0024\213\275\240\346\275\272Y\274\362\275\241*^\275D\223X=\246\000\356\275\254}\365<\017H;=h\033\241\274E\3609\274pL\232=\031\246\274=\026G@\275p\344\203\274ZJ\027=\225\212\340:i\013r=\241\236\335<\273s\211\275\307\245\031\275\325\324\253\275P\366\253\275\000Lf\275\333\312\322;\217v\t>\004\t\206=Iu3\275\260\225\326<\313a\216=\004~#=$\340\234\273e\034\330\274\345\262\025\273L\237\267\274 \257.\274\353\314h\275\332HZ=\r0\264\275E&}<\233\014\214\275\"7\250\274B\343\206\275)\353\013\275\032w>\273s$\\\275-x\310\274\376\305\001\275\243`\215\273\311\274\004\275\347\366\036\275z3\220\273\351\377\325\274\241\207\347\275\363\375\"\275\253\246y\275O\033\210\275\220\006w\275\376\314P\2746\342\312<\226V<\275\241\302\266\275\247\327\234\274_i\266\275bU|\275\034{\257\274\202\3647\274Yp\025\274Z\210b\275w\313\">\344&\032>W\3011<6H\300:\023b?;\352\017\363\275\342\244$\275\254\003\255\275\260\334\007\275\023\013\316\274\314\025.=aB>\274\253\207\031\275\010\0053=\304\331\267\275\324\274\217\275;o$=\021!y\274\026\032\332=9\'Z\274\341)b\275\363g\021<3\036\314=\361\"v\2759\033\217\273\201$1>]\372\016\275\214N`<\352,u\275\3633\242\274\330\026,\275\203\035~=7]\350\2754Y\010\275\357H\266<\r\337\020\275\377dy\275\204>L\275\220,k:\321\276\225\275\240\017\337<Z)`=I\333A\275\034\3037=l\016\253\275\014i\204>g\366v<0\365\017=\213Y\001\274B\277\021=A\216\336\275\206l\023<\252\213\343\274G\361\222\274\273${;`p\032<\025<v<?U\022\275,M\016>\337i\220\275k\243\215\275a\216\034\275\234U\000\274\005\246\206\275\264i\251<o\361\203\275\203X\020=\247\266\243\273\270\333G\275\212Z\247<\350\264\355;#\350\316\274\350\366\036\275\034\223\014;~\274\214;\326\230\267\274D\375\351<V\037\025=\216x,\274\016\244R\275\267}\233=\r\366\004\275\321\314\231\274|o\317\275\r\306T\275\230{#\275\246\377-=\260\264[>3\224\204\274\231{C\275\360^F<\306\304{\273\t\021\353\273\315\230\302\274R\327\345<\326\017P=Y\031I=\210\351&\275d\333A<\014\353a<#$\320:\2237E\273\236\351\231\275\3500\017\2769=\237=\256\253\027\275o\325\253\275\311\334\n\275\327\026\237;\264@\205\275\264E0\275\355|\307<\356\016P=_\303!\275\250\307\037\2739\342\334\274\307\232\017\275.\224R>9H\201:\001\375]<\361H\271<\231\r\310\274\375\352\302<\374\232K\275\311p\213\275\243\2771<\374/\014\275\027\237E\274\215\305\232\275\237\016\350<\001\235O\274\027J\330\273\330\'\212\274\276P\213=\233\2430\275\274l\034=M\240\203<MT\205\275$k\267\274\222Y\266\2759\223\376\274\342\352\274\270Y\0001\275\002y\211<\203U\303\274\244eg\274^\316\003>\035\300\302\274AF\\<\317\254\024\275K%\010>4)\227\273\262\315M\275~\2472\275T\264\322\274$\321\213=a[\002\275[#+=\364\275\006\274Z\237\340=\334\352g\274\257\376\204\275\262^s\275\315\332\377\274\037o\213\274\311\246\000\275g\275\234;\3023\022\274\027\372\317\273\323\0230\271\336R\337\275\325\354T:\207\003\354\273\"\203\254\272\355\307\021\275\354\274\004\275\325O\r=l\350\\=\374B.=\277\366\265<\274\220n<\037u\326\274}\242\230=\364YB\274\251\201>\275\343\030\253\2738\255\327=9%\334<)\301\\=^\362\036\275\007\256\214>\252\260(\273\373}\330\275M:\334\274\2211k<@0\204=}\336G;t\233D\275\244d\t\275]\272h\274\037\247\307\275.?t\272\245\273c=\306\270}=\t\357\254\274\000\000\017=\263\370\350<\035\352\350\274Z\200\004=\035\322~\273\311\310\212<\322\314\220>\353Y\365\273=\232\325\274$m:\274\314\262\272;AQ\340;\306\337[\275<\022\000\274(sS=\364\357\314=\257Ps\2740\311\331\274\035j\214\273\262~\233<y\243\340\274\312=t\275$\271\261\274\221\202\014\2754\000\351=\264\232\277;`\224\'=\'\016P=\351T\276:\022\220\n\275\210\325\242\275\265i;>H\306-\274D\315\324\275J\323\246\273n\257(;\004\212%\275\"p\314\273\r\347\263\274\264\326\317\271d\321==\336\236N\275\231?<\275/\333\234\273\350\000\236\274JYi>\035\006\214\275\261\212\016=\227\372\021>\306\204\005\275b0\'\274\023R\023<\360r\256<\345|\351\273;M)=\272\253\005=\331;\354\275\203\353\244\274m\345\t=\343\177W>#\2019\275\322\025\017>\007\327\267<r\177\r\275\376h\376=/\211V\273J\022\272=U\203\201=K\013\246\275\036\335$\275\342\001\232\275(\014\253\275\362\377\014\275\361_\247=\360\004\276\275/T!=\014\341Y8\202\246\216\275\325t\267\274\373S\007=W,\005\275\307\247\361\272\2663F\2757\343\311\274\027.\207=\250\361f9\337N\237\274o\211\265\275i\0369\275~\221\013=A\001\247\274\352w\364\274iz\255\275w\004$<Q|\351\275\330\211\253\275{\337\342<0Z+<z\224\302\274W\237\245\274\315\235\236\275\"\250\034\275:TE=\211\005\026\275\2777X=\037i\022=\375\204n\273\276L\375<5\303W\273Dz\300\274\201d\250\274l\305\270\274\264\023\306\274\206\3644=\276\263c<\024F\250\274\260/\214:\226\273^=7@\001\275F1\346\272;\032\r<-\264\033\275U\001<:\000\333\220=V\361(>\0164\257=y\306@\274\255C\205=g\207\216\2754)\353\274\224=\250\274\221s\361\274uMG>\222^\030=\034\003>>\367\237?\274\307\317Z=}\\{\275\177r\254\274\225\227u\275\026\373\177=\350\t\201\2752\0021\275\247~I\274E\025\236\275\241w <\340\210\207=\3528T=\340\014\224\275\313k-=\\\256\366=fo\221;s\001\352\274\224m\263<\340\021\036=:\3036\274\377>a;,Q\274=`a\034\273\240BD=Q\257y\275\350O\033=\371\345\n\274m\276\210<g\214~\275ws\257=\025\006J\2754\207g\274\353\374\252;h\213\354\273\241\370\342:1\241\303\274n\tZ\275\227\324y=o\020\366\274\226\375\233\274II\340\273mC\002=,\347\326\274c\257f>c\301\031\274\231\336u<\203.\t;6k%\2751\333\036\274<\3173\274\332\333/\275\204Y\036>\304\277\215\275\032\277v\275@\214\251\275\034\003\247\274Y\304l\275/\352 <\000\313\252\274\022D\277;1\316H\275X\022\345;k\220\007>C\224\213\275\267K\326\274\373\331\222<\002*\231\274i\376\025>\246\000\213\274\365\273\036\275\251\211\261=6\275\214\274/\000\032<\350\246\241\275[\213\202;\273\241\221<\336\272$\2757\335Y\273\037\213D\275x\024\037>\316X1\274\1778\t\275AU\254=\361M\350\274{{\206\275\024\035\212=\"T\234<\002\006\247=>\264\032\275~\"G=\267Q=>4\007t;G\223\355=\262\3417\275\243\363(\275\326g\321\2749m\373<\347??\275\234\307\377=\031\016X\275M#G\275{\312\240\274\272\024?\2751\030x\274\230\244\273\273\314C\027\275\030p\270;\354\227]\275e\201\004\275\204\r&\275\200\333\272\274u\230\301\274`l\225\274r\230\036\275+\222%<\215\200E\275V\353\"\273\350\351.;i\270\277\274\322^\223\274\351\203\\\275\332\346\223;\200e\240\274T\310S\275\272\307\273\274X\035\371\273\025\306g\275\232X*9\016y\366\274\230~\235\275\026\263\001\275\3637s\275U\031\303\275(\371\246=\354\313I;\022\021.=)\314t<yhS=\272\2708<\021\345A<\264\227\327\274\361\304L\274\201<i\275VK=\275\215Q|=\001V\270;b\2617=2\235\313<P\345\022\275\2748\001<5V\244\275\223b?=\341\215T=\nE\345\274H\220\300\274\257v\250\275*\236*=\037\273Y=9\264K=(\306\213<\0364\222\275\020\254\240=\312\204\206;\312R\330<\276\371\004\274\347\232,=\216e\000\273M*\217\274d\234\371\275|\324\362\273(\3547=\330\351\201\274\334kq\275\025\013\300=\202W\210<EZ\014=\330\216\006=B\261\364<\005\021\236\274\273\3702\274:\355W>1\030\266\272z\272\027\275\213D\006\274\264\035b<\270\2315\275G\216p\275\2507T=3\216r<\177\361D=+\247\342=0\273\215\274-\361\001\275\361\246\367\274\201\314\203=\350G\035=4#\037\275$\327\247\274\273\360\241\274y\366B=\346(\342<\251;\313=5\233\032:On\353\2746,\255\273\223\303\327\274\260j\240=\325\036\221=\333\032P\274\352EB=\335\314\244=\223-6\275\205#[\275\347\210\205=y\010O\275\322\340\010\275\240o->\017\355\264\275\301mq\274\261\033\024<1{\355>N\265\016;\257\367v\274\256\220W\275\337\243\203\275\250\326I=\342~A\275\335C\227\274au6\275P\303x<eIB<=\217\347\272\033+q<\262\313\241\275\2439\220<z\206\'\275L\263\357\274\363\300\226<\250i\370\273\307lK\274n\331\231<\355\313\032\2757\365:\275\354fG\275|\343\001\275\331\217\364<>;[\275P\016\255\274\322YQ\275\350\020\001\275sl#=\203\230\302\273\202\277\241\275\003\301\351\274\257SD\275;\375e>\271\200u: \373\222\275\206\324\353>8\237\227<\336\360\305<v\241\275\274W\036a\275\227(\256;\306\315\035\274\027\353\030\275\216B\326\274w \201;\274\022\372\2741\361x<\265\316l\274\337\266\274;\021\270\255\274KZ\312\274\022\364I>\267\007\021?y\313\021\275\355\375x\274\025\337-=\331\205\333<\241\367|\274y\245\022\275sl\033\274\305\371\204\275\317,\226=\344\t\205\275)L\275=d80=\316\363w\275\207\n@=a\275\310<p\213\266\274\313\234,\275\263v\203\273\305i;\275\227ER<,\244=\273Z\331\t\274\324\023\034\275\246\330\313>6\200\321<x\276O\275\206\223\306\274\262\213\356<~\300D\274\220\325\374\274\343\311\315;\027S\231<\240\230F=\023\327\222\274\347\226\350=5\302==1y\376\274L0W=\220\312$\275\227\2222\275\254\342\035\274mZ\322\274\257.\323;\337\024,:\310\340\354=:{\227;\247\267X\275\226I\203\275\257<\350\274%\242S<\376\245\232\274W\022\374\273\207\226w=\374\374Q\275\356\025\024\275\024\024\001\275T\016a=\260\235\204<\037E\211=\203T6\275\344\324\253\274\375\026\233=%:)\275\306fY=\211*\005>\310$\353<\206./<\032\032\262\274\321\365f\275\026&\216<\307M{=\221\366\274\274\263\001\371<\365\025\244\274:\270\224=p\313\302\275<\2367={\366\031=\366\322\210\274=\371\332\274\246_\272\273\360\024\360\273Dp\002>\034\203W>\224\376\242\274\242\342\251<.\365R\275\027\253+=\n\2332\275t\346O=`z\373;\312\031M\273t-S<\"\003A\275\032\\\331\274sfH\275\356\300\'=\261\204\225\275\002\246\027\275\325\306?\274we\224\275\001\303\316\274\203\030\261=-\315Z<\370s\252\275\331\2312\275\335\316\033<\213!\214\275\010\022N\274\010\215\004\275\376\0322<\254hX\274\255\225\362<`\336\315<\033\006#\275fS\242<\037A\245<\0237*\275m5\232\2744\316J\274\323\024\236\275\372\326\203=\376\000g\275\033e\207=\261\207\332< \030\324\272\357\304\222\275j\006\000<\031\035\261\275!\372\206\275C\213\014\275k\272/>\\s\247<\3056~\274\3300\364:6\233\205<0\025\335\272H\211I\275\266.$=\317\002\240\275\014\253\351<oj\374\274\251\331\003\272I\021\017\275T\314\247\27495\264=\300\214s\274\\\2546<\023M\335\274\365\375A\275\214\220\331\273\025\3536\275\364\006W\275\355\344\244<Av\241;L\364\224<q\031\360:\326\301!\275\351f\370\273\273\237\027\274#\006\220>\252\353\254\274J\\\205:\017\020\200<\240 \250=\324@6\275#\263\243=\007\340\200<\3531\205=\037\206\366=\307-\350<S\241\214=\233\325\035=E\245\254\274\031q\205\275W\333\304\273\337\332F\275\265\374\030=9\203\245=\373\346\022\275N\356\255<\330\363n=\2530\222<\032\363[\274n:\343\273\246\021\361<)b\230;]>^\275/\027\251=\213\227 =\006\016s\274\313\276!=?\347\241\274=\246\344\272\244\027\n\275+\314\r>\351\353\270\270\200\331\205=t\221\312<\333\367\376\274\221\303\346=\377,\354<\232R\362;\257)\323=\355bx\275O\002#\275\325\033\203\273\370\264\337;a\201`<Rdj\273f\370\366<\343\360+\275\317gT=\237\313\215\274\350Li<T\250\010\274\341z\206<<!\201\274\306t\220;\034=\030\275\211]\201\275rhW>\030\364\316;\313\023k\275\204\014\376=\372\\\005=.\221\206\274\033\356\210\2751\026\201\275\321J%\275\340F\210\274\365O&<\231\035\211\275\340\031i=\021\300!=\356\346\020\274\246k`\275\371\301\324\274o\270\215=H\252o=j\304\363\274\225\220\030<&Rg\274\265\2328=S\357\250<m\2341\274\205\rb\274BU]\275\305C\'\274-G\315\273\245\324k\275\333\002\353<\020\236\255<\334\353\237\275\232~\271<K\313\306\274\027df\274\371^\261\273\306\0223\275\\\216\275\274\271\013R\275\0200O=E\242\361\274 7\211>\377y\353<\304\361L=D\310|;\246q(\275\306\322\237=\301\\a\271\200\337*\275<\366\027\274\264\270\026=\314\227\246=n+\020\274\032\215{\274\272\231\343<?o\215\273\007\2053\274\033\207\357=\"&I\275\2537\226>\227\352_<\214\350>=\373g\263<\342\306\271;U\nf=\234/\004\275\357y\355=\361\023(\275R\353H=\240\363\310\275\300\377F\275\305\245K\275\031\301\001\275#}\351\274N[x<\272\310\t<_\321\016>D4Z\2754Pt<\256\262\316;\005\376\365\275\322\362\211\274\241\216s=\243P\321\274V9\250<\253\347\r\275\225T\033=R&\377\274\010\017`\275l\362\222\274\225\316\226\274\344\311\331\272\377\224\200>\365Kw=-Y\337\275\345\023\342\274Eg\220\275\263\343\251\275\275\010D\275\264\250$\275H\206\001=\005\2216\275X\265\301<\"w\001=\250X\273<\032\223<\274=\006p=\306P\250\274\355\016\002=@\003\226\275\357}\267\274/A.\275;}\337<\346\254;=v\213\r\275\247\036\307\274B\206\334=\321\227\244=U\361!\272\356\220\332\275\0143\201\275{\342&<a\313\244=\2269\221<\245\332\365\2743z\037\275(\361L=\212\301\024\275\337\300\215\2750Wv\274az\361\274\256\231\013\275\313\225R\274\363T\000>\033\033\221\274\221\311\021;\367\3601\275F^\013\274\245,A\275P8\276\274\306v\302\275M\034\035\274\312\243.\275\243\241\204=p\202?<\367\203\256\275LU\221\275\240\277\346;\n\0076\275\026\222&\275YR\243\275\370\237:\275:c\204\275\245Z\010\275\251\217\241\273P\257A\274\231!\211\275n\2546\275\362z)\275\331,C\275:P\215\273\264\243\277=\016\266\034\273\376\200\025\274\231\262 \273n\023h=\300\237m\274\313\304\"\274G\034P\274\020\230\207\275\203\234E=\300\372\375<$\021\367\274\223\363;\275h$\204\275(\224M<my\035\275\230\021:>M;d\275\252\002g\275\345\026/\275\365r\266\274\036\320N99\234r=\324P\226;\374\261\312;\013\272\223\275\316s\341\274\202\001\000\275\350\017\022\275\273D\212\275j\300^\275\307\022n\275\307A\265;\312\010\223\275_\314\254\273\000y\361=\245a*\275\343A)\275\371\315\303\273_\336\030\275\326\004\341=\215\260\227\2740+o=\277\030k=2G-\273F-\223\275*(\031\275 \177_\275\035tL<\204oT=\037aR\272\215\014\014>\240\203\261=\273,\331\274a\233\230\275Y%4\275\335\337\t\276\023\270X< \241\302=A8\351\273*v\215\275F\323#<\222\257\034;\003t\237\275#\033\231<\244\n-<;\\\006\275\217\024f\275]\303\317\275\254\004\206\275\000\323\210=\274I\014=R\274\266\274\255\345m>w\352W=\203\341\010\275\226\202W\274\225x=\275B\312\207<\264\201\202\275\311d\001\275;l\016=\266\221\320\274B\314(\275\\,\241=\374)\207=\327\r\014\275DOz=\003G\337\275\002\347*=\023\325\341\274\271\355I\2755\364\'=\000q\023\271\226qo\275J\267A=\254;\325\274\324\337G\275e\376\311=\t<\020>=v\320<`K\225\274\032>\000\275\233c\227\273\347\261\342\274\245E\022>\021^a\275\220N\351\274;\343\311=\201\344\033\275mc\254=\323[G\274\263\226G\275\014\332\010\2759\025\n<\"\353(\275p!B\275\245\326~\274\343\271`<#\361\216\275\017GJ\275o\225\035\275\267\017\244\274\263\334\345\2748\265\375<S\347\206\275 G\024\275\355\251l\273C\022\022>\232\031\255\274\266x|\275UJ\252\275\246\361\214=\243\207t\2741\327\007\273\203\322T\275\336\215\334<Q\r===\346\024>Q\243\214\273y\322C:\266\277\352<\224\262z\275\214\022\247\275\000\215H\2728\226\216<;\213\002\275\205\236\263<\370\243\351\274\336L\277<QS\261\275k\306(=\013oE>\340\030\030=m\352\254<\234/\332\274\351\005_=\334\313\315<^\363\231=X\242\214\275\261\364\261<\014\330\262<Y\331\021\276\336I\242=9\303S\274\013\364E=\306rv=<\346\330\275v\257\030\274\240\232\255\275\215\246\312=\004\3621\275J{\300\275\005#1\275\215\005\034\275#\213\225\274\360\025\r\275\303\016\000=7\247&>\004\357\014\275\311<\210=p\215\204\274Y\215+=\323_\301;\235W\326<\356o\241\275\177\023\033<\253\n\220\273\307]C\274\2513\025\275M<\013\274\353\035\025\275\214\305G=\272\001\t\275;\373\252\275Si\276=\232\333^\275\005S\223\2744\362\035=L9\345<\230\nP=\301:3\274qw\003;\342\337><X\271\304=\274\245O\275\377Q\244\273\\{\264\271P\311\001\2755\271-\275|\340\225\275B\3440\274`sV>\310>T\275\314}\005;\021\304\226\275Y\273\343;\355\232\200=\370o\365<\002H\215=\260\266\006\275s\376\021\274\327\336\313\275\010\315Z\275\304\206)<\017\335\233=\242\211\013\275\n.\032\275\024}\303\275\3468C=Vl\000=-\2225=\234\376D\274\0175W\274\215\3631\275\367\314d\274\363\216\212\275\337{n\275\331\000\025>\372\224M\275U\356t\274\352a\231\275r\311\222\275S\"\210\275\217\302E\271~v7\275l;_\275>\216\323<\244\314$\273\034>_\275}\200\244\275\"\2731>\245\002Q=\035\010B\275\026\352k;o\005\336=\351\002\023>\307\347\n=\215W\030\2750\265\005\274\206H\373\272\333\221\'\274\032\243\363\274\310\374!:\\\323(>\216\232\257=d\035f\275\203g\207<\020\274\213\275\212\271\257\275\321\333\246\275\250\000s=\202\250o;mr:>\331T\021\275\234\212\016\275\233\241\252<\372\200\301<_\n\035\274 \031H\275\177t\373<\227\376\267\275\337\335\235\275\334\271\021\274\010L\024\275\314rn\275}a\030\274\271\316i\272\264\356\220\275A\246l\275\027[5<\264+\327<\030\331\374<\214Q\231:t\313\331\274\353\252}=\251gk\275\003\032\260;\346m\036\274d0a>\350\177\261<\013.\021=\007\243\323<\252\363!\274\337\271}\275\252\305\312\272\000\240\232\275\263\204\212\274\250}V>=9\r\275\252\344\203=\177\307-<7b\254\275(\360->\251\316\232;\354|\212\273\340\316\300<\231\363\217\275\216\207\346\273\305\342]\273*\036\'<\334\314?<\356\202X=Fr\010<\252\315\014\273\001Z\250=a\261\020=\265lr=\344P-\275$+\025=\003G\020\275\005\031L=\014B\034>\360\002a=\3208\227=\010\205#\275\312\351U\274\373t-\275\020\260_\275\234}-=\207\350\024\275\t\300\004\275\254\2549=\037~\004\276j3,=\244\327\202=\211(\036\275\256=b=\020\256\275<\363[\337<\264\257%\275*\223\243\275\336\273\031;kV\251\27521_\275i\355,=\364\345\241\275!\363A\275-\266J=a\340\317<\034\230\330\274\236\267X=;\361\273>7\177\202:\241\253[\275u\364N<0\320\021\275\236Y\010<\220g\324<\315\276\206\275\3525\001\275\373\366y\275\213\206%\275\326\'\253=\306T\204\275\310\245\025\275\020\323J\275\240\255\363;\303\257v=w\363\205\275*\275\312=\273>\214<9?\220<\001\014\210;\237\252t\273\226\221\252\275\317\275\210\274\016A\226\274\262^,\274\216\357\317<4\272\037\275\373\363\023<IrJ\274\321\"F=\252H!\275\3068\346<D\205}=\316a\027;\034\337\004\274yh\003\275\343\034\320\274\265\360.=\317}\275\274\257\020\221\273Y\035g=\357j&\275\177^\307\275\004h\031=\372%\010\274\211/\236\275\374\347\202;\231\214\204\275X\213>\2755sX\273\301\252@\273[K\200\275D\266\202\275\326\361g;L\210\221\274\225C\340\274#\375\253<Q\002S\274K\230\251\273Xgz\275rv`\275\306\'\034<2\324i<\033N\216<7G\177<\340\305\322\272\313C\343<\263\357\201=\016\366\177\272\353P\262<\3464!=\224\327\035>\233\341\357\273\370\212\006\274-\347\024\275/a\227<W\305\177\274\211,\032\275O\274\016\275o\210\020\275&\370\032=\355b,<\334\220\020>\317q\224;j\214k\275\320v\'<\371y!<\270x\251\273\262\033\"\275<\340\303\274G\026\211\275.W\223\273h\014\352<^\337\006=\204\014\274;\306\030\n=U\266\374\274\206\007_>\214T\224=\246\n\375=F\363@<\367:\033=]^B;\222\362\215=S\005k\273m^S<\274X\202=\274\022\014\275\346\255\303\274\"R\312<\214\223f\275\356\236\216\274\205\212\347\275\004\231\337\274\017\207\034\275\352\230\033=!\305\375;\034=\026>\020\032\204<q\"I=\225\367\010\275\252\271\234;\355\013|<[\250\300\273\3225\006\2746\323\\\275\314\312\002=\356NW=\325\366\246\275[[\252\275F\353n=Y\272u\273Wy\273=\240B:\275\215I\000;\367\347\206<\373!\003\275Z\027\366\274\233\365\322;ET\t\275\330\216\326=\271L\343<\331\367\234;\235I\352<E\273X\274\021\374S;\324\031*<B\206M\275{\347P=\305t\373;\177\333\237<\316\372\323<\335\252\337<\250\233\307<\227/\227\273:\354\301<\006A1\275g_\212=\323\230\342\274\362\001f\275\335\270#\275\004\323\370\272\267\243\351\274yk,\275\343]\215;\361@$=\212f(>^\025,\275\350\006\020\275\005\270\035\275\326\222\247\274w`\334\274\345s\205:\213\033\262;\320!\252\275S\004\301\2735\235Q=\"\231\225\275\311_\206=\221m[\275q\274\245=0\277\023\275C`\002\275\222\013)\275\031m\324\274\360\315w\275>\350\034=]\241\036=ds\020\275\030\317\355\274x=k\275\331rP\274Sz;\275\351\214<\275\226\256U\273\022\217\225\274\356&,\275(\001\035;\340\313\260\275\247\224\213=\020\ti\274\220 \021=\004\345\n\276\377\223\224=l\245N\275\252|\210;h0\224=\341\023\235:\016\347\260\274\354B#\275v\246\006\275l\334\224\275\\\225\356<g\036\211=\300Tl=\272$x=\233\340\225\275\206r\003\275\022\2462\274\217\271\317\274\224\177\037\275q\023\246\275\031\270\362<\217v\360\274\234\340\2338\372\025\332:d;0\275\301Ta=\301a~>\315\306\231\273\351\345\005\273\322\234^\274\212\320\'\274\001\310\332\274\360\n,\275\200\363A\275}\251#\273\301G\032\274fp\'\275sv\367\274/\232\371=\206\264[\275\350\241\224\275\256X\204:u$\023<\243l\342;@|\001\275\236\234C\274\010\201|>\272\350\021\275\340\237\337</\0075<\220\315\201<!\254\240=\375\022\201\2751\035\202=\3233F<\271\343T<%u\177\274\221<\257\274\365\235X=`)k\2742\366(\275\254|\255\275\327\356\332<\302\333\237=5@$>\204\254\003\275\313\034\013=\310\307]\274\312u\366<\241\313\343\274/-\270\273\314\312\325\273oW\274=\3626\266\274+A\352\274A\345\266;\361\242\270\274\016\251\026=*z\002\275XU\301<\334}\362\274B\361-<\214\2651\275\r\346-=h\222;=z\025{=\327D\255<m;f</R\341\274*G\353<\275!\221=\000{*=\\\347\217\275\205\321{\275\232\200-\273\313\t-;\007T\372\274\213kj<-\200\014\275\354\023,\275\215\366\227\275\377\003\264\273V}\221>d\'\003;\362\312\035=:\027\014\275D!\260\273\301\365\322<.9W=\335``\275zg\375=>W\243\274\033|\002\275\351&\240\275/*1=e\232\303\274\253l\002\2746\247\351\274:\363\235\274L\026\203<ad\031=\205\345\026<!.e\274\204\372\263\274\266\227\003\274\241\233\307\274\300d\224=D\035-;o\331g<Z\353\207\275\344\300\300=W\304\205\275\213\373f=\361\206\022>\344\325\210\275Q\274\036\275\371lh\273|\232\035\274\335\335\326\274\224\264_<\275U\345\274\307f<\275\272I\265\271d\361\035\275\326\005V<\177Be\274\323M\024<\346vo\274\221\306C>X\255\n\274\353 \362<\022J\\\275\377\344\275\274T\247p=\215\335\343\274\354\261T=f\216\261\272\3374\031\275\220K\223=\214\301\004\276\322\312\212\273\350\320\326<\347U\241\273\244\363N;\r@Z\2753\2511\273\201}\225\274\204\'\325=8\2359\274\370iA\273\200|\346\274\272\205)\275\375,+<p\242\242\275l\034\016\275\252\250\274<\007\364\201=G\"\213\275\253+K\274\236\367\261<W\003>\275\355\032\177\275\345~*\273\240\361\207\275\260\036J>\332\370\004\275\247\277A\275\327\177\005=\327t.\275\373\315\316\274\370(g\275\313\334\272<\313\253\222\275\356\341j\275\271\310.\275\031<\314=,\023/\274\017\225\006\275\026\226:\275\365e\333\274\200z\257\275~\017\001=\n5\317\274\226p\211\27335\374>@a4\275\330\\x\275\310dv\275\323\022D\275\374\2653=h\036y\275^\313R\275H(\236<\037k\356\273\262\217\201\275\222\245\236\272\252L\271\274@>\367\274d\334\276\272/\205\n\275\035\372\264\275\250\025E\2738\270*\274k\327\260;b\221{\275\002\235R\274\2478\201\275W\300\245\271\276&\026\273/\355\300<S\000\035\275\257\226/<\241-%\275\334\260\237>\315\303\000\276\2256A\275P?\224\274\224\361[\275\342\024\260:\234\257\037\275\221\323\227\273\031\277\244\274\311\367\321<\213\024\\=\2600\254\275\3634\007\274;\016\376<9\232\202<L\240\016\274\344\020\325<\241\374\312=\260\032\304\274\250\265z=\332&Y\275\216/\314\274T\203\307\274\n\210\234<u)g>\354\260\"\274\310.\365\275K8\323<\210\362\213\274\271\\\330\274\246\233V\274\010\375\334\274x\237\221\274o\317f\275\270I\357\274;\n\342<{\203%>\367\031P\275\274I\244\274?\344?\273\005.\271<2\027\204\275\327G,\273\202Tt=bl\310\275S\021\225\275\201a\315;\322E\250<+5\361\273\022G2\275%\035\314=\357\272P<c-\277>4\211V<\273\356J<\365\035\005\275\204\'\252\275rl\317=\351\240\377\274x#\037\275%\272\201\275\362\376\334;r\023\341\274\263\360\370:\261\374\025=\336;8=\342\373\'=\345\031\306;\014\327\255\274\371hJ<\236\027\321=\331s\000\275\315\0043<\371\202\230\274=\252\362=,(\234<b\256\002\275\022-N\275\372\243\324\274\3739I\273\263rI=\020\230S==Q\214\274\224\'\222\274\222\363\006\274.\236\201<\354\360[\275\253\250\332\275\242\0051\275h^\003\275$\222S\275\031\325\r\274&\234{\275r\016\016=\316\235V:\025\242\003>\304\233\"=\333$g\275\tl\014\272\204v\271\275X%\271<u\026%=<\026\327\272\307\024\332<T\252\004\275\023\004\350;\330\022P>I\254\315\274r\372\250\274\233j\247\275\371=\037<\314\317G>\024]\025=\021GA>bj\266\275R\277q\275C]\330\274\352=\276<\327i&\274\210\014\221={\027\340<\372u\030=\'\300j\275\343h\005=oO\363;\226v\025\275\313\331p<{\3416=\'e\016\275~\037v<X?(\274t\024\000\274\371\2027>\306`\326\274Y\303\0109\3309\204\275\264\257M\275\005\355\246\275\375\203#\274\214F\035;<w\2409Z\370E\275\\D\336\274\213v\327\273{\236\273;\2240W\275\024}\201\275\310\245\350\274O1\376\273\273G\245\274\272`\020>\352\036T=\315<9\275\"\306\177=OV\251>\355\311\'\275\222\231\216>\026\351\211<\341\357y=\016\'\225>\0254\337<\022\007\253;\364=\273\275\270\247\024=\316\375\267\274\004\343\342;\236u\271;\260\325\335<\006\036\'=\323A\006=\3316_\274#}\306<\324\033(=T\214\327;4}Z=N9\252\275\356\237\243\275=\033\272<4\244\023\274\335\177,<<X\216=~zS\275\267\014y=\314\272\276;\025\324\027\275\350g\014\275\177K\327\274\322I\231\275\'\315(\275=D\201>d\224\271\275\321\253L\275x\342\203\275\344\211\013\275\361\262\200>\230\360V<\364J\037\275\031\232\222\275\270_\211\273\342B\201>`\243\261=\027\"\246\274eKg\275\305WD\273DCy\274\010\'N\274\311\371\253\274i\"\013=9v\203\275\351m\032\274L\233@=0\215\204;A\275\340;,\237\352\274v\342\037\275\306r\227\274\325\214b\275\315\003\n>Z-\025\274\350\310\200\275cy\003\274\260\230T<\321\2579=\311\000\022=*\016,<\024}>\275G\025\010\274\330\350K<DK5=\2068\234\273\331\351\300<\266o\337=\010K\332=\247]\205;\3349\024\274\241\321]\275z\322M<\031\3372\275\026u\357<X\360\345=\223^\002<\243&+\275\346aR\275\325-e\274H\241\317\274\304[\346;\"\300\361\271_\304\316<\313\337{\275\366\316<<\312\234\307<Dn\217\275\001\302\221=\316\214\030\275\365\024\347<\214Z \274l(4\274\311\023]\275\260]\027=\033\230j\274Ad>=q\017\215\275\225G\022?Q&\361\274V\354\010=\234m\333\274X\\\201\274\204}\337:\307\026\301<\362B\223<\375\314\262<;\355\264\275\354PY\275\037\257\220<\351\006\313\274E}\372\274\250M\213\275\236]\250\274\257\266\207<dU\360\275f\357\333\275\007\364\267\274\263i\253\275+\343\321\274\364\252I\275\n<\032=\201<O\275\203\267\356\2741\3448<Xy\311\273\241\2732\275\324rd=A\316\362<Ehu\274\263\360\224<-\204\035<!\203\223=\265\016S\275L\261f<GP\362\274\255\271\227;\313\014\033\275\314s@>\237\203\027\274\333\315\t>\235T\231=\261[\227\273\264T\013\275n\204Z\275*\023\347;\027\211\317\274\344\375k=\272\236\211<\371\022\023;4Au\275,\034\024<e\231\025\275\315=\235\274\200\211\021\275\036(\221<#\333k=^\355\206<\201\035U\275\245u\327\274\375\214\237;\001\001[\274MW\202;\351\277c;\254\244O\273F`H<\327\037U\275\217\376\201\275x\\\311\274\214\371\310;\226JD\275!\347\035\274\377\326*=\247l0\275\224\030\335\274\035\326\260\275%\336\031\275\277\213\330;\017\372\230\275\345\355e\274\302\001\247\274\313\335$>\333x\265\274\017~\036>\213\220,=\n\315r\273\250\236\244=\267\235\320\273\345\034\302\274\0321\302;\207\231<<\366\222\217=\251\255G\274\014\036\342\274\0017\260\274v\244\250\274\366\3430<\023i\305=\371h\225<9\356$;(\275\225\275\201\t\035\275A1\376\274=\007\257\274\354\334\001=\344\201!>;>\010;\320Z\203\274/\225K\275jX\223\275\332\347&=\242\272\320=9\037\311\274\210\307\214<\343~%\275\007y\225\274&k\027=\347\326\t<\257H\217=\341\0134\274\326O\245\274\215\275\310:-\rN\275\342\340\225<\025\013`<\006\310\301\274-\217h\275\366~\010<{\026\213=Pi\250\275=\335\n>\033\337\264=\016\352\272\274*\2113=$\336\216\275\241+\274<\0369F<\351\344C\274c\007p=\247\351\002=LS\247>5^]\275\235Q\302<\233\210~\274\030a\317;j)\364\274\004\327\355\274\002\016\226\274\302\317X<\213\227\326=\253\227)\275\320\372\275\274>\303W\274M?#<h\337`\273\257\313*=\331\376\206\274\2063\250\273\\O\'\275\2021\276<\356\'6\275\276\236\r\275S\021\021\275\204\362\272\274`\214e=T\026.\275\016,\306<\0319x\275i\315\037<xL\021\273\272\000z=\267\230\233\274]oK\275t[[\274\254\210l\275R\322<\275P\235,;t=4\275d\355m=p\227\342<\360\310\232\274\253A<\275]<`=\317\216W\275\003/\320;\2408Z<cx\205\274\213e}\275\201\353\n=m\3076\275{\213x=\315\031j\275%D\r>\370\317A\275\211\250\310\274\316\350\266\275\033>\323\274\323\373\227\275c\251\020\274\020\364\217<\253\240\206;\366\304\213\275\345O\\\275)\210\024\275[=\223;\025\022\310\274\232\325\377\274\264fL\275\276\3332=Z\253\301=/\014\236>\027R\366\274O&\306\274\313\365\245=\306*r<\363\007\333\275aAb=\200@\014=\344}\256\274\037\360\037>p\223\233\274\224$\224\275\326\200\237=5\302L=7|K\274\0175\206\275\253\247!\275\351\206\223\275\245\233-\275\010\202F\275/\265\016\275\376\t\364\274\'\370\233\275\203\345e\275\202F\242\275l\005\266>\351\365\267>\371\2318=\315\017\323<\334Q\027=\336\355\332\274OAz\275*\324\233<+\037\033\274\276X\221\274\351=\273\275l\241\232\275\261?p\275\273q\014=t\227\026=\016x\031\275Rx}=\2170\023>a\354w:\371\267$\275\021\343\257<,\241\344\274\0109\334\274\224\036\205\274\206\017\312\274\336t\014=W\017\247\274\301\016\274\274u~\213<\244D\241\275\350\363\220\275\303C\360;\033:\353\2744\241-\274\362K\324<\324\246\225=H\373`\275\017;1<\036G\031=\334t\200\273\307!R\273}\247\273\274\336\027\333<\200g\005\275\341\301\360:\252\017\312<U\236M\275\354Ed=\376\325:\275|\220\346=N7\216\275j\366\214\275\350[\240\275\263\260v\275\220S4\2740>\3477\313\n$\275oY\312\273\006\003\206\275\205\332\213=\\\346\236\272\272O_\275d!\241\275\037\265\017>%[\241\272\026\227\301=tz\014=\223c`\274S\266\227\274\022\352\225\275\251i0\275\007\335\230<\373\244\004\275\273\236\022\275\000\246R=\006\215E<4k/\275<R\301\274\215\226\204<\364\203C\274\206\301\006\275\247n\332\273\353.@\2758b\314\274\254\214\036\275\"\222\222\273h\356\031\275\212\307\376\271\037\276U<\036\352\360\274\216V\356\274\002\216W<\265\242\374<C\273\024\275:r\353\273(\337.\275T\236\005\275\306\346,\2750\230\227\275\001\244x=;\3271\275J\343\3648\231\255\206>!^\224\275\341\342\'\2759\376l\2750\030\177\274=\325\317<\265\016\203\274\251\037`<\302DS\274\234\374\346<\032W\244=\277\200\275<\213\\5\275\314Lt\275\362\232\377<\027\351u\275\374\263#>\301\013\231\273\367\360m\274\252\277\317<\223\253?\275\307\336\030\274&%\237;9\233|\275\374\341\017\275vC\205=Wa\202\275\031\340\272\273]\347*\275\002&!>\3648\312<\022Ro\275\354\242u\274\350\321\216\275\222\021\005\275\226t9=\235\241\230\275H\365\315\273\t\213$\274\033\003\021\275f\304A>\240\031\256\274b\225\313\273\347L\256\273j\302\007=]M\226<>I\037>|\263\231\275\372\016A\273\242\313\346\2744#a=\260]\226=\271q\371\274\264O\347<\304\247\"\275M\334\217=\236\r\211<<\205\217\275\3519\231=#5N\2745\303\331\273(\357,\275c0\036\274\233\246\305<\270\317Z\273\276\341r=t\346\250=2\002(=D\344\327>\3166\354=\320e\334\275^\371\032\2740\363\243;&+\215\275\035\260s\275\016\220\314<\207\2061>\316/\"\273n\235\335\275\333\304\272=H\321X\275 \201\254\275\223\311\204<\326-\202\275[\t\230\274\251\366d\275\357\031\225\275\233\343\025\275[UL=\263\366\006\275\315(\206\274\030\037\332\274\234h\207\275\231+\021\275\361:\231<\314\303\370;XuB<\217\003\032=\231\034\361=\t\207\360<\233v\320=qIE>\0217\352\273Q\2559\275\206:\014<(\317\364\274\211$\254\275\251\235\'=\240/\223\275\211\020\272\275L\'\334<\3140C\275\353\034f>\310S2<;P\006=\341/c\275\306A$\275r\255\366\273\302\332\254<7\316\200\274\270\312\202\275Q\334\230<0*\211\275\2729\357=A\t\027>\030z\327<\232\0036\2742\300]\275\rM\222\274E\277\275\275\201J\252\274\253\277\'\275\"\001\322\274\262\327;=\201\032\240;\350\362\016=}\031\210\275\021B\355\273v\031b=]nR\272\000\370\373<B*\332\275\346\331\203\273)R\215=.p\360\274\002\272\202=\024\206I=@<Z\272\034.E=\342\352_<di\201\2734t\261\275\301\315\005\2754\260\213<%\252#\275\266\221\265\275k\240r\275\216x\006\276\324[\275\274u\234\016=z\266\340<\250\255\220=\327\243,\274(\326,\275\353\302F\275\034\212\347\274\0265\205\2755\027\203;*z\240=\007\026\314\274X\031\337\273\213k&=5Zg<\257\3068\275\327\231\n>\\\371^\275)\375\2249\245\336\250\275\2728\237\274u\262\006<\226\353<\274\252\331x\274\255\004\236\274\312\363\232\275!\r\225=\371\342&\275\310\307\266<\366\227S\273u\tT\275\006v\032\275\307\324.<\321\220\003\275\t@\230=\014\244\t\275\255P4< \n\257\274\351\032\210=B\016\323;\t\233Q\275\321\004,\275\365Bx\274\240\256G>R\300\337\274\223\340\324\274\272\022.=P\357 \275\264\002\226=/\016\224\275\377<\273<\n\213\002\276pbo\275\266v\320=\003\307\331\274\204K\006=e+z\275\370\014\333=\314\017i=\333Z\233;\223\205O<\213\260>>\202\352\233:M>\027\275L\306%\2753 \001\275_/\361=\232W\353=\345\004\n\275\n\022\336\274\353\231g\275\010e\325=kG\343\274\376l\377\274\333I\320\274\336G\n\274\221p\247=\030\300\026\275\333\344|<\306\325S\275[M!>\273[\367<\203Tr\275\211\023\356\272;\333\003=\nk\021>v\367\013>mzU\275\375J:\273\210L\n\276\244-\005\275\244\023H<\355\264\2219\350\334\230\275\337r<=i \320\273\263@\037\275]H\304\274l}|=%F\322;Yd\356=\362\203Z=\014D \275\345\377\225<h\304\225\275&=\366\274#\361\257\274t\212\224=o\032k\275PK\262<\317\214\330=\361\303C=\231)\214=+lK>\021\\\230=\355\250\210\275\177\360\362\2742|\261\274\240N@\275\201C\005\274\010\226X\275\364;\251=\316\316\022\274\002\337\236<B\215\211\275\362\226\276\272]\'E\275\211\3416<\230\254\002=;,r\273\0323\207\274t\244\006\275V\222\013\274d\017\323\274eF\200\275\342 \033<\022o\224\274nS\032\275\266D\"\275\241;N=\336k\305=i\')\275\275z\024\275|UL\274\356w\203<\332?\351;\207g\324>%\237W\273\371)\340<\351\360\260<\016\243\n\275$e\366\274<\325\273<\027\025\266\274\315\274\353\273\354\331\230\274\274\302\027\275\2462\305;\262\t\366\274\230\373\014<`\251\036\274\026\377\274\273\330\337\302;\004Z\353\273\274\333\021\275Cx.\275\372bY<\020^\255\273\313\354)=\321(+=\346\340\003\275r\321\222<\0105\226\274\226d\001=\344\\\221\275\3072\222;\027\317H=a\024I\275\n\372\345\274TV\"=\361f\346\2742\361\217\275\215\323\207\273\362\237\"\275\236o\364=\031K1=R\033!\275nP\276\273\373\353\017<\244\222\335\275\273|\200\275c\320\361\273\026\364i<_\371\260<;\301\306<\306\316\216\275\342\000\304\274\230N\255<\210\275}\275\017\307\036\275\223\237\004\275\246\227\323\274)i\364\275\276)#\274\026Z\352<(\250\247>W\302.=\266S\223=\2017\230\274\006*\324<~\3779>O\004L\275{6\250\274\277\257\243\273\004&\254\274\200U\n\272\'v(=\333\007\367<\214\317$\275Um\313\274\206v\204\275\302Q\231;\265H\003>q\346\265=\245\371%\275\277\307\014;\330(\370<\336~>\274\321}\t\276>\365\374<\366\023\265=\235\271)>\272\241\265\274i\032\246<\010\351\305\274\241\266\266=\025\237\334=\344\204x=\370\200k=\314TF\273xA\200\275\372\301b\275\r\022\224<\203\366\327<\021\244\225<\373*\227;\352\3229=\025\224\"\275B\220\237\275\276\223\243=\320\375Q\275`\304\031\274\221h\377\274\253\265\343\2751\247\224\275<]T=\2268\203<\257U:\273\327\275\"\275\243r\036=\017A7<\001\327!\275\2428>\275\264\222:\275I7&;jub\274\204+\024\273\0373\256\275\232\361\211=\"\364\024<\306\316\303<w\nl\273c\t\232=\201\0271\275TZQ\275&\275\355;\306WJ\275-\234\023\275f\3359\275\301\267\023\275\332q0=+\260\304;|\371\032>cg\241;\222\315\013\275P}.\274\301J\263\274,\312z=U\006\'\274\247\220\032\275\266n\302\275\016b\271>\024\255\235\275Q\377.\275KO\367<\005\315o=_\221\037\275l\374\366=\235\277\250<\367\266\242<s\333\240=78\352<\305\006\017\275g=\260\274\371\232\363\274\345\027\250\275\377\031\004>\033L\244=\'\365X\275[f&\275@\367\025\276\010S\252=\004\352\257\275\267\235\030\275\005\306T\275\020\034\337\275^S\245\274^\271\026=)6\006>\230}\363\274H;i\275\033\t\025<~\215\210=\006\354L\274\250\032\221>\367o\007\275\032\3743=+\rt>\260\226\206\2751\325\003>\333Ky=\365+0<\371\333\020=\rB\326\275[`\233=\306\262\241\273j\252\035=r\313\000\275\236\234t\274x\375V:\n\301\354\274(\230\211;\324ZC=\t\232\021\275Jn\255<=\355E\274e-\007<b{p\274M1G\275u\031\315=<C\236=\205\'\220<\005x*\275\001\0325=\305\356\362;i\231\014\275\010\267\316\274\244s\300\274\005\025o=\343=_\274\240\027\014\275Oo\252=d\247\332\273\020\025u<!\232\267>W\035\310<\020\211[\275\322C\026>P\211\021\275\315B\226\2749\021W=\243\337\226=\220\252\033<\035>\224;U\337D\275#2\256\275=\022@<\302\270\343<\211\342E\275\371L`=\367\305n\275\360\210\224\274\331\345u\275\033O\016\274\234\343\271\274{\304\022\275\020pc\275\336\376h<\024\251\205<\372!Q<tn]=\345\326\254<\003\262\260=\003X\014\274\025\244\256;u\004\204\275\362+\262\274\276\0241\275$\314\272\275\306\226M\274j\217\215\274\334\2775\274\251a\367\274\310\220r;x\253\033>\352F\232\275\274\314L=\032;\230\2741\205\214\275\032\366k=\237\252\235\275*U\240\275\263\323$<\360\023\267\274L\360]=\214\261\212;\233_\034<q\002%\275\326b\340<Y\342\262\274_\027 \275\240\212>\274W\020\215\275\212\2514\275\222Y\215<\3606\221\275\n\031\362=\365\004\253=\343\313\201=1\276\312\275)\007\001\274\363\025\002\275\354ix<\250lw\275\330\313\016>c>\020\275\3460S\275\210\261<\275$D\n\275!O9=\377\221\346\274\372nE\275\344\260&;\253\265\3225*\276\240\275\322\356\2729\257m\267<t\336\010=m\2151=+*\243\275\020\021\027>\3375\374\274\237\031\275;nvz<\214\341\341\274\\\245\200\275\006W\205<\274\273I\275\227d\232<\277M\266\275\247*\t\275\343\372f=\276\337^<\344\244&\274Wz#\2749\251\374<O\215\270\274w5\214<\244@\220<d:\224<o\261\350;o\210\252\275\377\230\177\274\375\301\302\2746!C\275J(\263:~H\267\274\203\227\230=\375\3720>\324\013.\275Q\2460=2\370\357\275\037\365\017;\230c\004\274\325(\014\275a-\201\275\345\360,\275\254\007\223\275N\020\021=B\263\r\274\320\324\202\275R\266\205=\213_\317;\001\321\203\274~\275\332\274\235\236\336>\224\020\273\274\254WI\274Z\310y\275\\\002\301=\201\345_=C\365s<\247\360v\275\005\"\332;\357\370\320<\375\315;\275\327j\320\273\252d\237=\240\033>\274\360\235\246=\371\234&\275\346\326V\275l\230\n\275\317\351\020\275h\256\362\274\340\252\254;\264\371\201\275\345\322\211=\370\354\304;#\247\223<\356\251\234\275g\3545<\204\312\347\273\014\305\206<\337!X\275\375\347\231\274\256\244\025\275\2368\025\275\003\027\216\274\210u@\275#\nL\275\004a\362=\256\340G\275\320Ay\274dr,=\237\366\024\275\226_\303<4y#\275^\251\252<\322\345\271<\330S\260\274\327|\235\275\326\007\215<z\367(\275\013\3746=a\332\007\275U9\210=*u\t\275.\256;<\340Z(\275\325tt\274(\010\007\275\265\3546\275\3109->\203Nh=r\321\235\274o6\031\275\260\253\305\272\271\265\217\275\227\026\267\274\314KN=\262\206\334;\'\016\322\274\200\034\266\275n\340S\275\364\330X=?\030c=\216D]=0\247\260=\027\353\221\274\231~<<C;\320\274\305\020Z\275\210\006\370<\036\301\301=F\340\227\275w/\240\275\264\242\203=\270N\341=d\313c>\317\027\320=\211\351}\274\314\327\245=vw\t\274\356\355\233\274\305\350\376\274\212\036&\275\231\023\215\2746\243\321\274\305OW\275\023\210\362=M\025\024\276\"d`\275Rh\'=\207\001R\275\375l#=\217\005\277=\211n\331;\343!\247\274\276\211\207\274BB\235=b\200F\274\267dl\275:\330F\275\375\344\245\272\254`\363<\023y,\275\322\337r\2730[d\275s\226\013=\321H\277<\216V\022=@eL\273{{D\273\306\333\027=\251\237\246\275\337\243z;\300V\366<Z1\201\273a\345\201\274I\\\000\275\002\253\204<.\231\212\275\274\025\267=\260\324\013<\260\362<=@\337\342=\022\302\030\274e\237\227\275\230pt\275\300\347\271= \321\022\274\230\223*\275\361\301\355\274sdS=\014#\253\274\271\266j>\272\020\234\275C\313p=:=\271\274!\257\010=/Q\377\273\346\366\223;\205\341\207\275%{.\275\243Y\244\2757\353\204<\255$\004=5U)\275Si:\274\022F\237=\211\211D=B\323\001\275qh6\275j\316\022\275\210&\354\274\237\350\246\274\244\354G\275\226,\207<\016\342\236\273\003\340j\275\346\356\226\275[\242C\275_\355T\275w\342I\275\377<\021\273O27=\333\r\000\275#\341N\274\377u\324\274\305\322H<0\247H\274\357\351\350\275\205\227\007\275{\\\002\273[\021n=Z\023v\274\336f\277<\343\237\177\274\271[\010\2754\001\007\275\333\037X\275YSQ=\016\367x\275.\016\322<W\241\215\275\355t\013\275m\2722\275\\\320\034\274Ni`\274E\303@\275i\275=>(\314\201\275\242\370Q=\236\213$\275\276%\201=\211\307\224\275\321\274\035\274<\353;\274n> =W\207\312\273\001\\Q\275\225\357\225=8\331\246=\337\016\350=\370\351\202=\364\215\004>B\3543>\313\036\216\274p\243W<\356k\200<\343\273\024\274R\0012\275\230\320_<\232\177\r\275K\305O\275r{\013\275t\005\213\272^\021f<\366\273\233\275\334\177\361\274Y\377)=\340\313\362;\314\243\246=\"\326j<\374\220\344\274\024\277\242=\036\301\331\273x@\200<\022\335\226\275c{\201=\331\353\r\275^\t\005=\367\245\215:\302\025(<\300\226\264\273\337%5=z\013\200\274]\271l\274j\343\307\2748\r\262\274\376\300\343<;\3569\275\354\370\226<\361\241\035\275k\371\354=\0101\032\274H\272\000\274\206\204\201\275\214i\252<\206d\376\274\264A\034=W\376\313=\005\001\014\275\375\251\035\275\267w\261\275\347\201\007\275~\' >\330hc\275n\205\017=\022\376\021\275\276/E\275\213\350(\274\332\3365\275!G\226=|J\372<\373>\265=\300\355\207=\203\020\032\275\265\266\227<\245O\245=\374\233\276\274@\352q;\tp\002\275q0\311=\251\216\004\275l\224\232=\335\243\205\275\305\203n<\034`\217\275\025\\\030=\027\366\356<\243vZ\274\021\002\010\275\270Mg;[\362j\275o\245\214\273\242\265d>\210B\263\275\255CE\273\350c\231\2754Z\234<\032d\227\275O \232\274\242\352\362;\264\372T\275\370\023u=Gb\347=\321y_\275\336\207Q\275\236\342\372<\360\263\314\274\002\374\037=_E\000\274\302\3336=q\276\022<\254\341\205\274\326\005\334\274@\315.\275\336\320\010<\311T\020>pl\340<q\253S\274\245\243\370\274\nA\004=\')\355<V\375\240\275\233\265\243<\364\022\317< \262V;\r]F<S\307\207\272\037f\362\274\234t\315\275\251\321\302\273\026\007\003=(J\306=_\227\252=\343\262Q>\204$\342\273\2263\232\273y\344\004>\273!,\274\344\376\t>|2\336=\356\315\353\274R\235&\275[\263\200\275\370\031\223\270\324~\356>\343IQ<\235l\001\275\253\206,=\226\260\004\275|YE;{\013S=\245PH<$\tk\275rF\022;\342\245\215\275\005Q\'\275Y\243\017\273\t\237L=q\246D\275\036~\237\274=\365\032=}\022\211<\303;\302\275Dy\210\274\333\017F=\345n\277\274\312Td\275\236\010|\275\010\3513=P\276T=^\347>=\333x\211\275\323m\234\275|#\322<\0177\005<\257\200\203=q\246\036\2752\034-\275V\235B\275\0030\375\274_\230m<Y\000Z=\340\313\023\275\371}A\274\\\330w\274\023k\007;\'\310\247\275\363\351\"\275\323\244\371\274\343T\017>\362{.=\255$\210\274Nc\206\274]9,=\360\215e\274\202B\267<\217\275\352<\233\311\226=\220\336\224\275\322YT;\031~\030\276\027B\206\274\2029\211\275\306.\020=\363\031\000\275x\004\n\275\260\337\312=o^\177\274I]}\272\317\000g<L\035\275\274\346\202\026\275\310\265A\275j}\277<\000o\207\275\265\240<<\371\000\010\275GmE\275Pd\221\275\257\343\025>\335\341c\275<\236U\274\267\313T<\250\226[\275,\232\004\275\024(\324=c\330\321=\205\025\254=\245Ub<\267\300\261\275\'Q\013\274\022\346\017=n\315\321<\354e7=f\231{\275zc\204\275H\337\270\274`b\324\274/\017\334<\256\331s\274\251\273\204\275\002|5<\340\243]=L\311\326\274k\325r<`\006M<\220OA<m\352\371\275\325\341\275=<7\235:5qY\274\370\231\217\275\225|.=\234\272\031\275\250w\244\274\007m\031\27518\t>nk \275\341\224|\275O\311\227\274\017\312\207\2750\374K\275|~\364\275o\273\372\274\266\t,\275:\310\256=-z\022\274\225z!=\313Pv\274]\214M=T\337\327=\2709\307=\212K\203\274\356d\214\275\203\031\343=\026c\035\273\255\257\201\275`\032e=\363\204\327\275\257\234\013;\347\226\345<[;5\275`(i\274ML\010<\212\276}<\353\215\231=\205\267\364\274\316\001\231\274\233I.\275\375\370\t=d\362\366\274Q\256^\275|\032*\276tvV\275\307\032\r=\205\027\017\275\312\362\377\274\332[\226\274\037\274\272\273\031F\311=\252\240\001>,W\222\275_[\213\275\002\255\251\275>\006g\274\213xk\274\260V|=\260\006Q=\344\323\261<\310M%=s\224\312\274#\232\275\275\325%n=\321\217\254\274\3277#=\331\032\007=]\367g=\024\350\213;\026|\";\347\014(\274\311z#<\214;7\275O\353\255==P\001<\033\r\314=\262m\255;u\007\021><\267\366\272\016\336\372\273a\246\316\272\001\375\017\274k\324.=\357z\254\275\354@\337\2749\2310=\340O\243<\261U\031<\351\375\224\274[{\n<<\001\000>\356!\211\275tQ\216<\017\001\342=3\244l\275\263\010\321\274\347L\311\273*\0272\275$\2245\274\304*B=)\240\231\273\204N\352<\"&\237<\302\244\016<\003\245D\275\000^3=\204jM;\244;N<\275\275\'\276\257\376\271\274\026\236\260\274`{<\276\261\254\014\275\204\'\355<>o\351\274\264>\263=\t\267\220=\013\372l=\276j\365\273 \241!\275\201\357#=\020S\223\2748\353\\\274x\300x\275c\025\256\275\212\312)\274\236\257\203\274h;h\274+\253.<\343\231\334=\374\312\037\2743d\253<\365\220\372\272\2451\264:\030\2775\275~B\304\275\2645\307=s\266!=\370;\036\275*q\021\274(\311\314=.\315&\275\274u\241\275\334\2040\275\363+{<\206X\026:\221;]<\274r\263\274\r\345\227<\243}\333\275\\\034\036\274\373r\300;*\304W\274\330\236b<\373o\247\272\377*\254\274s:8\274\n\262\177=+\020\020<\235\030_\274\022\374\213=\3248\264<.\236 \275\217\260-\273\365\334\235\275\331\362\204=\222\010\n>\220\320\352\274\206\244|\274\374}\250=GP\240\275\315\365L\275\242\317\224:\223Q\210=\"\263\230=t\271\241=\315\313Z\274\2751\032\275k\372]:\364f\373\273\225\214\240<\332\272\353\274]/\224<\026\246u\275\260\250\244\274r\332\304\274\'\254T\274(\313\311=\324\227\337=E\r\210\275T\217\253=\340\264\325<\342\327\245=\240\2669<\326\337\246\275\374\277\304=\346.\327\274a\3005\275\301\324O\273\247\371\365=\027\322\252=@\344\214\272/\t\321\274=.\327;\237iJ\275\2720\034<\014?[=\234q>\274OV\264<\232\267\032><\033\220<w\350\r\2758\322Q\273\371\305k\275+O\034\274\214\361\324\273\263k\254:2Y\"\275\247{\362<\330\356\217\272\352\306\335\274\n6A\275l\374[\275\272x\037=D2Q\273\346\005.\275\340\251%\275\020p,=S8/\275\373\274A\274y\303\241<dG\255=BN\316\273\034\014\017>\324\026\370=\006\267\n\274\277N\027\275\355\325\000=\355\302%\275\246\013S\274\302om\275\271\366\256\273\013\027\354=\236\005\342\275\214\025\032=x\372\362=\005\252\242\275\257\r\212\274Vf+\275\376~U<e!9\274\220\356\205\275\222[\"<\350\301=\275\257\255\001>\207^\337\274`\256h=R\322W\274S\177\357=\373p\206=\014\254O\274Y\200\334\274^!0\275a\025$\272`\027L=\306\230\314\274\341w\267<\302\216K;>\035z=S^\366=\373\0031\275\362\277,>_\203]=\351g\205\275\333\261\200\273\257w|\275~s\320:\233#t\274+{F\274\356fm<\353\036O=\024k\261<\372d\371<\023\263_\274NU\200\275\021\227F\275\323o\\\275K\201\333\275D.H\275V\212\021>\366dO\275kh_\275\235f\032=QM\316\274\204\264\276\275\225m\216\273u2\032;\303\334\357<M3\261;\203w\304=lE\217=\030b\212=zV\\\275\1776\240<\321\322\211\274!\252v\274\254\033*\275\247\\\005={[C\275\256\345\007<\203~\271\274\005$\204=\261\017\025>p2\330\274P\017j=|,A= \003S\275\357\267\322=~~*\273\204\033\302\274\261\224\356<9\037K\275\364\027\231\275\377$\017\275\037\367\244\273a\315\252=\236\316\346\272\221($\275.\316\212\273\231p\032\275[c\022\275\020\265\n\275\227\273+\274D\262\037\275\224\251\210\275\274\177Z;\025\316\244\274\231\374\263\275\201\036\375\273W\3028\275F\237z\275\240\213\301=\273:\336>Y\337/\274\336\242\310\274\346]\240=\006M%=aZ\300\275\313(\202;\024\210\324\275\271\235U\275\036!\226=\211\373\364<\n\354\251\274\360z\232;.\301A\275\0315\177\275`*,\274P\335\266\273#8`\275\037\314\250\273_\224?\275k\266\013\275\2006M<\350\274u<\366\224\212=\2563\314=\272\007\321<\205\301Y\275\355\264<=\270\266\016\274\013\310\236\275\273\253\375:\275_\366;\34022=\357F7<!\344\366:\350\230O=xdB=\245\006\361=\312\277\221\275+DT\274\262\300\242\274I\354&<\002\310\240=q\277T<\307!T=-z\326=Us\220\274\240\346\005=K\026\312<\205\013\034\275\306\007\002\275I\373\237\274Q\244\310\274t\326\233=%\2628=\251h\203\275\255\351\241\274\366\022\010\275\002T\204<x\223\363\274mN\352<\227y\250\274\253\352\223\275\317\212\224\275gv\252\274-\313L\274\2101\247\275\361\n!\275n\356F\275s\025\241\275\'\322\241\275\017~&\275\250\033\"\275x\263\013=\320e\210=\302r\256:\273\244\313\274z\266\223\273\026\306\002>Z\374=<zd\030=\202\300r\275qf \275\347\023\366\272x\251\345\274a\315\240\274=/\252\274\217\n\3409\322\335\'9Bs\177<\337\271)=;J|\273:\312\206=\023d\244\275\216\360\275>Ts\337\271\211\n\250\2750Y:=\267O{\274\246\036\231<\273\005\217=\224\267*<\2131\217\275\250\"\261<\031W\365<k\230U\2757\265v=\311\231\303<&\243r=%\203k>\271\246\\\275\320\242\220\274EP\370\274\350\232\225\275\235o~=\262\265\036\275\2609\204;\321,{\275\342\370?=HaA\275]\364Z=\222`\347\273\217\354\274=\205\264<\275\217c,\275\374\323J=\266\224\351\274\313\220\322\274qw\224\274Ys\033<0\205\022\273\376\300\241<WB0\275\310Z\342\275+\305-\273\261\247\245=\034\2648=\203!D\275\335N\323<\372\227Y>\345\242\310\2740\330q\275q\216\304=\256\254g\274\321\362W=a\245\267<6\014\363\273*\246\215=1\241\337:\244\303\030=&\327L\274)o\211=`\261/\2759{\310=\376\212\335<S\177;\275\350e\215<Ga\237\275\374\375I\275\226\316A\274nm8<\317\314\003\275\366\220\347=\006\255\322=\232TC\275\006\224\037\275\376\001\261\275\264P\016\274K\355\320\273\237\212f>\035\351\222<\272x\233\274\230\005K\275\331e@=\342\266\266<<\234\227\275Y\277\254<\314iw=\254\t\301=|\354\356<\325_\317\274\033\323\203\275\3749\220\275\315\251\271\275G\025\212=\030:G\275\352j\n\275E\240\320=VLZ\275\234\250\353\274\002\340\266=\251\266\221\271\247\014\210\275\236<]=\360\377><\033;0\275\031\254\321\274\305\241\215=\330\234\345\274+\252\230\275\357d?<\372{\031\274s@J<l\022\377\273\314Q\013;\215\222\r\275\200\2254\275\302\315|\275\211E\030>\251\237\r\274\375/\376\273`dg\275l5\336\274q\376\310\274\307Q\255\275\274p\260;\014\021\377\274[_]\274\273\235\033\273\013~\201\274\343\372.\275\364\255\344;]\021:\275\006\232l;\t\262\365\274\247+\006\275\335\002\360\274\275\305\214\275\037\217\324\274\245>\002>\316\031\357\274\216\217K;Mw\r\275\315\263\344;\263\364\t<\007\255e\275\311\302^>\310w\234\274h\0366\274X\235\340\273\331\377\257<>\306e\273\026V~\275t\205\303\272\236\204\027=5\267\276\274\264\301O\272rh7<\\Lj<\331Y\014\275\346\310\207\274\2179\021\275<\346\001\275\205.\274<n\034\002<\261\203\341\274(\230\211\275\2277\315\273Ur\';\274\262l\274\'\262c\274\354\254\227=\300\323E\275\210\240\"\275T\'\313\275\331\tu<iDH\275\002\314\210=T\261\332:\177\231\375\2748\366W\275\241C\313\273\354`C\274\300\001\036<W1\253\274\3504*>,\343-\275\033\201_\275\232K \275\350\003\335;\330V\t=\277\377,\275j7\327\274\335\222^\274\177\355p\274g\362E\275\266H\022\275_\207U<G\232l=\n\202\300<D\266\241;\254\301\233<\360\342j\273\013\262>;%\233\366\274\306\303\025\275\337\262\223\274\300\367\213\275t\023\341\275\344\235\020>x\313\210\273*\000R\275\311\354E=\025\304R;\314rL\275X\373\216\274\2204\333\273*H\034;\212\275\204=#\2631<AO>\274f\004\300\275rz\017\276C`Z\275\250RK\275]_\025=\361I\257\275Ux\263\274X\337\257<\0146\231\275)D\243\275h\226,\273\231J\305\274\230\225H\274\244\325\020\274F&\246<L\251\305\275,\371\371\274\021\t\326\275R\333\016=\325\'H\274\233Zd=\350\2439=nN\305=\002^\022=L\026S\273\002q^\273\026G:\271>\3254\274NDd=\205D\327\274\274\264\300\2759Ax\275\357\272\353\273\206\302R=\004\330\014\273\302\377A\274\035s\341<\037[\203\275\373\315\262\274\360b\254\275%\270\002=v\255d=\2657a\274\001\263\004=f\334P=\237\227\033\274\222[\252\273q$\305\274\364\212\321\274\002\220z\275\200\247\322\274\2044x\274\035g\001\275k,\260\274_\242Z\275\364(+\275\261\017\271<\251V=\275\234\303\345\275qm*\274\036\343/\275z\2215=\234\321\364\272\304UW\275\336\354;\274\027\273\252\275\334\255\331<\207\261^\274\315\027\032>\340H\037\273?(\r>^DC\275\332\275H\274\263D\256;\267\354\321\274\323LE<`8\272;^|\207\275\264EX\274\255\356\356\274\331@U=qr5\275DR\304:\326\"g\275\375\350t;\014\255\000\2751\370\314=9\324\222\273\275#\026\275\364\3270=s\027j<\330u\377\275\013\220?=\205\362.\275\342\216\241\274\320_0>\316\026\275\275\034\307,\275\020\217\354=\227\321\"\275l\254\300\275\000S\336\274c\0272\275RRY\275I\240\035\275\305\234\306\274+|\356=\273\2049\275\013H@\272i}\037\2753d\342=c\342\022\275\354\222W<\225\331\311\274a\361\263\275c1\013=\035u\017=C\270\244=\2603D\275\272\332~\275\362\254\214\275\374\270B\275B\261\305\272T\220\330\275\246\n <\177\3164\274\313\017\202\275\271w\233\275\241\215\247<\000v2\275/j\025\275:\261\314=\327LT=~\003\000>\347\030\033<C\227c\275\036Z\252=\360\230\275;2\337?\275Q\361G\275\023\371\221=\247\307V\274\013\322\245<\341\363\324\273\212\013m<\022\270\204=\363\302\223\274w\323S>\242\210\345\274\2659\324\274`\304\347\275\220\"\323\274\202eg=]g\303\275P\361\023\275H\300Y\275\206X\370<J\370\021\275\303\270\257\2754\031\326\274\005w\205\274\223\373\211\275\325\350\330<\231\353\247=\261\013R\275\251\005q\275*r\177\274c\213\014>4\236=<i\002\311=\264\345j<m\002\360=\271b%=\030X\301;\257I\026\275F%q\275:e\361\275h\300\032=\005)t=\005\227\017=C0<\275\320f\016;\001!2\275\0174z=\336\250N<\245G=\274\323\215\202\275\212\370-\275\347\025:\2750\252\263;\331EV\2749n\203=|\362\242;3\310\223\274\033#\257\274\325\022h<\300\207*\274\255\002.\274\"P\234<\010H\006<\237Sy\275s\336\250\275\353\373\225\275y\223\n\275.)\274=\261\001z\275\000\007\227\275D:e;\177\022\345\275W\340\021>\\Z\301=Q\022\317\2754\366\224<\3303j<n\372U\275\236\371\250=\3348\342\275\253u\t=\224\273\200=khZ<\342\023P=\262y)<]\373\230<n\270\215\273(Yu\275\026\310r\275\243D\022\274{x\036\275\005L\370\275\235/E\275D\373O=Ir\263=\223x\226\274\371u9\275\233;s\275\315A\365\274m\370\215\275\311\203\220\275\261s\213\275q\021W;q\215\271=R\357\327<\351\335,>@\251\312\274\207\226J\275\274+k\275#\344\251\274\027^\024=\026\t\245=L@\323\275\250\214\223\275u\213\217\275\214w\223\275\237u\327<\330\370\325\275z\347E=\206\030\267\275/\314\302<\302\017\221=r\276\241\273\275\030\004\275@\331\332\274\231\037\303<\363b\030=\211\353\314<\353F4>\263\"I\274\334<\203\274\273\016\305<\202%\236\275Ji\273\274lC\247=\274,r<i\244&:\301\300\253<\223\343\">\021\243>=n+\256\275h\227\001\274r&R\275\3004\207\275\200z\300\275\231uO\275\253a\270\275\244X\004=6\321\310\275 \314)=\223\244\220\2755\240\260\274\313\256\220\275\337?~>t\023\363\272.t\215=\347\222k<{a\321\274:z2\274\243tL<\300\203o<\036\315\341\275s\275\364=\356\243\202<ur\007=\374\327\216<J\277\273\275\300\305\257\274\273\320\000\275\025\346\321\274c\013<;!\257}\275\375^\320\274\206\251\373\274A\361\320=\332W\270\274\365\336P\274I\2110\275\026&\247<\341[\326\274\333z\002\2756\207\021>ja\313\274\344U*\274%w\000<\216\301\200=\240\262\r\274x\"\374\2744]P\275Q|R<\025\3054\275\214\323B=\305+\226;\230!\021>C3]\275n\205\036>G\273\300\274\266Z8\274=eO\275\232\270\241\275!c,\275\232-\004\275A\206\267\275\216\325\251\273\323q\250<4\272\363=dU\006>\212\234\221\274\027\326k\275\240m]\274\346\3134\27498\241</\372\344<L\375\375\274:o0\274\314\226U\274\324\rN=\212\035S>\307}\225\274W\215c\275]\373?\274F\021\253=\347\013\214\275\rP\213:me\341\274W\333\355<\2709\005<\3705@\2732\246u=\232\223\266\274jf\254\274\247\244s\275\361\305\313\274;\376\361;\251\220\006\275\237\022\236\275\226q|\274\223\357\221\275$\245\374\273$9]\275sN\255\274\026JI\275R{\260<\255\024\354\275\026\327\202\275C\307\345\274q\222\355\274\212\301\035\275\271\265R\275\376\037g\275{Zm\2756\267L\275\266\002\203<4\353\025\275F\256R=j0\214\274\356\331\002\275 \304\000=@\262\031\274\247\301\364\274\302\223%\275\030\253\346\274\334\330\005=\266\265\324\273\022\246l<<\315\026\274\366\240P=T:\026=\231\367n\275L\025\020<\2244\r\274\200^;\275\337\371\006\273\t{\200\274\0203\200\275\203\241\255\274\304m&=\274)\376\274\353J\261=\356\017W=\007\311<<\2329[\275\025\2124=3\326\242\274\263p\374\274\212{\227\274YX\327\274\371B[\274\262\000j\274Z\333\217\2740Qj\274{\317\255\274t\311D;\363\206\'=(\2665=\245\352\233\273\305Kr<7`\230\273H\234}>u\206\036\275>$\311\274\226B$\274?x\221\275\261\324p\2752\346\013<\000\307S\274\256\330^=c\025D\275\242\037\337=\032\013D=\354%,\2750\013\t<\323\306\022\2746y\006\274Y<\237\275\373Vf\275\325\177\n=\310\267x\274o\234\361;\n\020\230>\310\331\337\274\244\034H\275\245}\306\273\013\236\t\275K\204\346\274\332G\213\274\002\334\352=\345\207_=\327@R\275k\203>\275E\345\307=\356U>\275\373J\247<\330\360A=\004\003\235\275\256\216\n<v\207\017\275\274\320\232=$\006L=\221\222\236\274\252&\330\274\374\311\006=\352\262*\275\356\274\222<q!V>\tt^\275gU\010=f\254\314\275\211\\\221\272\206\367!<F\272\226<x\367\306=`Hl=$\017^=b\354\272\273\331[y=l\254i\274\374;\t\275\320\022\373\274\216&\312\274\237\340\\<\010\207/\274Lk\2738\337\004\362=\322p><;\030\251\273\245\253\260\274d\237\013\275\373\t\n=\235\233y\275+Z\321\274 \016\336<\267\0377\273\265\005\256=\335\262\233=\026\026`<V\034\271=\260\275\002\275\341\200\025\274L\377\212=\354&\306<\246\272{<\020\320\021=\240\265\355=yJ\220\275\332\251?\274B{\252\274\202<\227\272\371\360\374\273\257\235\242\274C\037\005=nL\336<\275\320(<\006X\262=\336\245\210\275\032\340\253<\334\326\264<\0263\205;\035A\213\274\341\333\331<\035o\323<\250\031S=ZJ\253\271K\234K\275\353H\215\274i\033\200=/\275\016\274*\022U\274\352G\020\274\237\211\206=\'\357i\275\010<\007\275|\220\345=D\017\t<\314\212\277\275D/D\274\357\031\'\275,|\027\275\237U\205\274\257\216\033:{\217\321\274\343\006\246\2751\361\026=:Y\024<\214\266w\274\224[\305=\036S\222<\256t\203\274\327\253\235\272 \205\027\275\037E <.\254b\275\315(\027\275\245T\251\275\206\257y<b\265==\000\312\254\273\213\261\266\274t\333\267\272AQ\260\274\314\361:=MU\006=\021\350\212=G\347\237>s\206\234\274\271-\n\275\2728\037\274\033?\247=&\355I\275\227\027\\\275\330\313\205=\247\014U=\006Q\230\275\354rS\275\206\331\201=\374\nX<\303\025\343=\231\202N<\314g\242\274Z\343\225\275[\274\204\275G\n\3328\270\331\206\274\276I\261\274\244\327y\275\007\370\354=7\314Y<\275\257\302<\360\316\036=\225\203*\275\351\"\347<\344\225D=\326\334\027=\364\361!=\rA\360=\361\305@=\001Y\242;V\271;\274K\\P9\332\217\222=\255\357\203\274\300\330\360\275\347\206\254<\272\326\354<X-\244=\343\245\243=\255\002D;D\340\031\275\\G\277\274\030\033a>\254V\316\274\320=\001=Ow5\275d3\340<Zu\254=\001\013[=\217I\354\275\367)\313\275\021\332\362=r\231s\274\341\373>\274\237K\021\275$\335\005=R\356\233\275+\020\213\275?\354\321\274\014Y\215\274, \241=G\247\345\274(>\033\275\000+j\275\022\303\272<C\006\233\272_U\"<;\3424=V\353\314<\375\254\335;Wb\007\274\200Vo=\266M\304\275l\247\236\273\220\007.\275\036=\206<3\273\244;\277\014e=\343\230\200<M)\'\275\301%_\275\202!\002\275\253\313\312<s\243t;\275c\222;\243=k\274\3577l\275\301\266\235\275\025\304\247\275\024?s=\217\362\214\275\220\255h<\031\017\217=zk\256\274\031\275s\275\312\016j\275\352\277\321<=M\241\274\\\321J<P)p\275\375\034Q\275\210b\370\274}X\016>N\216\005\274\245$\202\274\207\231T\274qo\246\275\025f3=\310C\211;b!+\275RV\020\275L\220\266<*\001\333\274\030\230\242>N\354\373\274\357\177\323\274&n\273<\355\3427\275\205rM\273rGK\275E\300\375\272\362]\213\275\017\001?<6;,\275\373\202_\274\0104-\275\022\345\\\275\317\314G\275:6\223<N@\001>\343\004\224\275~/\211\274\235\210t<t\"\246\274\014\325\312=\037\321h\274e\300\350\274(\255Y\275\373\267\372\274\355&\210<6\032\'\274\272\324\331=\357L\000\275\205\223[\275~\247\031=}\236\025\275&e\330;d\227\254\273\315\275\233<\237\233\270\274\264\344\330\274\311\"\354\274\003\017\204\274\036\031\261\274.O\320\274\207fl\274\360\352\226\274\372\314\235\275\020\227#\275~\221j=s\244\014\275\343\315l>\030@\326\274\006\032\023</\305K\273\205Bg<\243=\303\273q\326W=S9\252=_\263\264=\326)\302=\035<\241\274\302\340\235\275\266\345\345\274F\212=\275\206W\244<\245KN=W\034\023=\3001/\275\210\227\336\274[\377\304=\363#\200;\211\350\205<|m5\274\263\222\246\274S\204\262\275\317z6=\341|\026\273\223D9\275/9\207<\335\203\031\274\235\227\233\275>\204h<#M\337\274\327\206P=\207\336\023\275\250X\222\275\373O\005\275<?g\275\327\3106\275\006\247:\274n\r~;\316g&\274\245N\221=\027Z\233\274\264z\254=\200P\026<\217\226\365\273(\310\014\275\261\271b\275\002Q\272\275\200\252O\275\310\022\353\274\254g\217\275\272Y\246\273\024\r\"=\340J\204=\255\3779<l\332U\275\200\024\005\275\216\303\360\274\320\340h\275\223\305\207\275;\251\002=\326\253\264\275w\230\313\272\336\210\027\275\216\007\023\275\254\373\204;\231|\356\274>\263\315\274?\261\216\275H\343\313\274w:/\275!q\031=\270>\352:\220\325\305;\362\317:\275\325l=\275;~\354\274\031\336\347<\t\332\227\275\303*\260\27443\247<\002\313\251<\224\253\213<\335L+=\275Ac\274\025\346\004\275\367\2120\274\250L#\275\006\367x\275\302\365\210\275\030?\325\274\220;\206\275H\355/\275\177A\273\275\212=\343\274\355\226n<\327-\023\274\014\256\200\274c\350\037\275\310\026\341<\033\342\266\273\231(\367\274\257MQ<\356X\210\274V\264H\274U\374\267\272HA\204\274D\234y\274\3016\262<\314A!\275\257m$\275l\260,<\272\3739\275.\243\'\275\2743\263=\374$\034=[M*\275\036\301_\274\221Q\r\275)C\n\275N\020\3469\225\224\022<\021DH\275\202\372\222=i\226\021\275\202Qo\274/\025\345\274\034>\247\275\003f\365\274jD\252\274\312\214#=\033\241\033\274\224N\t\274T\247\266\275*\376\004\275\233t\254\274\002x\261\275\334\365\247\274\205\301\213=\'\202\";\377\366\245\274\344\204\202<V\320\020\275e\213\004\275\205\244\014\275n,R\275\236\216\212\273\221Fa<\221\253\032=p\326f\275\002\315\227\275$\0210\275\020]\206={\0043\275}{\211<\257\303y\274q\332\224< 4\222>JJ\003\275\315Q\323\273\215\252\"\274\235\214\025\275\323\245\343<\341\327@\274\t\323.<T<\200\274VS\360<g.^\275\001\300\032\275Y^\253\275P3\020=\207:>\275\346<\220\275\004)1\275QvZ<(\033\312\275\241\373)\275M\321\263>y\262\342\274\306\324\255;d\243\004=\036x =\220N\224\274\355\320V\275\026$@\275h\022Z=%\246\250=g[\206\275\346\314!\275@)\255\273\'\306#\275Ix\272\274\250\323\250=\303\200\030\275\374\221\007=\233e\340\274\266\343\265\274{,\321\275\re&\275\353\315T=\t\220\255=/\017\250\275\\\260_\275>\373\226<\035\010d\275{d0<\213{\237\275\316\340]\273\204\305\215=;\323\374<\265\200)\275\241\224\020<H5?\275J\003\315>\243\227\230<#\200\201\275/\224|>\373\331\250\274\325Q\272\274N\257\016=\304\351(:\264\t,=\311\275\211<\224\230\276\275\354\204\201\274O\317\210<\242\372\001\275\244A\207\275\n\263\221<\232\210F\275\241Z\366<\365^\342\273\370\001\n\275wh\210\274\215OC\273\003\370\305\274\214mF<\321/\334\273Kk\234;L\302\033\275\003\035\246<\257\317\027\275\266u\347\274\005p3>\202B\023\2747uU<F\004A\274\217\376,>g_q\275ya:<\026\203X=\323ZJ=u\225\235\275\377\246\336:\001t\345\273\014\260 \275\300]\253=\322\353\302\275\004G\246\275\332\016\037=\347\357\005=\270\007\317\273\250\372\357=B\305o\275#\037>\275\341\035/\273nl\306\274\214-\213=@\3254\274\220\037\020<\362\300\306<\000\331<\275\344J\021=\321\215Y>cK\250<E\004!?\260\377\261\275\356\367\017\275\010\214\326\275\310\240X\275\031\315S<e\372\324=_\r\t<\302\325-=\205[\370<\247\315\265\2757\020\247\274y\002\271\274\027\264\263\274\010K\313>D\"\013=@\022\204\271\203e1=G\334G\274\002\210\206=\343>\036\274\221\246\211<\031#\327<\334\266G=\234p\037\274\333\243H\275l\0011=1\016$\275/g\262\275Dk8\275\230\217\010\274\002\205\010<^\361\373;1\241\034>\206\'\213\274\275\257\305;p\271\202=\235\201\021>h=\231=\271\030\n\275\225\206\273<L\202\350<l\343\017=2+\211\275\014\030\037\275\315\3323\2755\231\360=h\322\255\273\274mq\275\036\330\353<\302\324l\275Ba\034\275\3173\375\274\230\3109\275\361\370\036=\007\003\027\275v\365Z\275I\241r=\205-\232<\024\371\371\274\240h\241<\301\006\257<d\376\365\274\215\221T\274?\310F\273.l\221\275m\352\345=\275\200\244\271\213\252\030\275w\002n=\200\223\246\274@\252\246=\360\254#\274{\352\003=\356\233\201<5L\034=#\302E\275\"|D=V\312;\274\213\332v<\221\027\205\274{\024\253<m\337\263;\323\365\256\274E\311p=\026\314\244\274\312\267\221\274E\200\211\273\350\037\021\274\270\314\341\274XZ\017\273E\316\277\274\243\027\010\2751\304\357\274r\177\027\275\000\325\r>\340h\232:N\213&\273\331\211}\2758\331\375=\301\317\305\275\260\246\364\274\370\274\250\274\274\031\024=`C#\274\220\261\264=\353\253\003\274.GZ\275 \260+\275v\031\345\274 %\343<\253\'l=\250P\031=XUO\275\227\346\237\275\357\207\335<\260\365b\275\014\367\265\273\370HH\274\3664\261\274\201\033\022<\332\314\262=\247\002\025=\335\3132>S`\206\275\251\262R\275\230\270\320\274n\007\035<\005\014\231\273),I\274\353\031a\275\006\221\'\274\0228n\2756\004\205\275\025\336S\274\260\034\217=E)g<V\332J\275xa\300=\311\321\001=\201\305\035;a\r\253>w\014\350<\244\365{\275\2752v\275;|1<\202\236\227<\"\271\350=\177{\371\274\327\3161\2751\333\334<VE;\274X\007g\275K/\373;?\220p\275v\025q\273\260\321\237=y\253i\274c5\266<\r1\022=\346\325\231=\020\032\026>kb\236\274\342\014\272\274|K\343=&8\205\275\267\233\037\275\242\227\237\275z[3\275&\355\004\276\313\000;=}\317\263\274`EV=\325\352b\274M\310n\274}b\354=og\210<\371\030<=\030u\216=_m)<\347}M\274\212\3243<\226\304\324\274\26066\274\201\272\233\275\2575\305;\300\322\335;\335\367\207\274\274\271p\275!\003\216=\034#\316<\377\362\217\273\006\300\204;\341\256\013=\313KU\275\207\265\274\275\265y}<pv\203\275\"\024\353=\r\007m=N96>p\036\233\275\034\223\275<\331\034\001\274[\226E\274N~{\275*Z\305>\207\201-\275\266*\013\275o\331\335\275\221\304\261\274q\330\210<\034>\221\275\251I\304\274T\t\021\275\'\236\204<m\020\031\275K\266\252=\225-\367=\370\362\263\274\222w\300<\311\300\025=\242\262\256<\260\340J\275\300\225\250=\235\374i\274\005\014F=\2127,=\356\'&\275S\220y=\360\212\376;\217\203\033\275Li\225\275\211\032\305<\023\271\r=\203\236\t;\244\224N>\302\021\022>N\216t;\2355\310\274\333\365\234>\361e\251<~\314\350= kE>tR\002\275FTf\274\333\272\033=\203\300\037=\004\233C\275\264\254\316\273H\274\243\2756[\004\274i\003\013\274\"?\211<\355y\274\274$\301\312\274:\332\261<\201<\273\274@-.\275_w\237\274vkK\275\326\374[\275j\301\332\274\337\240n\275\206SF=\310\223\322\275\321$}=2\177E9\311P\264\274\345?\007\275\322\203\305\274[V\231\275\310\031\001\274\3231\235<\006\230#\275K\252\262;ff\305=\020[,\274ss\201\275\252\331\030\275\201\027\220<\030E\005\275\326|\371=\250F\344\274\214W\215=k\361\026\275&u\264\274\217\201\312\272\256\223\223\275\242\177l=ju\027\275\364\306\360\275\204\275\001\275\340\275(>\240\275\017\275\313Dw>\016\021\200\274\200\205\327\273\270U1\275\307&\207\273\223\317\006=c\nT;^a\233=2k\'\275\367^\214=y\270\245<\352\373\213\274nY\216<X\351\377\274\262F\024\275RO\370;\200\3265=v\240\033=w\211\027\275L\352\356<\303\034 <,Q\213<)C\200\274s\201P\275\374\253\374\2746\034\032\275\265\327\232\275\370%\315=C\236\220>\236\253\035\274D\325\023\275\236\343;\275\n\017\326\275.\264\305\274H\331\203=q\000\327\274\340\243_\274\237\2134\274\243\256H=[\341\250\274\276\021\035\275]!z=\340\321\311\274v4\277;\343\347\n\276\0042\231;X\340\226>\030\2073\274\315\235\202<\360[\007\274cA\371=\251\364\350=;~\240=\370\271F\275\232\261\322\273\300\245\271\2719\r\024<\334\263\034\275\304\207\236\274\365\027\244\274;a\372\274\356\035\227\275\215~\034=\340\334\017\275\330\271s;\\B\326\273\207a\335=\207\362\030\273(f\000\2755\023\256;\205T \275\307?\207\274wO\277<\250?\312;\220\371\'\275{W\372<\370\240Q\275\227 \026\2743\003\301\275\221P.=\331\344\023>/\216\275=A\367\323\274\364c\377<^\2132=\t\372\230\275r\257\010=T\327s<L\274o\275\272\3533\275\013\020\257=\302N\345;\213\303\201<\221\256\371<\n;&\274\204\230\262\275\205\240i\275\330\016\277;^\353\335;\260\354:\2759@\247\274\243\325?\274n\223\374<V\377\'>\237c\220\275\327\310e=\206rs<\327\255\336\274\362\342\254<\351\222\014\275J\343)=Z\034p>n\345^<\373g\263=\353\201\237\275B\000\025=\245\302\350\274\032\313;\2757\363\327;\323&\251\275\344E\252<\305\313\253\274\337\247\025<\357\265Q\274`|c<\347\003\305=\221aP9+\3362\275\204|\260\275\266P\335;F\177+\275\335\026\023=\251\2348\275\277\031$\275\216_s\275\201\000\377\272\033\013D<\325B\035\273\010\2405>s\205\203\275\361~\t>\004\254\272=OK\322<\301\371R\272%B\213\275\272\314F\273\270\356\262<5\324d>\2209J\273\311\311\003=\271;i=\264\035\357\274\0267\267<+\253\203\275\340\003\244\275RXK\275\263\016\243\275\373\3547\275\234\344@=\322\020o=\027q\373\274\353\352\227\274\341\273\237\275%\251\005=\022\0066\274\212\000=\275\311\264\206\275\245t\267\273\030\355M<\317\316W\275)W\370\274\210\265\023;f\004\211<$\250\207\274I\342\366\273\177\\-\275K8\034<\250\274^\275\240\366d\275.\027B=\221c\247;\224\373\356\275z\355f>L\213\005\275]\210\031\275O\352\254\275:\201\007\275\350\367B\275nJ\342>\312\245\371\272\232\201h=\375\355\005\274-\005\306\274^i\265\272\021q\374;\301\t\216=\200hk:\2161\226<,\207.\275lt\261\274\365\251\222<>\201\014\275\374\247\n=\211\344\355\274\031\212\220\275vc\n\275\344_+=R\177q\275X\202\020=\336\237R=\326z\256\275\261D[\275\201\352\236: \263d\275\007\004\031\274\204\212\232<\231Q\026\274\222>\200\2757\340)\274\343{\334\2741<G\273\235P\331<\371]!\275\220\357\335=\352\262\275\275&\010\013:R\263D=Q[\225\274+\271\205=\210\310\211\273I\203\253=\370RE\275;\002$>\251\223\306\273\t\177A;\277\220\301\275?\253\032=<\245i\274\336t\232;MhK=\360\373\314\272\321\347\036>\374\262V<\020\231\315\274\303+\253<$\311\301\274y\236D=&\255\376\274\265`\305\274\266\364\262\275T+F\275\376\345\350<0\335\001\275\231Q\004=\352\206\244<\334\343\256=Z\336\331;\244ir=7\341\253\274\345\352\354\274\211\246\330\274\245\203\242\274\334\234\324\275\216d\357;e\013\223\275\372\356\302:\302\004\331<\000\211W=\212\016\213\274d\017^\275q\221\354\2746\234\005\275\032%\202=\201\205\330\274\231\2124\275\352\211\037>=\332\210\275\334l\224;\235\202\312\273\"\246\361\273=\370\201<\324s\222<\334\275_<\332\276\233\275\277\377\215<\221`8;7\316\344=\253\035\360\273\245S\034\275\363.{\275?\361x=\300\035\365\274\243\270\016\274\022\3143\275\257]\241\274\304j\235=.\022U\275\213\346\301=\250\337q\2752\371,\274\344\364\320\2748m\357\274Lv\270\274\205\254\017\272\005\356\270\274\242\352\224\274]\000\300=\374\252{<,\334(\274\204\277\237\275\313\335s\275\2712?\274D\314(<U:(\274\224Q4\275\323\210\035=m:\300;#\314\016\274\034\307\317\274\247b\221=~2\002\274\215\210\324\273R\335\344=U*|;x\324 \275\241\204\034\275\216\213$=A\323)\275-\365\002\275\030\032;\275\327\347\202\271z3\002\275S\022#\275~t\007\274H\247t=\311\357\333<\333\002\n=\215\"\023\275\334\310\t\274\276\246\242\275(+\330\274RD\301\274\021\350+=\003\246K=\214d6\274qQ2<\303\326\304\275\356&g\274\032D\002=\311\241\264<1\250K\275\307\016\032\275\204R\323\274:76<t:\023<~\314\r=\017\300\332<\301i\205\275\243O\243=\363~-;\252=\343\2746\234c=1\201\244<\246I\231\2743\372\250\275G\241c\275y\206z=\225\220\210\275\252\000i\275\337B\2628\212!x\275b\271<\275`sa\274\234\220\214\275\376\321\007=\211\252<\275\333\030\346=\177{\320\274}\020\341;\262b\314\275\347{\027\275\t\035D<\001[4\275\350\263\261<V#\211\274\336\340\023\275\252)#=\245\240\023\275\246\231 \273\006\347\220\274\276h\325<\333\3209\275\3518\241<\302\371*\275Z_\264<\035\010\226\275r?\302=Qw\345\2745\376O:\323\035\246\2756\267\035=NW:=\231.\023\275\334\272O\275\211\260\2139\007>\t>?W\031\275\215\305\036=\206)U\275\367\0049\275\325#\335=\273~\336\275%\226d=Hw\206\274r\335i\275o%\316<\354sd=\361\352\'\275?;5\275\210\002\314\274\233)A<r_l\274PUw;R\\2\275\0064\375\274{\025\204\275v\355\276\274\245O\256\275EX\023=\314\237N=\223#\035=\351\272P\275\210#I\274/t\212<qC\r>\333*\244<\225PN<>\020s<\211J\371\274Y\351\027\273aT\211\273\"\307\021>\233\307\261;\304rT=\246n\267;FO^\274\032\253\267=\201\307P\275\242\270.=\003N\233\274\'\360\024\275N\031x:Y\376\021<\317\357E=\225\304W\275.\213T\274Q0\316\275\363W\217=\r\212\217\275)\376\222=r\303)\275\364.\203<\233?\250\275\207lc<C\027\007\275\312\337\223;\014\364\020\275\247\256\244\273\221\365\206=\225o\024=\027\031\261=\000\216\013\275\332\255\265\275A\224m\274\253\355k\275]\333\204<\3042\263=\257W\251=\274\305@<\000]\216=\2657\223=\254\214k\274\226\313\002\276\010\335\254<\264P\210<\361Y\325\274N\236\021=\262\023\312\274\212\362M\275\344j\253\273\377Hc\275\232\002\201\274\234\205\210<r\337\315=\251\251\310<\3364\247=\277\247\273<j\352o\275\226;\360\274\376\366\207\273\330]j\274\366\214\017<\312\345Z>\tq\313\274\276\377\023\274\r-\264\275\035\236(\275\270\306\213\275\203\270\330>\201\026\034\276J\237\325\274%&\003\275\202\223\316:\257\037F;g\037}\275\316\010\254\275\255\244\320\274H\374\002\275\265o\t<|\375\214\275\r\021\032\275}\343\021\275\335\0272\275\376\"\341<)\200Y=\322\315\377\274o\356Z\275^\024\030\275\034\231\033\275g\334\225=\347\346\206=\030G\250;\231\245\241<I\336\204=\333\352\245\275v\346[<k\354\302\275T\270\233>R\024_\272\327\365\227<\300\r\\\275\351\325\311\274\317\2054\275I\014\230>/\263a\275g*0=w\355;\274\364t\377=B\237f\275l{\214;\307W3\274\004\0306<U{\226\274\334\177\207\274\234d\255=T9J\274\036\004\033\274+\276\211\274\037\255\303\275\007J\031=\363\227\231<\234\031g=M\2617<\027\177\322\273\006\263.\275\354\214L\274\332\370`\275\0205\215\274\035\335\235>E3N=\374m\275<\364~\216=m\t\321;\032\203\247<?\321\323\274\"f\241\273d\207\033=\216-\316=\252\342\356;\347|f>ZOx\274\314\234\240\274\320T\371\274}\270\030\274\251H\204\275\346\275I=\334\2344=\223\"\201<\245\027\261\274\026z\326\274\313\241e=\241\nW=\261e\262\274\023\262e=\334\241\272\274{\230\377\272\252PP=4\276D>.\252j\273|\000m<d\206\256<g\320\005\275\003I#=:\362\235\275\307\014\014\275\025\203\002\275Tv\224<\302\267\351\274`\013$\275\203B\213=hM\303\274$\230#=s8\002\275\301q\203\275\331F\250>sE\231\274\022\266\343=\202B\373\274\376\023\257<W\234\310>\236\304\340\273\353E\204\275\331\217C=\212\201\331;\310\315k\275\214\250Y\275\337\237\035<\3435\263<\200\020\001\275T\\A\275\303q\224<\034Nm=bh\026\275?_b\275(\305\007\275\335\023+\275I\315\311<+E\250<\260zU\275p\\\314\272\004z\254\275_\350i\274/0\331<5\236\313\2744\250\017\275\354y\r\275zN\224>#\227\307<w\347\007\275OB\222<\222\363\247\274\245U\031\274,\204F\275\235\227\370\274\331i\002<\261Gt\274>m\334\274]\260S\274\352\233x\274\336T-=!\031\332\273\275\347\270=\013\364v;s\324M<w\214<=\201L#\275N\013O\274\017*y>\334\025\227\274\030o\003\275\313B\314;\201\201\023\275%)\250\272\325\035\277\27425(=1\242_\274\204>\347\274\327\177\224\275\000t\275<\025\026\206<w\221&\273N\253o\275B(\216\275\330\031X\275\roF\274FT%<x\023\246\2732V\334=\263\200z=\362\256\310\274$a\320\274\032\312\"=O\311\243>\374\241\032\271\346\370\022\274YI=\272Bp\217<h\211\206<TY\021\276\376\200\263\274\313\371b\275KV\205=\360\357\241\274\003`\364=\246\204\321<\334R~>4\272\001\274\014Bf=W\t\265\274=\327\210\275\325\332\005=3\"\253=SQ\036=\361QP\275\334\004R;\247U):+\032\356<_\245\037<\327\323N\274\022\2150\275\243\\\240\273*\274\321\274\330\2470\275\351\207:=\331\030A\275\243IB=\031w\305\2754\223\213\273\264\234\026\275j\007\037\275B\267@=\226\310}=!\237\366\275\314w\013\275\246\214\260<]\205k\275$eA=<\224\007\275[g\372=\207L\245\274\246Q\037\275d\366\000>Q\370\204\273\277\016\336;$\277\377:e\014\025=\215\352J\275\361R\033\275,\032\204\275B\373\221=\006\027J\275VY\200\274\313u\265\275r\372\306\274\272X\021<\254\022\217\275\370\005b>;\333\247<v(\021\275\217C\345<\306j\274;\272x6=,{\337<\253Y\2428.\326\233=\030\204j\275\2328,\275\n\271\202\274\227\246\306\274\244#\336;\223\325o\275\033\267\257=Y\306\013\275\305,&\275\201\002\364;9gI\275r\r\207=>.\032=?4\261\274:\215\026=\314`\023\274(7\234=\217%I=\263G\0208&\031u<\364\217u\274\316\324\206\275\331\">=\002:B\274\247eL\272oJ2\275\232\221\231=vr\023\275\240\226*\274\220\316\023=\323y^=\333\316\'\273e2\214\275_\370\372\274I0y<VK\245\274\002\270i\274\234Y-\275\037\324@=\003\2626=\366\310%=\260#r\275\324\227\341\273Y\333\034\275\0257m<\277T\223\275T\020 =\357\320\201<\324\205\234\274\365\275\306<\002\354\205=&b\031=\237\363\\\274\257\270g>B\374\010=>y6=e\036\235=l\'-<\265\330s\275\371\303\340:\231\215\221\2749T\035;\'F\237=\251\033/\274n\356c=L\n\014=\034\316Y;rF\300<+3\037=[pi\273\221\252\305\274Tp\224\275l\333\223\273\261\302\235>\327\327\243=\r\3651=\356\177\200\274~\355\205\275\352\271x\275\016<m\275\031\223\352<\001\013;=A\025\002\275\005\252::\326c:<\377\022\204=eR\207\275Q\236\006\273Z?\364\274\266\354\366<3)\\\275r\014\010=\'\034\375<\250\3326\275\014\376\352=w;~=?\232\014>l\235\000=\021U\n\276\3041\211\273\323=\254\274\375+5\275\314\014\036\2744\347\360<\'\"A\275\207_\222\274\025\234\036\275\3201l\275\312E\250\275\005c\362\274 1->z \272\273P\227\360\275\177Bb=\221\341\256=J_\372\272\224\307\223\274\334\346x\275\241\217\334<\251v\200<\273\033A=Y\327*=\266pT\274\273\210c;%\216^\275n\323\224\275\0338\027>\020d\243\274\210s\020\275\t\233M\274\347O\240\275\240\261\212\275c\024/>\355\340<\275{,O\275\265U\342;dF$\275\004\364\271\275\305\300\265\274,\373\341\274\027\323R=\260R9\273u\272\021\274\0328*\275\300\3116\275\345j0\274\017\330u\275\235,\371\274\241\3339<\253Q\271=\275\305\235=\204\260\035\275\314I\227<\301&\227\275\343Q\276=\376D(\275)\201\231<\233\027\332<r\344~<U\212&\275Jr\340\274\244\2235=s\301\314\274IF\213;\262\336R\275\005\\\344\274\356\353\332\275\213\314\210=\324\267\021\275f\224,\274~\252\177\274a\227\005=\257\022\013\275O\361\316<\256\002\205\275D\236\213=\354\\\005:\201\311\210<\263\237g<\354\301\000\275\004\266\270\275\030\201H\275\035\371[=\367\305*\275S\261\003\275\013%\266<\247\317\310\275\375\037\311<\251\337\"\274I\037\255\274] \224\275\354D\005\275gj\363\274w\017\337=X\023*=\203\301\370<\336y\376\274\311\315\033\275\276\240F\274\016\010\254=]\0061>\302\304\231<\266\037i=\236\"\364\274`\244\254\274\365\241\377\274\001\231\035\275:5\206=\335\002\032\275\365\332\264\275?\200\222=\346)\006\275rm\307\275Gl\234<(y6\273Y\303\365\272\362(\341:%\254\030=\2461B=\t\240e\275B\036\021\274Zk)\275\031\277b\274\001[\205=\310\314\362>\221\345\272\274\320N\356\275\374\364\373\274\0102\366\274\031\206F\275o\031)=G\364\237;,\262\201\275\351\222\234<\334i\022\275\234\014\204\274;_\001\275\014\272i\275\365. 9h\332\003\275\036}\020=Wu\006=9#\227\274\320\243\034\275\n\341\235=\026z\250\275\371\337\327;\307V\235=\266\252=<\365\035\224=6\003\223\275\312p\000\275\'Fj==\313\376<\025\216J<a9\310=\210r\210=\355`o\275\221=\016<}sy\275\215\274\262<G(\257\272\022\356\306<\244\237\205\275\333r=\275\251\347\030\275\353\353\221<\0237\013\275%\276\326\274D\033e\273b\261V\275\355\256\'\273\217\"\177\275]6\227\274\017\001\222=\374\326\230; \375\376;\026\203.=dn\254\275\254\034\306=%\013\255\275\001g=\275{\217B\275@\\\212<N^+=W\363\314\275 \263r\2745B\336\274\362\202M\275\330w%\275\327\375\247<\001g\225\275#e\266=\020\270s>U\243\201\275\257\336>\275\240\247\000\275\3076\215\274l\315W=\236~\"=\252\324a=Lp\331={\377\021\275\030\2347\275\231\204\341\275-\206\333\274\232\237\250\273\346Cg:\325\225\002<,\353\230=@\236\367\273r\276b=\326\314\251<p1,=n\240\'\275\265\254\303\275\371\200\375\274\231f\003\275\244O\202=\006}\024\275\003\201\226\274\266\305\277\274\237\226L<\237\262\240<\021\257\215\275?p\021<\322\220+\275t\373\021\275W\2772=f\324\270>\350Sc\275\026\367\307\274L_\324\273\246\322\266\275\033\360\371\2729dM\275\005\177\276:L\204==\235\266\204;\360\233\333\272\375y\212;\266s\360<\220\370\021\274_?\351<\246S\272\273|\345\255=\327\252L\273\343\000\333\274\307\n\373\274N\334j\275Lo\221\274\222\177F>\356cK\274n{\227\275(\n\243\274\010\355\201>\021\256\251;\001U\326\274\247~\323\274EaF\275M\362)\275\006g4=\206\026\234=\026\252\303<$\376T\275\021K\004>L\265\222\275\265\361\360=:)\314<,\302\233;y-\304=\344\2752\274\233O6\275\014\004\247\274\241\034^\275\006\003\313<\210]\3659n\031@\275U\372\004=\3751\256\275\007\0014\275\206\305\222\274o\327K\275hN\010=\202\221\253=\037\370\262=[s\014\275\027qU\272\r\336+\275\302R#<;\n\334\274\030\311\323<<\273#\275\345\375\264\275\351)\213\275c~\017<\032cH\274=^\305<\225\374\322\274\337/D\275_\3264\274\225\271\r\273\035\2446\275r\033\213<!/|=\223\324\232<\230U\242\274\324\363s<U\027.\273j\210u\273`\377\313;Q1\343\273B\021\014=\316\274L\274\016Q\306=?\327\001\2755\355\357<\371\351\237\275c\376\266\275F\203\276\275\244\242G>c\234c\275x\335\236<Wy\335=M\013b\273i\372\376<]9\247<\314\325\330=\005\210\276=j2\357=\025X\215=\"\'\207<\233\0067;\261\346A=\213\025\317=\233\030\261\274\225\n\031\275\276V\347\274\221\223\272\275\204Z\020\276oo\253;h\002\322\274\331\214\262\273\215\022\364\273\221Dz=\352\261\213\274C\327\256\273\310\210\247=W\367(\275\010\274}=\207a\352<\253<#<\007H\363=t/\244\274\351J\205=\271x\227=\014\260\021\275U_\030=U\255\327=\332\027\271\274|WN=\342,\331\275l%\234;%@\261\274N\031\265\274\375~\222>\372\251\227>G\020\270;\344\214\323\275\0257\273=9|\270;zZu\273p\312\273\274\350\351M\275\222\n;=.yB=\272\034|;9v\331\274\010a\r\273r\305\207\275JZ@\275t\244\177\274F\353I\274ENr=\014\362\223\275Q\227\007\275V\231\260<!\254\201=\025\353\213>9\306\246=\263\330\323\273c\260?\274:\205z\274\365\3057\273^2\014>|P8\274\013v\247=\335\021\360=\2367\206=\230\264\311=\213\341\344\274\214\331;=\202t\244=v\231\244=\256i\220=\354|Z\275P\216\035=\265A+=o\271Z=\033Q\256\275\362@?=\341\222E<=\003d\275\001\\\207\275\005v\235=AX^\272\2212\"\274@\254\353\273:\364\036=\354\243U\275\244c\242\275\013\036r\275\034\014\203=W\345\312=\032E\333\274\303\353\202\275\3501\361<\333\021o=\274\034\206\275\310\266\214=Q\324\'<\345\rk=\265\347\213\275=I\323<c\0131\275\241\351\335<^6\023>;R\014=\214X\252\275\347\354\341\274r\3507\275\246\211\213<\230\374\222\275s\306&\274\244\257\000>\311\031\317\275\325>\266\274\337>\000=[\254\373<]\325\311\275Q\252\336\274\005\237\275\275\2153\334<\2421\321<O\326;=R\313\024= C\210\274\324n\317=\013\331\320:*\316\020\275y\353u=\243\367\034\275&\000\270\274\301\326\356\274\307Z\271\274\0259M\274\177\247(=\271\223Y=$\226\376\275\177\242:<\217\306\253\275\346|\007=\366\201z=\215\353\n\275\371\250\021<\360s~\274J\306\376\273\005\251\211\274\3621\242\274\335.%\274\005\005\001=\202F\014=cR\020=\016\211\216=\3268Z\274{\275o<\3409\225<\3113O\275\241\263\263;\232\321\237=\325>\014>\272`\214\275\210\254\315\274kp\354\274\324*\211=U\206\274<8\001\361<i\320m\275-\023\024\275\340\225Q\275\n\330\005\276\242\375\254\274\207\271\201\274;\252\346<S\256v=\014|Q\274\272\343\307\275\212\272$\275X\317\204=\231S\324=\222H\331\2744>c<\370R\022=\013\t\210\275TT\005\275\246V\217=\327\331\375<\345\361\360\274&\305\331<\"\\\004=\254\371\031>\326\326I\272\251|\340\275\263G\326\275\001\261m;\225\341\t<\205\332\275\274^\305\331=\277\250\'\274m\354\236\275y\250\234\275\250o\202=\255W\334\275\316m\346\273E-\246\274\361\203\"\275\002\212\202\2742a\331=3u\322\274j\004}\275\375\343\r\275\240?\334=`\340\233;@\334O\275\206\251r>\240\237\253\275..\221=\360\311i\275\201\342X\275\350l\254\275i\363\307=k1\244\274pl\304<f*\306<n\255\333<\241d&\275EMw;\255T\306\274\353\203\342\274\227O.=AM\026\275\375\322\236=\252\350\r\275q\'b=F>\233\274\347=\222\275V\327\326<{Q\227\274nU\331\273\272vG=\032\227\252\273G\230\244;C\327\343\272\253v\017=Jr2\275y\302\007\275\206\307\232:f\242W\275\312\344\n\275\222\210\322\274\034\237\216\275\316\343\030\275\354\310\313=&\317d\274\224\364\372;qAD\274R\322\303\274\322J\035\275\267\312C<\305\036\201\275\360{\362=\347\307\210<\232\017\222\274]\225v;\211\327\355;\263\220\274\273p\265S\275N_H=1\270\374=\226\203\243\273[\350\207\275\001\216\314\274\350|\271\275\036v\252=%E\\=m\230V\274\362\377\026\274\\\032\331\274\0076\271\275!e\t=\035\"\253\2723\360\362=\274\027$\275\263,\242=$\005\257<i\256\336\274\352\350\240\274M%\234\275H~\335\274U(_\274*\253\365\274\215\374\207\275\335gK=\244q?=\304\010;\275\301>\345\274/\214\007\275M\254\234\275\315\220H:\363|\312\275u\200\004\275H\344\372<\261o[\274\264V\366\274d\236\036<\357\307\006=\222\344Q=`\234\255<M\302\232\274\301\267\212<S\327\031\275<!\t=\204I\007\275\010L\324\273\355\371#=\210\035\235\274=\230\n\274\242\303H>\371\251\275=R\2349\275X\2647\275\361[\347\275o\277\345\274\037\2176=\255\201N\275\004BH=0\362X\275|\020u=\242L\177:!m\204\274\371\312f\275<\244>\275D\210\244=i\240\235\275\023\375e=E\244\325\275\322\217d;FE\323;\220s\000<\311\340F\275\244F\355<\033\001\315=>\265\020\275\373\246\377\274\331\rO>\224@\257=Gj4\275\221\376\341\274.\372]=\323 \200\275\266\257t\275\257.\263\275\r&\226\274(n\224\274\261\267\235;/\014\217=U\243|;[L\240=\004\266\303=\271\353\330<Q\330^\274`\322F;\363W$<\352\203\203\273\312\257\250=F\302Q\274\242\275\310;^\250I\275\215\362D=EH>>\366r\303=\031:\365\271.\266\274=\001\033r=q\004\260\275}\204\205\275\243\013\204<\212S\327;E\247\331<\202\215\277\275\332\177\266<\r`\214<\375g\221<\234\343==\216\234\005\2759\361\230=\307l\223\2730\232\242\275\000\343\346<\372\244S\275\t\334?<\324\010T\275\206\344\000=4Sh>^\313\214=]D\303\274e+\'\275\n\225\374\274\277\300\204<\026\220\313<\006\201\027=M\325\034;\306\271\212\274.l~>7\215)>\213O\322\274#\337o=\315\267\240\275\315\300\363<&4 =\227\237R=\351\373\334\275D\242\355\274\030\217\275\274q!3=\n\000\360=\013m\206=}\243\200=\014UF\275]jt=\343N\223;Dl5\275F[\271<h-b=e-\374=\325\242q\275\234\273^\275#\325\037\275\031\272\021\275u\022\246\275!P\347\274\214d\004\275\t\203\214\275\267\033\264=\277G\027\275\372G\202=^\333\264<\250\376\235>\327\331\323\274\372\355\341=g\347\013>\277\021\023>$\365k\275\273\006\264\274w\352\226\275\260\177\220<%N\271<w+=<\223\014\037<\256\374\275<{\005\325<D\205\275\274\242\241\341\274\005\214\264<4\340\005=\323\340\004<\214\273-=\240\255\014\27400>=\001F\361<c\331\"=H\001\257<c\233r=\340El\275\255hA\275\353\206\036\275\324\340L<_k\002\274\270\370\246;\220%l=c\245\273<\250\224=\275\324<\312;R\307\261<\200\002J\275&\217\375=\256\372\361\275\314\345\257\273\217\215\"\275\032}{\275\326!\317\275?D\300=R,\300\275\332f\024\275\314\010\233\275\366C\222\275\321sa=17\310\274@r\202\274-*\207\274\373o]\274\330\226\331\274\254\205\334<\362\364\303\274\222\222\256=[\224\214<\312\021\265<c\023\251\274\2144\351\274J\303\003=+\344\t=\221\372\353\273\344|4\275dy>=hC\207=\261Z\277\274T\210\216=\034\236\360\274\271\201\021<\367\335\352<\266\025\006\275\230\212\245\274\355e\344=#\007\024=wy\236\274\265\364\236\274J\034\244<\307o\325\272\303\2728\2749\211C\274\300r8;\356\272\305\273\033#2\275X\207i\2749\027\246\274\362\000\341\274\316\213\300<8.\017=\206N\241>\020\373S=9}d\274u\372\211\273\214`r\274PN\025\274\032d\020\274&\\\363;\241v\025\275k\241\323;|\347\004=sK2=\035\376y\275;\006\220;L-\\\274\315\373A=\271\236I\275\354y\256=H\3315<\226\266\021\275\332\267T>\267\006l<\262\256\004=r\276&\275\343\3459\275\302\331\352\274\272m\314\274\240\371\201\275\320.\304<\\I5\275<s\221\275\010\332\021\274]t\200<\n\246\367\274?\256\212\275\312s\":+\353\026\275\261\001?\275\001>\360\274\205\212G<\320\336y=E\377+:\016\177d\275\016\321N=\224\211\216\274\013A\321\274#Vu\273E\201\200=\374y\231\274\330H:>\321\274\251\274\016\327\232\274\322\216k\273\223\004\220\274O\372,\274\210L\212\273\307~\215=\202\361\230\275$B\343>Gf\332=\177QX\275\202\345\333<\244\203\223\274\234w1\275\033\232\335\274W\374\321\275\201\375c=\251\233\324\274\222n\213\274,\365\007;u\277\240=\234q\267=\037\032\371<)\035X=\243m\031\275Q\034\003=AF:\274k\203K\275\362j\273<\360\272}:U\365\017\275\022\303A\275\201\226W\274\244\031\231\275v@\315\274G\023\347<*\023\203\275\364n\320=\"\0328\274hh\263<\355\215\231\274\343g\261\274\330\310F\274\0249\013\272\246E8\275\247\252\247=7\236b\275\014\345\322=\252\021\201\275\\V\211\274vO\363\274\201\300\016\275\3641\251\274M\371i\275\363\266\022\274C\032,=Y\346\365<\253\375\374\273\024f\247<\232r\'\274d\365E\275\350\311Y=z\\\227\274\030\005\026\275#\326\006\274\361h\016<\3151\277\273\"\206\364:\377\246\013\275B\210\235=@p\025<\342\2001=\345\341y\274#vL<Jc\024\272j\247\033\275\022Z\030>\322\374,=\273@\201;\311=k\275\207\261\016\273\017\234}>\014\302\234<\210\0074\275\201~\016\275|t\372=\320\210R<\277ZE\274\t;\235\274n\207V;\'{\262\2742\242L<\266\344w>\3337\003=E\377f<\252\347\346\274|\001\203\2750P\374\274X\331\374\274M\333\036\275\246\260\230\274\326\376L\275\361\353\223\275\362\331\232\274;\310\200>\366,\345\274\214\363\037\275#:\027\275[\032\020>Y\272\030>\0343=\275\265\372J\274\322\200\325\274\033\257\023=js\003>\310y~=\303|H>2\344+=\334:x>`U\204\274^\026\014=\226\235[=}\277\002=\251e@\275\363\262\373\274\210\257x>\330x\267=\222\016\354\274\376\256g\274\000\232\204<\274\326\r=\316L\222\274\263\205v=\327x\362\274e~u\275H\326\271=\001\226$\276PI\002>\177\221\253<K\200\376<\014l\301<\014\355\036\275-=\247\275&\2714\275\203\274\005\273_\350\021\273jC/\275\234\236\332;\327\374\007\275\226\247/\275\357>\355;\032|\346:*\207j\274\222\227\221\275\351\336\267\275\362aR;\377\234F\274z\326\221\275\033\2563\275\004<\302\275j\205A\275q;4\275\007\203\013=\322X\352\274\311\"]\275\373>\217\273\232mZ\275\3616P\275gd\235\275A\255 \275\037\375\245\274i\377\202\275\334\231j:<\036\234<\272\016\345=\260k\036\275i\363\224\275\311Qw\274\360gA<yRX\275\360\312\033\275\305\315\222\273T5\315\273\3150\242\274FK\307\274\227T7=\353TX\27551;\275\227|y\275\274\235A\274YS\006\274\223Hf<\300\272\360\274\262\037u\275\037z2\274)L-\274\233\222==\3277j=,\360\202=\034\216\007\274\036|\364<l\272\207\275\267,1=\212r\n\275\tS\367:\332k\350<\361\214\032\275$\357\326\274\271\n\231<\374\362\252<\013\217\233\274\201\006\246\274\231\214\"<\375\226\356\274\230\216C=\272=\346\274\027t\021\275q\022#\275\333!i\2753O\205\273\261\034\370\274\216g\205<_\224\230\272\035\3173=\371\274\376\2746\267\260=\211\334\216\274/\312\210=\240\201\001\274\257\247\374\274*\354\376\274G\274\031>\214\270\360\272jRB=\303O\016\275T\313\254\2748L\"\274\370\2371>l4\024\273\355\030\214\275\376B\014\274\326T\233=\364r\317=h\250y=M\206\362\275\363$\275\275\365|\003<U0\377\274\376U,=\"o\225\274\263l\022\275\210\337\266\274f{\007>\017x\247\274W\374\024\275\237\221\003;u*[<5+\204\275\r\265H\2754\331\302\275.Lb\274\216\247\323\274\002H\256<\017.\210>65\254;0\033|\275\346\252L\273\245{7>E\003\334<e\007\212\273J3O=\303g|<hC\373<p\307\'\275b\0026:Mk\252>\314\006)<\312SH<\237\233\213\2754(\243\274\037\210\\\275\213#\375\272\356v\262\273\263\302Q\275\353J|\274\336u\226\274\270\225\312;\2272\023\275.%\023\275\266\t\303\274\316\303\303<\253\3075\273%oA\274aqy=\210\216\003\275\204\020\333<a\254n<\352v\375\274e\257\343<\\\230\244<@\206\371\274>\257\247:\215G\370\272\340\377\3209\022.9\275J\\\321\274$\352\252\274\255[U\272\247\231\221\274\377\242k\275\243\310[\275\266\"\035=>\274\210\275\217\332\264\274\232\220~>\035%\274=\324d\n\274\3560\213\274G\243a\273$\034K<\000\245D\275\006\360\203<\266\202\241=s4\252<\212\203\325\274\262\305T<?4\244=~\322\316\273\336\215Z\275\200p#\275\003)\356\274\345A\367\271V\200\343<\337q\271\275l\257Q:\247I\275\275\375m[\275\3623\214\275\265\233\000\274\311_\306\274Mi\312\275\351\365\361\274\304\002g\275\306Z\035\274\251\023\370\274\246\243\235\273\300\r[=\013O\260\275X\010i\2741\226\n\275\371\224\004\275\343\r\212\274\254\310D\275\324\004\344\274\030,\327\273a\203\022\275*\224\275=\357S/<2\315\216\275A\3256\275\376\363\314\274\252\356\240\274\221\256\305\274\'%\207\273\361\216\207>\017\364\034\275\035\034\231<i\317\r\276}z\346\274\202\227\357\274\342n2\275$\231\245\274\237\375\034\275\220\310\277<\367\207r\274\233\236F<\\-I\275k\"V\273\242\000C\275\232\312)\273\260$\320\274\270v=\266\246\336==\244\332\n>\014%4=\013\036w=\316\362\320\275r\251\024\274\024\375M\274\376 \372<\241O\337\275\202\351\255\275Wg\253\274\340\240\244\275\256\033\003\275\337I\022;[f\222=\031\337h\275[\357\021\275\025\320?\273\370\224\226\275\243\n\255\274\335\331I=\347\366\211\274\250\372\201\275\275\317\220\274\301c\177\275\301\005q=\275\226\224\272\221g\207\273\030\336\232=r\n\304\2742  =iX\254\274LL\215\273\274v\003\274\026\024i\275 BT<\205\371\275\275=\262x<\037\323\"\2750\027\231\275,\315@<7L\006>m\352M=!\376\333\274\233\374\255\274\271B\353\272\365t\366\274\371\364\243=\001\311\250\273\233\324\367\275%h`\275H\273A=\337\026\244\275s\020\\>\326-\'\275\352\306\"=y\005E\275ue]\274\336\3727=\031\367\353\274\304\004B\273?\220\030\275\341k\002\275>\r\r\275\360\367l\275\262\177J\274\346\306g\274Z\263\271\274\363\006\r=I\002\201=\370\226\344;q\214\250\275\267Su\274\326r\206=\201\220\033\274U\361\260\274\301X\376\2751H\017\275\366\021\225\272\201\003S\275\321t\244\274\206\253\032;,\213\000\275\033\317\300\274Z\251@\275\246\325l<e\235\327\272\322\024\220<\343\234\375\274V\212\316\274\036*\274;9H~\275\323\220\214>\203\n\224=\177A,\275?z\205\274P\370\233<\301\254\007\274\221\303\204\275+}\270<\205q>\274\346i_\275\215\003\327\274\222Bj\275\020\263\204\275\323\346\247\275\322`{<-\342\320\274\213\343G=\236v\224=#P\030>\221\177\211\275\246F\003\275b\246U=\256<\274\275\214\372T=6\227\267=\251\371\035\273\326\325\224<y\350\356\274\3741\331\274)\276-=\275\235\302<\023\016\030\273\335|-=e_W<#\010r<\223}h\2756\021\242\275\200\252\267\274\367\365I\275\360\211\266\274\336)\216\274\201W\313\273z\321\353=\267&[\275\004\226\350\274Al\201\273\213\355\274=]O\225\275\355\230\227\275\221\327\227\275\255?m\273\244J\240<\326\301\037\275\035\027\261=2z\256<\265e\244\272\\\275\352\274\272\223\360=\356\017\230\275\326\341\024\275\361d\263\274\316\220\257\2750\002\272=\206\203\034<\374]\211\275\251,\311<4\212\222=\n\354\204\275y\370Z\274%\335V\275\274\276\246;\314\324\003=c\253\366<\016\004\257=\377bZ\2757A\261\274\325\267R\274\201\022Q=\274HG<\242\300\001\275\314{\275=\014\326\304\275\235\261\200=\023\372W\275\246\214y\274J?z\275\361\267#=\027Ny;D\371~=\032\257J\275\004\207n\275\231\316I\275\225~\312\275-.\222\275v\236\230=6\001X\275\316\350\030<,\025\t\276\262E@\275<A;>\'\324\260\274\020\227\000\274\230*L\274s`<\275\374\r\247=\246\013\246<=\206F>Xx-\274\251\307\342;\014\213&<\274\t\177<?\232\346\274\331:/\275\013D\004;\374\336\267\275_}<<6\213\246=\274\274l\275l\210\t\274V\266\n<\005\2011>\251X\362<\'\005\311<\"8\013=\"N\371<@\364\216\273o\245b\275\267M\262\275\237\014?=\257\242\\=\275b\361\274{\377\r\275\225f\313\275q\2424\275\334\335\221<\376?\234\275N\215\027\275\3304\035\276[\200\312\275s\252\224=\022yA\2758\003\225\273\261\246\215\275%A\010>\334\373d\274~\037\254<\257\263\233<\327\222\337\275\365\315^\272\306O\353<\365\353\221\274\305D\367;\205R\273\2745\244\354\274\243\325?=\031\312+\273\251\324Q;\333I}\275\243\252\\\274\237C\013=*\241\010<]\325\032=1\301\225\275\222\250\r=[\370\327=\243\030x\275W\332D\275+\322\375\274\006\201\237\275c\325T\275b\350\252=\033\306$=\213\035)\275\312:\226\275\273\341\210\274\243\355\270;i\004\357\274\210\303O\275\251\300\020\275j\237n\273\260\264\322=p\t\303;`\264\006<\2523\031\275\270\227\273=\272:\242=Z\331p\275\217\034\037\274\270\204\000\275Q\256\225\275o\027z\273R\326\361<C\334y\273\341`\037\275\375y\210=\250\334\212\275C5\204=\324\017\236=&\023A\2752\265\300\274\300\270O\274\273,W\274\357\n\236\275l\035\001<-\320\005=-\277\006<\237}\t>\225\272\025=sb\257\274\270\365\216\274\2320D\275I)\300;\252\211\367\275\027\335-=*\326\003>Zx7>\326J\267\274\236\240\215\275\242\000\t\275\037~,<\310h\215\275\234y\306\274\370\371\211\275\331\005\236\275\311\236\273\274\236\t\307=g\313\371<\242\2039=\251\373J<\307u\272\2754\376\005>\372 \364\274\352M0\27597\315;\360\2727<\301\006\217\275#\364\373\273\330\203\307>\315v\335\273t8J=<\371\346\273\344\235\r=\177-\227<]v\304\273\031\317.\273(A\370=\300\355\315=\324\250y\275\010\020\242\274=&\341\274L\351\237=\010\371?\275\321\304\240<\232\205\244\274)\345\261\274\346\0139=\246U]=\302\227\223<\010\202M<W\020D\275\306\206\234<\361\334Z\275\010\t\031\273\375\356\350\275\273!\324\275\343m\211\274\276}a<\376\275\316;\204\014\201\274$\225\345<\334\221\246<\226\331o:\371\\\252<`\375\257<\014}\245=\005B~\272\355\221\213<\320\261\312\274\337kB\275\371tv:\315\365\240\275\226\253N\274h\205\241\275!\213\250=g\013\375;\241\362\200=\336#\017<\204OA\275|\3264\275a\337U\274\321\260\234\274\322\201C<h+q=\023Y>\275\324\206\250<\007.s\274\331\336k\275\233\360\272\275\267\360\200<r\201\272\273\247\254\232\274\243\250\205\274ZK\247\273\254u\332\274\301\333=<\016\346\013\275\247L\314\274=\210N\275\376\302R\275I\356W;Uz\276<j\\\027=W\334\314\274g\003\345:\307j\314\275)\200\022\275\207\000\225<\300\357\017\275X\312\373\275\'\016\025\275\324\236!\275V\325=\275\355\241\304\274\265^\301<\271n\202;\321A\035\274\260\3370\275\252P\246\274\202\rT>:\372\263=\356\013\375\274\177\337\223=.\002\240=p\252`\274\001\354]<[=\235<\343g\257\274\002\t\311\274\032z\273\275\260\356\242\275\231\006\332\274\220\261\216\275\024+\321\275\214\"\225<\240J\245\275YwO\275C \206\275\305\201\270<v\017f\273\311\017\035\273\363#f;\335\223\234\275\236h\241<w\313\233<&\"\214<;\272u<\372\304~=\220\264\003=0\306Y\275t\256`<\264\305{<\36739\275\331\221\255\275)8\304\275\264JL=\025\336\251\274\234a\311\274_\370\217\275\331\314\010?\372\034\232\274\371\t\234\273\241RE=X\351k\275\231\243W=\306\213\215<\360\260\033=\3678]\274-\000\254\275\002g1=f\323\221=\254\326o\275\n[m\275{\335\"\274\373\246T\273i\260\217=\321c\311\275\007\202\206\275/\324\345=\235\271\253\274\003\330}<\337o@\274\366\370\226\2756\255\372<\002\376L\275\023\021\n=\321h\273=$\036\272\273\025g\236=x\031\337=\324[\325\272\013i\264\275l\223\330\273y\364w\274\253\253\013=\311a\231<\334\006\232\274\rW\326\275\022{}=?\330\226<\22667=\301\265K\275\037-\236\275\241\203b;k\3475=\244\270\255\275$R>\275\331\371\005\275\364\327\233<{\367\233\274\252#\237=\007\235*>\361\r\357<\311!\235\275\033\240g\274\254&\264\273\307\327\033=\316\tx=\t\245\323\274<\373\215<\2557M=\344a\257\275x\345\223\275^I\245=h!\233<\262\310\312<0[c=0z\235<\251S+\275\000\202\212\274\213Q\233<\236\035N=^C\206\275@\240a=\035\302\214;\023\277\021\275\240m\032\275\244\200a\275\371!\225=\276*\342=G_3\275\026\345c\275\366-\206=E\347\"\275\303\374\030\275\375nS\274\250d\025=\205t\006\275\347\340\t\274~\007\r=\014=>\275n\007\345;\237\000I\272N\000\214\275^\313v\275\317\243G=O3\307:\241\027\347\274\257\262\027=\224\021c<0R\264\274L\303V\274_\274\230\274\336\031\213\275!\263q\275\242\265\021=g\313C\275R\257\377\274\326\306\271\274n\374\311=\326\303V=\361\306`\274&:t\274k\"\212=\t\211\332\275N\270\255\2748\334\274\274|)\201\274\214Qe>O\327\366<[\224P\275\317I\226\275\303\245*\273D\354\335\274t[\365\274S$\227\275S\236\265=:\356\202\275\216\263?\275\004\304\213\275~\311]>;\2376<\322\330\365=O&j\274\215\375\021\275\262=\323<\307:!\275\334\205\203\275\264\026\n\274Tr\201\273\375]o\275\2753\354\274\257\000 \275\345\227\361;\373\270\207=?\030u\273\235}\242\275\230\250\360\274\240w:\274\241\235c\274\032N\375:\3417\017=2\357E\274\230\205\033\274\210\341\273\274\252\253:=\246\273\007\275\236<\004<\327nr\275\302\211$\274ln\327\273(\020\"=\315\203)\275H\312\246>z\313\273<\334\035*;U\274\323<S8\002=4u.=\326\001\017\274C\213[\275\250\004i>\213\013\254=e7o=9p\242\275\"W8\274\315(+\275[\343\007=c;<;\350\'\363;\r\313\347;\023\307\032=\033<\334<\037|\203\275\254\321\204\275 \036\313\275D 7=Gf\014=C*Q<\270\037\202\275]\032\200=\206\302\307<\032\276\231<\007#\300\273N%\003\275YQ2\275q5l\275g\021\341\274\266\222^\275R\374\005<Q\212\314\274\247$\276\274Y8\255\275\307\016\274\273:\333\026\275\346\333\246<1\233\255\274\232\026\256;\306\'\277<#\313\260\275\374G\250<\301J8=\361\352\233<\374\256\030\275y\005\005>\217}\372<\262\336\303\274$[\376;|\026\257\274\323:\354;q\345\017\275_L\357\274\\\374\220<\020\345\215\275C\367\217=X\323u\274Z\265\013;\310\3531;\'\005*\274\276\235\263=HH\372\274a\224\006=<\303v\275\226\200\275\270\372\251!=\321\302\216=\341x&=\347\371\200\275\206H\302<h\323\260\275\367\202\247\273\323\354\346\275S9\030;\377\336\223=d^N\275\323\343O\275n\267\350<\177\032\300=\256\330#\275\364\303\260\275\317\325!=\304\2143\275\310=\001\275\373\377u=w\357\001=\203,c\275\000,m\275\265%Q\272\375\366\230\275\345\330\n\273a\354\t>\306!\356<\300\231k=.\211f>\336 D<\r\277R=\271z\032\2759\262\027\274\227q-\275e&\022>h\\\263\274\312\211\010\274zj\272\275LJ}<\377\217\221\275;\2134\275\240-\235\275\256\004\357\274\000\210-\275\007\334@\275\021\2144\275\013\035\245=\254r\245\275\237\320z>~\376\330<+\2144\275\372\204\013>r\206\332<\337\315C\274U`\2658E\r\005\275\005j\316\273}\033\342<q\200\316=\211\277\203\273|\337\020\275\022\234\243\274\376\243\342\275\331S\236\275\330\235\210\274p\343\353=\021\035\235\273\252r\017=}8\005\275r(\007\275\217\325\254\274\260\027\230\273 \2453\2726\246\320<\227p\210\274\302\315\315\275 0O;e\377i\275\177\234C\274\004\326 =\360\375\276\274\332\0375=\337\275\217=\234\257\213;T=\234\274\031\3253\275\320\314N\275*\247\013\273\302\'\234;\n\010\250\275\330h\335<\032\002\026=|b\n=n6F\275\264E\272:\202s\332\274\2134\224<\272VZ\275{&\"\276\243q&\275)\374.=)Dw\275j%\331\274\331D\037\272\200\022\035=d\224h<\320s\322\274\350\222\230\275$HR=\342\265\305\274\013\303W=\320\370\353=\204~\263\275\326\311w8\262\017\017\275\244Lw\274\353\341\026<\340\357\031\275{\217 \275\323@L=\035\372a\275\331\263T<\341\026\220=F\272v:{v\245=-\216\267\274l\0173<\305xh>\327u\350=\374\"\257=L_\221\273\355\000\344;M(V\275\327\021\251<Y\373\262=*\2027\275z\332{<\261\024)\274\022\302\r=~a\272;\241\237\310:\207v4;\003g\200=/\221_\274\025\002#\275\207\022N\274\025\207\250=\313\325W=\335\344\260<\207,\320<\242\3622\275\001\214\341\275Ix\017\275\324e\252\275\034#%\275\270\327Z<\364I\266\275{\016\244<C\334]\275\341\221\256\273\017\023\325<\271]\336\274S2\334\274\264\272\215;\341\030#;\255P\'=\340\307\035\276\3502+>(\244\342\274\277\304`<%k\'\273\255\274:\274\023\034,\273\223~\205<\"\366\350\274Ex<\275\234z\002\273\343t\253\274\232\231\377<u+\303\274\332)i\275\022\375D>}\273\237=)\230\217\274\t\024\035\274\267\201\370<\342i\251<\023O&\275+/\003\273(\333\357\274\240\203\3108/j0\274\355\005\212=\254\304\r\275\024\330\220\275o0\017\275Fb\244;\273T\377\273\275\2042\272\346\3422\275\220\207\373;\344I\024=\010%\214>\030\211z<\270Ck\274\257E\016\275\013j\221<\016\377\266\275rm\230;6\351\360;\376\246B=.\273t\274\t\204\230\2756Z\212=\370VF\272\000iU\275\312\325g>(\r\t\273\244\346\264:\344x4\275^E\352\274,_\303<\010\273\003<|zJ<JZ>\275\372w\220=\260\201\016=\325\344C\274\314QF\274\312\025r=\033\275\252\274#\007\365<\02566\275\302\314\005><S\021\275\362\311\242\274\026\321\235\275\213\340g\275Z\306\257\274\346f\234\273\177\337\366\274\030`\010\275_ZS>v\351#\275*\306O\272\211\250\371<0\321,\275\022aj;\346\226\016\2746\307\003\275\033\nE<\240$\016\275f\235\231\275\205,\036\275}7\225;\363R\337<\224(\320<\252\274\300<5V\021\275\345\215\202=\005\nF=oUt=8a\003\274\277!\344\275\355fR=\205\305\010\275\n[)=\252:\277\274\211\020\236=E\336\252\274$\264\240<\347\203C>i\206\240=_\302\275<hv\305=\307\024\244\275\375?\307\274\232|\354\274\346[U\274\022D\272<\0107\235=-\345x=\263\214\244\274\354\272\217<\211\247\005\275:&\t\275\210~Z<\264\250k\275\3014R\275?\026D=y\226o\274\231|\305<\346\236\361\274\304n\355\274G\274\327=Ih\331\274\257El\275\226\336t<\347H\327</bl=R[\307\274xuj\271 \301\177\274kY\003>\267\235\021\275\251\314H<X\362p\275\320\235\305\275g9\267\272\006^\035=_\315]\275D;K=}\007\236;\016\004\321=3\0218\275\366}\367\274\n\317\305\275n6,\273\216\243\210=xT\224\275\303\265B<i\312\r\275\336=\220\274\334\271\310\274>\017\003\275\3706f\274\266\231\300\275\321\013R<Y|\227=\334\251j=\316Kq\273\000\344\331\273\355?;\275\233\207]<\253\214\026\275\245f\312\275\354\177\217<O\272\363\274^\303\232\275:\351\341\274\347+\025<\216Fs=C\213\005>\003E\261\275\302$\315<\273\007@\275\266U\224\274\332\241\251;N\214\257\275\324\304\005=\262\307\032>\304\026z=?\321<\275\016\231\317\274\374f\206\271\227\0358\275\204u\367\275\002~\035=i1s\274\263\231\217\274j\362\177\2750!\212; r\273\275\030jD>\277\264\366\273\230y\203\275CQf=\237\305\330:?LS<\010n\r\275\255\014\225\272\215\200\305\274}8B\275V\3751\275\"\214\222\275r%P=}\203\310\270>|\232;L\227 \274\375\206\377<\377G\010\275\377\035\226\274\0230)\275\366\344#\274C>\000\275Z\332\217\275\312L\272\274Y\344\250\275\224\177\262\274\016\276<\275\273\326\035=\305\007U\275r^\261=v\"\250\272R\303X\275<\301\216\275E\307\002=\205\344\221\275x\314\217\273\264\005\020>\314\231\017\275\215)\235>\200W\371\274\312\352\221\275\327H\233;\272\311U\275)YT\275\252\227\013\275\226\"\002\275\327\035B\273\347\340\235<q5\366\273\303\033\355<,0\255\274\210\020\020>S\002\215=\331\307\205\274\250\350\177:#N\260\273(\265Q=U\200\276=$\253\207<Z\236\030=9\034[=\376\226^<\276\327\201\275\252\246>\275\247\007]\275\324\205F\273\360M+>|\353\341\272\313U\036\274)\202\n\273\247bG\273y\037\304=\236\350\360<,r\274=l\r\340\274\300T\363\274\214\275\336<\262U\301<\237\265\315<7r_\275\n\316\374=wh\204\274\262\301{\275\257\230\335\274\241,g\275X\026c\2753\006\022>y\327r>\223a\347;\275\342\370\274\2078\200\273\373K\333=YP\333\275L\226\340\274\r\340d\275F/\204\275\036\244A=\352\261\025\275\306L0\275\322\333L;\247M\231=\n\357b</<\031\275\260\3545\275\222\260\020\275k\035\236\275\255\036\340\274\274\033 ;\020N\372;\027\345\243\274\307\227\204;`\035\235<\275Ap<\235\303D\275\232&\263=\r[\032\275\246Oi=eLO=\004\246t=\007\247\013\275\256\313\032\275-R\247<\276+r<\302K\\\274\036\207\344<\017\321)\275r\220\320\273\255E\220\274\237#\\\275c\372\005=\230\217L\274\221MV\274Y\030\343\274p\352\215;\235(k>s\025\302\274\236\310\315\273\326\315\236\274Q\037^=@\257\277\2714\022\230=ed\217:nr\254=\370c\035\2757\257\351\273\336]\334\274?\245<=\232\017\263\274\320\373J<+pW=\333\351\372\274)\2058=V-;\273\221\221\217\275\262\246p=3\263\036\275r\377 >\231\004\255={\324\231\274\027{\017=\343\246\223=&\036\373\275\260P\374=\267]\335\274G\t\322\271d\205L\275\002\\%\274\261\346\223<\374?\350\274L$\375=e \217=Y\331\254\274gV\004\275\003\274\224\275\256\251\225\275\211\2642\275\005\021\362=\330\002\030\275\226\370\034\274\027\222`\275\257\236\220<Q\277\377<\370\007&\2758\304x<\016\333\005\276\221K\250\2756^c\275 \\\315<~\232\r\275\245W\374=a\336J=G\302\210=d\252\315<==X=!\r\267=\327\262:\272\361\312\026=n\306\321\275\002\263\237\275\232\211\010=~\365\000<\022Zq=]!\334\27374\370\273\270\200e\274\327@R=\022?\230\275h\205~>J9\237<\343\353%;}EB<\264\243\313=0\370S=\300\367\277;\353\204z=\021\271t>\030\263.\275vC)\275\222\302z<\255\266\362\274\230\354\002\275Xy\035\275\361\'\252;\210\333\021\276\003\374\020>\336.\245\275+\313_\275\202t\206=_\353\n<H\220\241<\036j\271<\316b4\275\370\324\274=\271\234\317\274l\337~\275\353$\345\274\326\215+\2731\271\026\275|\305\207<tg\214\275\020|\212\274\247\372\243\274t\320\210\274\250\366\">\327\214\277=\310\320\001\2752f\006\2752\342\226\275T3Y\275\313\315o=T\252\035\274\263\212y\274\3172)=\336\262\270\274\202*2\275\333jb\274kL\327\273]\r\275<x\356\347<\372\277\003\275\226\001\211\2750\237!\275\253:{\275\3468\211=r\212\351<%\372\230\274\tX\350=B\221[\2755\245Y\275?\212\226\275\t\023\013\2751q\240;\n\313\210<\0161g=\234@\214>\326\363\364=\366C\240\274{\353\262\274\321\206y\275\320\235)=dy@\275g\200 \275X2X=\265\224B\274\220V\332\273n\302\230=\221x\267\274I\300\236\275\251K8=tS\210\275ENr\2746p\026=\206I\225\274\246J\250;\226\354\016>\026\025\215\275K\023N\275[\005&<?\345b\275\316\314U<,\0339\275c\353\350\274\024\205\205\274r\212L=\261\007\366<YLG;\010N\211<\340\020X>N\211\250\275\242\237\236\274c\252\024\275\324Y\371<}pN\273\033\352\365=\262\332\223=\267\273\267<\306\335\272<\307>X\275\243\341\233\274\215\332?=\220\324g\275\304\016)=\006\327/\275\300<r>\352\376F=^5\351<\0300\321<\333\224\342<M\203J\275\017\207\304\274$\ry=\301\302\374=F\233\364<+O\025=\232}\266<\334\327\207\275\346W5\274y\273w\274\317\207\'=\273L\237\2759\337\000\276!\rD\275\004\241\210\275\000\301\007\275\026\016\346=\232\266P\275N\267\224;N\377?\275\300\215\274\273\025\211\246\274\036?\007\275\213\371\276<\303\255\377=\304B\031=h:}=\330\035\206<\244\310\254\274\236\020\361<\006{\310<\267\370\322=rA\202<\217ZE=-\253\254\275\351\366Z\274\357\000\031\275hO\003=\224\356\000\275\354\237l\275\221\226:\275\264G?<\375oQ=mJQ<\354\237\242=\233-\302>\221\236\210\274k\352\317\274\331S\231>G\361\267\274\242B:=\235\205\013\275\333\274o=_>\017=\373\272\'\275Z\245\260;\231\332^<\254\2027\274%\241\246\275\211\346\233\274O^\361\274m\362\304<\335\320|\275M7\322<;\017\244\275\r\325\316\275\312\207$;sD\362\275N\320\221\274\224\373\210=\321\226\000>\264(\013=u\212U\275\007.@<\357^\212<\241\306\251\275\244X\207\2758\270\356<\007\200\246\275\037\177\212\275\017\214k\275\026`><\000\304\217\274{\250\242\273\'%\205<X+,\275x\'\034\2749\252N\2757l\232\274\274\341\272\275;6\313\273\3525\206\274t\231\250\275\3231\010=uY(:\"\264;=\245P\232\274\236\325\016\275\233\232\366\274Vm\332\274N[M\274\240\220\200\275W~=:o\351\252=\341)V\273\267X\032\275N\220\024\274&{\224=\373\370\356\274\240\271\324\274c\022\204<\223Y\034\275Xm.\275\221\212\244\274\202>\203=\367e\310\275a.\274\274\336\004K\274\247\235\t\275\337\276\261=\242I\014\274vi\004>\351\007|\273\334O\206\274\250s\262:\267\016\272\275,f\203\274\252qX=\\\222\007\275}\220\306<G%\201\275<\317\003\276\210\213==Ao\326\274\244\373\251<\371\224\306<\250:\242=w\0107\275\227~\320<\376j\274\272\322V\353<\270^A\275\263O\037<\326\247\215\274DF\211<\020\203\273\274\257\375\'=\362\217\231\275p%d<\341\235<=S\374\352\272\017\3501\275\266\305\r\275\231\017R\275b)\330\2747\346d\275\3614\201\275\2257*\275H\263\216=\231\n\205\274\214$\333\274\3367;\275.\253f\275\343\271\364<\256x\336\274\rN\324;~\311\262=7\204\201=]\2564<B1}\274G\335P\275!>\230\275\266\2274\273\003\313\321\274?x\r=\233\000=\2740\272\314=\211\214\212<;P{\275\350,\237<\374\200J\273\252l\201\273\207\250\220\275\214\331\305\273\216\216]=ld\374\273\330X!\275\257\235\037\275w\"\005>\246\307\371<\377\301\211\272\031;\277<4M\254\273c\010\246\274_P\235\275H\211\013\275\335\360\030\275\304\240\005\275F\260\312\275]\266(=kv\322;\310-1=3\334\267\274\001\013\227=\360\2009\275\325Q6<\"\314\242\275\321\245\330\274\313\267\013\275\023\026\t={\347:\275\031\211a\275a\353Q\275n\037\254=\267@?\275M\2230:\321\243;9\006\302;<\331\240\255=\'Q\233\275\353\002\234\275\230G\242=8@W=\261\3071\275\320\025\310\274\271P\205=F\365\335=\344c\003\2767\376~\274\177p>\274\2717<=\257\275\232\2730\352W\274\221k\333\274\332\267\274\273\020G#\275\333(/=b\352\357;\240\004\266\275\216-\324\273\233z=\275!\377\334\275\231\250\225<)\334B\274s\276\027=\207\217W=\022\337\215\274\310)7=\351\240%\275\3403\035\273\005\347\007\275\022\244\212\273DJ\177\274\003\274\340;\222\241\025\274\372$\020\274\026\205\\9\213R\207=\347\362\014\275!|G=\03575<d_\314;\021\005\t\2759DI\274\334+T\274j\214\010\275S9\256>gs\336\273\343\306\314<!R\324<\000Y\017\273\001j$\275\365\001\005\275\364\006\255\271\033\003\006<W\227\203\275\231S!=f\036\005<n\323]\272]Q\200=\205\014\035\275X\236A<G\201\370\274F)\017:\271\316\024\275<\206\031\275\024\232\317\274\306\326(;pW\026<\333\311d<)\tp<\\g\324=\342v\302\274\215\254\260\274\237\317\240\275\331\227\257\274]\225\325<\334\305t\2756\036B<\210\254\276;<\344\032\275\210\355\345\274\370\342\240\275\334\333A=R\245\364<\0144\262>&\336J\271}2\252\274\211%\322\274\373\316\225=i6\3049{@\357\274Ql\010\275\304\330;\275\354%\322\274&\\@9\032[\023<\224\365\307\274\252\236y;Yr\312\273\356\3435=0\235d\273s\263\260\274JO\2769:A\342<EN\"=\365\241\315<\243*E\273g/q\274\221\333\246\274\025\314 >W\262\254\274T\223\013<;\323\200\275Dw\270\274\021E\030\275\005\357}\272\317\310\003\275(\3447\275z\026i\275\t\255\010\274>\353t\274\302\302\210\275i\021T=\277\240Z<\246\355\027\275x&\354\274\032\344z\275i\326V=6d\364\274\025\316\010=\203]\200\274=\315\020\2758\r\276\274\206\215\r<\020e\"=\320\200\212\274y\345\306\273\243}\037\276E\007\210\272\306\374\002\275\025\0038\274\312M\013\275w\006+\275I\t\237=\315\347h=w\022\340;%[)\2757\217\341;\274\365\037\275\210\036\246\273\320\327V<[v\030\275\004\017m<\321\212\300\275\272TV\275\206\243z<\240\010\254\274\242J\245\274\227\203\033<\226L\034<\313sH<{w,\275pO\013=A5!\275\340\336\006\275k\355\221=\030\366\026<\363A\004<%3\235;\026\302E\275\234\267\\\274\023\332\034\273\256\303\t\275C\233\263\272\364\334\344<U\023\215<\205\204l\271os\265\274\301\352\177\274\302!*\275\302\037\220=\264\220\210\275U.\212\274\377\"\021\274\226N\352\274\330\270\327\273\212\277\250\274;W\253<t&\243\275=\247Z\275\030\177\235<\351\002u<,\302\356\274d\344;<\031\230\017=\302.\277\275+i\25797-]\274\014\033\345\274\272\332\254\274uL\027=Qe\214\274*\023\275\274\022\223\220\275\344\364\342\274\335lH=\364%\306\271ho\030\274K\374\236\274u\373\207\275\320\314G=\372=\333\275\265n\215=Yp\215=\273\010$\275\005)c=U@\254\275N\265\305\274\216y$=A\227\213\275\341\240\370;\321W\231\274\014\035\225\274\204\0309<\371s\231\275\317\334Q\275M;\356<\320\021\212<\n\006\306<\214I\013\273\r\365!=\017\nE\275(\273\004\275\257\307\255\275\261\016\312\2746\022\215\275\211\024\204;\\\001\245=\023\242\301<\347\213\366=S\353d\275\030\303V\275T\"p\274j\n-\275\003e<\275\025\322\242\274D\356\010\276\210\260\\=7\264\203\275qo\226\274\3639\223\274\017\320\275<\025\222\331<,\017\002=P-\351\274\245\265_;\211\033\363\274\300\373\345<Z%#\275B\355\221\271\212b\272<\321\316\030<>\317q\274\203\2233<8(\314\272\261\265\232\275\037\372a\275\005|_=\242\246\344;\026v\273=\017\365\314\274R\203\217=D\277Q=5P(>\n\357\300<\030RI\272\2264\013;\251o\315=\210\016\023>\233*\344\273`%\t\275\010\260J\275\345\326\202=\330\275\342\274\331\343L\275\356X\004\275\372\213\200\275GL\001;\270\376\226=d\223\253<\372\204h\275\271\2365=\370\255\274\275~\033\032=4\201Z<J\024\370\273\221\346\246;\251\331\212\274o\350\346<\033\310\220\274\345\266\021\273\2138V<,M\246>\251N8\275\272\363-\275\360\362\301\274\016\351\200=L`\010<y\305P\274Z\003\354\274\331\344X\275~\226N\274\345\376\016=(\027\320=\\]\374\274LE\333\274\032\364Z=gB\217\273\264Yz=\222\260+\274I\006\035=\373\232\237;Uz\256=\200\021X\275$\034\020>\014\n?<o\245\r=>\217\206\274\274\353c<\342\0169\275\244\300\266\274\276\004\214\275Ot\001>B\020\311:\252\363\014=+\257\'\274\311\0043\275\374%\237\274\361\204\022=X_\244<\020\n\007\274\216\217\342<\250\256\'=\316:3=e\254e\275l\352\321\272`n<\275\373\304\213:\001U\365\274\207 \270\274\302\177\036=\354e\203=\366)\206<W\314\265\275\326^\366\274GM[=\000\\\\=mQ\002\275\3057\007\275\263R\207=m\332\020=\237\016\262\275\300n\330=\243a\376;\022\315\022<\224\314X\275\005\242z<\034\243\224\275\'\302\216\2746\304#<\224]\010\274Qd\026;\340sP=\014\253Y\2745\263\234\275\326g#\275\351\271c>)Y\005=\221\375\205=*s\374\274\240\007\275\275\330\307\376\275\026\003\213;\224\n\321=\306\315\235<\355.\212\274&\310F\275\035\241\240<,\023\221<|~\033=\275:n\275E\226\315\271\033\331\271\274\346\263\217\2757Q\037\2767A\202<\034\246\371\275:\341\307\272\3032%;\007\361<=\230\201\201=[8<>\320\305\236\275~]9\274\002\265\373\275\374\003\320\274\013\213\034\275\251:\313=\361\332-=\353\264\266\273\236\003\026\275X\335\235\275eP\266=\246#\215\273\322\350\301=\037\233\232<\274`\247=\2029)\275V\000\000\275\024\242\r<a\324!<Km\033>\356tH\275\017s\317\274}\246L\275\335\200\026\275\002\2232=\210F\262\275\335\352k\275]\204\217<\271\006@\275\230\257%\275\216q\245\274\010r\030<+\245\211=8&s\275\001\324\251<u]\226\275\211aQ\274\037\022\233\274\352i\243<[0\223\275\211\236D\275\004\017M\275\355_\035\275GC\021\274\215u\243=r8j\275AlH\2758\260\234<\266\250\352\274F8\220>O\031#\2758\201\226<h\2469=\367*]<\241\304G>\214\024\277=\304\002\300\274\335\207\030\275\003\323\026>S\301\201\275\000y\014=N\267\227\275\207\225\236\273\033XM\275v4F\274,\035\236\275\246\221\247:\344R\244\275\344\233\255\274\322\306B\275\000\304\273\274l\212\224\275l6\021\275\330`\312\274\366\255r=\221R\265\274=_C<H\227\247\274\021\201\375\274d\230\202=\004h\214\274\354\230\301\272\342\0320\274z\223G<,\024\205\2752;\321=#\242v<\251\t\305=\035\326\003\275c\212`\274\363\314\017\275\226\231h\275\212{\203\275\022\234\360\274\313\031\020>7\211\001\275\016\276J>\032\247F\275\241!\324\275\361D\013\275\323m\201<\332\237\225<\251\206/>\214D#=\317lW<\002$\020\274\202p\245\275\362\225\340;\370f[\274V\224M\275p\347\335\273N\314%\275\300\375\241\274\303\037\265=\r\2708\273\226\335W<H\377\337=\270\211\302<I\"\315<,\035\321\273\242*\275\274n\n\036>\226}\036<|\373\334<\371\256O\275s\314\332\274\243H\035=\3638p=;\360[<:\226\025\274\257\314$=z\237\251<x\006\206>\233T\217\274I}\262\273X\261N\274\315Y\366\274\251\211G\275\356^q\275~\336\\\274pP\307<;(\270=x+\314=\221MW\274\370Bf\275\232\212C\275\304\321\217<\005_==c\326h<\004\362\302=;\321\364<\312\346\r\275\215\205\177=\254\3144\275\000\276\324;\307]1<\272DB\275\203\354\307=\353\321M=\337\025\352\275\214\352\251\275\000\370C\274\0165\246\274\235\227\034<\375\374\203\275M\006@\275\002n\005>@\226\365=\240Sm\274=~\213<GP\351\274\333T\271<\260\'\263\273/4\023\275\331\\\273\274\351\024\004=\246\350\023\276\364\303_=N\302=\275>V\217\274\326\370\370<\301<\237\274@?\315\2740Gl\275\260CS=\336\000\004\275\272l_=WJ\226\275\373\245\220\274\361\3723\275\322\331\221\274\025\017e=\245\023\317:\022f\213=Z\305D=\243\201\370=\301g\342\273\310\004%<\375V\002\275H\237\341\274\234/;\275\216\361\315\275\360.\301=\373p\204<\252#\204;\221\320\200\271\363r>>\337\241\277\274\365\316{\275up\205\2753\035\005>\312l\366=;j#;\324\177y\274\014\301\306\274\1773\352<\242\236\033>\267b\233\274+\\k;\216{\332=\372;\305>\335\341\324<1\255\207\274\207lQ>\233N\224=_\320\253:c1\363\274\233\352\252>l\355\020\2751\003\337;\373E\304=\350\356\337\274\275:I=\315\366w=\377\366?;?oF\275h\014n\275\036\235\363\275\230\321\315\274\205\277l\274Q\035\217\275N,\354\275L\261\220<\277\006\020=\212~$>\035\340\020\274\235\315\374\274U\303\355\274\242\n\220\275\305)\245\274\326\264\014<\235\271\034\274v7\331\275\261\213_\275\275\037*\274\353+\255\274\364\302\242\274#\']>9\241H\275\017\337\n=\356\315\361\274\200\313\300<\324\363\'\275\340\274\214\2746\005\270\274qp\302\274\224\006\n\276\260\201\235<\2020\240\274\212\312\221=[Q#<\3223j\275-{\347\273[ q:\277\203<<;w\365\273v\373+<\220\027\267=\302~2\275<\004^\275\335M+\275\205\353\255<\254-\236=<\037\316<\037\221\216\273\036\021=\275QS\000\275\014s\224<p\\\256;s\217\014\274D\214#>\034s\331\274\260\364\005\275\010\313Y=\332\211r\274\303\023\016<z\363\016\275\245\351)\274\032\270\"=\007\262\353<\214\263\315<)E@<\023\322\265\275U\246\006=NG~\275]\362\322=\307x\242=\304\355\246<\251)\201;\302\261\n\274\257\030\357\274\375\221\260\274\221\027\242\274\356uo\274\335Cp=T\360$\275[p\212\275k^y;\004\253\342\275\026I\006\275\374\211\014\275\277\255\215\274\215\007\235\273\300\027\301\274\351\210\203=j99\275)q\264\274y\222\305\274\031\347x\274\204P\231\275\321\211\361<\330\002<\275i\211\237\275*P\375<\265\262+<\222:f=\353\373t\275\306\223\367<$\375\276=^n\350\274T\r\210\275\315\306J\275\321\274\211\273\356\325\226<\003 \022\275\312\363G\275\r\360\336<\204\260\340=M;~=\036\274_\274\347\272\323<_y\t>+h\216\273\300(\361<M\275\021\275\355p\352={+^\275\013GZ\275\275\326\320;?\270A\274\255\332f\275\252\272\254\2758a\327\273#c\202\2757\211\276;\306\366x=\262\210i=e\210\347\275-M\236\275h\323==NE\336\273\001\204\031>\371H]\275\231\253\310\272!\273w=\230\346x<T\321\216=\373\364\253\274\323\272`\274\252\245\247\275=v\302\274\204\263O=\\\232\237\274Z\375C\275\240w-\275+8\202\275\003\315l\2758\245u\275\021p\004=\370]\274\275r\273\005\275Z\256\315\274\017\313\301=\377M\246<\377 \204\275O\320q\274\201L\357=W\005U\275\021j\334<\006@\202\274XgR\274\307\212\245\274W\022\216=1\000&\275\265\300\013\274M\246\\<g\257\332=\242\350F\275\274)\037\274\347\332\301<6\3217\274\346\242\346<\001\036\356<\035;\214\275_\235\306\275\2560\360\274~\332\247\274\224T!=)\000\223=\313.8\275\021\222N=3s\232\273\'\327\027\275\304^\277\274\2751O<\274\333\003\276\276~\017>\366C\254<\302&\370\274\002\341\265=]\302Y\275d\201\313\2731u\207\275\224\312\216\274E\247\205=\321\376\270\274h\240\271\275\273\332\215\273\201\305\255<\242\216R>\t\246\\=\261y4\274s(3\274\2143\200<\037\336K\275G\240\225<\227\322\322=\333[.=\222zW\274\224\034\005\275\327\236\243\274\222\224\206:\224\341\036\275M\377\373\274\037\304G\275J.\317\274(>R\2753}\223<\343\022\005\2755\005\246=\315n\013>LY\237\275\330\234|\275$\023\314\274\246\\2<\221\270\356\274\343\357\364;\t\323\350;\tC\031\275\253\327\231\275\246p\234;\353\347\242<\311\275\252=\251\215\010\275\263L\210\274\253\300\376<\357\264\005<\247\014H\275\246-\317;\363\275\354\274\301\250\203\275\205\300J\274s\332;<\371\3102\275\027nL\274\225\243\360\274~\253f\274\376X~\273~\003\232=\020\231\372\274\314>\322\275\321\364\252=;\017\346<\221\304@\274\'s\334\274\013\351\327\274t\316\016<\323\324\206=\"L\014>\003x\327\275\265\246\005\275\323H\002=J\031\232\274as\362\274\230\265\020\2751\224\005\275\352fT=\345\016\030\275\251\205+\275\276\177\233<(\340\250\275\347\240\202>\315+w\275wK\013\273\004\\3\275\301\337\361\274\017\005O\274x\301\270\274\335N\311\274`\232\305\273\240\034#=\340\363\n\275\2029\271\274\304\037?=J\313\200\275G\357\200\275\214\220\325\275\033\353\354\272Lm\230\275\276\323&=[N\025\275\326\024\233\274\013\261u=31\274\275\003\353?\274\266\\\306\274\222N\001\275U/\270\275\353\3261<1\264 \275\354\231\'\275(m\263\274\225d\237\275\207\205]\275Q\221\356\275\321TN\274\201\005C\274\357q\341\273\371\003\252;\213\322\024\275P\0072\275b}\326\274dl<\275w\306\024\274m#<;c\203\037\275\247\026\224\274\311\211\311\274\366\302\271\275\022\037\377\274FJ,\275^hZ\275\233q\322;\2603\214\275\343\342*\275\360\364w<t\314(\275$\222\231\274\327\013G=\215\352\373=@\017\232\274\004\222\036\275:\2310\275\035\337\034\273\343\t\313<\231G&\274(\034\177\275#\334\034\275\375o\207\275\372\223\200\274\030x\237\275\216\340/=D\314\027\275\252\r\207=O0\225<\306\221\034=+\241\311\274\311\325`=\324\201\320=dJG\274\335!\267<\372F\317\274\227>w=\247\304H\275\361\265\253\274\221\r\244\275\266\217C\274\241\020B\275x*\t\275\354\233?=\021\213\316\274T\360\216:\245\212\323<\204\240X\275Yc\031<\364B\270\275\370\1778\275\310Za<y\232\035<\231+c>\026\343\363\275f\241\003\274E\343\243\275S5$\275\341.\274<\373b}\275F\266`= \276\033\275\321\022\330\274\007+H\275\213\022\031==\r\314<=\274\r\274kP!\275\020\234\245\275\205\241T\275\322\203\264\274\213\215\241\275\322{\342\274^\035\313\274\330\354\n\275 \366\302\274\214_.=^\347\371\273+\016\203<\275oi=\236K\264=&\313r\273\234\365\317<\217\262\031\274s\332N\274\351\260\311=\277q\367\274#]0<R\332\337<\264E^=\302I<\274[\202/\274\353\226*=\317\370\223=\2069\000\275\375\363%\275]Q\021\275f\241\214>W\367\024=\233 o:\275\036\305<\265\\\233>\372\177\023=\367\nI\275\316\241\345=\262R\007\274\177\304\004\274<\004\332\275\200\244\030=\000\034\210\273\000\374\222\275\222\241\244\273h\316\022\275epB<\\\371\034\274\034\271}\275\323\336\320<^_e;\347\264p=H!N=\226x\205\273\316\230\031\2753w\n\276X\376\267<Y>\221\275\277\034\260\273l\376\r\275x\203\253\275\333^\337=\010f@\274\212\221!\275\354\371l:\"1\000=\331?\205<\3670M\275\023\\\212\275Z\000D\275\261\320\325\274\255\217,\275\353|\030\275\255\313\317\275[\200\224\275\354\233\374\274\376c\344\2750\013\024>+T\213<\276\256\321\274\311&\216\275u+\235=<\256H<J\254\277\273\252[\247;\r\240\202\275\365\335\315<\203\3371\275$\236\007\275\354 \006\275\033U3\273\004@\272<&\215\363<\325L<\274\263\265\247=\340js:\tn\032>\231\241^=\027Vv\275\025\006A<8F\353<\205\245\322<\001^C=\332\362\206=u\022\251\274\320\351N<\311\006o\274y\343\273\274\002\233\243\274\244\203\237\274}\n{\275\254W\252\274\367r\242\274\317\006\207\274y`?\275t\216\316<wY;=\277\340:\275f\360A\275\335\236^;\353\t\320\273\006\004%>\345\004\241\275?u\255\274x*:<\357\345;\272\031\204\353\274\247\373\313\274\263\367\017<\231\336\263<\360\315e<\326V\023\273-\242\033\274\220\232#\2753\204\320\274\005\361\332;a\273\267=\253\257\215\275\321V\005\273P\234\237\275\301\n\233\274\241\235\374<\020\222\274;K\351\375<9\201)\275-G\201=#.\237<Jse\275\031F\241<\307o{\272\253\260\355>\274\203\311\275\014x\'=\377\236\272\275\371^\300\274\251\232\037=\252\230\233<\231\343\212\272\205vy<\257r\234=\264=O=\222x\024\275B\375\004=\205\251\272\274N\016\262=f\373\205\275\375\376-\275O&\210\275x\021\240\275\004\264\356<gQ+<:\331x\274\310\327d;cs|\274P\332\212:\225P\260\274\242\001\\\275\267\013\021\275\204_\357<Y{\367\273M\2438=\272E\312\274\316wN;\"\300\007\273\300 A\275bU\214\275\235W\306\273\302\036\221\275\334Pu<\361\244)\275\211L\243\274\020\362\033\275\326d\212<\317\335\361\275\347u\332=-3.\273\264K\317\274\260\000\216\274\253R\356\275\217\"\035=\276\0143\275)\324\203;\234\321\324;\275k\273\2724\201\200\275\343)\334\274\302\350{\275\320\274\210\275\021\222\371\274\273\336E\275T\'>;\233\307\210=\002\200\207\274\333\311/\275\336;\177=\365\036\202\275\364\307\006>\3137P\275\234A\271\275\213f\336\274\305\003\006\275p\347?\275\322\365 =\246?\001>Z\244\005\2748\025\372\274\232\365\213\275\'D\263<\333(#<q\013\331<\307\031\265\274\300\027|\275\254\252m=b\202\316\274d\243\331\273\026\254\241\274\212C8\273\263iG\271m1\362\273O\027o\275\242Q\256\274\232\220C\275\256#\355\272.=\314<%X\026\275\362\210\002\275\266`\\\275^\235\341\274\230=\036>\327\216\215\274.{f\2758\343\241\275\303\372\372\272\222L\236;j\326\351<R*\017\275O\362 =\351\356\214=\376[$=\234\327\222\274_z\006<\353\351,\275\343\2507\275X\017\202\274g\316\237\275\211\310\030=u\261d:\340A\265;\374\276\235=~b]\275L\016\236\275_\336\343<BA\303\274SA\272\275\270 \311;M?x\275\266\200\203\275a\347L\275\245\226\025\275\233^#=\254\006\007\275\350Y\350;Y\226.\274c\350\223\275\230\227)=\322\017\225\275\255\213(>\316\203\212=\031\241K=\317\230#\275\217l\277=i\367\273\274\351\246\017\275\t(\230\274\225\204j=:Q\316\273klL>\024\350\234\274a\222\344\273k|\233\274\237\010\215\275~\265\\<\255\022\246=\002\260\261\275=?\004\274\230U\007=\267r\357<\251$\231<\203\265\206\274\340\226\205\273\271q\364\274\031\030\221\275\300\366i=\317\222`=\234{U=le\325<)\306\n\273\214\370\331<\276C\241<Uv\022\274\217\355k=\341\314\270\273\352bA\274\300\267\022\274\031\330\\<:\221F<C\336+\275\2752%\275\017\270\036=H\026\347=\\\372U\275\020u\205=Y\010\264\275!\311O\275@\265a\275S\320\313\275Y\331 =\352\004\241\274\221\374\372\274\303UJ=\261\305\375\274\215G\327\273\311\312\330<!?6=F\001]\2751\331M\275\305V\257\275P\257\374\2741\021r<\325\373V\273\305(\275\272%\004\204;T\223\020=\305\371]\275\277\351h\275\221d\323<Cd\212\275\340\361Q\273\220\226\246\2748\364\351<k\230b\2756\310\024>\242\363\220<\230\237t\274s\365\244;\235\331\316<E\257G\275Q\364\375<\302\273\260\275\346c\216\2752\336\n<{\004\360;SE2=\375\2359=\005,\256=H\211&\275\340Fz<\206\372\032\275A\342V\275|\214Y\275\227\005\026\275\374\000\271:`\317\336;c\350E=[I]=\222M\017\275g`,\275#\023\004<8\243f;W\334%\275\242@\005\2755\201H\274\342\t1\275\363e\352\273A\376\314\274\245\'\204\275c?\335\274\331\301\327<\206\377\265\274\323\341\277<t\257\213\274-z\275\275\003\230\251=\025}\3379g2Q\275\277m\327\275\247R!\275\037o\303\274\374\217\256=\205\315\203\272\245\357q;\226\210_\275\356\353P\275\343\327\242:M2\236\275\245\030\027\2756|\020=\320K\376<\325C\377\274m@\026\275=^|;\276a1\275C/~\275\021/\000>\224H\264\2759m{=\214m\272\274\352\266\333\275\020\304\347;\206\333\234>\377X.\274\255<\307\274\241*\013?\374\261x\275k~U\273^U\031\275\025\212l\275x\235\023\275H\242\215<i\325\037=6W\210\274\374\306\024\274M\357\207\274\356\233\307\274d\260\264\273u\002I\273S\316\271<|\277L\275\202v0\273\300c\271=k\001%=\323\376S\275:\373\217<m\320\327<\232P;\275\230\376\005<\232E\342\274\300\204\200<b \017\275ZTn\273\245\312\206\274y\251[=\346\212\201\275ql0=\320N\177\274@\177 \274\321Y4\271S\301\231\275w\\\217=\364\336\252<\373\207\257>0}9\274\263\232\350\274L/\300\274j\032\203\274i\351\366=kw<<\323\300{\275\013\007\237\273\330\303{\275{\202\351\273`\245{\275\350w\332\274J\321K\274\327,Z\272\255i\000\275Q]\340=\216\230\270\274E\212t=\270O\030\274\334\006\037\275:$\025\274\365\273*\275\2366Q=FT6>g\350\020\273\302\337\223=\366\351\233\273\355\356\023=\362\265\320\274\023\310\007\275\327~X\275\'\265\266\275$\317[\275\261\023\300\274W)\232\274&6\225>\240\321\275\275\214z,=\247\362I\275\272Dc\275\000\360\037\275Q$Y</9\342<\254N\230\274\362\262\274\274UKG\274x\231\277\274;m\347\274\231\010l\275`\311\351;.\272\005\271\326\253\244<\036%!=\215\246U=\313B\013\275\253O6\275%\336 \275:\262p\275\360\2063\275=kb\274\211U@\275\005\362\300>\'\246Z<\014\362\217<\234\263r<\tg\250<Y\245\024\272*\203t=\002q\t<L\360\234\274\256mT\275\022\327\342>\323\262o<\246\252\212\274\242]a\274\275\026W\274\013\036\237<\376\345\232\274\022\300\005\275}\306\'<\323\346\376<\325MD\275\'M\226=\037\034\006\275+\r>>K \311\275\215\375\313=\'\021\013\276d-\347\273O\361\031\275\301+\310>\216\310\357>\346k@\273M\274\236\275\311#\021\275\206o\227\274T\314\211\274;\035\232\273\025J\332\274\341S\204<\202\267X\274\373\265\341\274\234\351\023\275\362!E=\216e\266\275\326\024\334\272w\260\211\274{\260\245<VT\334\274\240w\371<\376y\204\273\024\210\034>\\\306\215>Q\314\213\274I\240_\274}\016\200\274\001T\340<%J\305=\24677\275\310\024X<\206hW\274~ZI=BXQ\274\303^\201<\037@\333:l\275\035;\253\275\354\274rAv\275)\324\242=V\256W\275\364\313\305\274\323\236u\2750\013\033<m\334\212\275\320PV\273\206\214\247>\021\017\023\274)\314\246=\304\241H\275\027 B\274\260\357V\274\265\311\007\275\307\202\177\274*V\275=2\032\021>A\360\212\274\313\263\324;aX}>vf\026<\206\216\027\274t\320\244\275\206\227>;\347\032[=\374\3730\275\004J\270\275\244\254\2718\323\2212\275O\313`=`g\036=\003\022-\275\277\201 =\013Z\306<G\031\t\275\242V]\275\314+\377\274\276\3730=K\014N>1\376k\275\004\'\261\273\024`U\275\254\276\n\275\264\272\034\275\212n\366;\313\311H\275\205\347t\275]y\346<\275\026&\275\365E\257\273\031\320\204\275t@\361\275\374\306\r\275>\352\320\274\226\362\304\275L\267\272\274\254\335\252\275\306\256\024<\304\342\211;\373S\\=bLI=gy\262\274)\366\002=\267\317/\274H\204\227=A\245\227=6\202\r\275\331\344\202\275\251\271i\275\314\255J\275\257Pk=\354\235\031>\030&\236\275\332\264-=\017\220\236=\034\347\322=%\262@>{N\214\275\177 \241\275<k\006=\321Ay\275/>&\274\235\362\032\274K:\236\273\364\333M\275\334Y_\275f\350\005\275a(#=\032kQ\275\311\303\303\274Ja*\275\311\240\006\276\0040y\275\r\221m>\227\343\204=\274\010\270\274$\360(=1`\t\275\343G;>\361e>\275(\327\310<\326(\310\274\033\211\260=\202\001\003>\346?\322\274X\331A\275BR\010\275\245\315\232\275,\211\244\274\205!3\274\230| \276\254\304`\274k\222\311\275\346=\210\275%\025\272<\345\334\213\2753\026\311\275\264;g\272q\337\226>\025\"\363\274\251\233\266\275}\210\t\275\321(\033=*\2658=\310p\262>\237\251\320\274\210\3252\275\325L\251\275\006\212\227\275\204\016\323\274/P\036\2758\356{\274\334\323T\275\227R\r><\022J\2757t\004\275|\033?\274K\322\3618Q\020\003:\351t*=\205\263\022\275r\307n;\200\005\212;L\313U\275\305\372\001=A\034\006\274\201u\031>|l\025>\352Q\360\275\370\005[\274\244v\014\276\256\260-\275Q\211\206<\222\204&=#4\254\275`\324\316\274\336\014\352=\347\342y\275&h\025<\252\332U\274\345\2461\275\312\214\005>\326]e<}\271\317\273\2363s<|\313\201\274\017G\200\273q;\325\274W1\253;\325\272.\275]4/7\273\212\347<\307g\021>K\210\305<\" \261\275]O3\275E/\334\274p\377N<\377\211C>\211G\307\274\006\355\203\275\3672\201\274p\224\241\272\262\241K\275\240\251\340;}\307\215=w\316U\274\300\262$\275F}\007=\006\370\276\274\"5\360\274\274\220\212\275\225\317\003\275P\032,;\t\001g=a\216\376;[J\031\275\375\017\023\275z\233*\273A\nr\274\341\341\014=\200c\243<\327\324\207\275\255\345*\275\363\341M\275\370f\246\274\322(\241:\r\274_\275\263m\222\274\004\t\357=\254\364(;\274\210~=\316\210\014\275\352\203\001=\321\224A=D\303\003>\334e\301\274R\221r=\3676\221\275\370\013\255>\376OC\271\350\212\313<\347\375 >\235\337\002\274\225|,\274\304e\022\275\230\030\034\275\030\370T<\247\002f=K\263\010\275\367\236*\275\242\232\337\274H\032\'\275\372\273\252=g\360\001\275]p\230\274q\242\025\275\212\310\022>jl\215\2759\244\254<\357\322\220\274\360\021\014\274-@\324\274\212_\000\275R\341\037\2753NA\274\354r|\274\0137\032\275\320Y\017<\322\226\325\274sy\n\274\3440W\275\321<\006<\226^\216<5{Q\274\322\330%=\212\3609\275\'\005\311\273\010\025.\275-\3152=%\357:\275f)\020\275L\3131\273<\036~<\376\341\322\275\304\231O<\177z\231<A;\t=\247Og\274\352\344:\275\332\216?\2757\206 \274\237\342\223<p\274\267\273;\324B\275.n\243\2741\"Z=\216\366\262\274\313\003\004\275\3260\213\274\026sk\275\374\n\330\274\003D\314>qd\350\275\262\025\257=\370\334(\274c\224|\275\367\0179<y\3124\275\330\376\\\274v\024\002\275\210>3\275c\342\024\275.\016\004\275/\026|;\t\260N\275\202\376o=x\231\212=\272W\302\274\351-N\275f\244\254\272\264\233\270\275\210\035B\2753\017\257<\0253\022\275\003\233\021\274\200\242\217\275\274\t\362=\3710%\275\354\204\024\275\207\261\006\275\314\003\365\274\240`m\275\302\2300=\177,b<\010\257\017\274\205\263\306\274\274\264\232<Cv\217\274\277\'v;\374\264\017=\316\025c<\010o\r\275A\207p\275.\273^=yA\020\273\014\211\273\274\245*\356\274g\332:\275\337yE\275\376\035,\275\001\370];\017g1\274\034\321\037\275[\351z\273\240\334\337\275_\027\214\274\366\204\266:7>\214\275,\313i<L\036\\=\007Tg<\357Z\353;\223\222\225>\251\343\251\274vl\210<\212wc=J\215\020<,\271\007<\353\t\235=\001\206\252\275\2368\022\275\020PM\275d\020\200=\265\230>:\347\275{\274\256\276=;?\203\312\275\324\263l\271J\031\371=\214\361[=\254j\361\274\310b\250\275\207q\345\273`\310\271<g\242\307<\323Ot=\332>@=\234\227\320:\377\004\231<\305\331\332\274\030\353b=\250\254\326\273\240\210\341\274\016\240\322;g=U<J\345\240\275\332\230e\275R\333\306\274\311\344V\275\035\334G\275\213\024\313=\037\n\303=_Yd\275\335\360\330\275\242/\244=\213\n0\275\305\276\241\274\303\366<\275AX\351=\034h\305\273\177_B<\200\3312\275\n\310\023==\343T<cO\371;\036\363\234\274\371\2159>\321g\001\275U\311\027\275\310?\223;)\036\235\275\315kl\275\002@8=Z\3121\274\025g(\275F\022\331\275\'\217\350=\033\245\301\272\024\'\007>\277\334H;=v(\275\346\"\314\2755\313#=\007\000\374=\330\307\351\274~e\315=\236\022\035<\372S\">\"\\q<\314\326\247\273\354EF\272i\004\325\274I\235\320\275\216\222\216\275G\207R\274P\200\222=Z\300\210<\227\030\007=9X\305\274A\021_\274K\033\013=\201\312\212;\004\326#<\202N\014>E\264E=\362\362\204\2756:w\275\231\351\013>\026\372j=s\260,=VG\002=\254\034\214<b\366 =e\211\363\275!&\356;\246Y,>[j\030\275{\272\304<O\002r<\0229J>x|;\275\231\007\254<\377#\362\274\014\006r=\206g\003=\254\265\311=Q\260\357=\234\203C\274L\314\246<\007\026\010;\004|%=)\311\236=\370\2270=\021#\335<\243!\202\275\375\312Q\276\211W\303\274\227\244\324<\026\020U\275S\271\206=\232\002\320\273Z|\n>\367\337\035\275\244\233`=\354\340a\275\2223\257\274\374\272\004\273@\304\213\275\240{+<\305+H\275\351=\266\275\212P\243\274\354\016\201\274]\035\251=\033\305\241=\327\233\230\2750aD\275E\366\361\274:\226\t=\336\242\313<\201\3245\2756\002Y\275\326z\347=\234?L\274\302P-\275\026j\004>\241\340\204\275\315\010k=\311\202\302\2755O\177;LK\327=\242\202u=c\2211=\242\0229<\363\323|\275 \"\275<\300\214\020\275\223c\331\274\345n`=\372\267l\275\322\367N\275\310\225l=\261\215\245\272\252\316^<\"\336\272\274\016\350?=Crp\275\205,\254;z\375\333\274\204\014o<\037\272\327=\"\031Q\273\340k\200\275\370t\021<\3763\006\275]\226\302\274\"{\341;/\372\253\275&\272\032>\032J\204<2\313\227:\313\252\210<{\305\254\273\\\257\332=\253\026U\275\225R\024\275/7\213=\337Q\005\2751m&>\2147\205:\376\037\006>6\347\246<\275\272)=\234\347+\275\320\236\322;z\212\332=\340\370\351\275\316\350h>s\371\022\275\204q{<\352\360\017=\333\305\232<\362G\245<\033^%:\376\247\266\275\254Q\366\275\220a\316=\327eh:\026\006\257=9\225+=O\3507\275\261\000}\274\3014\251=\'\2121=L/3\275\206\rK=\250\242\264\275\3578\272\2725tc\275\033\256\025<\230\264\016=\037\347\023\275\334\r\202\275\346\244j\275\032\2226=\223>6=\331\r\302;m\037\177\275\322\265\252=\276\"@\274\243\234j>\243a]=r\227\257\275\'\247P\275\213Kn=\252\302\333\275;f\034\275}\035\241\273\305\321\007=\225xN<\035h\213\275\024\233\\<1\253\213\274@ \203=Vp\260\274\322\306\005=\242{\224\275jC]\274\366\261\306;\035\341\277\274\311\364x< \225\373\2744s\322\274\230\177\335\273m4\257\275S\242C=\312lv\275\016{M<\007\243\030\275\366\010\375=~\273\276=^\nF\274V||<\373C\252\275\370\367c=]\304\222\274\320o\375<%\224\260\274\001*X>\226\372l\275^\246\314\273\237\020W=A\275\205\274\364\263\235\275\236\373O=\326\253\351>]\035o\272\350\252\321\273\275Z\026\274P@\227>0\205\315\274\224;4>\276\367\355\273\233\321\203=\013\311\335<a\313\031\275\230\226\220=|d2\275r!\262\275\243\217\263\275*\345\215=u\254%\275G2\352\274\232\261\027\275\213\361n=\263\230\246\274\245\223\231<\377\367\\\275\276V\366\275hc0=\t\374\306\275L\376\r=\353\365\203=\001\204s\275\223K\227=\340$\324\273\303U\022\275\252\027==\375\213\001<x\354Y\275i\313W\275H\317\220\273\223y_\275ty\360\274\214\251\226\274v%\232\2749\342\314;\344)\213\275\203\331\022\274D\243a<\265\373k\275}\025\n=\021T =j\261\321\2758\215\232\274GY\222=G\305\235=\352<\350\273\257\367\256\274/\231\236=\375\260\253=\310\357\237=vW\234\275\221\362\374=M\214\231;\r\336!;\270)\204=\230\200\340\274y\010E\275c\200\006\275\354P\r=\352\371\201=$\242\266=\361S\021\275\014x\350\2750\037\323<\325\371\237\275\231\201\264\273\317\276>\275\325w\2449{M\311\274\3479\351=\203\267L<\344w\300\274\233\222\346\274\212\204\214\274\362K\324<\213_\355= \'U\274\r\237\252\274\013\207\247\275O\304\367\274\036\326\347\274\225\255\035=\303\364\227<R\274\342\274a\033\001\276\226\256\313<[\311:=t#\235\274;\034\242\273\213c\302\273U\323\236\275\016\377\373\274\347Q\234=\255[\247\274\370\320\207\2734\374\031=\313\332\274;/G\215\275\340.\244\275\257\230E=\314\300\031\275 \275 \2759\274y\275H\344\037\275\024\306G\275M\r\300<\002\366\236:BP&\275\252~\345>y\240\005\276\313yp=\t~\221<R\247\016<\350\337^=~\246\204\275b\332\\\2757\326\371=b\375\'<\367\000G<o\245E\275\'\206\354<\003\3770\275j\236\246;H\364\254\274\356O\355=0\253\001\275\267\007\216=\033Z\252<\271\340\344<\325\216\252\275\251\311b\275b\026L\275\350\240\231;\004\300w\275>\360{\275a\371\261\274\310\260\202<\237\207\301\275Z&c<NX\007=Q\242\\=U\271\254<\322\275\035\2751x\212\275(+\214=\'\t\331\274\250\'\001\275\351> \275\022T\305\275\244\303\005=$\337\206\275\0225\254\275\217\231\252\275\313\310\244\275\nz\t\2756\342=\275:>\002\275<\032\243\275\301+F\275%\261p;Jz0\275\264\027)\275\204\264q<\243\377\272\275i\030\367\274\375\026S=\326\237);c\240\311\274\264m\215\275Nw)=q\210\202\275\200\362\300<\351\375\007\275hXf\275\377@#<\250Bc=K>g\275*\224\352;\315\233\365\274\241l\241=\302\211N\275\3223\241\274\014\257\215\275\344-\205\274\024\177\022\276T\236\370<\030\347m>5\370K\275*\241\t=\357\036\222\275\325\303\216\275*\262+\274\201j\036\275+l,<\213\340\307<\256\366h;\346&\356\274V\353\300=h\024E>\236&\303<\355%\t>N\374\207=\254\342\037\274\361\2770>I\274\225;\031\025\221=~LX\275O\376;\274M\342\353\274\263\273\225<\010\030\207\275\261\204\350<<\300\246\274\324\261\240\274\337\267\\\275\217\227\252<\201X@\275\206\357+\275)\230\030\275\307\371\227\275X\322\206\275\300\026\356\274\346q<\275P\224\340\274N\307{\273Q{\210\274\350\214\335\275\34708=~\303<;A\351\255=3\024Y<\252K \274^\214\300\275\260\025\016=\231\2412\275\032|\000;\303\364\306\273F\203\246\275\230 \325\273\242D5\275\022=w\273\203EC>n\262\301\274\t\355r\275\265k\036\275\004$\207\275\210\330)\275.0\030=\215r\210<\236\3572>\323\372\356\274\n^\323=.Q\016\274\220e\023=I\237h=\212\r\262<\226\251\326\274v\242\222\275.L\241\275\035FU\274\003`V\273V\305q:\232_\254=\250t\025>\346\240\210\274\315+4>Z\014\247\2741E\304<\253\0204\275\346\206\334\273\353\305\352=\026_$\275]Q\350;\240\320\347\274\000\232\203\275\031\307s<\031\333E\274L\367\344<\302e\035=\356\225B;|7\343<\327G\257\274\274\320D=\210\362\244\274\347^\221;\361\274+\275\254\025\255\2751\2644\274\027\322i=\201\250\315\273\225\271\320<\342\035\353\273\274%\240;\307B\033\275|$\344\274.\227\334\274\016\263A<\026#\177\274\353\332\027;\025AF\275\032K\226=\233\253 \275n\007\300=H\341\236\273,Q7\275\017*\347\274\216\200\033<\355\032l\275\327\372\'\275\2671\255\274\201n\252\273\245\220\317<#E\201\274\350\004U\275,\350\304=\235\221\356<\006\3402\2747\263\340\274\352\2250;N\337\244\275\035\016\246\275y\233\307\274!\255$\275\023\237[\275@\317\003<8C\331=\334\016X=}\017\030\275\374\342\320=\313\211\371=\233C0=z\337g\274zm\352\274{\356C\273J\024a<\221\312$>\200]\200\275f\017D\275o\013\255=\331\377\272\275\245\005\025\274\010BD<\003\246\376=\206\3642<A\274\037:s\010\367=\377k\342<\206`F\275W[~\275\036\362Z\274\n$\n=s\332\326\273\200\036\345\274\324]@\275\032\023\245\273\204\311Y\275\316\313\310>.\312=\273\320\331\242\274\234\3076\275\377a\241\273\220\333l\275\366(\001\275K2\004>\200\3451=\276\310\304\274\223\376]\275\003e\253\274\016\022H=\263\305I=\010vI\274\301\211\344\271\237@\335\274\265P>\273\242g\225>\201\t\242\275\223E\330=w\300{\274\006}\307=2Tk\273X\204+\275\t5\337<\337\013\222\271\263\270\211\275\023k\245=K\243_\275\035\001\372\274\314\242\004\275\375\272\203<\372\023)\2757@\203=\366\206W\275\003\'s<\214G0\275\032D\205\275Y\356\314:\316D\026\275\260\361\026\274\247\337\253=\247\321\237\273\375\036B\2738;\027<\223r\006\274q\234\013\275C^\303\274x\2653>\224/t<\177L\253\275\324\233\226\275\202\003\217>^\322\321\275\254c\212=\2512(\275jg\220;P\020O\275\n\332\361:_\n\376\2746[\352<%\0241>\003%0\275\266\210j\275\355\014\224\275]H\001=\2667\367\274\222Wn<\253\213\317\274%\247c\275\262~\273<\360\311\356\274\212\215n=\020\025Y\275\315\310\242\273\026\\N\275\276\017\236\275\005B\241\275B\337\203\274Y\177\355\274}8\234>\341\t\r\275N\245\207\274\352uM\275\267WM\275cI\033>qJ\233\275ws&\274s\311w\275\270\337\036\275\216\346\374\274\275\330b<\267[\216\273P\'\203\274sD\314<\306\360\227<\320\372\327\274z\315\260\274\314-4\275\321\004\007\275[m\020;o\207\034\275k9\220=E\266\313=\247\344Q\275\214\331T\275)/\270\274\346\245\237=\025X\212=\331\203`\274\004\207f\275\202Q,>\233\245\312<\203\315\205\275\365\252\252\275\036\321\004\275\020A\005\275\347\204|\275p\214\\\274\372\306+\275\377\252$=\260H\200\274\363\2174>\025\264\030<EW3\275\275\211\"=7\213\270=\177?,\274\242\367\014\273\321\376\317\274z\204\204\274\212p\026=c\024\270\273k!\002\275Tt\223=\364#\316\275d*\224\275\223\317\235\275\3451\212\274\004\347J=\014\t\000\274\351/[<\257\177\241;+g\021\275\250\302\224\274\247\354^\275\327\321$\274\253\264G\274\266\344V\275\346\312x=\342\215\016>:<z<\317\226\342;\360(\032\275g\227\007\274\250\237\205\275%\246\317\275&\014_<Fp\225>s\366\325\274\260\373\222=\271\226]\275W\005F\275\361 b\275\240\276?<\275x\023\272\2130e=\354G\253=m\357\236\274\217\375\256;\375\272\352\273c+H=\271xQ<h\337u\275(\214\367\273D8V<\242:\010>\324~\360<d\341 =\234\271~\275\nt\314<\002#\352\274\211\360\226\275-\000\013\275\365\211k=\312\306\351=\372*\\\274\326E5<\350\024\242>\215wZ=\020\210\031\275g+,=\033,\227=\260\024\037>\220\354\272<\000\220\303\274\034\236\365\274\030\361\303=\336cp<\306\321\321<U\257\215\274\320\\\'\275\270\235\273<\306Z\023<tC_=d\342\245\275\265\210\265<\254F\317\275\032\371\237\274\261\260k\273\324\322(\274\026y\014\274+\277\342\274\304\266\366\274%/1\275\275xz\275\20021\274fx\026\2745*\231<c\212]\274\211\270/\275\'\204q\275\210\000\236\274*`\264\274\317p\230\275\243G\341\273:\243\037;\262o\031\275\216\032\206\273\376\225\357\274\246sK\275\243]\222\275\215\273\013\275*\270>\275/\256B\275\000\245\020\275\263\362\007>\240V\252;\310\315\331\274&I\037\275E\026\205\275\232\375\246\274b\235\254\274.r\270\274g\325\305\273\322\322V\275L\t\223\275+\273\264\275\343K\335<\270E\323<\261-,<\355\335\273<:\323\001=\372\231\244<\241\376\314=`\n\372<\320\005\001=\006\375\020=\306\177\325=\203\331\330\274\005\300\346<v\032\221\275\340Y\365=\32025=\361\345\321\272\330X\322=~\225\370\274E\237\315\273MI*<m\241\336\274\365\236\324\275\366\306\332\273\346\320\232\275\233\211\235\275\333{<\275#\014@\275{\202\361\274\345\014\276<\236\312\035>K\331\305=\334\177O\275\331\nW\275:\231\250<\034cB\275\225\377-\275\272\260\277\274\341\027_\275t\265\215\274\217D\243=<EQ\275\376\373)\275+\236\337<\310\363\221\275\341\n7\275\227dI>\362]B<\326\360\023\275#x\323;:\016\332>2\252\214\275\234\014\270\274\213*x\275\2575\272\275\244\265A\275\205k\205\272\264!\316=\316\256&\275$]$\274\314\374\221\275X\331\252\274\023\2020=\035\306L\275-x\227=\003>\\=\017w$\275\226\261\016<\362dW\275C\036\221\275\372\211\323\275\322\251\033=u\345\030\275\327\324\312=gO\230\275\035~\276\274\311\366\031\275\276v\351\274\221\177.\2730f2=\241\315,\2737\177\365<\203\352X=`\031\016\275`\372c\275Z_\023\275\234p\025\275r\245%\275\311\231\275\275\261b\005=\322\335\214\274\232d\207=G\373\225\275\231\266\214\274\006\3573\273ifA\273yI)\275\'eT\275\3234\270<0\362g\275\035E\236\275\211\273q=dU\354<\024\363\354=\214\276\215\275\013\2012\274V\340l\275\275\347k\275J\352\353\274\030\206\027\275~\346\323<\344)B\275\272\301\233\274\035\023\246\275aE\t\275\355\032\207<Pq\000\274\334G\036\275\225\361\237\274\353\305\r=\323\035r=\200\201\021>8\364\211\274\312\t\255\275\256\212\003\274QV!\275\231\004#<\267j\257=\230\254\206\274/\322\210\275\025\235.=\227\343+\275q\n\346\274\314\360\272\273\010n&=!\372&>\020\323\204\275z\354\031\275\215v\302\274C0\235\274\\Y+\2752\023\336\275_\221\260\274\373b\345<s\3540\275\221\333\365=\260\250\006>\002M\213\275\357k\230\272\030]P\275\253<\202\274\207\261\253<x^\305<\344\0313\275Ec\262\275\005\033D\274\003\222\216=|V\014\275\272\366-\274Y\300Y\275>\274\271\274\245\366\245\274\022\213u\272\365\316\224=\250\246Q\275{5\223\275\246\025x\2757\027]\275{W\373\274>\3049=`\223e\274\001\250\313;\016\341\225=\371\023\226\275\302\246\357<\365\273\322\2749\331;\275:+\306\273\3529!\274\202(\314\274\256\223L=\263\002\217<\245\033\007\275\252LY\275\277\332H=\337\216\267\275\215\024\030=\001\227\226<\222\265\013>\252\0202>9,\360\274\305\3354\275\005\005\'>\351\263<<\236?\372;1\"O\2756^a\2754\352\\=\274\265O\275\306\262\221\274>\371,\271xk\023\274>\014/\275\203^\017\275\314\355A=\331\356\272\2745p,>\2756\335=\217\214\271\272t\325\030<\035d\'\275_#\253\275\212\223\374\274\227\353\n\276\270\205h\275\200Vj\274\222\354\366\274\377\025\n\275j[\007\276\246\372\025=\235o\356=\372\013s;\302\214\364\274t`u\275|\332\022=\276\315\303\274\325\223\317<\353\351a\275\2462.;\032h*<\340\334\306=J\177\376\274\333\334\247\274\233\231O\273\r\354<=18\235;\362\222\344=3\031\032=]t\214\275\341\343\003\274O \017\274\016BW\275%\301S=\224\376H\275Su\025<\310\322\245=K\370\036\2752\010\240=G\274\002\275} H\275r\261\272<\243\257K>\016\350$=r\251\361\274\361wA\275K\223\242<\217\243\264\274j\315 \274}n\'\275\027\034\001\276+B\325\274\304\225\256=\270\347\303\275IDc\275\232\017%\274\374?\205\272562<bDS<e\030\210\275I\031G\275W5Q=\257\246\354\273\314e\210=Y>\306\275\002\213n=\333\007\317\274\376S|=2\321\376<\215X\211=\023\002V=\317\300|=\342m\316=\010\322)\275\225U\333<8s,\275\230\346\\\275\371+\210\275>\357\233\274\224\030J=\360\327x<\362c\277=\216f\010=\336]\242=\002\020\351\275S\263:=k\354\271\274\032\340\211=\232\211\002=\204\274\202;=\235\231=7\272\224<\nXa=\352\376\365\274\211M\326<\245\3104\275\375\022\034>\214\030\255=\310\372\267=\352\035\302\274\300hL\274\023\010\010\274\225\177\207<\226\272x<\321\227x>_\006\020=\317\307@=\202b^\274\327>2\275\314\260\006\275<\220\003\275\003\264\241<,\"Q\275q\234\370;\254vb=\364\016\231\275:\343w\275A\333\327<a\341\313\274\243\376\355\272\211\231\334\273\211\r\357\274|5\252=\020\032\336;H\333\016\275\354PW=\257\262\203=\324T]=\267\373\270\275_I\r\275\014\235\330\275>\211o>\336\374\331\2749\357Z=\215M$\275G\217\301<\342\367\241\275\036H\204=\343\303\007=\323\026\355\273vs\r\275f\001\026\275\303Y\031<(\tU;\025\301G=Enx=&\304\357;\363\211\276\273\320\232\237\274\340mM<\257\222\003\274\325\035\341\274\254(\230\273v\256{<\332\205F\275\035B\256=\230C\371;\215\314\262\275\016Q\024\275\243B\360<]O\240\275\247\005#<*\234o\275C\3612\2732\361$\2757\366e\274\221\231\215\273\257|k\273\004\216P=\307Z\n\275\017\322\321\274\357\014A\275\336\253\022>\211\336/\274KZv<w\027\213\275\016\216\254<#WD\275\350\254\210\275\362.\200\274k\024g<\310\201\311=k\347\253\275\335J\325;\325\006\240=w\021\'=\023\245|\274\037\274\313\275J\0020\275\307\370\224\274\210Xo;\266.\377\274\222\361\264<\370\337\n\275\334\357\n>\3155\332\274\264j\372<{\214Z=M\005\313=\262\325&\275\021\335J>g]A=\222\267[<\312\001[<A\300L=\260/\000\276cZ\327=a\017\330\274d\206\356;\007\363\344<\264\244\227;\327}\010\274\t\374\006>I\201\267\273vM\203\274\300NU;\224\370\301<\257\'\275<|\320\205\273\373\333\264<\0331\372\274\266\243\276;\375>w\273\305\373\246\274\033) =\375\265L\275\212\307\r\275w\306\357<\363\030?\275l\377#\275wxN=A\317\001\276l\275\203\275\r\304\331<M\253\035\274\373\200J\275.t\211\275\306\345Z\275|;\032\275a1\030=\016S\206;\325\370\303\274\260\341\211\275H\034\022\275\360\027\255\274z\273\216<\346\242\'\275\220#\350\274\352\343\212<j\3377\275\352J\350\273z\000V=U&5=\214\341\240=\215\221\215\275>\025\276<\261\2303<\314]K\274\247%\343;\264\360\n=\236w\213=UN\243=\235\t&=\315\206(<i\232\215\274{\305H;s,:\272\336\030\231\2745%\274<\367\311\374=F\274\37791\277\257\275n\344\274;)\035\334\274\001Z*\275x\t\205=T\2205=\367\272\306\274\324$\364;:\273\231=O\333\031\275Op\347;\215\006\266:\343\307\360\274G\2248\275\232\3277\275\274e\036\275\254\241\363\274\241\003+\273%\205\216=\210\323\202=\274\352\035\274o\331M\274:\365\177\275Ci%\275\313\235\313;\316//=\177w\333\273\364i\213\274\263h\037<A\211\211<\377j\023\2742\311m\275\365U\n<^\016J\275\277\260\213<\301\320\361<+N^\275\310\375l\274\033]\275\274\333C\255\275\272g\022\275t:\362\274\360<\232\275\027\312\310\274!\333j<\370]e\275\314\367\007\2751\342/\275\252W#;(\014\351\274\264K\357\274}\315H=\271\235`\275\251\262r<\004\010\227=;\315\371\274Y-/\275\n\240#\275\n!9\274\346\377\373<\033\366\366\274\033\246\304\275Y\224\230<OjW\275\343\n\013\2752\223/=\345\245^\275\026g\260=\374\310\n\275P9E=\317\327Z<?\242\"\275\355\031\003=!A\315=t\323\231\275&04\275\257\3233<\002\3224\273;2\035\275\034u\251\275\337\341&\274>\374\316:\374J\366\274xk\234\273*\305\212\275\326\032\034<\3267\221\275r\353\023\275\245F\204>G\306B\275\276\344\n\275\307\030L\275\001\2367\275\325\351\332=%\2205\275\300\027\317\273]\305f=\036\255\341\274\375\241\266<\332\n\266=\300\")=p\341\031\275(\351\234\274\"\364><\251\3561<D\205j\275t\233[\275u\362\312\275e\265\036\275>.\202\274|\022\215\271\242S\251\272\265\221\223=_H{\275\326\251\001\274\\\'\210=n\ra\273\201#\202\274\356\215C=\361o\036\274\321Q2=\212\310D=\221\305\231=\343Q\201;I\210\225=\342\020\303;O\325/<\253\031s<q\207\344<j\240/\274\246\263:<v1\215\274\375\265\362\274\373\375\266\274\314\322\336\273\267\305N\275 t2>i\250\360<$\023A>h{\315=tj\223\275\330\346\205\275i/7<\304d\232=\344\034d\274\350&\013;h${>\000c|\275\262\211\257\273R\370\271=\033Jg;\221\233\203\274\261\262m=\324)\017\275/\344\005\275\221:\013\274\334\002\204\275\334u\240\274\207n\346=>fE=l\273\311=g4-\2755\3627>\372\217G\274\331\343y\274\225\350!<\021/\241\274*q,\274\217\244d\273\216\327\214\275\336\354\025>%\003\210>\034\005j>|\344j>G\r\002\275\n\324\226\275\306#M\275\303\362\335\272\223\364\017\275\3747\307\274\372\335\235\275\337\3607\275\217Di=\206\373\235=\270%\327\273\033pq\275\237c\355=(p+<\0053\036\275\001|P\275u\016\361<3\265\216<\264t\017<vV\373\272\016\r4<\327Xu\273r4v\274\020\244s\275{\331Z<\316\233D<\n\342\t\2751\247l\275\255\267\017\273q\3623=\260v\330=~F\037\275\233\006\276\274$\260\257;T\017\237=\202\320\327<\200\221\253<H4\230<\033\317\231\275\033E\274<\327\030\202<_\326\316\274+\232\003>\225\276g=\272\316\253=o,H;\362Z\226<\376\345\003<L\251\335<\r\026\246\274\370\030i\275\023\332\013\275\022\345\314\274\024\376\300\275\324l\333\274\332<\267\275\265\327\033>b6\027<\330\222\024\275\231\021\302=\271\341\253=?\316\027\275\363F\200<\263EP\275\314\023Y\275&(\257<A\321><\251;\004\275b\223\313\274S\256\340\275\371U\027\275\270\021-\275:\352\242;T\270b=h\215\235\275Fe/=\233\343C\275\203\036v=\251\220\033\275\\\361\221=\177\"\343<\364\305\321\275\332\373^\275\276\364e\274Y\2272\273\253[\246:\021\327.\275l\272\000=\"\205\273<j\372s\274\\\301\260\274\014\244$\275f\2558\275\255\223\327\274q\373\230\275\t\312\212\275\316\227\331;/_\347:Q\327\205\275\341\275%<\234B\231=\327\312f=\275\352\205\275\301 \337<\367\272A\275\213\303\355<D7\377\274\367w\263\274P\333B:\336\036\257\274\177\312\215:\350\005\236\274\r\203(\275\225\025\327\274\031\006L\275\306\361y\274\"\r^=\223&\202=r\311\207<C\270\017\275\3542\2749\363[V\275\024\031\352\274Lt\276\275\375\275\325<)*\303<\014\264\341\274D\364\332<*2\n\276p+\335\275K\337\213\275<\247\034\275B\243\202\275\314\025a\274\353\271\376\274k/\020\275A`\235\275Z\262W\275\177\231\223<u6\250=\001\364m=\260!\r\274\373\002:<x\205\341\275\301\215S=\222\375\343<\340\323\240\271J\n\317=Y\211\320;\266M\014>OA\370\273\003\377\371<x\345\241<\354\300\277;\024\261\007\275\367\036~\275\242\003\253=_\177\234\2757x\273<\340\034\246\275\362\037\254\275\254\276\230\275\361\370\361\274*\254\357\274\245f\244\274\253\304\372;u\300\250\274\3728L\275\375\034\250=\325\214\220\275\262\363\201\273q\350\r<\024\216\272<\007h\264;\252\004\253\273bJ\314;g5H\275\367\205@\275\220DY<\223\r\343\274\325Gg\275\343\214\216\275\324\364\034\274\270\223\236<\276hm=\031S\332;c\216\301\273`\246\335\274\332t\246\275=\303\244\275\311\211\307\272\3257!\275\314{\017\275\007\360\370<\021\317\257\274T\331N\275\024-\377\273\022\272y\275\251\366\271\274\243R\3718\027\r\"=I]}\275wm\205<\023\025\n=\2246\000\275\021s)\274\327\301\271<\364\273I\275\203\277\214\273A\302e=\251\256[\275\004\t\324\274r\\F\2752\263!=\303Sy\274\243\275\026<z\335\021\275\271k\253\274\225\221\361\274\201L1\274]G\003<o\3272>\227\212\223\273X\231\366\273\027H6\275Y>\006>:\304\361\274&\217\000=r\260~<\237f\037=\272\312\203\274\303>\246\274\210\366\325\273|\005d<G\330|>S\372\222\274\314|\340\274\370\372\365<\232\333\013\275g\317#<y\240\025<\230\355H=oa\371\273\210\237\033\275~\r\311\274\346?\347;\223\243\255=O\304h<\307\371>\275\273\376\'<\373,R\275G9\304\275h)\260\275\035\017Y=\323.\322\274\363k\n\275\211\302\231<\234\3669=\303\014\222=E\232\334\272\254\277K\275\262\016\253\272\035\267\276\274ke\004\275\253:\267\274s\317\210=\374\206P\2742\351\347;\272\323\300;\357\0207<\000Nf9\256\1779<\214\350\343\274\327\264\202\275$q\036\275\230\"\311\273i\335\276\273\'\2559<\340\216\320\274\365\271\340<&\341o\274d.?\274\203<\n\275\345?\322\2748OE>\302\nd\275X\002\357<D\014?:g\273\352\275\303{X\275(\227\206\275k@!<1\376\031>\350`o\274\004\335\275>\225O\210\275+\327\021\275\342\200\243\274\206\353\300=\2775\351\272\312\313\320\273#\222\347\274\003\001\250\275b\300C>8p\210\274\300G\010?\332f\322\275\177\225\250=\346\203\034\274\215%h<zJ\005<\257q\210\275\013\201\341\275\026M\374\274\201\014\353\274\301L <\334Jr\275<\267\n\275,\254\204:\345\237\311\274\207\006\377:d\032\t\275\n\202m\275\361,G=\032\276I\274A\252\021>\333\371\205=\302\031\214\275re\200\274\206FE\275\376\367:=\366f/>_\241->\277\035\227\274\317\376\227\2758\251\341\275\343\215b>\205R*\275\035Ah=wQ\207=\2673\367<N\2422\275)\242\024>\336\377\214\273\265\345x\275M\345\234>\366\3754\275\226a\333\275\010\220O=4\2512:\322S9\275\013$b<\014\310O=\324\324\313<\0064\263=\273\323\223=\32022\274\357v\254\275\266\254\216\275\272\365A\273V?\t\275\177\004q<5r?\275\322\247\310\275\225\343\271=\356\215\314<V+\316=m\032\216<\243\025\200<t1\253\274}\312\014\276\215\254W\275\261\323\303<#x\375<\001\300\252\274I\022\312<5PG\275\301XR>\237\230\231\275V\2131\275\323;\337\275\232\301\005\275~\024 =\221\207|\274\356E\027=w\013r\275\211\331\325=\347\3333\274\\\323\013=\002\035l=!\271\\=\206\201I\275\252f\223\275\tVj>m\247\221\273+2\332<\200)\301\273\274A\034\275\020\203$=\214.\200\275\224\337\014<\366\363%\275n\345\010\275\212/\035>\332g)<\224\024\261\275\363\206\203\275\217]\235=\352*\3439j.8<\235\207\033=\364\"D\275\307\330\316\275N\366b\275&\251\302<\024\310\220<\2506\233\275\016u\253<Q)\250=\205t\267\274{X\345\272OR\223\274\237\230\276<Ng\217\275@\375\263<\3645p\274\377\333#<\272\372\215=_\230\010=v;\255\275z\335?=\n\254d\275`L\002\274\250\323\344\273]\306\210=\230G\204<\315U\2259\'\266f\275?\346\306\273=0T>\301R1\2742B\346<\003\323\274;\334R1\275\361\215\037\274^t\003\275\362)\223\274,Y\037\275\340\227\336<\026\330\037\275YB\225\274,\352\371=\024Ly\275\343\177\300=A\361;\275$\241(<}\316\300;Q\032L\275\'F\232<\231\013\030=\372\232\211:\213s\037\2743\332\244\273\314R\021\275\003\232#=\023\253\020=p\307\247<\301\002\233\275W\177\201<S\343\312\274\343U\010>n3\273\274`\276\214\274\265ID\275\026v\313=\272Q\021\275\302\237\016:J\311\036=+\326\024=\014\276\035=\206d\330:w7\222=\027q0=\367-\313<\025S!=\376\017)\275jv\177;7J\244<lO\253\275\331w\315\270\207\227\221\272\343\315\352\274\364g\200<\235E\377\274\223\307a=s\207\277\274.\363\032<\373,\027=\206Q\247\274\003\017\373\274\245s\377:M\376@\274|;f\274\320\245\354=|?\016\274Do\241\274\322\373k\275\255;\222\274\005\027\312\275zQ\034\275\235\025\255\274x\232\246\273\221\000\304<9\'\337\274i\241Z\2750\305\036\275\004\262\323\274*,i\275@m\206\273\227\256\364\274l\013\206\274N\315\320\274\027Vn<\272\254\355<\316\321\266=\033\321(=\213z/\274\273\023\310\2740!\023\2739\265\022\275\266n\251<t7\037\275\266\231%=4G\230=\023\260\300=\\i}\275\2426\325<\314\250\n<\r9D<F\360\324\274n\nD\275\240\244n>\355\251\213\274ZM\221\275\322\322\254<OQ\222\274\347\212\256\275\263\036m;\373_\346\272\0029q<\372\241f=\232Y\001=}\315\027=\272\250\031\275\"D@\275\216 \013<\371.\376\274\'\223\233\274\2507\013>;\323\256\274X\220\325\2741\237T\274\210\224p\274\026\316\211<9\367\313\275\234\355\013=\223m\224=*\242\020<m\007\014\274\243\351G\275\270O\250\275\213\355l\274\3312\215\275M/\024=\314\n\031<`\3234\275\036\014S\275\222\240\214\272\232\350*\272:\361\005;\245j@\274|}\010=\365\005[\2755\273C<\350K\217\2758\207\261\2758\355\334<\204\014,=K\325\257\273~u\370<\252\371m=C\224\321\275\364\266\277=\006?c\275\006\310\017\275\243\216\372;\220\360\223\274\300\324 \275\371J\223=\032\324\223\273\215:1\275\007\273/=n8 \275\001\301\032\275\027\232\355\274,;:=6\345}\274-\034r\275n\265\320<5)^<\203p\017=}\307k\275\273\010\200\275)\014e\275\313r\347;\333U\261=/\217\235\274\357\017\205\274<t\266<rO\216<|q\377=P\370~\275\324\365\n\275\251@I=\036q\251\274\225\374\037\272\352\r\265\275Qq1\274\340\361+\275\021%6=\304\267\351;\314\322\231\273|\2769\274\021\215\222\275_\244\350\274:\003\037=\005\310Q\275\021\342\000<&\357\242\274\366\020\317;\327\014T\275\276\204\270\275\302\031:\273\223\341\307=\230^\221\273\200\246U\274\310Nt\275\037d\001<\214\340Y=\363Z\270\274\345\356\255\275\221y\025=\237-:=(\206\212\275%\347)=\3009\375\272\025\3066<.\025\266\275\316\276\031\274\235\374!=Z\020o\275L\271q\275\ni\321<8vY>\024\273D=\364\021\027\275>\243\010\275<\261+=\354\0068<)\350/\275\337\274\026=\252\322S>\233i4<\371\366\333<\030S\366;\270=\244\274v\204G\275\035\203O\275-\220z>\362\343\023=I\2049\273\271,\237\274\343\335\023\275\334n\312<\177\244m\274\302Y\010>k\024R\275F\363Z\272\216\022\031?7\247\212\273\375\251\177=\217\263\274<\373\374\203=\371Y\325<\203\232\231\272I\225\010\275\3702\037\274\252P\">\025\223 \275\321\225\007=\255\002\354\274\345\344\312=`\325\244\275\034\337I\2756\322?\275\016\263\366<\331J\017\275f\231\214\2754\247\233;\341q\013\276`\261\260<\353\006\243\271\203\373s\272I\200\220<\230\307\036=|U \275\345*\226=\004Gr=Vi\025\275\303\217\344=1\3430=\254\270\225\275\341\034\207\275F:\030=\222\246\245\275\022\241\205\2754p\310=<\313\010\275\211y\330<\273A\204\274\256\341M<\353\277\224\274\200\346\263\275\033\320Y\274D\222D\275\326]\014\275@G\222=\374w\314<H\310W<\333L|<\333\324\373<\334?\213\274\255\352\240=\357i<\274\277\013\026=\032`\340\2746\275\234\274J\3424\275!\255|\275\030\323\313:\364\301\270<\246\317\223\275\264\317b\274C\307.\275hG\217\274\372\247\235=\326\214\235=:\004B\275#\341\n\276+\227\226\2752\257\001=\004\026P\275\371{\001\2750\030l\275f\213\266=\274\356\024\273o\353p=\205\307x<V\231\355<r\231\376=&\331\'\275*\347\220=iH[=$\202o\270\374\270.=\214\357\372;\345\276\216\274N\254\302\275\007\251\004\274\031\001z;\302(\277\274\327\030\257<\236\321\377=\203\254\007\275\004\333\267<D\302\035\273\222\2772=n\352b=\005t\031=l&[\275:\341\340\274\001\372\217:7@\227;vt\005=\316)\372<%\213\233\274 a\236\275w\022\201<W\216\022\275\311\177\007<\347\"3=\000\377\337=$\246\030\275\331\010,\275;\335\341<lJ]\274\3634%\275\225J\316\275\357\223\265\274\361\334\313<~,\026\273\304\264\233\274\013*\035=\315\201\035<o\253j\275\222\n\224=2\227\271\275Y9\225\275\243~\311=jj\336\273\205\3131=\221\273d=\275\251\223\274\177\324\226\273z\337\311\275\005\371\020=mTR=+\273\301<\035\320\263\274e\272\023>b?\235=\375f\205<\"\234~<\214\310*;\177\021\343\274\005\213\347\274H\354F\275\202\t\314\275<v\203=\344G\313<\273g\272<\235_;\274\226\016\302\275J\301P\274\336\022\361=\210M\264\274\350\027m<-\263|\275\207\030\037<\314c\327;E}e\275\332\323\326\2741\207\225=\200\275\016=\234\200\241\275\032\037\250\275Z\342\227=\335\265]\275:\342W;\'\017\000\275\343\326\331<\375\263d\272VrA=\221:\233\275\264\267J<w\273\315<\221\246/=\354\317\277\275\204\037!\275\341\r\242\275\221\352\211\274\221\222\206\2747\266\257\274=\264s\275*\333\352\275\332\250.\276\363\267\035\275\360xq\274\003\210?\2758N\275\275\365\033\245\274U\3550=\030p\315<4\225\227=\213\256\237;\341!k=do+\274y\036\364;\266\347\327\274,\350u\275\352w\217<\007V\005=\\M\374=\203\230N\275\203\252W\275V\347\360\273\360|q\275\310\313\005=Y_\375\274$\347\202\274 \231\355=)\214%\2757\257\005<\271\360p\275$\334\235\272Q\364\234\275a^\036\275\215\243\200\275\274 \234\274\201\\\330<\224\302U=oD\034<\336\033\351\274\365\026\302<\2315\221=h\363\241=\026\323\322=r|^=\016)\227\275\311\'\300<\370\355\275\274`\016\353;\206\022B=\326u\"=Y\371\332\274sy\035\275i\370\361<\202\036h\275;\342\367<[2\323\274\275#?\275\nUe\275\332\304\270\274ZS\240;\360#T\274\206\211\356\2737\241I=<R5=W\313P<\262j\252\274\205\271\307\273,\013\274;\274\371:=dCQ\275r\215#<\030\305o\273]Q\370\273\243]G\275\216V\022>\222\243#\273s\"\226\274\356\027_=/S@=\207a\303=i\330\313\274\002iK;Kj\243<\033\005\002\275\300[?\275\324\342A=\215\250\336=\262\270\274:\232\234\331;\371\221\r\275\007\241\272=C:\226\272|BU\2732\007\207=k(\335\273\035\007\201\274\203O\277\274hs\215=T\370Q\275\020\354f=\213u7=\311\360!>\240\024\360\275\311/\222\274\332&\'=:\277\260\274\234\3405\275\017ou=;\022\021<\277c\233<\345\307\000\275\n2\362\274\371Gr\273\000\236K=\205+\203=\275G\227=]\027\335<\312\222\001\273 \206,<\272E\271\275\350\351\203\275\245\203\377=\210\355\370<\001U\210\275\332\252#<\370L\246;;\201B\275\037\320\"\274\022qk\273/\nS;\326\273r\275\304\241\337\273\366)v\275G\252\273\272\242\002\314\274y\352\205\274\274\357R<\214\264\217:\021\t\331\274[Yf\2758\354r<_\007\301\274\200\304,\275\341v\330<\225\244\373\273;\201\222=?qG\275\244\265\030\275\321v\213\274\022\372N\275]`,=\244\217\013;\231#\r\273\211\363\306>\373,+<\251\0243\274\305\035\244\274\370f.<Q\201\031=\215\367\026={T\035<4\007?\274d\322\276\274#\2528\275A\346\262=\274\252\023\275}?r\275\336\337\017<\300\237^=-0\270<\242\214\331<\337e*=\315\376\205;\025;\334<\357\343k\275\014\353*\275\377\251\267<Xi.\275$\276I=i\347-\275\330\2316\275\375y\312\275E\223g\274\254\000B\273`\3378\2754\026\016\275\302UV=\032\t=\273r\263;=hK\r\275\302\271\314\273\205b\260;ZQ<=W\006\235=\377\357T;\264\230\002<\354\370\223\274\301C\005=\370\302\214\274\331c\010\275\206\342\205\2744\315\000\275N\256\270=\252\271\004>1\240q\274^T8\274\273c\027\274\231\005\317>!\010\305<\032Q)=wq\205\273M[\257\274F\334:\2743\"\314=9\374\201;\243b:\275\302e_\274\035\205H\275\352\233 \2754\212\354<\230\324\215\274\037 \355=\304\231Q;\301-\032=\335\351\305\273lh\306<n\335\002\275\200-\274<\250\227\231\274\362\376A\274\004 \251\272\256Ki\275n\275 \275\003\363\365=\223\n\332\274U.;\275\272\351\222\275\336\217\211\274TQH<\311\022\201\275~UP<c5/=\301\0259\275\323\314\255=\243\037\001<\213\376\341\275\036Wj\274\334\026\315:;\306\305=6\215\206\274\022\361\'=\3112\001>0:d<\201\024\006\275\331\323A\275T\353\370\272\000\327\373<\341;R=FVp=\346\177D>ZDy<\253\203\304\274\307~\350=\'\312::\t&~\275\363\"\240\275~\3344\274\026\317;\275w\256N\275\326\267=\275\207\326\324\2730\355\246\270s\275:<\276\2656<y\310\030\275\243\312\313\274OSx=\357\203\224\275\r\376u\275\231\010b\275\247\221\257\274\254\224}=pk\031\275\326\004\026=\357Y\256\275\373q\300=\\\001\261\274\273G\033\275\341\262\204=\221\346\031=\357\222U\275\240)\017\275\032\004\030\275g\001\356\274a\267\247\274\356\202\244=g1 \275Tn\021\275\226\372\223\275\')\273;\253\033W\2758<\000\275\013\231C\275\354\330\210\274\022\213\215\275U\362\016=\351r\233<0[\346\274By\343\274]\226C\275\n\352\033=O\256\226\275\260\351\245\275\306G\234\275\004\343P\274 \320\315=y\231\252\274\004\177\214>$[\"=\351\331\332\274\310\276\266\274\317\310\252<B@\246\275<]\353\275\246\276?\275\367\347%\2750\330\337<\246T\334\274\005m4\273xG0\273{\264a\2752\314\345=gY\347\274\025\007|\275\305)\237\274\325\247\013\276\310\014\177<\300~\001\275\255F\024\275&\377z\275\302\322\230=\324\336(>\330\373!=\220\351\226<\256\212f\275\325\232\302\273\312g\275<jB\310\275\205+\347\275L\266\001=\"\224\207<\210\006\020<EN\213\275\202;\254\275\203\230\024=\300X\257=\'U*=\007\205*<\212\362\225<\001\023/\275\3722W\275\344\370$\275\274\343\007>\311\361\310;S\014K=\007\225\227<.X\246\274\246;\037\275q\t.\275\224a\234\275%\273\340<\\\020\\\274\033\031)\275\002F \275\220\"\300<\335\276=<9\203_<\372-\271=/ZF=\235\345\017\275\254\310-\275\222\323P\274_\223\213\275\002\023W\275\276g\352<-NU=o\270\341\274\006<D\275{\365\231\275Y\344\253<\254?\000=2\351u\274\r\374s\2740\266\\<\\X\251\275\3453z\275\353\006!=\364\347\330=\031\205\357\274\364\260\351=O\371\023\275i6\234;\034\007\240\275$\226\232=\274\031\034=c\3124=\315N\255<T|<\275u\361\364\2743g\213\273r\303i\275l\\\331\274\235\215\023<\377\324\330\274~\272y\275\3614$\275d\315\024=+\316T\274\275\226\253\275\357Y\023\275\035\365\234\275L\275!=\325\010\364\274\323\364\325\274\266@\350\274\301\213\203\274\351\031\334\274\362\013z<m\337g\275R\007\001=\023\273\244=+\222I<\343\326\315=_\374\253=AY&;\001;Y\275r\237a<\004\265\216\275U\227\365\274>\211\225\275k\231L\275\013w\366\275\322\346\362\271h\335x\274X\307B\275l\245e=C\257<\275\340\253\222=\273\201\233=\275\275\002>\223zP=x\271#=)6Y=\274\270\214>\370\2259\275\314sZ\274\371\017E\272HI\250\275KO8\275|\251\353=\216=\257\274\021\326\255\275N\243\274\275\260\206\274=\310(\260<f\214 \275\233\260\201\274\346\033\217\274W\217*=C\206O\275\352;\214=O\314\217=k\237\'\274\233q\305\274\263\023R\275\371\233\000\275dp\220\2740\354\2727@\257\220\275=!A\275N\330.\275!\003\221<\251y$=\25041<\177\231->l\\\247\275\027q\203\275\336\313\252\274\306\035\365\274\310\375\246<\344\350y\275\227zX\275e\323\274:M&H:\337g\027\275,GB\275T\204;=\374\256\301\273d\326\263\274\026\323\032\275\r5M\275\005.s\2752\216 =\2448\302;\037JS=\276C\217>\177\034\000=\255\212;\275\331\311\207\275\257bl\275I\331\274<f\347\026\275jt\337\275\3370\000<\246p\254=\220\004\330\274\204\364\017>J\220\033=}\364\266=\310\216R\275\244\356\t=:R#\275\376u\274\274j\t\355\272\215DD\275\367\243\304<\210\277\235\275\332\030\013\274\303\243\274\275\t\327\276\274\233\374\345\275\240\241\033=\313\262\226<\027q9\275\3446[\275\251\335\237\274F\340}\275\271\0311\275/Sh\275\262N@\273]e\030\274dZ\204=\342\3264\275\250\337b=\202\'Z<\302\024(;yi[\275\254\217\001=Q]\034\275\335\313\024</sy<\342\341Q\275A_\277\274\034\316\217\275\272\215\205<\210\204g=\014\346v=gl\276=F\250\254;4N\335;v\336D=5\275~\275\361\256\201>}\304\226:\373\314\252=\226\376b\275\010\276\260\273\304i \275\307Ic\275G\256v=\244\265\260\274\203\212\036>cd)\274\275\000\234\274M\235;=Pw\352<\343>\315\275\030Y\341=V\010\215=\375z\204\275\234,\256=\3623\317>\224%\336<\320\372^=\301`\227\274\323^\312\275WZ^\274\347^\210=t\006\271;8a\240\275\356\362\215=\2132\272;\326\177\010\2735O\314=\201+!>[\247\004\275\323\321A\274\207\330\272=\261^\020\274\027JP;\211{l:6\254\'\274x\027\010=\273\314\342\274\372\354\352<\314\262/\275%\024\222\275\264\270\263:\321\360\273>0u\245\274\200\205\245<X\305m\275\326_E\275\357}\032=\272N\235\275S~\372<\014\025\214;>\024%\275\262\355t<\342/|\274\006!\325<*i\316:\261#\242\275k\323\021=\347F\366\274\t\221\241\274)\235h=\267\310\n=\\]b\275:32\2754\257\326\274!\257)\275Q\005\375\273ek.=}\365\206<\207F\324<tO\200=\177\320 \275\341\367\224;\204\016\251<\034\216x=\203\341\206\275\027`\241\275\373\244J\275\313\006^\275Yw\005=>\356==\037\262/=lP\211\275\036\364Z<L\342\322<\017[\277\275\230\360\200=\341 \211\275\377\361\243\275\023\232\305\274\356&>\275\271\356\220\275\217\250\017\275&\024\273\272\314\304\227;\301q\001=\227/z<\013JU94\274\004\275%!\013=\273\263\013=\237\014\366\274\r\006\307>\007\330\261\275\367\217\217<\351\225!\274\217\023H=\272RS\275\201=\227=\240\200\313<#\353\234\275\323\200!\274\257]\251\275,R\274=\243\220\277=x\251\206=s4\214;\365\027c\272\215\362\202=\363_\246\274B\246\342\274\346&\274<9\257\227<e\363J\274+\300\342=\275\345\364\275\230&\332\274\251\337\210=\242hl\274d\317\223<tp\033\275d\t\237=j@\237;\030\3451\275\300p#>\376~\317<\332\312\263\275\005s\364\274D\351\307\275\264\355\216\275=\340\357<\310\014\220\275FPm=cR\263\274\323\205\n\274\035\214Q\275Y\244 \275\363\247l\273A0\001\274\254\317\004<T\2546<\314`\201\274\017Z\230\273\213\313\206=\030\225\026>\303\223\206\275_5\305=Z\020\322\274GS\316<\035\271\326=:\221\253\2756\311<\275~\224}=\t\326\007\275\2558G\275\004\234\233<\030>\274\275\234\304*\275\340rf=J\351\020\274\261\206\036\275>\375r=\343m\311=#\206\212\274\003J*\275D\205\262<\201zj\274\276\233\021>\313\372y\274\375o\334\273W\317\246=\'P\343<\r)\270=y\246H=\254\nT=\\B\002:\340\317\016\275`\307i\275b(\002\275E\021$\276\372=\217=Il\217;9\0368\275\273\343\264\274\356O\002=\\\223\010\275K?\312< &\345;\240\363{\274r\036V=_\360\374\274\030\227E\272\304e8\274\206\205\200\274J\313\327\274\312\027\230\272\366T\'=o\333\031=\370\313\036<\311\307\034<\326\217\017=\236\365\213\275\341EA=0kn\275\34329\2744\330\327\275*\020\204\2753C\032\275\333\032.>\227O\217=\307\317\245;\231\026<=\203\3160=Q!\274\2755\246z\274@\360\371<\240\250\252<\330\0361\275\035\340?\275[\246\020=\007\375\327\274\366\3501\275\260o\242<\331(,;\001\023\244:\327\310\013=\367TP=HO>>\006/\205\274.o\321\275ol\300\275\026\257\222\274A\260\304\275\240\262o<\3215\212;\227\302\203\275,8.\275\237?V=0r0\275O\377\350\274hh\241\274\204\212\336\275\3101\014\275\327\022W\274iw\213\274RZ\243\273\367@/\275\037\036\251\273\322r\021\275\222{\217<\205\3155=7\200\002\275$q\232\275l\253A\275\242\340V<x\375\325\274\326e\325;\331\334\276<s\364\243\275\032\372d\275l\246\252;\204\360\016\275r}\263<\211\314\033:\306\202\312\274\342\346\264\2740X\217=\022\262\223<\350\320\020\275\020\377\332\275\366\276\034>\320\245\250=]\027\373\274\022eE=n`\214\275\251\300\225\274.e*=3\271\t\275\321\240%>\277\032%\275\222\202|\274\305(\235<\262_?\275c\332t=O\211\234\274Tr(\275\326\322\371\274T\242\252\275\026,\235\274\232{\375\275e\377\006<;.G=@j\002\275\301iS\274D\006-\275\343N\211\274\367!\033\275*\237\003\274\316x\027>k\254\362;\22611\275\026O\262\274|K\244\2757\237\017>/\304\333=dY{\275\201J\"\274\265\331\216<_}\017\275\000X\213\275\273\346\017=#\306\313<s\323\366=(\312\276<\247\376\010\2751C\313\273\247\202\262\270;/\247=\324q\317\274w\222\274<\362\3717\275G9\246\275z\372a\275}@\264\275\374\274\246\274\010{\262\274\362\273\371\274_\016\364\274NAd\275\021\014\024\275\232\211t<\321S\016>\267\212\231\274B)\005\275\037\232\206\273\3065\227\275=\321\256=F\377\300\275\314|\t=\220<\361\274\007\314e\274\003\357\001<\251A\031\274`O\265\275\253A\330\274\016\375\272\275\324fn=\207\017\\\275\271\317=<Wk\340\275m\3415>\302\3655\274\342F\367\274\201m\211\274\376\266\301\275T\362k\274\271\347\'\274f\313B<C>\203;3mL\274\255\261\206\274\001U|\275\225uW\274\273\376f=^k*;\274v\313\274\222\014c=\256\270)\274\010\2036\275v\250\207=\340\350\357\274,t\033=\024\000\245=\342\340p<\345\276g=\347\334\211<6\355\222\275\037L =\210F\335\274>\016\206=\243\326\213\275C\211\326\273]\237.\274u\363E\275\322\000\230\2754\ts;\271\371i94\365^\275\223\221\203<$\202-\274\357\313w<\206\260A\275D\000\233:\201y\241\274\025\204\206\2754[\333=\247\264,=\032\030\344\274\2602\\\275\245\342\225\274*\2725\275\334 \303=^\231\205=\323\377\222\2751\3655\274\000\226\230\275\235g\300<=4f\275& l\274\344\226.\2752\366\350\272/\235\336\273\032\034\344\274\361\026\347<*z\030\274%\003\256\274\205b\333\275\211\366\303\273\271\023\347\275\300(\263\273X\231\302\2748|\034<nL\007;\343\277\026\275\334\360\000\275_&\241=\367H\031\275\356\351r\274\350\350\303\274<i\252\275\262\020$\275\026\372\304=\240\375\211=\236\260\241\274j\334k\274\256\307\005\275fh-\275\333{C\273\367\204\341;C\203\225\2746\360\247\274\2500+\275\345\272\261\275{\024\034>\315\310\330<\302\205o\275\003S\246\274\227g\226\275r2\313\275\216\266\234=\376\2150\276\334\207\021=\246\266\355=\375\242y\273<\260\237\275\301\373\211\274\'{3=DY\212<\361sM\273\200\327\212=\224gY<,\030(\275\375gt\274\027\2271=}\226=\275\213IG\275\216\0054>L\337\177\275-\353t\274c,\336\273\367\2225>\317\252\330<J\267\234\275\276\202\214\275\213oy\274BU\260<\r.\r\275|\341\211\275\360\251\312=\370\241\270=\243\035\344\274]\023\\\275kH\264\275\326\364\207<\264\241G\275\233\031\300<\273\377F=\325\217?=h_\340\274\004\341\255\2733?{<cb\316\272\261\224\233\275\305?x<\t\n\320;\2270\317\274\274\350x\275\212\315\354\274\225\204\250\274Y\010\177=\310R\205\274\327F\351=)\266w\275Jdx\273\035S\312\273\222\025T<\0031\n=\241\242u\275\226+\032\275\365jR\275yJ\353=\253w1=(\020\302=\331P\206\275\355\nC\275S(\210\275\212\324U\275\237S3=\013\265x;e6\227\275{\276B\275\372m\217<\243`\220<\345%\037\273\373[\304\274E3\221<\325\336\251=\246\314\224\275\023\225\250\275\0331`\274\375\337\263\274\327N\351<]k+>\334Nk;2\325\247\275FO\310=\347\341\201\275\007X\255;\274\333\235\2737,@\275\215)><ph\206\274\316\003\256\274\227\210\277\274fO\360=\361cs\2758K\205\274\300Ea\275x\205\210\275f\016v\275\372\246#>\001+\212:\370\301A\275\217\024<\275\233\213%\275+\034\235\274\n\215\232\275\334R\277\274\203\235\254=\367\342\265\275\034\0214\275\356\265\236\273\205\224\354\275\270\235*>\'\004z=\256\243g\275c7\300=}s\300\275#M\337=\302\355\026>\001\362\261\2751#Z=h\377#>x9:\275\007\345\233=\356\271k\272\246\215H=5\022\366\274\2237\230<\233\326\215=\004\362\301\275\256\215\330\274\255\027\337\274B9e\274\363f<\275\342\310\030<eyL<\217\272\r=T6w\274\327\204\221;\016JP\275\234\253}=\034\340%\275\010v\217<\243?0<\223\215\333\273\273i2<K\244\217\275\337\002\260\275a\227\220\275\000\"\001\274\200\240\305;\027Lu=M\357\272\275\030\366\013\275\225\373\277\275\276\262t\275!\340\252=\013\003\274\275\005d\206<E\236\r\275\375\035\341\274a\303\225=\0255\215=\2342d<\222\247\"\275\210\341\322=\277+i=\336\227\014> \001\210\274\317\202V\275\014*\3569\3218\307\274W\303\241\274\240j\246\275G\001\362=_\256\255\274\252\"\375\274\324\274\225=\216N\214=\336\343\225;\333\224\037\276U\303`=|8\027\276\306\304\263=\230\311\003\276\317a\224\274u\3438=\317\n\241;\225\304j\275\035\204\001\274\350\263+=f\001\345\274\035:\032\272\266u;\275\236\227k\275\361&\221=\213J\263<\236\354\222;%]\227\274&t\255\273@\211\343=O\013\375<<i\366\274\021=&<3\261\264\275\225jx\275\315\234\252\275b2\231\274\300\266Z=\301d\245<Z\277o=\377x\351:g\354d\274b\010%\275\373&h\275\370\336\361<\315l\363\273,C\360\274\372+\031\275\006\373\223\274\3054\266<o\334*\275\313|\263\275\242d\007<\302\317f\275D\255\005>\207\n\010\274\334\362x\274\323\223\215=C0\260=\275\221\\\272t\227/\275k\225\217\275\010!\254\274S\301\273=\226\340G=4\177\317;\252\221\306\275\221\\5\2751\256U=\362\350\300\274{\376\341=\033\310-\275\323\220\313=\326\334;=\025\335\033=\205\333\203;S\304?\276H\006%\275\027\302\306\275(.\004>\240\253Q\275\376\323\037=\020w\342\274\373wB;\243\034\237\275\301@\220\2753\234$=\353\211@\274\242\352\264=\245\363P\274\255;\217=\025\227k\274\317-U<]\234\031\275w\361<\276]7\257\274:\212A<\300\217H\275m\326\252\275\230\272\376\274\036T\225=f\243^\275\376\365k\275\\\332x\275\313\334\t;8\275\302\275\230G\277\275\367\re<\004\226\r=\365\213\310=\004\230$\275\366!\361\274\305\247\231\275o\2262=\263\016\014\275\312FQ={\177C\275s\377\316<.na\275\231\243\200\275\243[\010<pf{\275\252\030e=o\210\237<\234\277C\275\215\344\232;\026\216\033=\306!\005\275\300\221\240=\3751\357<\304\303G=\346\355,>\201,\216=\033bf>7\356p<\027\307t\274<\351\224\275\246\212\r\275\342\242\327<\275\tv=\031\306\006=\342\2459=\240\331\000\275\271p\303<\233\324@\275\017D\324\274i\353\254=\357\201S\273n\302\013\275O\314p< <\024\275Y\222[<\252\254\227\275\354\370\303\2739XB\274(\'Z\275\340z\270\274\024\036(;%&!=n\n\026\276\254\2362\273s{\207\274\rI\001<\217y\'<\220\201\262<\371\210\031\275\033\256\250>~+\002<\256\253K\275\351\001\013<\"%2=\\\251a\274\277!\305<\320\305\371=\241>\353;\315\203\326\274\336\020\313\274\300\013\326<\326\032\237=\032\033=\275\351T\252\272\000\207\177=\217\033!6b\236\215\275]R\010\2758\206\277\274zl\035<\227Q\n>\350\370\252\275I\025G\273B\376\305=Yg \273\013\217c\275E\004\206\275\371\341\363\274I2\217\274$\332\217=LP\036<\275\262\276\275\232\002_\275O\205\026=H\266\016=\037\230|\274\214\254\200=R\317-\275{\034\000>\224pD;\235\257(;RL\212\275\273\332}=\306\222>\274%\236\335\273\207\277\247\274\271\265o\275\336\0258\275w\003{\275*\2362\274(\246x\275\216[\'\275\345\367\003<\347\232\212\275$oI\274~\323\233<\304\317\233\274\275\022\025\275^PD=\316\010F;\2444\'=\337\000\303;#OK\275\017gL\275\027o\273\274v\316\367\274!\332\214=,\312\253\2748\n\216=)\224\322\273\203Q\326\274p\262\014\275\307\204\016\275\014IW=\264\034\235<\032\227\266\273\315E\224<\221N\344\274\3660\310\274Y\002\327=|\023\027\275\244\345\337\2747\360\026\275\345K*\275]\306\365\273\200\324\343;\216\250^\275|\374\257\275\314\265\242=\"x\003=\201\016\214;\302^\373;\202s\243=T*\275\274\346\365\001\275$\2049\275\177q\031=Dq\206\274\343$;=\216\035]\274\230\311Q<\365\264H;\333\010\324\274-\367\370\274\371%\033=\275|#\274p\004\361\274^\010\n\275\371Q\213<J\345\352\274g\365\231=\271\2324=\311_\342\273$r\337\274\322DM<SYb\275C\205\026\275\321b\024\274\361v\223\275>(\244\275\345\226\223>\374\317\276\275\rt\024\275\230\205%\275\266\020\244\275V\331|\275\250\3138\270\272\n4\274\246#\017=\354\3319<\027\262#\274S\257,\275\307\017\324\274Q\317\204<\212\257;\275\035\267L=\314Mm=\230\0375;\253m+<&\204\260\275\262\235\201=\327\037\276\274g*\351\273\372\023\257=-\032\254\272\365<\035\275\3668\007\276\373\230\'\274\3515\017\275\003\007\332\273\223\240\271\274/\"{<\307\277^\275\005\311\r\275h\327F\275\251\027T\274\353\377?\275HNV\275+^1\273\222o\024\275\024,*\275~9\301<\346\227\253;\003\013\275< \006\257<NGC=p\t5\275({\305\275x\034%=]~,\274\310i\'\275\220\306g\274\261\250\032=E\241\025\276\202\275\r=w\300\357=H\276\030=\373]\216<]s\245:0\037\225\275}o\177=l\260E:\3738\311<\265\0357=L\251\242=\333h\022\273\224\327\277=~\242\352=c\321\005=y\327\246\274\021\225\"\275\32670\275\270K\240<Y|\204=G\343\210>\373X\354=D/6\275y)R\275\002\365\226<d\2536\275`\266\277<hP&\274\372\253\211<\210\002\272\274\317\263n\274\343\013\315\274O\365`\275l\367@=\035\260B= \014K\275\017\016)\275-\310\234<\213v\254<\234o\026=\235\241*=@\377\261<\327\033\317\275\013\016\\\275Q6o=\261z\213<\323\205\246\273\207`(=\316\352\345\274.#6\275\246\361H\275\263\'\376\274$PR=a\255\351\274L6\036\275\247\342\302=\246\232\023?\200\000D\275wun<\302m\245<\215c\010=\307H>\275\013hz\274*.x;@\367+=n\352\025=\312\335\205\274r\224\313<\237\r\004=\352\273-=M\026\323\274Z\200l=Hns=T\274\033\275\2715O;lb9\2753\350\252\273\325\207\373<I0\330=\235K\371\274[\360`\2747\330\365<ckh\275\252M\371\274\231f \276\246P\004\276j\334\t>]I\347\275\363\013\351;\310\342\324\274A\211y\275\311\240\224=60@\275k\010\007\276}\233\275\275\325\247\361\275\227\213\032=\352\207\005>\3473\210=\320\236\301=\221\006\021=\2540\016>\225\205\202=]]l\275\303\306\001=$\277(\276\203t\256=\316\0146>\'Wi\274\205P!=%\213H\275\253\213\023\275\244\222\n=\037\'\345\275\004<\305\275\375eU\2763\272\266\274b\211\345\274%\023\227<\344e>\275f\216\313\275q\205\247=\366\377\307\2751$\270\275\201\032 \275\234dF\273\212\210\243<9\326\226\275`\273\222\274\253_\317\275\010,\212\2747\303\222\275T\316]\274Zf\273<J\314\250<\222;\334<\223.\256\275\242\277\037\274\206\240_<\340\326W=a&z\275\016\002c>d\315\020>\325\342\\<\312\202\276<\217\330\007\275\344wH\275|\003\246\275[Y\035\276\262M\256\275\276+7=\243\004\214=\344Ov\2757+\360\274\3111\320\275\350\340,=\300G\355\274Y7\215\275\267\224\022>\21732\275\037,G=N\307\340\275\352k\006\276\3211\023>\315\334\271\275\362\333z\275Qu\274\2752F\007\275\010\347\264\275\314N5>\362aj\275\307\301\214\274`A\250\275\223\255\324=\017\177f\275\334<\204=Vv\305\275\2355\201\275@\334\363=r\322\323\274!\315\021\276\213$\217\274\303a\364\274a\306\310\274\352\213\035\276\023)\255=\371y\223\275\000\272\310\275\244z\273\275\241\307C\276~\003\345\275\350\003\204\274\366\0211>3\310P>\220\320\366<\250\373[\273\341\023\307\275Fip=\3470\354\275!\024H=9%\241\275\363/\241;\204\317\032\275l\370\323\275\002\264\375\275\346\356\227\275rZ\324\275\374E\">\277Ba=8\240\370\275\001\006\343\275\237\211\257\275+\273\241<\013\374\211\274\177\014\346=\201n\\\275\240\352g=\025\242\365\275Y$\021\275\312\t\323\275\346\263\032=K\036=\276\2270\023\2753d\357\275v\031t\275SV1=T\330\031\276\367\002\227\275\033\273\264=v\277\002\274\267\233\260<\321\3016<dX\326\275\226\327\033\276\345\341\031\275S\311\237=\n\306\337=\215\007\010\276\321@\311\275\237\353\211\275\212\256-\275\326\200\371<\315kI\272\230\277=<\030\217\273\273\024\267\322\275\363d\254\2754;\362\275u\324\027=M\023\036\276\336\304 =\341\177:\275to\312\274\227\346g\273#\204\347\275\222z\007\276\256\305\233\275\345I\235\275Wm\346\275\334\307*\274\311\213\347<\337[u=\010\362\205\275\324\267\316\275ie\342=\350X\340<?F\264=N\317u\274\347\346\035>\273\201l=\241\360\004=\222\333u=\317\372\034\273\337\2040\275m&~=k\350H9\005\025\212= l\n>xx\310;\342\245C=w\261\'=\'\034\260\274\360\240[\275Q~Q<\242\003\t\275\204\242\314\275\327\316\021=i\322j\275\315\233N>\ta\276=\362\345.\275\325\230~\275\360LO\275\262Q\303\273C#\216\274\363\270\255<B\3766\275\034\002)<#D\323\274D\361\351\274c\355\034=\324\r\001<\370#\005\275\207\033\022\275\351pH\274\237\031\215\275\366\020O\274>\306\021>\n\275\313<\211\331r\275\304g\257\275\\\020\247\275\0374\023\276\300\'\307\275\027K\302\275\271\321B\275\314\001\037>\250\234i\274\3620{\275L\245N\275;\002\032\275\267}\002\274\217\2373\274\224\204\246\274\017\306\255=\016\024a=\264\246F\275i(\277\2749\r\005\2756\355\215\2752\251\206\275t\344\220=\331\357\016\275\302\221\375\274\262f?\275\253pj\275eQ\005=\r\235\247\275W\264p\275\217l\253\274r\016\355\274-\262\356\274\277]\227\274\021\224\035>B<\207=C\202[\275cRr<\010\343\201<\020\267I\275\030}Q=y\300\300\275\236l\231\273qF\355\274\307\224\355\275\262c\233<\341\"L>t\241\313\273\177H\341<\024\372\251;\351\t\034=\345YS\275\313}\n\274L\347j<\253\337\270\273\263\355\333\275\243\035\313\274qC\233\272\244\030\301\275T\375,\275\363,\r\275\275\030\252\275\324a\240\274\251g\211\275\002u\201\275x:\215=\320\014?<y\347\305\275\371\277%\275\262V\321\274.\315\206\274\035\265d\275\303\006\266\274\351F\006\275\216\356\375\274m\211|=\276kG\275\'!\005\275\300K\262\274\243\252&=\030\306\255\2747x\242\275\305hB<c\253F\275\310Z\343\275\302\022\355\2747M\302\274R\204\016\276o\325\234\2750TJ: I\245<z0#=\220\023\254\274]p\210\275\223}\022\274\316\216x;\247Rn=(\361\000=\007C\326\273\354\034\013>\214\204k\275fS\"\275Q7\335\274\030\021T>Ec\030<\007\327\205\275s\202m=\001\351i\274\253\201\377\275\005\334\340\274Lz%=GK\026\275]N\251<\362\270\353\275\374\2620\275\003{\266<N\361d\275\007\006+\275D\333\232\275\005\364\025\275\003|\256\274\303\267\262;\366\205s=\220WZ\275\334+\343<\273\332q\274bq\014\274\034\332Z\274\316I]\275\353\025t\275\005\225f\275\244\227\264\275j\'Y\2756\251\355\275[\331+\275\357p\013\275\325\207H\275\246T\035\273rWY\275\345<\006\275\007\031\265\274\022\235\200\275\2559\337\275\301.\342\2740X\325\274\243Q\276\274bt\237=\341\362\367\273\377\355\256\275\224\216\253\275M\375\354=\307%\261\275#\026d\275*\255\006\275{\270/\275\207}\332\275\220%\005\275\360\365\305<\363\030\275<\"\340\334\274V\266\"\274w\024\232\274L\032N>/\306\223\275A\'-\275\324e\331:FF?\275\333\314]\275\262\034\360\273\275\212\022>\363\372\220\2748\351\002\273\232Q3\275\344\2263<\321q\261\274\027I8=x$*\275\031\300\304\275\0106E<q(v\274\010(K=j\313v\2749\'\016=\306\336N\275\261T\352\273g\236\317<\256\322\243=\242Qx\274\200K\220<\264\356w\275\026\004\257<\2359\246\274\213\266\000\2758\\X=d\351K\275\244\021\375\274\025\212y<x\241\263\274I\325 \274z)z=P\304\363\273\372\t\212\275\207\332\025>\222\377\213>1\2664\2743\251\">\362I\260\275.D\373<{\003\301\274\301W\021>T\364\004\275*\001\307\275!\n\017\275\320E\250<\216\346\027\275\345E\223\271\014,L=bTk=\361lf\274\274\347q\275\003\025\000\276\310\010\322<(U\265\275a\266<\275\2751\036>\305\303\001\275\343\000\'\274\207\211\264\2732\023&\274\355\366#\275M/\000\275/\255\212\274I\017\314\275I\227W={_\344\274\370\332?=\275\027\n\274*cb\275C\\\222<\031\251M\275i6\261<\346\367\253\275[\206I\275\351\"\241\275\225gj\275\010%w;\364\320\335=\335P\022\275W#\215\274\030@|;\3530z=\006c6\275\377h\024=/\353\254<\2636\013\275Z\205Z\275\014\037\271=[\347\235=%12=\024\323\021;\267s\271\274k\273y=L/p>\0016\244\275\247\256\223\275\033\342\353\275\306\t><\"Tg\2740\342;\274P\227-=\356a\3168\227\243>=u^W\275\303\177`\275\336\255q\2751\260\207\275\244\377\004\274\202\214g=\232\221\201\272~_\233>dl\211\275;\237\035\275\337I\014\276\336\345(\275\331\033\215>]@B\275\253\237_\274T\000c\273\350.\340\274\243\n*;F\237\t=\341\000\000\275\2733p\275\035B\025\274\024Re\274\220\3301\275\036\251\004\275\026\023\355\274\007c\334=\262\r\223\274a\346\246\275\332I,\275\301\246[=\362\361\265\274\200\276H>\240\343)\275\002\231\264\275.|\311<\252\031\271=4\356\303\273\201\254\001>mX\311\274\276T$<\212\243<\274\311x\276\274\342(\324=\351\211T\275\272\"\226\274ycj=CP\206;\0140*<\353\311\343<\340*=\275CF\355\275\355\276\033\275\342\364_;_[\304\274\237\243\024\273Zx\262=\221\250\014<\262\023\324<,\330\272\275\257\244\025=TZ\003\274\rYJ\275\352yp\274\345\240\251\273\276\262s\2755\"\016=\257\371I=p\022\000\275\0355f=U\332E<\364\367\233\275\013\007O=ll\312\274\021\203\230\274\237\311t\275\343\026\'<\323\322V\275l\274\251\273\241\222\245\275%,\026\275kK\303\274\305\276\022\275\360\336\325<\023\007\301\275\301a\333<\031\224*<\340\212*=\0216\202\275\331l\005?\250\t\330\272\246\356\254\273\316%\031>F\004\244=\255\034\230;#\311)=\345h\t<\311\246\031\275n\257\272\275\363\247J\275c\273\277<m\372\251\275^d\331<\014\231\211=\010:\002=\254#z=\256\313k\275p\310U<r\316b\275\030XV<\337$\027=\273\267x\274\276N\370\273\217\010\326\274\014\2553=,\362\233\275v\335\251\274\374K\244=\t\351A;\025\313\353=\230\217\205>\220\033T\274{T`<\277\240\330\274\241&\220=\350\223\366\275\364\237\261\274\240\377\'>\351\352\351\275\275j!\275\010\300\r=\n\355$\275\000\276\001=\311\236\221\275[]\324\273\253B\321<F%\002=\254\'\226\275\t\374\316;\2278\330\274he\037\275\313*\361\274\020\2649\273:8\345\274\026<\237\275\357\\\301\274\326n\257\274M\262\001=\232\364@\275,P\314<\232\034\325<V\211(<@Rf\274 \r\004=\027m\221<\326\027[\274\345c%\275y\257\302=%\376(=\242\r\347=\237\232\320\274\313\325\200\273\241X\222\27390\266<\2743\216\274\220eJ\275Yl\354\274\037\251S<q\035\036\275\"\253\3219\227o\213<U.\212\274\220\331\344;+\270\376\274\327\032\020\273\212n\006\2751\304\201\275*e\201<#\342\033\274|\331\027\271\200\224\037=\242\315\267\274?\220\'>\273).\275\302\330P<\265R\362\275\346\251\230\274`c&=\347\2578>\020\233\036\275\346\022\262;\377w\242=\273\336z\275\276\'B\274P\345\304<\253\321d=in\371\273\306\337v\275\363\177\304\274\007q\022\274\'&\327\274\275,\244\274\t\246\276\274Y\202\r=\306oM\274*\341s\274\367\030\234=\303\267\243\274V\323?=\035\205\265\275\315\222\014=x\217\357\274\327\302\357<\004\013\226\274e\231\361<\276\236\300<\203\246P;\375\250\206\272\007G.\275\037\022\333\274:\256\201=r\272Y>\350\240\351=\014\t\230\274\255\350\226\274c\007\223\274t\305\022\275\"a\321\274m^p=?Vu\275\t\021\252\275\256\210\016\275!\325\324<\364\357p>\330(\255=n\024z<N\231);\332\225\353\274\246\370\001>$\347\023\274\324\220=\275@R\300\274\340\373X<\242x|<\262\342\234\273\367e\000\275\007(\032=\260\315\301\275\1777\206\274\361\341f\275\223\200\003\275(\275\2058\344\352j=\236\034\216\275o\310\266\275\021\265\216==\3306=X\326\001\275*Mf=6ZS\274\374\274\037\275yv_=t\220f\274\365b\031<\316\253\211\274\212\021\273\274\024\320\250\274D\214\373>\263\342i\275g\313\231<\353l\377\274+7\303<\341\245\334\275\330\311|;\256:\277=\371\020\022=7\203\314<Q\013\r>\230\355;\274\177\245\031\275~F\225\274\3257#\274L\005\022\272\234\234!\274J\242\270;\335{D=p\004B=\237\205\027>:l\336<\311*\033\274\355\367(=}Z\256\273\343\265\371\274\013\246>=\261\200\022<\214\200\021<\305fd\275S>\357\273\215\363\320\273\213T\227\273\377\347\017\275\'s\034=\352:\376<p\331\036=\273\345=<\341<R=\213D\225\275\010\275\263\275\233ti=\270\206\375\274g\366\021>\326\315\300\274D\242\177\274\253\361\237\275r]\003\275\243\020\332=\032<\371<\214l\324\273D\033\244\2751\024\207\273R\347\315< *\312<9\006\261\274/\337\025=b,\231=\367Z\357\2749\037\352<>\204v<\356\203\336<\353,\232\275\240=\253\274\260\262\224=\355\252\223\275\006\276\353<\':\364=u\t\031>\006\206\031>\005\242]=3\300P\275Q\321\215=\362\300E\275q\264J<\215\206L;bY\360\274(3\202\275\342\271\372\274_\343\225\273H\241\"\275\010\201\207<7M\263\275X\022\017\275?G\001\275\247w\242=v\025\357\275\302|\305\275\2022w<\242\347\002\275\016\305\000=\363\360h\275\t\023C=\304\373*\275\0364\243\274Z\354\004<\367\327\266\273\326\215X=\261\225)\274M\303\201;\204\314(\275\253\203\232=Q\203W=T\223\324:V\372(<`H\302\275\352Kn\274J\030\n>\255\267\362\274\364\354\267\273\222\2755;>\271\257\274\033?\003\275&L\322=&w\247<\\\226\230\275\222*\337\275\031\341\r<{\334K\275\203\365\025\274\316\345\337\274\230}\240\274\006H\017\274x\252/\275h\276\376\273\317%\004\275\032\2220=\275\330y<\202\226\354=\';\252\275.\253\253\275\272>\271\273;3=\273\\\314\201=\244\026\233\274\356\264\207\273\330\361\356\274m\3410\275\000\0247\274\355\302\364<F[Z\274t}\017\275G\250\237\275.\355\272;\216X2=M\325\006\275\254\260\027=^Y\236<>\215\350<\373\205\351=\006\364!=m\246\243\274j\2718=\2616\t<\242\214_\275\235_\037\275\242\322\255<A\362\202\274oZ\010\275\333\034\021\275\373\301\000\275yQ7\275C\334D\275R\022\215\273\001(h=N\322\n\275Ct\2159\262\005m\275\367\277>\274\255y><\215\326\026<yV\237<=\345\223<\211`\237=\256\013\t==hu=\350[\n\275\336f\014=\\\276\000\275\261\030\261\273\215\340C\275\023\221\314\274\344\2747\275\303_\006\275a\253\262\274\250Z3\275\014\360p9\357\227,=_\307\262=2\'\003\275\202\253\262\274|\006\276\273\253\310\203\275\025|\242\274C\240\006=\345\244\253<\312\007\211=R\235\237\274zZ:<\2629Z=S\272^\275S:>\275K\344J\275\030\366\241=F\231\212\274X\345\227\274\365\250\330\275\032i\202;\003\004\344\274&+\300\273\230\"5;\r\014\270=\352\177\330<\310\005s\275Lb\275=\212\356Q\275\357\017A=i\266\221\274\250B\302\275^\241\301\275y=\263\275\256\221\034=\010\370\233\274 \003\021>\204G\003\275\246l\014\275\232N\003\275\352\305\n\274_\271\211=\003\r\306;{<$=U\273\334\274\343\035G\275\250T\217\272\226\305\356\272\207H\3529^\231\244\273\366I\226<\342(\004>q\241C\275<\3069=\'\373\206\275<\251\353<j]\276\274\004+\035\274\311\300\321\274\002Z\220;\251\247E=\220g\316<\000\252\317\274ny\336<vAe;6\321G\275>@\230<\267\017v:\244\220\205\274\227\310\216\274\362\231\027\275\n\327\n\275\220\310\273\275\311\3156\275e+\021\275\323\006w\275\257\216\345<8:[\274\'}U9e1\013>>\236\030=\r\033&\275\202p\256\275\243\357s\274\376s4\275\tO\247\274\314o\013\273\231Ad=\341\207\246\274\260\271\220<G\305\225>\306s\210<\2342]=W\311a\275\2128\344\274\260x\324\273\313{\240=\343+\013>Nr/=\013\351S\275\257\025u=\242!\007=\204Y]\274\010v\222=\3640k\274247>?\3027<x\316\345\274\202Xk\275\000\355\034;s\016\222<\350\366\226\274Q7\355\274\017U\004>\271\352\235<\025\244^\274\302 \340\274,#H\274\305b\203\273N\177\030=\324\270\261\274\273[\016<?w\235=\214\345\003\275\203\365\307\275V\272\313=\362\355\371\274\301a}=s/\233<\272\365\236=\364\217\006\275/\224D=E\307\257\273\274{\225\275\256o\230=x\303\361\273\033\330\033\274%\365O;A$\215\275\244\302\266<,\372r\274\306\025\305\274\276d\251\273\021\323\222\274\277w{\275\030\241\r\275c2\234;o\021\231\275\n\003\004\275v\352\023\275K\232D<\275\355|=\236\212l<\177\030!<\3167i=\216cs<\377Q\274\274@\r\201:~\313P\275k9^=\2060\257=\013\255P\275k,*\275\020\037\334\274\267n}\275\252m\210<\206\246\252\275\245l\231>\204\273\361<q\344\363\272s\211\232=\212\314\017\275z\236\212<\205U\225\275\271\222l\274\214\251#\275\321Y\220<#|@\275d\265\347\274sf\274<A\212\374<\013\262\304\275u\374\265\274T\233{=f\372^\275k\031\350<p\263\007=l\361\304<\346]\331\274\003\377O\274\027J\233\272\332\300\270\274\311\216>\275\372fc>\255\001\005=\033\000\270\274O\013a>\273=q\275\366(\313<\014\337\351\274\010\222\262\2758\2275\274O\331M>~\177\272=\233\270\210\275+\254P=.\360\010=\236\255\240=4\322\230\274\223q9<aC\327\274\320g\336<\260\223\244\274\343=\014=6KI\275\366;\340;t\246U>\354\246t<\2177^\274\272\2337\2755\371\035\275\274\013\004\2754 \267\275\362\325\317\275\237\235\201\274\3625\016=K\1777\275\253o\226;\203\253\211\274\'s~=5S\250<,u\230\274\301\226\006\275<k\254<.\262\030\275\376\246\017\275\346\211\230;N%\303\274-\200\245\274(B\013\275\302]\330\274\350]\025\275V\025\232=\340a\010\275?o\232\2740\336\206\273\262\222\351\274\203\322\245=\373\016s\275\371\261\240=\225\254\304\274\227\343\214;\222R\000\275 \316b=\210Z\220\271\370\257\032\275M\370\t>\214J\205\274\370o\n\274\366@\253=EA\210\275\010\317s\274\226\260\372\273\265E<\273f\316\207<\327\326\206\275/L\240\274/\177\226=DI\203<\013\306@\273\000\306\272\275\373\306\213\274\304\034?=@\024i;\370\204\365=;0e=\253\352\024=\200\236\312<+j\270\274l\274\246\274@\207\217\273\201\201\201\275j\367}\275\3115\231\274\202\346\227\275\217\346\227=#(x\275\341\354\261\275Gnn=\034\\(=e\317\n\275\3369\266\273/\232i\274\227\033l\275\3044P\275\372\237\010\275\036Q\177=Dv\361;Y\272n\275\351\265\201=\221{\323<D\377\032=\255f\030\274,\205\256\274\373\032\001\275\356Z6\275{\256\024\274\024\027\254\274\221\210S>!\272\314\275\273\006\205\275\033(\226\274%sO\2750\356\332<\264?\334\274n\224\254\2743r\354\274\341\307\236\273o\377R\275$\341\251:\371B\261\275\004\256r\275\267Z\'\275\2170=\274\305\350\205\275\227\t\267<\0238(\2758\321\221\275An\036\275\366\371>\273\241\244a<u\330\357<-+\364;H\177\252;\234\362\373\274\260\001\210=\373N\364\275f\032\374<h\216\276\275J\350\331\273%l\212=\013\2154\275\221\2117\274j~\364=\275\217\317\274\317k\243\274\321\331\267<\204:V=\332\336\217\274A\273\022=\326\244\235\275\251\022\010=_YH\275\343\\\332\273\023\215\235\274\2147\014=\315\0313\275pn\204\271S\252\201<\275&Q;g\264\226<\250\037\370<\300\177/\275=[I=\333`t\275\314u{<\274\252Z\275\243\007,\275\301\320\221\275\007H\317<\243V\003\273\'\372x<\347\003\024=+S\001>a\245\262\272\377\024\227\274\266|D\274\024\301,\273Z0$\275c\270\237\274\363\010\261\273R\353-\273y\200@\274D\360#\276\330\035\032\275\255!/\275\027\375k\274\340\354\224\275\313\016\231\274\324\307X\275?K\030;\300>\261\274\256\234\034\275\320b\245>\364\004\266\274\200%\251\275H\324\230\274\364u\305<\323aT=\230a\303<\006X\337;\271\254\315\275\261\0250>\323Q+\275\255\241j=>\270K\274\317a\255\274\201\205\244\274\030\255D=*\215\332\273\326%\210<o\341\265=\315\226\324;\344\337\r\275J\350Q\275\313\344f=\2011\347<\223\270\"\275r\323\024\275\356G%>\341qA\274\371\306\272\273\205\336G=*\367T\274x\216\016<t\357\032:\237*\226\274\317\275%=c\341\213\274\273\211\331\274\352\364{\274\310}\257<\242m\t=\3228&;t2\207\2742,\222\275\216\345]<\354\244/\273\262\205\234\274\213\235O\275\335\006#\275\007yO\275|\032\255\273M\241\307<2u\233\275l\236b;\250`-\275J\356\306<\371\240\216\27588\324<\250\307\203\271]G\207\275\313\255\t=0\253\026\275\246\215\220<\211\272\206>:P\360\274\373\300\324=Qgu\275\347\251\262\271\347W8\275v\021\223\275*4\213\275\216\341\250\274\353\244\204\275\373b:<\013\204L=\233\013\224\274C\374\006\275\255\245\226=dj\212=\344\364M\275\016;e<\020\240\304<\255\305\343\274\363y\377\274~U;<\316\313\352\274\010oZ=\220\035\021\275\t}\341\274\364|]<\313\204\353\274\262\n\244\274Q6\275\274\313\337\r\274\213\033\245<T^\035\274\333\227\224\274\374\033U=Y\313\233>BT\034\275/\263O\273j\264\302<]z%=\003\213\025\275Uz\214\274\270\346\231\273o\201\275\273\366\370T\273\214\352\252=\261?\t=\213K\245\274\352\215\240\274\374d\377\274WB\025<\341n\306<U\017\212\274\030\246S\273\376\245]\275Nv\342\274}~9\275\263\000^=&5\213<\030#\237\274\257\315\226\274Z\264S\275\205\020\252<\250\007\234>\254S\201=\336\332\227=\365\270\212\273\177Z\2209\371\331[\275\373v\320<\277\271\017\275r\377\345\274\345\177\030=|\313\004\275\002\206\207>\315\271\253<(\205\374\273\0073$<\035\377\233\275\031Qx<-\036&:H\325l\275\202[\244=9-\307<\030\0045=\200J\344<8x\310\274\254\214\304\274Zl\320\273\362\347\340;#q\265\274\230\234\034\275\337\340\321>\376\351\024\273\210\302\263\274$\321\275<\342\230w=\2414B\275\016\263&=\240\006\261=_C\345>z\024\232\273\257\306\r=\331\335\274;\306\335n\275\003\016\327;\340Q3=\3372\266\273\021\236\373\274\273\215\005\275\244\251\235\274\351rm\275E\314 <|i\250\275i\304_\274\016\3530\275\302\255\227<\373)=\273\315\0235\273*\344\212\274)\031\324\274\265|^\275\227O\236\274o\"\225\275\366j\323=\372\305d=_\372<\275F:M<\230\037\215>\241\007\334<W%\256<c\327\201\274\357h\257<\360\nN\275\324\264\247;\023\245\'\275\341\377\330\274\276wJ\274\017T\346\274\276\316\347\274\177\213\254=\315]\341\275\200E\037\275t\346\236\275\024\333\004\273_\2116\275F\350,\272+\375\240\275\315\\W;p\231\323;\352L\223\274i\024\216=\022\300\350\273\325\234L\275\3611\376\273\216\310*\275\224r\232\274 \302\302\275\224YY;\377\321B<\257r\215=A\277\256\275\241 \'\275\236\2548\271\033\351\323;\213\245\263\2755\326\004\274\314q\317<\335\001J\275\344\222\020\275\211\221\231\275\331\241~=\274\033\212\275\177\366\271\274\224\251\215\274\216\353\001\274U\353\262\275\213\211\246\274\027q\013\275\274K<\274\250\230\230\274iU\013=\347ov\274(T\340;\"\367\225=\316\251L\274Uc\357\274\211\227\023\275\361{\177\275\326cb>\240y\005\276\351\303B\275jBp\275*\211 =7\332\206\274\275w\023=\207\0365=\022\214\031=\241\327\370\274HJ\270\274>\334\344=;\327\"=n\'`=\275\330\313<\362\204R=.\372F:q\350\006\275\224\317M\275`h\006\276C\234\020\275\264\377\014:\n\\\030\274\266\312\264=\224M\204=\360\225\032=\242m\222\274\260L\026=)i\215\275H\276K<\230VV=\237\336=\275\251iR<\367Ky\275\027Ud\275\033\344\302\274\270\365Z\275\243W\272;k\371I\274\031\215\241\275l\343p=\345O\001\275LH\247\273\340m\320\272\353\212\222=+O\276\274v\215v=P\341P\275\'w\314\274\034!\376;\271rn=\'.\302\274KWe=\203+\233=T\375\216:\220\225\033\272\350\"\350\273\032\207>\274\212\027.\275u\216\032\275E\231c=v\306\220=\345\3134=\374\212\033=\350l\202\275R\245o\275IO\001\2756u\236=\211\262$\275\364D\251\274\375m8\275\263x\271\274\326\223\315\274\307w\301<0\\\251\275b:\014\275M]\324<\264\355\"\274\222\023\226\274\026\261\013\273\353\371\r=\330\353U\275e\205%=\262\363t\275\200 \203\274^\273\245\275|n\226=\3521\016\274\007\315\022\275\342wK\275&F\017\275\017<\266<\035aI=\270\rZ\274|8c<\032~8=\253\004\276<\317?\304=\324\226f\275u9\033=/\203\305\274\331G\256>!\260A=W6\024>\256\013g=\2164\260;#\205\013;\376BN\274,\324t\2758\023H\275\235u\220<d\363H\275U(?<q\322H;\234\232\362<q\232$=\220U#\275\273\333\214=N\302\274<Gmw\273\217\303\214=\'\"\320\274\312\026\344\275F=4<\377\352\201\274\032wY<\357\257\347\274*\256\233\273\305\021\302=\325\340\264\274\372U\222\275\216\213\206\274\257\033\035<<\337\210\274\325\326\206=\313M\216\273\202J\357;\203~\345\275ku <f\3439\275\251\216B=\004L\237\275Mo!\275\317\270i=\035\310W=\343\237\361\272:g\306=\222\332s\274\375C\311\275\332H\00094t`=\273*\351<\317\241\010\275P1z;{\247i=S\337\002\275\031\336\310\274\330\376\275=C\3127\275\314j\361\273\220\037\242< 6^=\034\035w\274\326M\003=o1\233\275e\312\004\275\024lN=\274\321\213<\243\3579\275_`\227=\327\251\207\275\221\366\241>`\005\367<l2+\275$\250\237=r\264j\274\240(\231\274if\204;\217\341\365<_M\003\274M\247\365<N\023\003\275g\243\332<\034V>\274B\306\017>7\303\254\274\322\331$\275b-\356\274\371\006B\275\273?\271=\333\317E\275rc\250\275S\230a\274\253Sw<\223\262\215\274At \274\025?\332\272W\215\247\274\t\"1=\036Q\202\275\222\263\014\274\300]\007\275mVb\275\007\033\032=f\260\302\274\267|\332\274\335;d\275^\2316\274=\255z\275\202m\205;\354\"\276<R\353\010\2755$h>\230\202\252\274Fn\232\274A\220\023=\271\342\010\275\343}\261=^\375\303<\242\2024=\225\227n\275\013\214E<F\215\002\274\314N\006\2754\367S=\027\275\243\274\211\227n\275\306C2\275\017\204M\275Q\0010\275\352\016x>b\270\202\274U\252\233\273\3659\314\275\200&b\275\255\352\331\274i-`\274\225\177\236\274\354\023/:\332\327\243=_\365\240\274>}\227\275\215F\362<H\035{<\257\177-\275I\023\352\274\245v\212\274S\001W\275\325\252\007<t\304\333\274\n\005/\275~O\301\273\300[\353<\276\226;\275<n\220\274\237\357}=\315\002\004\275\250\347\241=\346/j\274s\032\t\275CK\330\274\\\314\202\274\243M\030\275^\020\014\273\255\007\203=\234M\022\273#\253\217=\247\216\257<e\360\232\275\3055\224\274\301A\0369\243Q;;XT\025\275}\267\331\273\020\022X\275\024\001\025\274\363\327\237\274G\365\027\275K\230\033\275r&E\267c\272w\2755\333!;\265?s\274C\253\267<\326/g\2758O\335<\3349h\275\264\343\005\275\360\361q<\272,\261\275\327>\r\275\362b\035\274\203\217\216\275\212~Q\275\027\363\017=c\201k\275\317\201\364\274\242;\2649B(&;N\366L\275\370\343\204\275\315W\364<@Y\227\274\221X\222\275C\362\353\273\253\334K\275\245\027\203\275\355\326\335\274\217\227\031=\367\301q\274C5Y\274 b\335\274\330\201H<\241d \275\373x{=\303K\233\274\361w\340\274\321\212\323\274\007M\230<Z\301\244\274u\267\267\274\375}\032=\200\322\250\2755\200\204\275\033T|\275\024\241Y\275\274\302\316<\376\224\221=\300\230/:\263.L>\304C3\275}2\214\274\337\245}\275\202NA;\034\204\324\274\037\244)<wi\350\274uS(:hug\275J-,\275\247\260u\274\304\303\275\274A)\357\274<#\033;\341\0141\274X\273\225\273\004u\310;\346U\014\273a\224\226<iG\036<\272\210\206=\343n_\275\022K\204\275&\022)\275\247I\352\274\374\247\236\274x\007\244\274\334\345U=\221qI\275:\263\002\275\236\352\231\274\033\016E\275\037L\344\274/\230\246\274\234\220]\275\352\001\216< \023\231;3{\226\275=\306\214\274SK\267\2740g1<\256\356F\275|\377\223\275\"\371O\275\322A\000=\230\341W\275\343\232F;\026\232\021\274\263\007=\275\000\332\242\274vQ\017\275qe\215=\340e\253=6\366\025>\226\221X\275\267F\025\275|\031\277\271\277Y\375<\367\376q:\010\2500\275\024\314\317\274\352\204m\275\223\2737<>O\031\274X\325&\274\261\350\201=\315\3458\274]6\003\275\271\2202<\022I\363<\326\205\353\273\216[I\2732\232t=e\307\274\274\334A\223\275\034\364\234\275W\354\237=X*\273\274\370\346*\275K\257G\274\\\357\216\274\261`\001=k\026\027\275\227\373\267\274\231\325\350<\323&\261\275\254\260\315=i\356\342=t@\265=\224\266H\275 \220)\273\006ei<p- \275\334\023B\275\376nR\275l\2016<n\n\360<\343\016p\275\334\023\204\275\327\025\002=\033\017\215\275EG>\274\334\214<;5\024\254\275\032\332\234=\360IE\275O\377\035=\360\037\242\274J\312y\274\336<\021\275l\257\003\275\200\262\020=\323r\267\274\357\375\265\274\'\253\223\275Ge\305\274\242\277\005=\275\253\016;\370\242k\275\307dZ;+\311Q={\212\267<\211\325>\275rr\000\275\364\344\315\275\377\353\210\273\274~\265=v\211\241\275R\257\250\274n\004\365=\357\357\003\275;\257!\275\3738(=\343xR\274\200\363\203\275j\320s\275\303\344p=\303\263\342\274\331e\331;\000\240\333<]\0030=}X\272\273eu_\274\241`\263=\030\253\214:\333\327\212\273|\013\271\274\321%\034\276\205c\206\275\263I)\275\375 \035<Q\361\272=N\252\356\274\376\034\354\274W~\260=!\305\254;\227>\277\275\221g\261\275v\256`\275\340BI<\266r?\275^oo<\\=\350\274\212N\263\2754\230%\275\022\334,=\377\247\"\275\365\345\013\275w\023Q=\265?\032\275\351q]\275\345\273\024\2751f7\275\251\361\275\274t<\313<UK\206>x\217\240=/\366\272<y\017 \275HMR=\345Q\270\273\253.f\274\003\231\262\274Y\314\264\274e8[\275\326%\324<Y\037\375<\222\204\312\271\345\275|=2\336\020\274\363\020*=u\333Q\273\270\031*=\377` \275 +\373\274\234\001\200=(\212X\275\351\233\317\273j\307\223\275\336\232\021<\256\330K=\251\\\206>\356\230\201<;\037\265\275\3663V\2759\002+<\243\224\356= |\342=\254\236\375\275Tiz\272H\201|=J\372\202<\35495\275\361\310\000>\020%V=\264\221(=\224ki\275\224\014\010=m\350\342=\215i\216;\275\030\332\275dm\263=~T\274\274C3\357\273\001\024\t\275s\355\273<\250\223\241\273\245\337#\275\031\n\331\274 \374\264:{\374\021;\260\021}\274t\246\360<\352\001\215=\367\307>\275\370b\225<.\363\t\276\n\"]<\341\373\023\275\317F\026:\331\236Q=\245\312V\275\037\303p\275\347[\004\275\260\253\250\274\016\213\036=b\320\304\275\t.\337<\340\323\n\2752+\254\274\034jo\274\224\003\223\2721BM\275\355\262\202=7\335\247\275\003\213\365\274j\261\201<\251\323\027\2742\373\326\272\3748\323;\355\221\201<\343\261i\275\000\"\"<\rp\026\275\024\310\2438\352\004\227;U\021Q\275V\211\261\274\262\032\314\271,\177\271=v\026\317\275\207\366\242\274\357\275\317:m\215\263<\270$\027=\310\243=\2740\223\246\2744\332i\275-FZ9O_\321\2740\037\216:\252R9=\210\372\217<\336\266g;\257=C>\352B2=ZTN=\305\375\236<\332\322Y=\027F\301<\263B9>4\024\004\274PT\262\275\027\r\364;9S0\274\221?\212\274\213\311A\274\003\303\205<\254\221\000\273c\301\247\275\302 h;p\214\247=\224]\003>\275\201\274\275\303\260\364=\257t\332<\347\215\315\275a\313\n\274b\313\242\2741<4\274+\024\232<c\222!=\3620\034<\305\255\001>\234D\234;\"C\n;\004\275\022>C`\034\275\221\245L=q\006\355=\003\344\254\275\355@O=:\361\367\273\373\372\263=\217\312]=\300\274!\275o\356\267\274\353\325\312\273\316H\024\275\215\356\237\274\230\337:<@1-\275\360=\255\274\336\264\243\2747?\317=\341\356\333<\203K\237\275\206P\256\275\376i\215\275\356\254\322\272\330\335j=>q^\275\266\341\220=-\311\222=><\274<\320\004\004<i\210\322\273\260\354\325<Xg\351\275gYw\275Fc\363<\224\005\275<\335\204\036\275\'1t=\367\205\036>\2245\003>\344`\226\275\373\025\246\273\317\256Z\274\336\241\004\275a:\270\275~\037\213=G\360.<\361\037\021>\275\"\363\275\301\340\202=Wf\205=\3042\205=f\312\016>f\030\302;\'\035\217;\365T\241\274\000\204\005\274\320\252j=QQ\371\274\024]\204=\235C\264<&\302f\274\256\320P\275\004!\t=e\031\221=\016\375\221=R\200:=\353Mn=ss\340\275\307\326X\275\222\'\025=\303\301\252=\334T:\274\233\007%\274\232\271\247\274\323\344L\275M\032\273=\205\341`=3\001\222=\257\302\271=\370L\002\272\034\330n\275\021A>\275D\260\001<*%\202\274\303\337\260<\251\201*<nZ\230\275\263\3263=\030^\267<\'\215\266\275\"\367\262\273\333^\273\273\331sV=:\216\206\274J\265\267<S\367\037=o\363\241;\375\230f<\361&\302;\243\257\236=\337\327\267\274\321\236\214\275R\313H\275\'\275\200\274\321Z\276\275\344O\003\276t\345Y=o\226\233\275\221EZ\275\225\225P=\247\000\210\275y1\233\271N\260\374=\030\361[>\3349G\275\373+\203\275\306\301\273\275\270j\343<\374=\202\275Mf\224\274\364\234t=XS;\274&\374\265<\262e\350;\300\373\312\275\377\222\034\275s\253\353\274R\217\007\274\345\005\013=N\375j=\365\375r\274\2363\233=Q;\206=\255\"\024\275\232\2540\274\207q\360\275v_\000>][f;\304!4<\361#8=\204\035o\274\271\351`\274w\232\222\275\204\224\235\275T\265H\275&\2263\274\274\223\356=!WT\273\215]\245\275d0\352=\270\276\244\274\333\317\001\275\301\263%\2755>\230\275\n\222\311\274\213\354\316<\t|\017\275\1778\367<Cb\010=\201\241\014\275\223\257\374<\325:\261=-\373\251=C`\313\275r\260\323\274D\203;\275\242\334\330\273{1/\275\276\203\004\275\235\2437=\360*3=\323\010a\274\005\203\020=(i\212:\311\'\277\275\\\227\260;\233Ms\275p\367w\275\002RQ\275\253\276\203\274x\007\253\274\223\'\212<\205\360\'\274\265@\317\274\1770>\274O\265\213<\353\031\026\274hZd\275\030\'D>\rym;\254\343\215=X[!>\254$0>\351\206\326<\2221\230\273\344&n=Kj\376\274/\240O\275\211L\372=\013M\010\276l\302\346\274\206\363\'\275R%\360\274y\256k\275\233r\341=\331\005\r=\261.`>\312\200\226<\265o\274=\t\2206=c\204\010\275\211\263\304=\231\2025<3<\337\274\225\323\362:{\003\206=\227LU=\356\341-\275\253t:=\354\360G\275\354;\016\2758\030H\275\346q\345\273\267G\217\275&U\\<:u\234\275\315\201z<)\363J\275\017\252@\276\323!\236\274\273\024-\275o\252\031>uu\242=\r!\221<z\342\367<\222\374-<e\317\326\274@\006\230\275\355f\346\271g\272M\275\010\240K\275\317\017\221\275\321\304\227\274&\236\205\274\316\226\275<\345\177\006=\231DP\275\247\307\000=\320\362\246=rB\220\275\377\233\225\275\210\327\307=\337\205\370<K\030)\274\206\023I=s\205\304\274 \326\341\273\315.\274<\366\201N\275\nq\264\273z\241\223\274W:\246;5\177\235\274\254\346g=vS\361\272o\353\277\274^%c={\350\202;\214\2072=d\357\262;\310\262\225=0\257\0359\360g\203\275\204\242v=o\212;\275a&\245\2746\252\256=U\317\004\275\210q\234=\3173[\275;\336\210\275\255\206\341<>\007\222\274oO`\275q\323\270\274\322\320\355<\026\272\002<\217\2250\275\216PX=O\255\253<9Y@=\361{V<\302\025\350:\257J\316\275e1\305<\334\371\306<\246\256\305\274\371\267\010\273\036`\335\275\363\350\206\275k\226\226\274\024s^=\350\323\340\273\004\256\004\275\207\245\023=/\362k<s\374\030=\3607\234=I\254&\274c\357!\275\216\022K\275\257\002Y>-d\004>\026\206\205\275\377\2351\27549\342<$\234;>Qb\221=\264\262d<.\336\260\274(\227\344\273\353\354\002\276\245\261o>\307\233\033<T<n\274B\251\351\274\305\354f\273\013;\037\273\260\343k\275\302C\260\275\34406\275\350J\016\274\376\014\225\275\023\270\034=\205\021\214<)\370\351:*\235-\273.\323\021<t\354\263\275\334\007\274=\215C\264=\377\330\213\275\2255!<o\273\312=\322\364\r\275|\232\300;j\253K\273\250\342\216<n\014X;N\000\203=\000\020n\275"
      }
    }
  }
}
node {
  name: "readout_layer/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "readout_layer/kernel/Assign"
  op: "Assign"
  input: "readout_layer/kernel"
  input: "readout_layer/kernel/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "readout_layer/kernel/read"
  op: "Identity"
  input: "readout_layer/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "readout_layer/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        tensor_content: "c\013\370<\270\301G;M\242\227;\014\371\255<\355\"\347\272\030aK\274\333o\227\274\322xz<\367DP<\252\336*=\260\2554<\327[v:\335~t;\036\246\373\274\207\027\216\274\037\022\351\274k\013j\274\251W\204<\333\301\346<C\016G\273,\267Z=\363\256\202\274\337\263\303\273\226\357\314\274k\370\303\274\327\341\207\274\320j~<\033k\200\274\r\004\250:\t\313z<\342;&\275}\325\263\274\010\331\217\273\r\005\261\274>\343T<e#\004\274\265\352y<\367\2706\273\351\252\270<b\323\206<\260\366L\271\312\"\342\273S#\365\274\016\320m<\244Q\005\274Q\213\006\272\323\203\227<-\277\025\274\332\267\034=\331\201_<\317#{<\262\334-<E\204\273\273(\343\'\275O\014\010<\'\305Q\274w\256d=y\267\013;\367\025x\274P\354\216\274$\227\037\273\221\231\324\274\356\354\314\274:\025\333\270v\264\217\2743\007\000\275L~\024=\327:^\274+8\035\274N\016\253\274A\024\265\274m_\214<K\035\366<\314\342o\274\\#\310\274(z\226\2743\260\213\274O\3350=H\356\201\272oo$\274\007k\233<\005:%<>0\325;/\"\211\273\207;#<\265\215\314<\273O7<_\277\224\273\"T\223\274/F\304\273\2045/\273G\030\366\273uG\246;9yI\274\316\220\024\275\271(x<@X.\272s\342\310<\234+a8c\317s\274\037[+<8\200\337\273\177\240O\274\321_\203;\307k\376\274c\373[\274\326\371\304<1\237\000\275\021/\327\273\000\337\266\274\013\225\220<O\257\036\274\035V\240<-b%\274\001\346\216<D\307\345\272\030\264\226\274}\263\364;\361\277w\274\230F\305<\r\202c\270\'\r\005=\372\262\205<\332(\262\273w\033b<\002\355\2079\323\304\202<\037\260\026=\301\211\254\271\265\2374:\330T\370\274\370\251S\272\023\031\033<\245\222\362;T\035\263\273U\007V;\001\\\206<\003j\177\274nZ\223<v\247\330\273<|\311\273\360@\312<\030\0006=\t\216\304\273\334\213]<\324\377 =\006F\275\273j\314T<I \264\274\300\010L;\240&\243\272\023\364\217\274?N\374\274\n,\266<\230\231>\271\352\243\274\271s\312B<#=H\273\210\350\272\274\200\332m\273\377\\y<9\323S<\352\013:=\206z\005\274\206\212\026\275\010\364\016\275{\236\314\274\256?f\274\003\177\t\2742j\362\272\255o\023\274\262\202\224<\002\203\206\274`\214G\272F\213B\2741\323i\273\021\270\030=<\201\324;\331u\252;\334\207\016\274\226*\357\272\030\331f=\013c\305</\222\330;\346V\002\274\002C\311\274\001\255\013<\372\202\255\273\314\232\016;\030\207\232<gG=;\2039\030\274\247\226\215\274\351\322`\274\0366\325\274\235:\332\273\372\337\207\273\310\3160\274l[\352:\200\366\244;"
      }
    }
  }
}
node {
  name: "readout_layer/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "readout_layer/bias/Assign"
  op: "Assign"
  input: "readout_layer/bias"
  input: "readout_layer/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "readout_layer/bias/read"
  op: "Identity"
  input: "readout_layer/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "readout_layer/MatMul"
  op: "MatMul"
  input: "Reshape"
  input: "readout_layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "readout_layer/BiasAdd"
  op: "BiasAdd"
  input: "readout_layer/MatMul"
  input: "readout_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "final_dense"
  op: "Identity"
  input: "readout_layer/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "final_dense"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "softmax_tensor"
  op: "Softmax"
  input: "final_dense"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/labels_stop_gradient"
  op: "StopGradient"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "final_dense"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_1"
  op: "Shape"
  input: "final_dense"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_1"
  input: "softmax_cross_entropy_loss/xentropy/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice/begin"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice/begin"
  input: "softmax_cross_entropy_loss/xentropy/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat"
  op: "ConcatV2"
  input: "softmax_cross_entropy_loss/xentropy/concat/values_0"
  input: "softmax_cross_entropy_loss/xentropy/Slice"
  input: "softmax_cross_entropy_loss/xentropy/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape"
  op: "Reshape"
  input: "final_dense"
  input: "softmax_cross_entropy_loss/xentropy/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/labels_stop_gradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_1"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_2"
  input: "softmax_cross_entropy_loss/xentropy/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1/begin"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1/begin"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1"
  op: "ConcatV2"
  input: "softmax_cross_entropy_loss/xentropy/concat_1/values_0"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1"
  input: "softmax_cross_entropy_loss/xentropy/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_1"
  op: "Reshape"
  input: "softmax_cross_entropy_loss/labels_stop_gradient"
  input: "softmax_cross_entropy_loss/xentropy/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "softmax_cross_entropy_loss/xentropy/Reshape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_2"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank"
  input: "softmax_cross_entropy_loss/xentropy/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2/size"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2/begin"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  op: "Reshape"
  input: "softmax_cross_entropy_loss/xentropy"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "softmax_cross_entropy_loss/ToFloat_1/x"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  input: "softmax_cross_entropy_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Sum"
  op: "Sum"
  input: "softmax_cross_entropy_loss/Mul"
  input: "softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Equal/y"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Equal"
  op: "Equal"
  input: "softmax_cross_entropy_loss/ToFloat_1/x"
  input: "softmax_cross_entropy_loss/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/zeros_like"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like/Shape"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like"
  op: "Fill"
  input: "softmax_cross_entropy_loss/num_present/ones_like/Shape"
  input: "softmax_cross_entropy_loss/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Select"
  op: "Select"
  input: "softmax_cross_entropy_loss/num_present/Equal"
  input: "softmax_cross_entropy_loss/num_present/zeros_like"
  input: "softmax_cross_entropy_loss/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  input: "^softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  input: "^softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights"
  op: "Mul"
  input: "softmax_cross_entropy_loss/num_present/Select"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present"
  op: "Sum"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights"
  input: "softmax_cross_entropy_loss/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Const_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Sum_1"
  op: "Sum"
  input: "softmax_cross_entropy_loss/Sum"
  input: "softmax_cross_entropy_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Greater/y"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Greater"
  op: "Greater"
  input: "softmax_cross_entropy_loss/num_present"
  input: "softmax_cross_entropy_loss/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Equal/y"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Equal"
  op: "Equal"
  input: "softmax_cross_entropy_loss/num_present"
  input: "softmax_cross_entropy_loss/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/ones_like/Shape"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/ones_like/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/ones_like"
  op: "Fill"
  input: "softmax_cross_entropy_loss/ones_like/Shape"
  input: "softmax_cross_entropy_loss/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Select"
  op: "Select"
  input: "softmax_cross_entropy_loss/Equal"
  input: "softmax_cross_entropy_loss/ones_like"
  input: "softmax_cross_entropy_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/div"
  op: "RealDiv"
  input: "softmax_cross_entropy_loss/Sum_1"
  input: "softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/zeros_like"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/value"
  op: "Select"
  input: "softmax_cross_entropy_loss/Greater"
  input: "softmax_cross_entropy_loss/div"
  input: "softmax_cross_entropy_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cross_entropy"
  op: "Identity"
  input: "softmax_cross_entropy_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cross_entropy_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "cross_entropy_1"
      }
    }
  }
}
node {
  name: "cross_entropy_1"
  op: "ScalarSummary"
  input: "cross_entropy_1/tags"
  input: "softmax_cross_entropy_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss"
  op: "L2Loss"
  input: "conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_1"
  op: "L2Loss"
  input: "conv2d_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_2"
  op: "L2Loss"
  input: "conv2d_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_3"
  op: "L2Loss"
  input: "conv2d_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_4"
  op: "L2Loss"
  input: "conv2d_4/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_5"
  op: "L2Loss"
  input: "conv2d_5/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_6"
  op: "L2Loss"
  input: "conv2d_6/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_7"
  op: "L2Loss"
  input: "conv2d_7/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_8"
  op: "L2Loss"
  input: "conv2d_8/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_9"
  op: "L2Loss"
  input: "conv2d_9/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_10"
  op: "L2Loss"
  input: "conv2d_10/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_11"
  op: "L2Loss"
  input: "conv2d_11/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_12"
  op: "L2Loss"
  input: "conv2d_12/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_13"
  op: "L2Loss"
  input: "conv2d_13/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_14"
  op: "L2Loss"
  input: "conv2d_14/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_15"
  op: "L2Loss"
  input: "conv2d_15/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_16"
  op: "L2Loss"
  input: "conv2d_16/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_17"
  op: "L2Loss"
  input: "conv2d_17/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_18"
  op: "L2Loss"
  input: "conv2d_18/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_19"
  op: "L2Loss"
  input: "conv2d_19/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_20"
  op: "L2Loss"
  input: "conv2d_20/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_21"
  op: "L2Loss"
  input: "readout_layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "L2Loss_22"
  op: "L2Loss"
  input: "readout_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "AddN"
  op: "AddN"
  input: "L2Loss"
  input: "L2Loss_1"
  input: "L2Loss_2"
  input: "L2Loss_3"
  input: "L2Loss_4"
  input: "L2Loss_5"
  input: "L2Loss_6"
  input: "L2Loss_7"
  input: "L2Loss_8"
  input: "L2Loss_9"
  input: "L2Loss_10"
  input: "L2Loss_11"
  input: "L2Loss_12"
  input: "L2Loss_13"
  input: "L2Loss_14"
  input: "L2Loss_15"
  input: "L2Loss_16"
  input: "L2Loss_17"
  input: "L2Loss_18"
  input: "L2Loss_19"
  input: "L2Loss_20"
  input: "L2Loss_21"
  input: "L2Loss_22"
  attr {
    key: "N"
    value {
      i: 23
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "mul/x"
  input: "AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "l2_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "l2_loss"
      }
    }
  }
}
node {
  name: "l2_loss"
  op: "ScalarSummary"
  input: "l2_loss/tags"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_8"
  op: "Add"
  input: "softmax_cross_entropy_loss/value"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 390
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2343
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 11718
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-06
      }
    }
  }
}
node {
  name: "PiecewiseConstant/LessEqual"
  op: "LessEqual"
  input: "Cast"
  input: "PiecewiseConstant/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Greater"
  op: "Greater"
  input: "Cast"
  input: "PiecewiseConstant/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Greater_1"
  op: "Greater"
  input: "Cast"
  input: "PiecewiseConstant/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/LessEqual_1"
  op: "LessEqual"
  input: "Cast"
  input: "PiecewiseConstant/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/and"
  op: "LogicalAnd"
  input: "PiecewiseConstant/Greater_1"
  input: "PiecewiseConstant/LessEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/Greater_2"
  op: "Greater"
  input: "Cast"
  input: "PiecewiseConstant/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/LessEqual_2"
  op: "LessEqual"
  input: "Cast"
  input: "PiecewiseConstant/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/and_1"
  op: "LogicalAnd"
  input: "PiecewiseConstant/Greater_2"
  input: "PiecewiseConstant/LessEqual_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/preds_c"
  op: "Pack"
  input: "PiecewiseConstant/LessEqual"
  input: "PiecewiseConstant/Greater"
  input: "PiecewiseConstant/and"
  input: "PiecewiseConstant/and_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "PiecewiseConstant/case/Cast"
  op: "Cast"
  input: "PiecewiseConstant/case/preds_c"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/num_true_conds"
  op: "Sum"
  input: "PiecewiseConstant/case/Cast"
  input: "PiecewiseConstant/case/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "PiecewiseConstant/case/n_true_conds"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/LessEqual"
  op: "LessEqual"
  input: "PiecewiseConstant/case/num_true_conds"
  input: "PiecewiseConstant/case/n_true_conds"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Input error: exclusive=True: more than 1 conditions (PiecewiseConstant/LessEqual:0, PiecewiseConstant/Greater:0, PiecewiseConstant/and:0, PiecewiseConstant/and_1:0) evaluated as True:"
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "PiecewiseConstant/case/LessEqual"
  input: "PiecewiseConstant/case/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "PiecewiseConstant/case/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "PiecewiseConstant/case/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "PiecewiseConstant/case/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/switch_t"
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "PiecewiseConstant/case/Assert/AssertGuard/switch_t"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/case/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Input error: exclusive=True: more than 1 conditions (PiecewiseConstant/LessEqual:0, PiecewiseConstant/Greater:0, PiecewiseConstant/and:0, PiecewiseConstant/and_1:0) evaluated as True:"
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "PiecewiseConstant/case/Assert/AssertGuard/Assert/Switch"
  input: "PiecewiseConstant/case/Assert/AssertGuard/Assert/data_0"
  input: "PiecewiseConstant/case/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 4
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "PiecewiseConstant/case/LessEqual"
  input: "PiecewiseConstant/case/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/case/LessEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "PiecewiseConstant/case/preds_c"
  input: "PiecewiseConstant/case/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/case/preds_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "PiecewiseConstant/case/Assert/AssertGuard/switch_f"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/case/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "PiecewiseConstant/case/Assert/AssertGuard/control_dependency_1"
  input: "PiecewiseConstant/case/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/Switch"
  op: "Switch"
  input: "PiecewiseConstant/LessEqual"
  input: "PiecewiseConstant/LessEqual"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/switch_t"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/switch_f"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/pred_id"
  op: "Identity"
  input: "PiecewiseConstant/LessEqual"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/Switch_1"
  op: "Switch"
  input: "PiecewiseConstant/Const_3"
  input: "PiecewiseConstant/case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/Switch"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/Switch/Switch"
  input: "PiecewiseConstant/case/cond/cond/Switch/Switch"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/Switch/Switch"
  op: "Switch"
  input: "PiecewiseConstant/Greater"
  input: "PiecewiseConstant/case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Greater"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/switch_t"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/switch_f"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/pred_id"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/Switch/Switch"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/Switch_1"
  op: "Switch"
  input: "PiecewiseConstant/Const_6"
  input: "PiecewiseConstant/case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/Switch_2"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/Switch_1"
  input: "PiecewiseConstant/case/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/Switch"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch/Switch_1"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch/Switch_1"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/Switch/Switch"
  op: "Switch"
  input: "PiecewiseConstant/and"
  input: "PiecewiseConstant/case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/and"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/Switch/Switch_1"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch/Switch"
  input: "PiecewiseConstant/case/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/and"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/switch_t"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/switch_f"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/pred_id"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch/Switch_1"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/Switch_1"
  op: "Switch"
  input: "PiecewiseConstant/Const_4"
  input: "PiecewiseConstant/case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/Switch_2"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch_1"
  input: "PiecewiseConstant/case/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/Switch_3"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch_2"
  input: "PiecewiseConstant/case/cond/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch/Switch_2"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch/Switch_2"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch/Switch"
  op: "Switch"
  input: "PiecewiseConstant/and_1"
  input: "PiecewiseConstant/case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/and_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch/Switch_1"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch/Switch"
  input: "PiecewiseConstant/case/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/and_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch/Switch_2"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch/Switch_1"
  input: "PiecewiseConstant/case/cond/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/and_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/switch_t"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/switch_f"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/pred_id"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch/Switch_2"
  input: "^PiecewiseConstant/case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_1"
  op: "Switch"
  input: "PiecewiseConstant/Const_5"
  input: "PiecewiseConstant/case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_2"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_1"
  input: "PiecewiseConstant/case/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_3"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_2"
  input: "PiecewiseConstant/case/cond/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_4"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_3"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_5"
  op: "Switch"
  input: "PiecewiseConstant/Const_3"
  input: "PiecewiseConstant/case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_6"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_5"
  input: "PiecewiseConstant/case/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_7"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_6"
  input: "PiecewiseConstant/case/cond/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_8"
  op: "Switch"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_7"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@PiecewiseConstant/Const_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/cond/Merge"
  op: "Merge"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_8"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Switch_4:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/cond/Merge"
  op: "Merge"
  input: "PiecewiseConstant/case/cond/cond/cond/cond/Merge"
  input: "PiecewiseConstant/case/cond/cond/cond/Switch_3:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/cond/Merge"
  op: "Merge"
  input: "PiecewiseConstant/case/cond/cond/cond/Merge"
  input: "PiecewiseConstant/case/cond/cond/Switch_2:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "PiecewiseConstant/case/cond/Merge"
  op: "Merge"
  input: "PiecewiseConstant/case/cond/cond/Merge"
  input: "PiecewiseConstant/case/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Identity"
  input: "PiecewiseConstant/case/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "learning_rate_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate_1"
      }
    }
  }
}
node {
  name: "learning_rate_1"
  op: "ScalarSummary"
  input: "learning_rate_1/tags"
  input: "PiecewiseConstant/case/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_8_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Fill"
}
node {
  name: "gradients/add_8_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/add_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_8_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/add_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Select"
  op: "Select"
  input: "softmax_cross_entropy_loss/Greater"
  input: "gradients/add_8_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/value_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Select_1"
  op: "Select"
  input: "softmax_cross_entropy_loss/Greater"
  input: "gradients/softmax_cross_entropy_loss/value_grad/zeros_like"
  input: "gradients/add_8_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/Select"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/Select_1"
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Select"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/value_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Select_1"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/value_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul"
  op: "Mul"
  input: "gradients/add_8_grad/tuple/control_dependency_1"
  input: "AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/add_8_grad/tuple/control_dependency_1"
  input: "mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_grad/Mul"
  input: "^gradients/mul_grad/Mul_1"
}
node {
  name: "gradients/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_grad/Mul"
  input: "^gradients/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_grad/Mul_1"
  input: "^gradients/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Shape"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/Sum"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/div_grad/RealDiv"
  input: "gradients/softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Sum"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/Neg"
  op: "Neg"
  input: "softmax_cross_entropy_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Neg"
  input: "softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/softmax_cross_entropy_loss/div_grad/RealDiv_1"
  input: "softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/mul"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/div_grad/mul"
  input: "gradients/softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Sum_1"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/div_grad/Reshape"
  input: "^gradients/softmax_cross_entropy_loss/div_grad/Reshape_1"
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Reshape"
  input: "^gradients/softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/div_grad/Reshape_1"
  input: "^gradients/softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_8"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_9"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_10"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_11"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_12"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_13"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_14"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_15"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_16"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_17"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_18"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_19"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_20"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_21"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_grad/tuple/control_dependency_22"
  op: "Identity"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "^gradients/AddN_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/div_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_grad/mul"
  op: "Mul"
  input: "conv2d/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_1_grad/mul"
  op: "Mul"
  input: "conv2d_1/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_2_grad/mul"
  op: "Mul"
  input: "conv2d_2/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_3_grad/mul"
  op: "Mul"
  input: "conv2d_3/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_4_grad/mul"
  op: "Mul"
  input: "conv2d_4/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_5_grad/mul"
  op: "Mul"
  input: "conv2d_5/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_6_grad/mul"
  op: "Mul"
  input: "conv2d_6/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_7_grad/mul"
  op: "Mul"
  input: "conv2d_7/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_8_grad/mul"
  op: "Mul"
  input: "conv2d_8/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_9_grad/mul"
  op: "Mul"
  input: "conv2d_9/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_10_grad/mul"
  op: "Mul"
  input: "conv2d_10/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_11_grad/mul"
  op: "Mul"
  input: "conv2d_11/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_12_grad/mul"
  op: "Mul"
  input: "conv2d_12/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_13_grad/mul"
  op: "Mul"
  input: "conv2d_13/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_14_grad/mul"
  op: "Mul"
  input: "conv2d_14/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_15_grad/mul"
  op: "Mul"
  input: "conv2d_15/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_16_grad/mul"
  op: "Mul"
  input: "conv2d_16/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_17_grad/mul"
  op: "Mul"
  input: "conv2d_17/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_18_grad/mul"
  op: "Mul"
  input: "conv2d_18/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_19_grad/mul"
  op: "Mul"
  input: "conv2d_19/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_20_grad/mul"
  op: "Mul"
  input: "conv2d_20/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_21_grad/mul"
  op: "Mul"
  input: "readout_layer/kernel/read"
  input: "gradients/AddN_grad/tuple/control_dependency_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/L2Loss_22_grad/mul"
  op: "Mul"
  input: "readout_layer/bias/read"
  input: "gradients/AddN_grad/tuple/control_dependency_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile"
  input: "softmax_cross_entropy_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "softmax_cross_entropy_loss/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims"
  input: "softmax_cross_entropy_loss/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/LogSoftmax"
  op: "LogSoftmax"
  input: "softmax_cross_entropy_loss/xentropy/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/Neg"
  op: "Neg"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/LogSoftmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/mul"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1"
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Shape"
  op: "Shape"
  input: "final_dense"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/readout_layer/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/readout_layer/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/readout_layer/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
}
node {
  name: "gradients/readout_layer/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
  input: "^gradients/readout_layer/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/readout_layer/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/readout_layer/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/readout_layer/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/readout_layer/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/readout_layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/readout_layer/BiasAdd_grad/tuple/control_dependency"
  input: "readout_layer/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/readout_layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Reshape"
  input: "gradients/readout_layer/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/readout_layer/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/readout_layer/MatMul_grad/MatMul"
  input: "^gradients/readout_layer/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/readout_layer/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/readout_layer/MatMul_grad/MatMul"
  input: "^gradients/readout_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/readout_layer/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/readout_layer/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/readout_layer/MatMul_grad/MatMul_1"
  input: "^gradients/readout_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/readout_layer/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/L2Loss_22_grad/mul"
  input: "gradients/readout_layer/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_22_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Reshape_grad/Shape"
  op: "Shape"
  input: "final_reduce_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/readout_layer/MatMul_grad/tuple/control_dependency"
  input: "gradients/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/L2Loss_21_grad/mul"
  input: "gradients/readout_layer/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_21_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "Relu_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/add"
  op: "Add"
  input: "Mean/reduction_indices"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod"
  op: "FloorMod"
  input: "gradients/Mean_grad/add"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range"
  op: "Range"
  input: "gradients/Mean_grad/range/start"
  input: "gradients/Mean_grad/Size"
  input: "gradients/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range"
  input: "gradients/Mean_grad/mod"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Reshape_grad/Reshape"
  input: "gradients/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Shape"
  input: "Relu_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3"
  op: "Shape"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_16_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/Mean_grad/truediv"
  input: "Relu_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "batch_normalization_16/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "batch_normalization_16/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "batch_normalization_16/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "batch_normalization_16/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_16_grad/ReluGrad"
  input: "block_layer4"
  input: "batch_normalization_16/gamma/read"
  input: "batch_normalization_16/FusedBatchNorm:3"
  input: "batch_normalization_16/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_16/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_7_grad/Shape"
  op: "Shape"
  input: "conv2d_20/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_7_grad/Shape_1"
  op: "Shape"
  input: "add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_7_grad/Shape"
  input: "gradients/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_7_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_7_grad/Sum"
  input: "gradients/add_7_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_7_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_7_grad/Sum_1"
  input: "gradients/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_7_grad/Reshape"
  input: "^gradients/add_7_grad/Reshape_1"
}
node {
  name: "gradients/add_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_7_grad/Reshape"
  input: "^gradients/add_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_7_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_7_grad/Reshape_1"
  input: "^gradients/add_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_7_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_20/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_15"
  input: "conv2d_20/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_20/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_20/Conv2D_grad/ShapeN"
  input: "conv2d_20/kernel/read"
  input: "gradients/add_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_20/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_15"
  input: "gradients/conv2d_20/Conv2D_grad/ShapeN:1"
  input: "gradients/add_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_20/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_20/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_20/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_20/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_20/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_20/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_20/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_20/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_20/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_20/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_20/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_15_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_20/Conv2D_grad/tuple/control_dependency"
  input: "Relu_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/L2Loss_20_grad/mul"
  input: "gradients/conv2d_20/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_20_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "batch_normalization_15/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_6"
  op: "ZerosLike"
  input: "batch_normalization_15/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_7"
  op: "ZerosLike"
  input: "batch_normalization_15/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_8"
  op: "ZerosLike"
  input: "batch_normalization_15/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_15_grad/ReluGrad"
  input: "conv2d_19/Conv2D"
  input: "batch_normalization_15/gamma/read"
  input: "batch_normalization_15/FusedBatchNorm:3"
  input: "batch_normalization_15/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_15/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_19/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_14"
  input: "conv2d_19/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_19/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_19/Conv2D_grad/ShapeN"
  input: "conv2d_19/kernel/read"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_19/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_14"
  input: "gradients/conv2d_19/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_19/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_19/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_19/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_19/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_19/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_19/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_19/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_19/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_19/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_19/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_19/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_14_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_19/Conv2D_grad/tuple/control_dependency"
  input: "Relu_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/L2Loss_19_grad/mul"
  input: "gradients/conv2d_19/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_19_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_9"
  op: "ZerosLike"
  input: "batch_normalization_14/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_10"
  op: "ZerosLike"
  input: "batch_normalization_14/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_11"
  op: "ZerosLike"
  input: "batch_normalization_14/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_12"
  op: "ZerosLike"
  input: "batch_normalization_14/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_14_grad/ReluGrad"
  input: "add_6"
  input: "batch_normalization_14/gamma/read"
  input: "batch_normalization_14/FusedBatchNorm:3"
  input: "batch_normalization_14/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/add_7_grad/tuple/control_dependency_1"
  input: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_7_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_6_grad/Shape"
  op: "Shape"
  input: "conv2d_18/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_6_grad/Shape_1"
  op: "Shape"
  input: "conv2d_16/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_6_grad/Shape"
  input: "gradients/add_6_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_6_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_4"
  input: "gradients/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_6_grad/Sum"
  input: "gradients/add_6_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_6_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_4"
  input: "gradients/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_6_grad/Sum_1"
  input: "gradients/add_6_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_6_grad/Reshape"
  input: "^gradients/add_6_grad/Reshape_1"
}
node {
  name: "gradients/add_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_6_grad/Reshape"
  input: "^gradients/add_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_6_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_6_grad/Reshape_1"
  input: "^gradients/add_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_6_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_18/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_13"
  input: "conv2d_18/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_18/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_18/Conv2D_grad/ShapeN"
  input: "conv2d_18/kernel/read"
  input: "gradients/add_6_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_18/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_13"
  input: "gradients/conv2d_18/Conv2D_grad/ShapeN:1"
  input: "gradients/add_6_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_18/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_18/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_18/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_18/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_18/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_18/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_18/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_18/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_18/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_18/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_18/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_16/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Pad_4"
  input: "conv2d_16/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_16/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_16/Conv2D_grad/ShapeN"
  input: "conv2d_16/kernel/read"
  input: "gradients/add_6_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_16/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Pad_4"
  input: "gradients/conv2d_16/Conv2D_grad/ShapeN:1"
  input: "gradients/add_6_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_16/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_16/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_16/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_16/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_16/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_16/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_16/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_16/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_16/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_16/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_16/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_13_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_18/Conv2D_grad/tuple/control_dependency"
  input: "Relu_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/L2Loss_18_grad/mul"
  input: "gradients/conv2d_18/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_18_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_4_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Pad_4_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Pad_4_grad/stack"
  op: "Pack"
  input: "gradients/Pad_4_grad/Rank"
  input: "gradients/Pad_4_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Pad_4_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Pad_4_grad/Slice"
  op: "Slice"
  input: "Pad_4/paddings"
  input: "gradients/Pad_4_grad/Slice/begin"
  input: "gradients/Pad_4_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_4_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Pad_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/Pad_4_grad/Slice"
  input: "gradients/Pad_4_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_4_grad/Shape"
  op: "Shape"
  input: "Relu_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Pad_4_grad/Slice_1"
  op: "Slice"
  input: "gradients/conv2d_16/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Pad_4_grad/Reshape"
  input: "gradients/Pad_4_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/L2Loss_16_grad/mul"
  input: "gradients/conv2d_16/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_16_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_13"
  op: "ZerosLike"
  input: "batch_normalization_13/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_14"
  op: "ZerosLike"
  input: "batch_normalization_13/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_15"
  op: "ZerosLike"
  input: "batch_normalization_13/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_16"
  op: "ZerosLike"
  input: "batch_normalization_13/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_13_grad/ReluGrad"
  input: "conv2d_17/Conv2D"
  input: "batch_normalization_13/gamma/read"
  input: "batch_normalization_13/FusedBatchNorm:3"
  input: "batch_normalization_13/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
          dim {
            size: 7
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_17/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Pad_5"
  input: "conv2d_17/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_17/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_17/Conv2D_grad/ShapeN"
  input: "conv2d_17/kernel/read"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_17/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Pad_5"
  input: "gradients/conv2d_17/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_17/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_17/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_17/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_17/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_17/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_17/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_17/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_17/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_17/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_17/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_17/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_5_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Pad_5_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Pad_5_grad/stack"
  op: "Pack"
  input: "gradients/Pad_5_grad/Rank"
  input: "gradients/Pad_5_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Pad_5_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Pad_5_grad/Slice"
  op: "Slice"
  input: "Pad_5/paddings"
  input: "gradients/Pad_5_grad/Slice/begin"
  input: "gradients/Pad_5_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_5_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Pad_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/Pad_5_grad/Slice"
  input: "gradients/Pad_5_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_5_grad/Shape"
  op: "Shape"
  input: "Relu_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Pad_5_grad/Slice_1"
  op: "Slice"
  input: "gradients/conv2d_17/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Pad_5_grad/Reshape"
  input: "gradients/Pad_5_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/L2Loss_17_grad/mul"
  input: "gradients/conv2d_17/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_17_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/Pad_4_grad/Slice_1"
  input: "gradients/Pad_5_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Pad_4_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_12_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_8"
  input: "Relu_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_17"
  op: "ZerosLike"
  input: "batch_normalization_12/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_18"
  op: "ZerosLike"
  input: "batch_normalization_12/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_19"
  op: "ZerosLike"
  input: "batch_normalization_12/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_20"
  op: "ZerosLike"
  input: "batch_normalization_12/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_12_grad/ReluGrad"
  input: "block_layer3"
  input: "batch_normalization_12/gamma/read"
  input: "batch_normalization_12/FusedBatchNorm:3"
  input: "batch_normalization_12/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_5_grad/Shape"
  op: "Shape"
  input: "conv2d_15/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_5_grad/Shape_1"
  op: "Shape"
  input: "add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_5_grad/Shape"
  input: "gradients/add_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_5_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_5_grad/Sum"
  input: "gradients/add_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_5_grad/Sum_1"
  input: "gradients/add_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_5_grad/Reshape"
  input: "^gradients/add_5_grad/Reshape_1"
}
node {
  name: "gradients/add_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_5_grad/Reshape"
  input: "^gradients/add_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_5_grad/Reshape_1"
  input: "^gradients/add_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_15/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_11"
  input: "conv2d_15/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_15/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_15/Conv2D_grad/ShapeN"
  input: "conv2d_15/kernel/read"
  input: "gradients/add_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_15/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_11"
  input: "gradients/conv2d_15/Conv2D_grad/ShapeN:1"
  input: "gradients/add_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_15/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_15/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_15/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_15/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_15/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_15/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_15/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_15/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_15/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_15/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_15/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_11_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_15/Conv2D_grad/tuple/control_dependency"
  input: "Relu_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/L2Loss_15_grad/mul"
  input: "gradients/conv2d_15/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_15_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_21"
  op: "ZerosLike"
  input: "batch_normalization_11/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_22"
  op: "ZerosLike"
  input: "batch_normalization_11/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_23"
  op: "ZerosLike"
  input: "batch_normalization_11/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_24"
  op: "ZerosLike"
  input: "batch_normalization_11/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_11_grad/ReluGrad"
  input: "conv2d_14/Conv2D"
  input: "batch_normalization_11/gamma/read"
  input: "batch_normalization_11/FusedBatchNorm:3"
  input: "batch_normalization_11/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_14/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_10"
  input: "conv2d_14/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_14/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_14/Conv2D_grad/ShapeN"
  input: "conv2d_14/kernel/read"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_14/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_10"
  input: "gradients/conv2d_14/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_14/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_14/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_14/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_14/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_14/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_14/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_14/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_14/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_14/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_14/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_14/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_10_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_14/Conv2D_grad/tuple/control_dependency"
  input: "Relu_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/L2Loss_14_grad/mul"
  input: "gradients/conv2d_14/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_14_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_25"
  op: "ZerosLike"
  input: "batch_normalization_10/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_26"
  op: "ZerosLike"
  input: "batch_normalization_10/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_27"
  op: "ZerosLike"
  input: "batch_normalization_10/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_28"
  op: "ZerosLike"
  input: "batch_normalization_10/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_10_grad/ReluGrad"
  input: "add_4"
  input: "batch_normalization_10/gamma/read"
  input: "batch_normalization_10/FusedBatchNorm:3"
  input: "batch_normalization_10/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/add_5_grad/tuple/control_dependency_1"
  input: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_4_grad/Shape"
  op: "Shape"
  input: "conv2d_13/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_4_grad/Shape_1"
  op: "Shape"
  input: "conv2d_11/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_4_grad/Shape"
  input: "gradients/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_4_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_11"
  input: "gradients/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_4_grad/Sum"
  input: "gradients/add_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_4_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_11"
  input: "gradients/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_4_grad/Sum_1"
  input: "gradients/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_4_grad/Reshape"
  input: "^gradients/add_4_grad/Reshape_1"
}
node {
  name: "gradients/add_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_4_grad/Reshape"
  input: "^gradients/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_4_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_4_grad/Reshape_1"
  input: "^gradients/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_13/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_9"
  input: "conv2d_13/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_13/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_13/Conv2D_grad/ShapeN"
  input: "conv2d_13/kernel/read"
  input: "gradients/add_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_13/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_9"
  input: "gradients/conv2d_13/Conv2D_grad/ShapeN:1"
  input: "gradients/add_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_13/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_13/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_13/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_13/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_13/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_13/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_13/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_13/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_13/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_13/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_13/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_11/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Pad_2"
  input: "conv2d_11/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_11/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_11/Conv2D_grad/ShapeN"
  input: "conv2d_11/kernel/read"
  input: "gradients/add_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_11/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Pad_2"
  input: "gradients/conv2d_11/Conv2D_grad/ShapeN:1"
  input: "gradients/add_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_11/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_11/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_11/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_11/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_11/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_11/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_11/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_11/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_11/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_11/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_11/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_9_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_13/Conv2D_grad/tuple/control_dependency"
  input: "Relu_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/L2Loss_13_grad/mul"
  input: "gradients/conv2d_13/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_13_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_2_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Pad_2_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Pad_2_grad/stack"
  op: "Pack"
  input: "gradients/Pad_2_grad/Rank"
  input: "gradients/Pad_2_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Pad_2_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Pad_2_grad/Slice"
  op: "Slice"
  input: "Pad_2/paddings"
  input: "gradients/Pad_2_grad/Slice/begin"
  input: "gradients/Pad_2_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Pad_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/Pad_2_grad/Slice"
  input: "gradients/Pad_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_2_grad/Shape"
  op: "Shape"
  input: "Relu_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Pad_2_grad/Slice_1"
  op: "Slice"
  input: "gradients/conv2d_11/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Pad_2_grad/Reshape"
  input: "gradients/Pad_2_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/L2Loss_11_grad/mul"
  input: "gradients/conv2d_11/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_11_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_29"
  op: "ZerosLike"
  input: "batch_normalization_9/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_30"
  op: "ZerosLike"
  input: "batch_normalization_9/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_31"
  op: "ZerosLike"
  input: "batch_normalization_9/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_32"
  op: "ZerosLike"
  input: "batch_normalization_9/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_9_grad/ReluGrad"
  input: "conv2d_12/Conv2D"
  input: "batch_normalization_9/gamma/read"
  input: "batch_normalization_9/FusedBatchNorm:3"
  input: "batch_normalization_9/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 14
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_12/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Pad_3"
  input: "conv2d_12/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_12/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_12/Conv2D_grad/ShapeN"
  input: "conv2d_12/kernel/read"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_12/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Pad_3"
  input: "gradients/conv2d_12/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_12/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_12/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_12/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_12/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_12/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_12/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_12/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_12/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_12/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_12/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_12/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_3_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Pad_3_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Pad_3_grad/stack"
  op: "Pack"
  input: "gradients/Pad_3_grad/Rank"
  input: "gradients/Pad_3_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Pad_3_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Pad_3_grad/Slice"
  op: "Slice"
  input: "Pad_3/paddings"
  input: "gradients/Pad_3_grad/Slice/begin"
  input: "gradients/Pad_3_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Pad_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/Pad_3_grad/Slice"
  input: "gradients/Pad_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_3_grad/Shape"
  op: "Shape"
  input: "Relu_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Pad_3_grad/Slice_1"
  op: "Slice"
  input: "gradients/conv2d_12/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Pad_3_grad/Reshape"
  input: "gradients/Pad_3_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/L2Loss_12_grad/mul"
  input: "gradients/conv2d_12/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_12_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/Pad_2_grad/Slice_1"
  input: "gradients/Pad_3_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Pad_2_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_8_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_15"
  input: "Relu_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_33"
  op: "ZerosLike"
  input: "batch_normalization_8/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_34"
  op: "ZerosLike"
  input: "batch_normalization_8/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_35"
  op: "ZerosLike"
  input: "batch_normalization_8/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_36"
  op: "ZerosLike"
  input: "batch_normalization_8/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_8_grad/ReluGrad"
  input: "block_layer2"
  input: "batch_normalization_8/gamma/read"
  input: "batch_normalization_8/FusedBatchNorm:3"
  input: "batch_normalization_8/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/Shape"
  op: "Shape"
  input: "conv2d_10/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_3_grad/Shape_1"
  op: "Shape"
  input: "add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_3_grad/Shape"
  input: "gradients/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_3_grad/Sum"
  input: "gradients/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_3_grad/Sum_1"
  input: "gradients/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_3_grad/Reshape"
  input: "^gradients/add_3_grad/Reshape_1"
}
node {
  name: "gradients/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_3_grad/Reshape"
  input: "^gradients/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_3_grad/Reshape_1"
  input: "^gradients/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_10/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_7"
  input: "conv2d_10/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_10/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_10/Conv2D_grad/ShapeN"
  input: "conv2d_10/kernel/read"
  input: "gradients/add_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_10/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_7"
  input: "gradients/conv2d_10/Conv2D_grad/ShapeN:1"
  input: "gradients/add_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_10/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_10/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_10/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_10/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_10/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_10/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_10/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_10/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_10/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_10/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_10/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_7_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_10/Conv2D_grad/tuple/control_dependency"
  input: "Relu_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_16"
  op: "AddN"
  input: "gradients/L2Loss_10_grad/mul"
  input: "gradients/conv2d_10/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_10_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_37"
  op: "ZerosLike"
  input: "batch_normalization_7/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_38"
  op: "ZerosLike"
  input: "batch_normalization_7/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_39"
  op: "ZerosLike"
  input: "batch_normalization_7/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_40"
  op: "ZerosLike"
  input: "batch_normalization_7/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_7_grad/ReluGrad"
  input: "conv2d_9/Conv2D"
  input: "batch_normalization_7/gamma/read"
  input: "batch_normalization_7/FusedBatchNorm:3"
  input: "batch_normalization_7/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_9/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_6"
  input: "conv2d_9/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_9/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_9/Conv2D_grad/ShapeN"
  input: "conv2d_9/kernel/read"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_9/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_6"
  input: "gradients/conv2d_9/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_9/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_9/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_9/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_9/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_9/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_9/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_9/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_9/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_9/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_9/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_6_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_9/Conv2D_grad/tuple/control_dependency"
  input: "Relu_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_17"
  op: "AddN"
  input: "gradients/L2Loss_9_grad/mul"
  input: "gradients/conv2d_9/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_9_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_41"
  op: "ZerosLike"
  input: "batch_normalization_6/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_42"
  op: "ZerosLike"
  input: "batch_normalization_6/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_43"
  op: "ZerosLike"
  input: "batch_normalization_6/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_44"
  op: "ZerosLike"
  input: "batch_normalization_6/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_6_grad/ReluGrad"
  input: "add_2"
  input: "batch_normalization_6/gamma/read"
  input: "batch_normalization_6/FusedBatchNorm:3"
  input: "batch_normalization_6/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_18"
  op: "AddN"
  input: "gradients/add_3_grad/tuple/control_dependency_1"
  input: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Shape"
  op: "Shape"
  input: "conv2d_8/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_2_grad/Shape_1"
  op: "Shape"
  input: "conv2d_6/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_2_grad/Shape"
  input: "gradients/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_18"
  input: "gradients/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_2_grad/Sum"
  input: "gradients/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_18"
  input: "gradients/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_2_grad/Sum_1"
  input: "gradients/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_2_grad/Reshape"
  input: "^gradients/add_2_grad/Reshape_1"
}
node {
  name: "gradients/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_2_grad/Reshape"
  input: "^gradients/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_2_grad/Reshape_1"
  input: "^gradients/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_8/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_5"
  input: "conv2d_8/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_8/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_8/Conv2D_grad/ShapeN"
  input: "conv2d_8/kernel/read"
  input: "gradients/add_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_8/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_5"
  input: "gradients/conv2d_8/Conv2D_grad/ShapeN:1"
  input: "gradients/add_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_8/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_8/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_8/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_8/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_8/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_8/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_8/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_8/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_8/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_8/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_8/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Pad"
  input: "conv2d_6/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_6/Conv2D_grad/ShapeN"
  input: "conv2d_6/kernel/read"
  input: "gradients/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Pad"
  input: "gradients/conv2d_6/Conv2D_grad/ShapeN:1"
  input: "gradients/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_6/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_6/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_6/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_6/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_6/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_6/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_6/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_6/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_6/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_5_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_8/Conv2D_grad/tuple/control_dependency"
  input: "Relu_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_19"
  op: "AddN"
  input: "gradients/L2Loss_8_grad/mul"
  input: "gradients/conv2d_8/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_8_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Pad_grad/stack"
  op: "Pack"
  input: "gradients/Pad_grad/Rank"
  input: "gradients/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Pad_grad/Slice"
  op: "Slice"
  input: "Pad/paddings"
  input: "gradients/Pad_grad/Slice/begin"
  input: "gradients/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Pad_grad/Reshape"
  op: "Reshape"
  input: "gradients/Pad_grad/Slice"
  input: "gradients/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_grad/Shape"
  op: "Shape"
  input: "Relu_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Pad_grad/Slice_1"
  op: "Slice"
  input: "gradients/conv2d_6/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Pad_grad/Reshape"
  input: "gradients/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_20"
  op: "AddN"
  input: "gradients/L2Loss_6_grad/mul"
  input: "gradients/conv2d_6/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_6_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_45"
  op: "ZerosLike"
  input: "batch_normalization_5/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_46"
  op: "ZerosLike"
  input: "batch_normalization_5/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_47"
  op: "ZerosLike"
  input: "batch_normalization_5/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_48"
  op: "ZerosLike"
  input: "batch_normalization_5/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_5_grad/ReluGrad"
  input: "conv2d_7/Conv2D"
  input: "batch_normalization_5/gamma/read"
  input: "batch_normalization_5/FusedBatchNorm:3"
  input: "batch_normalization_5/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_7/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Pad_1"
  input: "conv2d_7/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_7/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_7/Conv2D_grad/ShapeN"
  input: "conv2d_7/kernel/read"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_7/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Pad_1"
  input: "gradients/conv2d_7/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 2
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_7/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_7/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_7/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_7/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_7/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_7/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 58
          }
          dim {
            size: 58
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_7/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_7/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_7/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_7/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_1_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Pad_1_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Pad_1_grad/stack"
  op: "Pack"
  input: "gradients/Pad_1_grad/Rank"
  input: "gradients/Pad_1_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/Pad_1_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Pad_1_grad/Slice"
  op: "Slice"
  input: "Pad_1/paddings"
  input: "gradients/Pad_1_grad/Slice/begin"
  input: "gradients/Pad_1_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/Pad_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/Pad_1_grad/Slice"
  input: "gradients/Pad_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Pad_1_grad/Shape"
  op: "Shape"
  input: "Relu_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Pad_1_grad/Slice_1"
  op: "Slice"
  input: "gradients/conv2d_7/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Pad_1_grad/Reshape"
  input: "gradients/Pad_1_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_21"
  op: "AddN"
  input: "gradients/L2Loss_7_grad/mul"
  input: "gradients/conv2d_7/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_7_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_22"
  op: "AddN"
  input: "gradients/Pad_grad/Slice_1"
  input: "gradients/Pad_1_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Pad_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_4_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_22"
  input: "Relu_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_49"
  op: "ZerosLike"
  input: "batch_normalization_4/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_50"
  op: "ZerosLike"
  input: "batch_normalization_4/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_51"
  op: "ZerosLike"
  input: "batch_normalization_4/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_52"
  op: "ZerosLike"
  input: "batch_normalization_4/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_4_grad/ReluGrad"
  input: "block_layer1"
  input: "batch_normalization_4/gamma/read"
  input: "batch_normalization_4/FusedBatchNorm:3"
  input: "batch_normalization_4/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Shape"
  op: "Shape"
  input: "conv2d_5/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_1_grad/Shape_1"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_1_grad/Shape"
  input: "gradients/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_1_grad/Sum"
  input: "gradients/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_1_grad/Sum_1"
  input: "gradients/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_1_grad/Reshape"
  input: "^gradients/add_1_grad/Reshape_1"
}
node {
  name: "gradients/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_1_grad/Reshape"
  input: "^gradients/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_1_grad/Reshape_1"
  input: "^gradients/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_3"
  input: "conv2d_5/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_5/Conv2D_grad/ShapeN"
  input: "conv2d_5/kernel/read"
  input: "gradients/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_3"
  input: "gradients/conv2d_5/Conv2D_grad/ShapeN:1"
  input: "gradients/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_5/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_5/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_5/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_3_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_5/Conv2D_grad/tuple/control_dependency"
  input: "Relu_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_23"
  op: "AddN"
  input: "gradients/L2Loss_5_grad/mul"
  input: "gradients/conv2d_5/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_5_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_53"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_54"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_55"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_56"
  op: "ZerosLike"
  input: "batch_normalization_3/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_3_grad/ReluGrad"
  input: "conv2d_4/Conv2D"
  input: "batch_normalization_3/gamma/read"
  input: "batch_normalization_3/FusedBatchNorm:3"
  input: "batch_normalization_3/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_2"
  input: "conv2d_4/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_4/Conv2D_grad/ShapeN"
  input: "conv2d_4/kernel/read"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_2"
  input: "gradients/conv2d_4/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_4/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_4/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_4/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_4/Conv2D_grad/tuple/control_dependency"
  input: "Relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_24"
  op: "AddN"
  input: "gradients/L2Loss_4_grad/mul"
  input: "gradients/conv2d_4/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_4_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_57"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_58"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_59"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_60"
  op: "ZerosLike"
  input: "batch_normalization_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_2_grad/ReluGrad"
  input: "add"
  input: "batch_normalization_2/gamma/read"
  input: "batch_normalization_2/FusedBatchNorm:3"
  input: "batch_normalization_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_25"
  op: "AddN"
  input: "gradients/add_1_grad/tuple/control_dependency_1"
  input: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Shape"
  op: "Shape"
  input: "conv2d_3/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/Shape_1"
  op: "Shape"
  input: "conv2d_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_grad/Shape"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_25"
  input: "gradients/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_grad/Sum"
  input: "gradients/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_25"
  input: "gradients/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_grad/Sum_1"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_grad/Reshape"
  input: "^gradients/add_grad/Reshape_1"
}
node {
  name: "gradients/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_grad/Reshape"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_grad/Reshape_1"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu_1"
  input: "conv2d_3/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_3/Conv2D_grad/ShapeN"
  input: "conv2d_3/kernel/read"
  input: "gradients/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu_1"
  input: "gradients/conv2d_3/Conv2D_grad/ShapeN:1"
  input: "gradients/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_3/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu"
  input: "conv2d_1/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_1/Conv2D_grad/ShapeN"
  input: "conv2d_1/kernel/read"
  input: "gradients/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu"
  input: "gradients/conv2d_1/Conv2D_grad/ShapeN:1"
  input: "gradients/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_3/Conv2D_grad/tuple/control_dependency"
  input: "Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_26"
  op: "AddN"
  input: "gradients/L2Loss_3_grad/mul"
  input: "gradients/conv2d_3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_3_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_27"
  op: "AddN"
  input: "gradients/L2Loss_1_grad/mul"
  input: "gradients/conv2d_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_1_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_61"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_62"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_63"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_64"
  op: "ZerosLike"
  input: "batch_normalization_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_1_grad/ReluGrad"
  input: "conv2d_2/Conv2D"
  input: "batch_normalization_1/gamma/read"
  input: "batch_normalization_1/FusedBatchNorm:3"
  input: "batch_normalization_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Relu"
  input: "conv2d_2/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d_2/Conv2D_grad/ShapeN"
  input: "conv2d_2/kernel/read"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Relu"
  input: "gradients/conv2d_2/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_28"
  op: "AddN"
  input: "gradients/conv2d_1/Conv2D_grad/tuple/control_dependency"
  input: "gradients/conv2d_2/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_28"
  input: "Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_29"
  op: "AddN"
  input: "gradients/L2Loss_2_grad/mul"
  input: "gradients/conv2d_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_2_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_65"
  op: "ZerosLike"
  input: "batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_66"
  op: "ZerosLike"
  input: "batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_67"
  op: "ZerosLike"
  input: "batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_68"
  op: "ZerosLike"
  input: "batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Relu_grad/ReluGrad"
  input: "initial_conv"
  input: "batch_normalization/gamma/read"
  input: "batch_normalization/FusedBatchNorm:3"
  input: "batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "transpose"
  input: "conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d/Conv2D_grad/ShapeN"
  input: "conv2d/kernel/read"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "transpose"
  input: "gradients/conv2d/Conv2D_grad/ShapeN:1"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NCHW"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
          dim {
            size: 56
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_30"
  op: "AddN"
  input: "gradients/L2Loss_grad/mul"
  input: "gradients/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d/kernel/Momentum"
  input: "conv2d/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization/gamma/Momentum"
  input: "batch_normalization/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization/beta/Momentum"
  input: "batch_normalization/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_1/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_1/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_1/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_1/kernel/Momentum"
  input: "conv2d_1/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_1/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_2/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_2/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_2/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_2/kernel/Momentum"
  input: "conv2d_2/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_2/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma/Momentum"
  input: "batch_normalization_1/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_1/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta/Momentum"
  input: "batch_normalization_1/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_1/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_3/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_3/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_3/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_3/kernel/Momentum"
  input: "conv2d_3/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_3/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_2/gamma/Momentum"
  input: "batch_normalization_2/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_2/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_2/beta/Momentum"
  input: "batch_normalization_2/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_2/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_4/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_4/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_4/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_4/kernel/Momentum"
  input: "conv2d_4/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_4/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_3/gamma/Momentum"
  input: "batch_normalization_3/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_3/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_3/beta/Momentum"
  input: "batch_normalization_3/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_3/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_5/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_5/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_5/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_5/kernel/Momentum"
  input: "conv2d_5/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_5/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_4/gamma/Momentum"
  input: "batch_normalization_4/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_4/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_4/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_4/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_4/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_4/beta/Momentum"
  input: "batch_normalization_4/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_4/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_4/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_6/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_6/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_6/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_6/kernel/Momentum"
  input: "conv2d_6/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_6/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_7/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_7/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_7/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_7/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_7/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_7/kernel/Momentum"
  input: "conv2d_7/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_7/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_7/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_5/gamma/Momentum"
  input: "batch_normalization_5/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_5/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_5/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_5/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_5/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_5/beta/Momentum"
  input: "batch_normalization_5/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_5/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_5/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_8/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_8/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_8/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_8/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_8/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_8/kernel/Momentum"
  input: "conv2d_8/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_8/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_8/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_6/gamma/Momentum"
  input: "batch_normalization_6/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_6/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_6/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_6/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_6/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_6/beta/Momentum"
  input: "batch_normalization_6/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_6/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_6/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_9/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_9/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_9/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_9/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_9/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_9/kernel/Momentum"
  input: "conv2d_9/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_9/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_9/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_7/gamma/Momentum"
  input: "batch_normalization_7/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_7/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_7/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_7/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_7/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_7/beta/Momentum"
  input: "batch_normalization_7/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_7/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_7/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_10/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_10/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_10/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_10/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_10/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_10/kernel/Momentum"
  input: "conv2d_10/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_10/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_10/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_8/gamma/Momentum"
  input: "batch_normalization_8/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_8/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_8/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_8/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_8/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_8/beta/Momentum"
  input: "batch_normalization_8/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_8/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_8/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_11/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_11/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_11/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_11/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_11/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_11/kernel/Momentum"
  input: "conv2d_11/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_11/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_11/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_12/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_12/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_12/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_12/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_12/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_12/kernel/Momentum"
  input: "conv2d_12/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_12/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_12/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_9/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_9/gamma/Momentum"
  input: "batch_normalization_9/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_9/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_9/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_9/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_9/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_9/beta/Momentum"
  input: "batch_normalization_9/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_9/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_9/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_13/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_13/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_13/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_13/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_13/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_13/kernel/Momentum"
  input: "conv2d_13/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_13/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_13/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_10/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_10/gamma/Momentum"
  input: "batch_normalization_10/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_10/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_10/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_10/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_10/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_10/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_10/beta/Momentum"
  input: "batch_normalization_10/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_10/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_10/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_14/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_14/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_14/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_14/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_14/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_14/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_14/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_14/kernel/Momentum"
  input: "conv2d_14/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_14/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_14/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_11/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_11/gamma/Momentum"
  input: "batch_normalization_11/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_11/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_11/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_11/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_11/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_11/beta/Momentum"
  input: "batch_normalization_11/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_11/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_11/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_15/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_15/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_15/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_15/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_15/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_15/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_15/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_15/kernel/Momentum"
  input: "conv2d_15/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_15/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_15/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_12/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_12/gamma/Momentum"
  input: "batch_normalization_12/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_12/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_12/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_12/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_12/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_12/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_12/beta/Momentum"
  input: "batch_normalization_12/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_12/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_12/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_16/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_16/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_16/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_16/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_16/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_16/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_16/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_16/kernel/Momentum"
  input: "conv2d_16/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_16/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_16/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_17/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_17/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_17/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_17/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_17/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_17/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_17/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_17/kernel/Momentum"
  input: "conv2d_17/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_17/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_17/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_13/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_13/gamma/Momentum"
  input: "batch_normalization_13/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_13/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_13/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_13/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_13/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_13/beta/Momentum"
  input: "batch_normalization_13/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_13/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_13/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_18/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_18/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_18/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_18/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_18/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_18/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_18/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_18/kernel/Momentum"
  input: "conv2d_18/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_18/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_18/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_14/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_14/gamma/Momentum"
  input: "batch_normalization_14/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_14/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_14/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_14/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_14/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_14/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_14/beta/Momentum"
  input: "batch_normalization_14/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_14/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_14/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_19/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_19/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_19/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_19/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_19/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_19/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_19/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_19/kernel/Momentum"
  input: "conv2d_19/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_19/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_19/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_15/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_15/gamma/Momentum"
  input: "batch_normalization_15/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_15/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_15/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_15/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_15/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_15/beta/Momentum"
  input: "batch_normalization_15/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_15/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_15/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "conv2d_20/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_20/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_20/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "conv2d_20/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "conv2d_20/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_20/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_20/kernel/Momentum/Assign"
  op: "Assign"
  input: "conv2d_20/kernel/Momentum"
  input: "conv2d_20/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_20/kernel/Momentum/read"
  op: "Identity"
  input: "conv2d_20/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/gamma/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/gamma/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_16/gamma/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_16/gamma/Momentum"
  input: "batch_normalization_16/gamma/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_16/gamma/Momentum/read"
  op: "Identity"
  input: "batch_normalization_16/gamma/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_16/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_16/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_16/beta/Momentum/Assign"
  op: "Assign"
  input: "batch_normalization_16/beta/Momentum"
  input: "batch_normalization_16/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_16/beta/Momentum/read"
  op: "Identity"
  input: "batch_normalization_16/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "readout_layer/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "readout_layer/kernel/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "readout_layer/kernel/Momentum/Initializer/zeros"
  op: "Fill"
  input: "readout_layer/kernel/Momentum/Initializer/zeros/shape_as_tensor"
  input: "readout_layer/kernel/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "readout_layer/kernel/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "readout_layer/kernel/Momentum/Assign"
  op: "Assign"
  input: "readout_layer/kernel/Momentum"
  input: "readout_layer/kernel/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "readout_layer/kernel/Momentum/read"
  op: "Identity"
  input: "readout_layer/kernel/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "readout_layer/bias/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "readout_layer/bias/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "readout_layer/bias/Momentum/Assign"
  op: "Assign"
  input: "readout_layer/bias/Momentum"
  input: "readout_layer/bias/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "readout_layer/bias/Momentum/read"
  op: "Identity"
  input: "readout_layer/bias/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "Momentum/momentum"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Momentum/update_conv2d/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_30"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_1/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_27"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_2/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_29"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_1/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_1/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_3/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_26"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_2/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_2/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_4/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_4/kernel"
  input: "conv2d_4/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_24"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_3/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_3/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_5/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_5/kernel"
  input: "conv2d_5/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_23"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_4/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_4/gamma"
  input: "batch_normalization_4/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_4/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_6/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_6/kernel"
  input: "conv2d_6/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_20"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_7/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_7/kernel"
  input: "conv2d_7/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_21"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_5/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_5/gamma"
  input: "batch_normalization_5/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_5/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_8/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_8/kernel"
  input: "conv2d_8/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_19"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_6/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_6/gamma"
  input: "batch_normalization_6/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_6/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_9/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_9/kernel"
  input: "conv2d_9/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_17"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_7/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_7/gamma"
  input: "batch_normalization_7/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_7/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_7/beta"
  input: "batch_normalization_7/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_10/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_10/kernel"
  input: "conv2d_10/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_16"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_8/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_8/gamma"
  input: "batch_normalization_8/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_8/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_8/beta"
  input: "batch_normalization_8/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_11/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_11/kernel"
  input: "conv2d_11/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_13"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_12/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_12/kernel"
  input: "conv2d_12/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_14"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_9/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_9/gamma"
  input: "batch_normalization_9/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_9/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_9/beta"
  input: "batch_normalization_9/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_13/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_13/kernel"
  input: "conv2d_13/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_12"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_10/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_10/gamma"
  input: "batch_normalization_10/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_10/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_10/beta"
  input: "batch_normalization_10/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_14/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_14/kernel"
  input: "conv2d_14/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_10"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_11/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_11/gamma"
  input: "batch_normalization_11/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_11/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_11/beta"
  input: "batch_normalization_11/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_15/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_15/kernel"
  input: "conv2d_15/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_9"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_12/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_12/gamma"
  input: "batch_normalization_12/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_12/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_12/beta"
  input: "batch_normalization_12/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_16/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_16/kernel"
  input: "conv2d_16/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_6"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_17/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_17/kernel"
  input: "conv2d_17/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_7"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_13/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_13/gamma"
  input: "batch_normalization_13/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_13/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_13/beta"
  input: "batch_normalization_13/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_18/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_18/kernel"
  input: "conv2d_18/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_5"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_14/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_14/gamma"
  input: "batch_normalization_14/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_14/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_14/beta"
  input: "batch_normalization_14/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_19/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_19/kernel"
  input: "conv2d_19/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_3"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_15/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_15/gamma"
  input: "batch_normalization_15/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_15/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_15/beta"
  input: "batch_normalization_15/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_15/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_conv2d_20/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "conv2d_20/kernel"
  input: "conv2d_20/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_16/gamma/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_16/gamma"
  input: "batch_normalization_16/gamma/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_batch_normalization_16/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "batch_normalization_16/beta"
  input: "batch_normalization_16/beta/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/batch_normalization_16/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_readout_layer/kernel/ApplyMomentum"
  op: "ApplyMomentum"
  input: "readout_layer/kernel"
  input: "readout_layer/kernel/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN_1"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update_readout_layer/bias/ApplyMomentum"
  op: "ApplyMomentum"
  input: "readout_layer/bias"
  input: "readout_layer/bias/Momentum"
  input: "PiecewiseConstant/case/cond/Merge"
  input: "gradients/AddN"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Momentum/update"
  op: "NoOp"
  input: "^Momentum/update_batch_normalization/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_1/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_1/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_10/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_10/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_11/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_11/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_12/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_12/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_13/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_13/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_14/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_14/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_15/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_15/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_16/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_16/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_2/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_2/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_3/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_3/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_4/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_4/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_5/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_5/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_6/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_6/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_7/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_7/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_8/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_8/gamma/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_9/beta/ApplyMomentum"
  input: "^Momentum/update_batch_normalization_9/gamma/ApplyMomentum"
  input: "^Momentum/update_conv2d/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_1/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_10/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_11/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_12/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_13/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_14/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_15/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_16/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_17/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_18/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_19/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_2/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_20/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_3/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_4/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_5/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_6/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_7/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_8/kernel/ApplyMomentum"
  input: "^Momentum/update_conv2d_9/kernel/ApplyMomentum"
  input: "^Momentum/update_readout_layer/bias/ApplyMomentum"
  input: "^Momentum/update_readout_layer/kernel/ApplyMomentum"
}
node {
  name: "Momentum/value"
  op: "Const"
  input: "^Momentum/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Momentum"
  op: "AssignAdd"
  input: "global_step"
  input: "Momentum/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^Momentum"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_10/AssignMovingAvg"
  input: "^batch_normalization_10/AssignMovingAvg_1"
  input: "^batch_normalization_11/AssignMovingAvg"
  input: "^batch_normalization_11/AssignMovingAvg_1"
  input: "^batch_normalization_12/AssignMovingAvg"
  input: "^batch_normalization_12/AssignMovingAvg_1"
  input: "^batch_normalization_13/AssignMovingAvg"
  input: "^batch_normalization_13/AssignMovingAvg_1"
  input: "^batch_normalization_14/AssignMovingAvg"
  input: "^batch_normalization_14/AssignMovingAvg_1"
  input: "^batch_normalization_15/AssignMovingAvg"
  input: "^batch_normalization_15/AssignMovingAvg_1"
  input: "^batch_normalization_16/AssignMovingAvg"
  input: "^batch_normalization_16/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^batch_normalization_4/AssignMovingAvg"
  input: "^batch_normalization_4/AssignMovingAvg_1"
  input: "^batch_normalization_5/AssignMovingAvg"
  input: "^batch_normalization_5/AssignMovingAvg_1"
  input: "^batch_normalization_6/AssignMovingAvg"
  input: "^batch_normalization_6/AssignMovingAvg_1"
  input: "^batch_normalization_7/AssignMovingAvg"
  input: "^batch_normalization_7/AssignMovingAvg_1"
  input: "^batch_normalization_8/AssignMovingAvg"
  input: "^batch_normalization_8/AssignMovingAvg_1"
  input: "^batch_normalization_9/AssignMovingAvg"
  input: "^batch_normalization_9/AssignMovingAvg_1"
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "IteratorGetNext:1"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ArgMax"
  input: "ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/total/Assign"
  op: "Assign"
  input: "accuracy/total"
  input: "accuracy/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/total/read"
  op: "Identity"
  input: "accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/count/Assign"
  op: "Assign"
  input: "accuracy/count"
  input: "accuracy/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/count/read"
  op: "Identity"
  input: "accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Size"
  op: "Size"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/ToFloat_1"
  op: "Cast"
  input: "accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "accuracy/Sum"
  op: "Sum"
  input: "ToFloat"
  input: "accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd"
  op: "AssignAdd"
  input: "accuracy/total"
  input: "accuracy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd_1"
  op: "AssignAdd"
  input: "accuracy/count"
  input: "accuracy/ToFloat_1"
  input: "^ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/truediv"
  op: "RealDiv"
  input: "accuracy/total/read"
  input: "accuracy/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Greater"
  op: "Greater"
  input: "accuracy/count/read"
  input: "accuracy/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/value"
  op: "Select"
  input: "accuracy/Greater"
  input: "accuracy/truediv"
  input: "accuracy/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/truediv_1"
  op: "RealDiv"
  input: "accuracy/AssignAdd"
  input: "accuracy/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/zeros_like_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Greater_1"
  op: "Greater"
  input: "accuracy/AssignAdd_1"
  input: "accuracy/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/update_op"
  op: "Select"
  input: "accuracy/Greater_1"
  input: "accuracy/truediv_1"
  input: "accuracy/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_accuracy"
  op: "Identity"
  input: "accuracy/update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_accuracy_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_accuracy_1"
      }
    }
  }
}
node {
  name: "train_accuracy_1"
  op: "ScalarSummary"
  input: "train_accuracy_1/tags"
  input: "accuracy/update_op"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "checkpoint_initializer/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer"
  op: "RestoreV2"
  input: "checkpoint_initializer/prefix"
  input: "checkpoint_initializer/tensor_names"
  input: "checkpoint_initializer/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "batch_normalization/beta"
  input: "checkpoint_initializer"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_1/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_1"
  op: "RestoreV2"
  input: "checkpoint_initializer_1/prefix"
  input: "checkpoint_initializer_1/tensor_names"
  input: "checkpoint_initializer_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "batch_normalization/beta/Momentum"
  input: "checkpoint_initializer_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_2/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_2"
  op: "RestoreV2"
  input: "checkpoint_initializer_2/prefix"
  input: "checkpoint_initializer_2/tensor_names"
  input: "checkpoint_initializer_2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "batch_normalization/gamma"
  input: "checkpoint_initializer_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_3/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_3/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_3/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_3"
  op: "RestoreV2"
  input: "checkpoint_initializer_3/prefix"
  input: "checkpoint_initializer_3/tensor_names"
  input: "checkpoint_initializer_3/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "batch_normalization/gamma/Momentum"
  input: "checkpoint_initializer_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_4/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_4/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_4/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_4"
  op: "RestoreV2"
  input: "checkpoint_initializer_4/prefix"
  input: "checkpoint_initializer_4/tensor_names"
  input: "checkpoint_initializer_4/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "batch_normalization/moving_mean"
  input: "checkpoint_initializer_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_5/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_5/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_5/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_5"
  op: "RestoreV2"
  input: "checkpoint_initializer_5/prefix"
  input: "checkpoint_initializer_5/tensor_names"
  input: "checkpoint_initializer_5/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "batch_normalization/moving_variance"
  input: "checkpoint_initializer_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_6/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_6/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_6/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_6"
  op: "RestoreV2"
  input: "checkpoint_initializer_6/prefix"
  input: "checkpoint_initializer_6/tensor_names"
  input: "checkpoint_initializer_6/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "batch_normalization_1/beta"
  input: "checkpoint_initializer_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_7/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_7/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_1/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_7/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_7"
  op: "RestoreV2"
  input: "checkpoint_initializer_7/prefix"
  input: "checkpoint_initializer_7/tensor_names"
  input: "checkpoint_initializer_7/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "batch_normalization_1/beta/Momentum"
  input: "checkpoint_initializer_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_8/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_8/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_8/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_8"
  op: "RestoreV2"
  input: "checkpoint_initializer_8/prefix"
  input: "checkpoint_initializer_8/tensor_names"
  input: "checkpoint_initializer_8/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "batch_normalization_1/gamma"
  input: "checkpoint_initializer_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_9/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_9/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_1/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_9/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_9"
  op: "RestoreV2"
  input: "checkpoint_initializer_9/prefix"
  input: "checkpoint_initializer_9/tensor_names"
  input: "checkpoint_initializer_9/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "batch_normalization_1/gamma/Momentum"
  input: "checkpoint_initializer_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_10/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_10/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_10/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_10"
  op: "RestoreV2"
  input: "checkpoint_initializer_10/prefix"
  input: "checkpoint_initializer_10/tensor_names"
  input: "checkpoint_initializer_10/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_10"
  op: "Assign"
  input: "batch_normalization_1/moving_mean"
  input: "checkpoint_initializer_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_11/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_11/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_11/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_11"
  op: "RestoreV2"
  input: "checkpoint_initializer_11/prefix"
  input: "checkpoint_initializer_11/tensor_names"
  input: "checkpoint_initializer_11/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_11"
  op: "Assign"
  input: "batch_normalization_1/moving_variance"
  input: "checkpoint_initializer_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_12/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_12/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_10/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_12/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_12"
  op: "RestoreV2"
  input: "checkpoint_initializer_12/prefix"
  input: "checkpoint_initializer_12/tensor_names"
  input: "checkpoint_initializer_12/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_12"
  op: "Assign"
  input: "batch_normalization_10/beta"
  input: "checkpoint_initializer_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_13/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_13/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_10/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_13/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_13"
  op: "RestoreV2"
  input: "checkpoint_initializer_13/prefix"
  input: "checkpoint_initializer_13/tensor_names"
  input: "checkpoint_initializer_13/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_13"
  op: "Assign"
  input: "batch_normalization_10/beta/Momentum"
  input: "checkpoint_initializer_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_14/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_14/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_10/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_14/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_14"
  op: "RestoreV2"
  input: "checkpoint_initializer_14/prefix"
  input: "checkpoint_initializer_14/tensor_names"
  input: "checkpoint_initializer_14/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_14"
  op: "Assign"
  input: "batch_normalization_10/gamma"
  input: "checkpoint_initializer_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_15/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_15/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_10/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_15/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_15"
  op: "RestoreV2"
  input: "checkpoint_initializer_15/prefix"
  input: "checkpoint_initializer_15/tensor_names"
  input: "checkpoint_initializer_15/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_15"
  op: "Assign"
  input: "batch_normalization_10/gamma/Momentum"
  input: "checkpoint_initializer_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_16/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_16/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_10/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_16/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_16"
  op: "RestoreV2"
  input: "checkpoint_initializer_16/prefix"
  input: "checkpoint_initializer_16/tensor_names"
  input: "checkpoint_initializer_16/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_16"
  op: "Assign"
  input: "batch_normalization_10/moving_mean"
  input: "checkpoint_initializer_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_17/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_17/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_10/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_17/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_17"
  op: "RestoreV2"
  input: "checkpoint_initializer_17/prefix"
  input: "checkpoint_initializer_17/tensor_names"
  input: "checkpoint_initializer_17/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_17"
  op: "Assign"
  input: "batch_normalization_10/moving_variance"
  input: "checkpoint_initializer_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_18/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_18/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_11/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_18/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_18"
  op: "RestoreV2"
  input: "checkpoint_initializer_18/prefix"
  input: "checkpoint_initializer_18/tensor_names"
  input: "checkpoint_initializer_18/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_18"
  op: "Assign"
  input: "batch_normalization_11/beta"
  input: "checkpoint_initializer_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_19/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_19/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_11/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_19/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_19"
  op: "RestoreV2"
  input: "checkpoint_initializer_19/prefix"
  input: "checkpoint_initializer_19/tensor_names"
  input: "checkpoint_initializer_19/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_19"
  op: "Assign"
  input: "batch_normalization_11/beta/Momentum"
  input: "checkpoint_initializer_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_20/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_20/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_11/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_20/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_20"
  op: "RestoreV2"
  input: "checkpoint_initializer_20/prefix"
  input: "checkpoint_initializer_20/tensor_names"
  input: "checkpoint_initializer_20/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_20"
  op: "Assign"
  input: "batch_normalization_11/gamma"
  input: "checkpoint_initializer_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_21/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_21/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_11/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_21/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_21"
  op: "RestoreV2"
  input: "checkpoint_initializer_21/prefix"
  input: "checkpoint_initializer_21/tensor_names"
  input: "checkpoint_initializer_21/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_21"
  op: "Assign"
  input: "batch_normalization_11/gamma/Momentum"
  input: "checkpoint_initializer_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_22/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_22/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_11/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_22/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_22"
  op: "RestoreV2"
  input: "checkpoint_initializer_22/prefix"
  input: "checkpoint_initializer_22/tensor_names"
  input: "checkpoint_initializer_22/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_22"
  op: "Assign"
  input: "batch_normalization_11/moving_mean"
  input: "checkpoint_initializer_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_23/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_23/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_11/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_23/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_23"
  op: "RestoreV2"
  input: "checkpoint_initializer_23/prefix"
  input: "checkpoint_initializer_23/tensor_names"
  input: "checkpoint_initializer_23/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_23"
  op: "Assign"
  input: "batch_normalization_11/moving_variance"
  input: "checkpoint_initializer_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_24/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_24/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_12/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_24/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_24"
  op: "RestoreV2"
  input: "checkpoint_initializer_24/prefix"
  input: "checkpoint_initializer_24/tensor_names"
  input: "checkpoint_initializer_24/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_24"
  op: "Assign"
  input: "batch_normalization_12/beta"
  input: "checkpoint_initializer_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_25/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_25/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_12/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_25/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_25"
  op: "RestoreV2"
  input: "checkpoint_initializer_25/prefix"
  input: "checkpoint_initializer_25/tensor_names"
  input: "checkpoint_initializer_25/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_25"
  op: "Assign"
  input: "batch_normalization_12/beta/Momentum"
  input: "checkpoint_initializer_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_26/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_26/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_12/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_26/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_26"
  op: "RestoreV2"
  input: "checkpoint_initializer_26/prefix"
  input: "checkpoint_initializer_26/tensor_names"
  input: "checkpoint_initializer_26/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_26"
  op: "Assign"
  input: "batch_normalization_12/gamma"
  input: "checkpoint_initializer_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_27/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_27/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_12/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_27/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_27"
  op: "RestoreV2"
  input: "checkpoint_initializer_27/prefix"
  input: "checkpoint_initializer_27/tensor_names"
  input: "checkpoint_initializer_27/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_27"
  op: "Assign"
  input: "batch_normalization_12/gamma/Momentum"
  input: "checkpoint_initializer_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_28/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_28/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_12/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_28/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_28"
  op: "RestoreV2"
  input: "checkpoint_initializer_28/prefix"
  input: "checkpoint_initializer_28/tensor_names"
  input: "checkpoint_initializer_28/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_28"
  op: "Assign"
  input: "batch_normalization_12/moving_mean"
  input: "checkpoint_initializer_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_29/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_29/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_12/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_29/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_29"
  op: "RestoreV2"
  input: "checkpoint_initializer_29/prefix"
  input: "checkpoint_initializer_29/tensor_names"
  input: "checkpoint_initializer_29/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_29"
  op: "Assign"
  input: "batch_normalization_12/moving_variance"
  input: "checkpoint_initializer_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_30/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_30/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_13/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_30/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_30"
  op: "RestoreV2"
  input: "checkpoint_initializer_30/prefix"
  input: "checkpoint_initializer_30/tensor_names"
  input: "checkpoint_initializer_30/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_30"
  op: "Assign"
  input: "batch_normalization_13/beta"
  input: "checkpoint_initializer_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_31/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_31/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_13/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_31/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_31"
  op: "RestoreV2"
  input: "checkpoint_initializer_31/prefix"
  input: "checkpoint_initializer_31/tensor_names"
  input: "checkpoint_initializer_31/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_31"
  op: "Assign"
  input: "batch_normalization_13/beta/Momentum"
  input: "checkpoint_initializer_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_32/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_32/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_13/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_32/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_32"
  op: "RestoreV2"
  input: "checkpoint_initializer_32/prefix"
  input: "checkpoint_initializer_32/tensor_names"
  input: "checkpoint_initializer_32/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_32"
  op: "Assign"
  input: "batch_normalization_13/gamma"
  input: "checkpoint_initializer_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_33/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_33/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_13/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_33/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_33"
  op: "RestoreV2"
  input: "checkpoint_initializer_33/prefix"
  input: "checkpoint_initializer_33/tensor_names"
  input: "checkpoint_initializer_33/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_33"
  op: "Assign"
  input: "batch_normalization_13/gamma/Momentum"
  input: "checkpoint_initializer_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_34/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_34/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_13/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_34/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_34"
  op: "RestoreV2"
  input: "checkpoint_initializer_34/prefix"
  input: "checkpoint_initializer_34/tensor_names"
  input: "checkpoint_initializer_34/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_34"
  op: "Assign"
  input: "batch_normalization_13/moving_mean"
  input: "checkpoint_initializer_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_35/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_35/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_13/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_35/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_35"
  op: "RestoreV2"
  input: "checkpoint_initializer_35/prefix"
  input: "checkpoint_initializer_35/tensor_names"
  input: "checkpoint_initializer_35/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_35"
  op: "Assign"
  input: "batch_normalization_13/moving_variance"
  input: "checkpoint_initializer_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_36/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_36/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_14/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_36/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_36"
  op: "RestoreV2"
  input: "checkpoint_initializer_36/prefix"
  input: "checkpoint_initializer_36/tensor_names"
  input: "checkpoint_initializer_36/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_36"
  op: "Assign"
  input: "batch_normalization_14/beta"
  input: "checkpoint_initializer_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_37/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_37/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_14/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_37/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_37"
  op: "RestoreV2"
  input: "checkpoint_initializer_37/prefix"
  input: "checkpoint_initializer_37/tensor_names"
  input: "checkpoint_initializer_37/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_37"
  op: "Assign"
  input: "batch_normalization_14/beta/Momentum"
  input: "checkpoint_initializer_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_38/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_38/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_14/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_38/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_38"
  op: "RestoreV2"
  input: "checkpoint_initializer_38/prefix"
  input: "checkpoint_initializer_38/tensor_names"
  input: "checkpoint_initializer_38/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_38"
  op: "Assign"
  input: "batch_normalization_14/gamma"
  input: "checkpoint_initializer_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_39/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_39/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_14/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_39/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_39"
  op: "RestoreV2"
  input: "checkpoint_initializer_39/prefix"
  input: "checkpoint_initializer_39/tensor_names"
  input: "checkpoint_initializer_39/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_39"
  op: "Assign"
  input: "batch_normalization_14/gamma/Momentum"
  input: "checkpoint_initializer_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_40/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_40/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_14/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_40/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_40"
  op: "RestoreV2"
  input: "checkpoint_initializer_40/prefix"
  input: "checkpoint_initializer_40/tensor_names"
  input: "checkpoint_initializer_40/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_40"
  op: "Assign"
  input: "batch_normalization_14/moving_mean"
  input: "checkpoint_initializer_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_41/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_41/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_14/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_41/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_41"
  op: "RestoreV2"
  input: "checkpoint_initializer_41/prefix"
  input: "checkpoint_initializer_41/tensor_names"
  input: "checkpoint_initializer_41/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_41"
  op: "Assign"
  input: "batch_normalization_14/moving_variance"
  input: "checkpoint_initializer_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_42/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_42/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_15/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_42/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_42"
  op: "RestoreV2"
  input: "checkpoint_initializer_42/prefix"
  input: "checkpoint_initializer_42/tensor_names"
  input: "checkpoint_initializer_42/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_42"
  op: "Assign"
  input: "batch_normalization_15/beta"
  input: "checkpoint_initializer_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_43/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_43/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_15/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_43/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_43"
  op: "RestoreV2"
  input: "checkpoint_initializer_43/prefix"
  input: "checkpoint_initializer_43/tensor_names"
  input: "checkpoint_initializer_43/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_43"
  op: "Assign"
  input: "batch_normalization_15/beta/Momentum"
  input: "checkpoint_initializer_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_44/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_44/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_15/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_44/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_44"
  op: "RestoreV2"
  input: "checkpoint_initializer_44/prefix"
  input: "checkpoint_initializer_44/tensor_names"
  input: "checkpoint_initializer_44/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_44"
  op: "Assign"
  input: "batch_normalization_15/gamma"
  input: "checkpoint_initializer_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_45/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_45/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_15/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_45/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_45"
  op: "RestoreV2"
  input: "checkpoint_initializer_45/prefix"
  input: "checkpoint_initializer_45/tensor_names"
  input: "checkpoint_initializer_45/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_45"
  op: "Assign"
  input: "batch_normalization_15/gamma/Momentum"
  input: "checkpoint_initializer_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_46/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_46/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_15/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_46/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_46"
  op: "RestoreV2"
  input: "checkpoint_initializer_46/prefix"
  input: "checkpoint_initializer_46/tensor_names"
  input: "checkpoint_initializer_46/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_46"
  op: "Assign"
  input: "batch_normalization_15/moving_mean"
  input: "checkpoint_initializer_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_47/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_47/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_15/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_47/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_47"
  op: "RestoreV2"
  input: "checkpoint_initializer_47/prefix"
  input: "checkpoint_initializer_47/tensor_names"
  input: "checkpoint_initializer_47/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_47"
  op: "Assign"
  input: "batch_normalization_15/moving_variance"
  input: "checkpoint_initializer_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_48/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_48/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_16/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_48/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_48"
  op: "RestoreV2"
  input: "checkpoint_initializer_48/prefix"
  input: "checkpoint_initializer_48/tensor_names"
  input: "checkpoint_initializer_48/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_48"
  op: "Assign"
  input: "batch_normalization_16/beta"
  input: "checkpoint_initializer_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_49/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_49/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_16/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_49/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_49"
  op: "RestoreV2"
  input: "checkpoint_initializer_49/prefix"
  input: "checkpoint_initializer_49/tensor_names"
  input: "checkpoint_initializer_49/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_49"
  op: "Assign"
  input: "batch_normalization_16/beta/Momentum"
  input: "checkpoint_initializer_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_50/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_50/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_16/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_50/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_50"
  op: "RestoreV2"
  input: "checkpoint_initializer_50/prefix"
  input: "checkpoint_initializer_50/tensor_names"
  input: "checkpoint_initializer_50/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_50"
  op: "Assign"
  input: "batch_normalization_16/gamma"
  input: "checkpoint_initializer_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_51/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_51/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_16/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_51/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_51"
  op: "RestoreV2"
  input: "checkpoint_initializer_51/prefix"
  input: "checkpoint_initializer_51/tensor_names"
  input: "checkpoint_initializer_51/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_51"
  op: "Assign"
  input: "batch_normalization_16/gamma/Momentum"
  input: "checkpoint_initializer_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_52/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_52/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_16/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_52/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_52"
  op: "RestoreV2"
  input: "checkpoint_initializer_52/prefix"
  input: "checkpoint_initializer_52/tensor_names"
  input: "checkpoint_initializer_52/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_52"
  op: "Assign"
  input: "batch_normalization_16/moving_mean"
  input: "checkpoint_initializer_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_53/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_53/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_16/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_53/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_53"
  op: "RestoreV2"
  input: "checkpoint_initializer_53/prefix"
  input: "checkpoint_initializer_53/tensor_names"
  input: "checkpoint_initializer_53/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_53"
  op: "Assign"
  input: "batch_normalization_16/moving_variance"
  input: "checkpoint_initializer_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_54/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_54/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_2/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_54/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_54"
  op: "RestoreV2"
  input: "checkpoint_initializer_54/prefix"
  input: "checkpoint_initializer_54/tensor_names"
  input: "checkpoint_initializer_54/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_54"
  op: "Assign"
  input: "batch_normalization_2/beta"
  input: "checkpoint_initializer_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_55/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_55/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_2/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_55/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_55"
  op: "RestoreV2"
  input: "checkpoint_initializer_55/prefix"
  input: "checkpoint_initializer_55/tensor_names"
  input: "checkpoint_initializer_55/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_55"
  op: "Assign"
  input: "batch_normalization_2/beta/Momentum"
  input: "checkpoint_initializer_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_56/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_56/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_2/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_56/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_56"
  op: "RestoreV2"
  input: "checkpoint_initializer_56/prefix"
  input: "checkpoint_initializer_56/tensor_names"
  input: "checkpoint_initializer_56/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_56"
  op: "Assign"
  input: "batch_normalization_2/gamma"
  input: "checkpoint_initializer_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_57/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_57/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_2/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_57/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_57"
  op: "RestoreV2"
  input: "checkpoint_initializer_57/prefix"
  input: "checkpoint_initializer_57/tensor_names"
  input: "checkpoint_initializer_57/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_57"
  op: "Assign"
  input: "batch_normalization_2/gamma/Momentum"
  input: "checkpoint_initializer_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_58/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_58/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_58/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_58"
  op: "RestoreV2"
  input: "checkpoint_initializer_58/prefix"
  input: "checkpoint_initializer_58/tensor_names"
  input: "checkpoint_initializer_58/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_58"
  op: "Assign"
  input: "batch_normalization_2/moving_mean"
  input: "checkpoint_initializer_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_59/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_59/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_59/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_59"
  op: "RestoreV2"
  input: "checkpoint_initializer_59/prefix"
  input: "checkpoint_initializer_59/tensor_names"
  input: "checkpoint_initializer_59/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_59"
  op: "Assign"
  input: "batch_normalization_2/moving_variance"
  input: "checkpoint_initializer_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_60/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_60/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_3/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_60/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_60"
  op: "RestoreV2"
  input: "checkpoint_initializer_60/prefix"
  input: "checkpoint_initializer_60/tensor_names"
  input: "checkpoint_initializer_60/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_60"
  op: "Assign"
  input: "batch_normalization_3/beta"
  input: "checkpoint_initializer_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_61/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_61/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_3/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_61/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_61"
  op: "RestoreV2"
  input: "checkpoint_initializer_61/prefix"
  input: "checkpoint_initializer_61/tensor_names"
  input: "checkpoint_initializer_61/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_61"
  op: "Assign"
  input: "batch_normalization_3/beta/Momentum"
  input: "checkpoint_initializer_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_62/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_62/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_3/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_62/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_62"
  op: "RestoreV2"
  input: "checkpoint_initializer_62/prefix"
  input: "checkpoint_initializer_62/tensor_names"
  input: "checkpoint_initializer_62/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_62"
  op: "Assign"
  input: "batch_normalization_3/gamma"
  input: "checkpoint_initializer_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_63/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_63/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_3/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_63/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_63"
  op: "RestoreV2"
  input: "checkpoint_initializer_63/prefix"
  input: "checkpoint_initializer_63/tensor_names"
  input: "checkpoint_initializer_63/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_63"
  op: "Assign"
  input: "batch_normalization_3/gamma/Momentum"
  input: "checkpoint_initializer_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_64/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_64/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_64/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_64"
  op: "RestoreV2"
  input: "checkpoint_initializer_64/prefix"
  input: "checkpoint_initializer_64/tensor_names"
  input: "checkpoint_initializer_64/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_64"
  op: "Assign"
  input: "batch_normalization_3/moving_mean"
  input: "checkpoint_initializer_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_65/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_65/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_65/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_65"
  op: "RestoreV2"
  input: "checkpoint_initializer_65/prefix"
  input: "checkpoint_initializer_65/tensor_names"
  input: "checkpoint_initializer_65/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_65"
  op: "Assign"
  input: "batch_normalization_3/moving_variance"
  input: "checkpoint_initializer_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_66/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_66/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_4/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_66/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_66"
  op: "RestoreV2"
  input: "checkpoint_initializer_66/prefix"
  input: "checkpoint_initializer_66/tensor_names"
  input: "checkpoint_initializer_66/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_66"
  op: "Assign"
  input: "batch_normalization_4/beta"
  input: "checkpoint_initializer_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_67/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_67/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_4/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_67/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_67"
  op: "RestoreV2"
  input: "checkpoint_initializer_67/prefix"
  input: "checkpoint_initializer_67/tensor_names"
  input: "checkpoint_initializer_67/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_67"
  op: "Assign"
  input: "batch_normalization_4/beta/Momentum"
  input: "checkpoint_initializer_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_68/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_68/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_4/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_68/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_68"
  op: "RestoreV2"
  input: "checkpoint_initializer_68/prefix"
  input: "checkpoint_initializer_68/tensor_names"
  input: "checkpoint_initializer_68/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_68"
  op: "Assign"
  input: "batch_normalization_4/gamma"
  input: "checkpoint_initializer_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_69/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_69/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_4/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_69/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_69"
  op: "RestoreV2"
  input: "checkpoint_initializer_69/prefix"
  input: "checkpoint_initializer_69/tensor_names"
  input: "checkpoint_initializer_69/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_69"
  op: "Assign"
  input: "batch_normalization_4/gamma/Momentum"
  input: "checkpoint_initializer_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_70/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_70/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_70/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_70"
  op: "RestoreV2"
  input: "checkpoint_initializer_70/prefix"
  input: "checkpoint_initializer_70/tensor_names"
  input: "checkpoint_initializer_70/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_70"
  op: "Assign"
  input: "batch_normalization_4/moving_mean"
  input: "checkpoint_initializer_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_71/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_71/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_71/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_71"
  op: "RestoreV2"
  input: "checkpoint_initializer_71/prefix"
  input: "checkpoint_initializer_71/tensor_names"
  input: "checkpoint_initializer_71/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_71"
  op: "Assign"
  input: "batch_normalization_4/moving_variance"
  input: "checkpoint_initializer_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_72/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_72/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_5/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_72/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_72"
  op: "RestoreV2"
  input: "checkpoint_initializer_72/prefix"
  input: "checkpoint_initializer_72/tensor_names"
  input: "checkpoint_initializer_72/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_72"
  op: "Assign"
  input: "batch_normalization_5/beta"
  input: "checkpoint_initializer_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_73/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_73/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_5/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_73/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_73"
  op: "RestoreV2"
  input: "checkpoint_initializer_73/prefix"
  input: "checkpoint_initializer_73/tensor_names"
  input: "checkpoint_initializer_73/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_73"
  op: "Assign"
  input: "batch_normalization_5/beta/Momentum"
  input: "checkpoint_initializer_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_74/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_74/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_5/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_74/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_74"
  op: "RestoreV2"
  input: "checkpoint_initializer_74/prefix"
  input: "checkpoint_initializer_74/tensor_names"
  input: "checkpoint_initializer_74/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_74"
  op: "Assign"
  input: "batch_normalization_5/gamma"
  input: "checkpoint_initializer_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_75/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_75/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_5/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_75/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_75"
  op: "RestoreV2"
  input: "checkpoint_initializer_75/prefix"
  input: "checkpoint_initializer_75/tensor_names"
  input: "checkpoint_initializer_75/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_75"
  op: "Assign"
  input: "batch_normalization_5/gamma/Momentum"
  input: "checkpoint_initializer_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_76/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_76/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_76/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_76"
  op: "RestoreV2"
  input: "checkpoint_initializer_76/prefix"
  input: "checkpoint_initializer_76/tensor_names"
  input: "checkpoint_initializer_76/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_76"
  op: "Assign"
  input: "batch_normalization_5/moving_mean"
  input: "checkpoint_initializer_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_77/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_77/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_77/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_77"
  op: "RestoreV2"
  input: "checkpoint_initializer_77/prefix"
  input: "checkpoint_initializer_77/tensor_names"
  input: "checkpoint_initializer_77/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_77"
  op: "Assign"
  input: "batch_normalization_5/moving_variance"
  input: "checkpoint_initializer_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_78/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_78/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_6/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_78/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_78"
  op: "RestoreV2"
  input: "checkpoint_initializer_78/prefix"
  input: "checkpoint_initializer_78/tensor_names"
  input: "checkpoint_initializer_78/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_78"
  op: "Assign"
  input: "batch_normalization_6/beta"
  input: "checkpoint_initializer_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_79/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_79/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_6/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_79/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_79"
  op: "RestoreV2"
  input: "checkpoint_initializer_79/prefix"
  input: "checkpoint_initializer_79/tensor_names"
  input: "checkpoint_initializer_79/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_79"
  op: "Assign"
  input: "batch_normalization_6/beta/Momentum"
  input: "checkpoint_initializer_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_80/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_80/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_6/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_80/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_80"
  op: "RestoreV2"
  input: "checkpoint_initializer_80/prefix"
  input: "checkpoint_initializer_80/tensor_names"
  input: "checkpoint_initializer_80/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_80"
  op: "Assign"
  input: "batch_normalization_6/gamma"
  input: "checkpoint_initializer_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_81/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_81/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_6/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_81/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_81"
  op: "RestoreV2"
  input: "checkpoint_initializer_81/prefix"
  input: "checkpoint_initializer_81/tensor_names"
  input: "checkpoint_initializer_81/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_81"
  op: "Assign"
  input: "batch_normalization_6/gamma/Momentum"
  input: "checkpoint_initializer_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_82/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_82/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_82/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_82"
  op: "RestoreV2"
  input: "checkpoint_initializer_82/prefix"
  input: "checkpoint_initializer_82/tensor_names"
  input: "checkpoint_initializer_82/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_82"
  op: "Assign"
  input: "batch_normalization_6/moving_mean"
  input: "checkpoint_initializer_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_83/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_83/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_83/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_83"
  op: "RestoreV2"
  input: "checkpoint_initializer_83/prefix"
  input: "checkpoint_initializer_83/tensor_names"
  input: "checkpoint_initializer_83/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_83"
  op: "Assign"
  input: "batch_normalization_6/moving_variance"
  input: "checkpoint_initializer_83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_84/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_84/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_7/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_84/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_84"
  op: "RestoreV2"
  input: "checkpoint_initializer_84/prefix"
  input: "checkpoint_initializer_84/tensor_names"
  input: "checkpoint_initializer_84/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_84"
  op: "Assign"
  input: "batch_normalization_7/beta"
  input: "checkpoint_initializer_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_85/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_85/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_7/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_85/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_85"
  op: "RestoreV2"
  input: "checkpoint_initializer_85/prefix"
  input: "checkpoint_initializer_85/tensor_names"
  input: "checkpoint_initializer_85/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_85"
  op: "Assign"
  input: "batch_normalization_7/beta/Momentum"
  input: "checkpoint_initializer_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_86/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_86/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_7/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_86/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_86"
  op: "RestoreV2"
  input: "checkpoint_initializer_86/prefix"
  input: "checkpoint_initializer_86/tensor_names"
  input: "checkpoint_initializer_86/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_86"
  op: "Assign"
  input: "batch_normalization_7/gamma"
  input: "checkpoint_initializer_86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_87/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_87/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_7/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_87/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_87"
  op: "RestoreV2"
  input: "checkpoint_initializer_87/prefix"
  input: "checkpoint_initializer_87/tensor_names"
  input: "checkpoint_initializer_87/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_87"
  op: "Assign"
  input: "batch_normalization_7/gamma/Momentum"
  input: "checkpoint_initializer_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_88/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_88/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_88/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_88"
  op: "RestoreV2"
  input: "checkpoint_initializer_88/prefix"
  input: "checkpoint_initializer_88/tensor_names"
  input: "checkpoint_initializer_88/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_88"
  op: "Assign"
  input: "batch_normalization_7/moving_mean"
  input: "checkpoint_initializer_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_89/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_89/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_89/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_89"
  op: "RestoreV2"
  input: "checkpoint_initializer_89/prefix"
  input: "checkpoint_initializer_89/tensor_names"
  input: "checkpoint_initializer_89/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_89"
  op: "Assign"
  input: "batch_normalization_7/moving_variance"
  input: "checkpoint_initializer_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_90/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_90/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_8/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_90/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_90"
  op: "RestoreV2"
  input: "checkpoint_initializer_90/prefix"
  input: "checkpoint_initializer_90/tensor_names"
  input: "checkpoint_initializer_90/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_90"
  op: "Assign"
  input: "batch_normalization_8/beta"
  input: "checkpoint_initializer_90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_91/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_91/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_8/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_91/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_91"
  op: "RestoreV2"
  input: "checkpoint_initializer_91/prefix"
  input: "checkpoint_initializer_91/tensor_names"
  input: "checkpoint_initializer_91/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_91"
  op: "Assign"
  input: "batch_normalization_8/beta/Momentum"
  input: "checkpoint_initializer_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_92/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_92/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_8/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_92/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_92"
  op: "RestoreV2"
  input: "checkpoint_initializer_92/prefix"
  input: "checkpoint_initializer_92/tensor_names"
  input: "checkpoint_initializer_92/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_92"
  op: "Assign"
  input: "batch_normalization_8/gamma"
  input: "checkpoint_initializer_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_93/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_93/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_8/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_93/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_93"
  op: "RestoreV2"
  input: "checkpoint_initializer_93/prefix"
  input: "checkpoint_initializer_93/tensor_names"
  input: "checkpoint_initializer_93/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_93"
  op: "Assign"
  input: "batch_normalization_8/gamma/Momentum"
  input: "checkpoint_initializer_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_94/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_94/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_94/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_94"
  op: "RestoreV2"
  input: "checkpoint_initializer_94/prefix"
  input: "checkpoint_initializer_94/tensor_names"
  input: "checkpoint_initializer_94/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_94"
  op: "Assign"
  input: "batch_normalization_8/moving_mean"
  input: "checkpoint_initializer_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_95/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_95/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_95/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_95"
  op: "RestoreV2"
  input: "checkpoint_initializer_95/prefix"
  input: "checkpoint_initializer_95/tensor_names"
  input: "checkpoint_initializer_95/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_95"
  op: "Assign"
  input: "batch_normalization_8/moving_variance"
  input: "checkpoint_initializer_95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_96/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_96/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_9/beta"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_96/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_96"
  op: "RestoreV2"
  input: "checkpoint_initializer_96/prefix"
  input: "checkpoint_initializer_96/tensor_names"
  input: "checkpoint_initializer_96/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_96"
  op: "Assign"
  input: "batch_normalization_9/beta"
  input: "checkpoint_initializer_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_97/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_97/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_9/beta/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_97/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_97"
  op: "RestoreV2"
  input: "checkpoint_initializer_97/prefix"
  input: "checkpoint_initializer_97/tensor_names"
  input: "checkpoint_initializer_97/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_97"
  op: "Assign"
  input: "batch_normalization_9/beta/Momentum"
  input: "checkpoint_initializer_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_98/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_98/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_9/gamma"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_98/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_98"
  op: "RestoreV2"
  input: "checkpoint_initializer_98/prefix"
  input: "checkpoint_initializer_98/tensor_names"
  input: "checkpoint_initializer_98/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_98"
  op: "Assign"
  input: "batch_normalization_9/gamma"
  input: "checkpoint_initializer_98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_99/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_99/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_9/gamma/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_99/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_99"
  op: "RestoreV2"
  input: "checkpoint_initializer_99/prefix"
  input: "checkpoint_initializer_99/tensor_names"
  input: "checkpoint_initializer_99/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_99"
  op: "Assign"
  input: "batch_normalization_9/gamma/Momentum"
  input: "checkpoint_initializer_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_100/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_100/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_9/moving_mean"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_100/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_100"
  op: "RestoreV2"
  input: "checkpoint_initializer_100/prefix"
  input: "checkpoint_initializer_100/tensor_names"
  input: "checkpoint_initializer_100/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_100"
  op: "Assign"
  input: "batch_normalization_9/moving_mean"
  input: "checkpoint_initializer_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_101/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_101/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "batch_normalization_9/moving_variance"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_101/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_101"
  op: "RestoreV2"
  input: "checkpoint_initializer_101/prefix"
  input: "checkpoint_initializer_101/tensor_names"
  input: "checkpoint_initializer_101/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_101"
  op: "Assign"
  input: "batch_normalization_9/moving_variance"
  input: "checkpoint_initializer_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_102/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_102/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_102/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_102"
  op: "RestoreV2"
  input: "checkpoint_initializer_102/prefix"
  input: "checkpoint_initializer_102/tensor_names"
  input: "checkpoint_initializer_102/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_102"
  op: "Assign"
  input: "conv2d/kernel"
  input: "checkpoint_initializer_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_103/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_103/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_103/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_103"
  op: "RestoreV2"
  input: "checkpoint_initializer_103/prefix"
  input: "checkpoint_initializer_103/tensor_names"
  input: "checkpoint_initializer_103/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_103"
  op: "Assign"
  input: "conv2d/kernel/Momentum"
  input: "checkpoint_initializer_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_104/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_104/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_104/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_104"
  op: "RestoreV2"
  input: "checkpoint_initializer_104/prefix"
  input: "checkpoint_initializer_104/tensor_names"
  input: "checkpoint_initializer_104/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_104"
  op: "Assign"
  input: "conv2d_1/kernel"
  input: "checkpoint_initializer_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_105/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_105/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_1/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_105/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_105"
  op: "RestoreV2"
  input: "checkpoint_initializer_105/prefix"
  input: "checkpoint_initializer_105/tensor_names"
  input: "checkpoint_initializer_105/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_105"
  op: "Assign"
  input: "conv2d_1/kernel/Momentum"
  input: "checkpoint_initializer_105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_106/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_106/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_106/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_106"
  op: "RestoreV2"
  input: "checkpoint_initializer_106/prefix"
  input: "checkpoint_initializer_106/tensor_names"
  input: "checkpoint_initializer_106/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_106"
  op: "Assign"
  input: "conv2d_10/kernel"
  input: "checkpoint_initializer_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_107/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_107/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_10/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_107/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_107"
  op: "RestoreV2"
  input: "checkpoint_initializer_107/prefix"
  input: "checkpoint_initializer_107/tensor_names"
  input: "checkpoint_initializer_107/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_107"
  op: "Assign"
  input: "conv2d_10/kernel/Momentum"
  input: "checkpoint_initializer_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_108/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_108/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_108/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_108"
  op: "RestoreV2"
  input: "checkpoint_initializer_108/prefix"
  input: "checkpoint_initializer_108/tensor_names"
  input: "checkpoint_initializer_108/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_108"
  op: "Assign"
  input: "conv2d_11/kernel"
  input: "checkpoint_initializer_108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_109/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_109/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_11/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_109/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_109"
  op: "RestoreV2"
  input: "checkpoint_initializer_109/prefix"
  input: "checkpoint_initializer_109/tensor_names"
  input: "checkpoint_initializer_109/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_109"
  op: "Assign"
  input: "conv2d_11/kernel/Momentum"
  input: "checkpoint_initializer_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_110/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_110/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_110/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_110"
  op: "RestoreV2"
  input: "checkpoint_initializer_110/prefix"
  input: "checkpoint_initializer_110/tensor_names"
  input: "checkpoint_initializer_110/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_110"
  op: "Assign"
  input: "conv2d_12/kernel"
  input: "checkpoint_initializer_110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_111/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_111/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_12/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_111/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_111"
  op: "RestoreV2"
  input: "checkpoint_initializer_111/prefix"
  input: "checkpoint_initializer_111/tensor_names"
  input: "checkpoint_initializer_111/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_111"
  op: "Assign"
  input: "conv2d_12/kernel/Momentum"
  input: "checkpoint_initializer_111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_112/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_112/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_112/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_112"
  op: "RestoreV2"
  input: "checkpoint_initializer_112/prefix"
  input: "checkpoint_initializer_112/tensor_names"
  input: "checkpoint_initializer_112/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_112"
  op: "Assign"
  input: "conv2d_13/kernel"
  input: "checkpoint_initializer_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_113/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_113/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_13/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_113/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_113"
  op: "RestoreV2"
  input: "checkpoint_initializer_113/prefix"
  input: "checkpoint_initializer_113/tensor_names"
  input: "checkpoint_initializer_113/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_113"
  op: "Assign"
  input: "conv2d_13/kernel/Momentum"
  input: "checkpoint_initializer_113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_114/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_114/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_14/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_114/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_114"
  op: "RestoreV2"
  input: "checkpoint_initializer_114/prefix"
  input: "checkpoint_initializer_114/tensor_names"
  input: "checkpoint_initializer_114/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_114"
  op: "Assign"
  input: "conv2d_14/kernel"
  input: "checkpoint_initializer_114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_115/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_115/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_14/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_115/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_115"
  op: "RestoreV2"
  input: "checkpoint_initializer_115/prefix"
  input: "checkpoint_initializer_115/tensor_names"
  input: "checkpoint_initializer_115/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_115"
  op: "Assign"
  input: "conv2d_14/kernel/Momentum"
  input: "checkpoint_initializer_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_116/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_116/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_15/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_116/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_116"
  op: "RestoreV2"
  input: "checkpoint_initializer_116/prefix"
  input: "checkpoint_initializer_116/tensor_names"
  input: "checkpoint_initializer_116/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_116"
  op: "Assign"
  input: "conv2d_15/kernel"
  input: "checkpoint_initializer_116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_117/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_117/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_15/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_117/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_117"
  op: "RestoreV2"
  input: "checkpoint_initializer_117/prefix"
  input: "checkpoint_initializer_117/tensor_names"
  input: "checkpoint_initializer_117/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_117"
  op: "Assign"
  input: "conv2d_15/kernel/Momentum"
  input: "checkpoint_initializer_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_118/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_118/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_16/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_118/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_118"
  op: "RestoreV2"
  input: "checkpoint_initializer_118/prefix"
  input: "checkpoint_initializer_118/tensor_names"
  input: "checkpoint_initializer_118/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_118"
  op: "Assign"
  input: "conv2d_16/kernel"
  input: "checkpoint_initializer_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_119/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_119/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_16/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_119/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_119"
  op: "RestoreV2"
  input: "checkpoint_initializer_119/prefix"
  input: "checkpoint_initializer_119/tensor_names"
  input: "checkpoint_initializer_119/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_119"
  op: "Assign"
  input: "conv2d_16/kernel/Momentum"
  input: "checkpoint_initializer_119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_120/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_120/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_17/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_120/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_120"
  op: "RestoreV2"
  input: "checkpoint_initializer_120/prefix"
  input: "checkpoint_initializer_120/tensor_names"
  input: "checkpoint_initializer_120/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_120"
  op: "Assign"
  input: "conv2d_17/kernel"
  input: "checkpoint_initializer_120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_121/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_121/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_17/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_121/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_121"
  op: "RestoreV2"
  input: "checkpoint_initializer_121/prefix"
  input: "checkpoint_initializer_121/tensor_names"
  input: "checkpoint_initializer_121/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_121"
  op: "Assign"
  input: "conv2d_17/kernel/Momentum"
  input: "checkpoint_initializer_121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_122/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_122/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_18/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_122/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_122"
  op: "RestoreV2"
  input: "checkpoint_initializer_122/prefix"
  input: "checkpoint_initializer_122/tensor_names"
  input: "checkpoint_initializer_122/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_122"
  op: "Assign"
  input: "conv2d_18/kernel"
  input: "checkpoint_initializer_122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_123/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_123/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_18/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_123/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_123"
  op: "RestoreV2"
  input: "checkpoint_initializer_123/prefix"
  input: "checkpoint_initializer_123/tensor_names"
  input: "checkpoint_initializer_123/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_123"
  op: "Assign"
  input: "conv2d_18/kernel/Momentum"
  input: "checkpoint_initializer_123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_124/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_124/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_19/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_124/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_124"
  op: "RestoreV2"
  input: "checkpoint_initializer_124/prefix"
  input: "checkpoint_initializer_124/tensor_names"
  input: "checkpoint_initializer_124/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_124"
  op: "Assign"
  input: "conv2d_19/kernel"
  input: "checkpoint_initializer_124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_125/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_125/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_19/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_125/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_125"
  op: "RestoreV2"
  input: "checkpoint_initializer_125/prefix"
  input: "checkpoint_initializer_125/tensor_names"
  input: "checkpoint_initializer_125/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_125"
  op: "Assign"
  input: "conv2d_19/kernel/Momentum"
  input: "checkpoint_initializer_125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_126/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_126/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_126/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_126"
  op: "RestoreV2"
  input: "checkpoint_initializer_126/prefix"
  input: "checkpoint_initializer_126/tensor_names"
  input: "checkpoint_initializer_126/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_126"
  op: "Assign"
  input: "conv2d_2/kernel"
  input: "checkpoint_initializer_126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_127/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_127/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_2/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_127/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_127"
  op: "RestoreV2"
  input: "checkpoint_initializer_127/prefix"
  input: "checkpoint_initializer_127/tensor_names"
  input: "checkpoint_initializer_127/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_127"
  op: "Assign"
  input: "conv2d_2/kernel/Momentum"
  input: "checkpoint_initializer_127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_128/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_128/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_20/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_128/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_128"
  op: "RestoreV2"
  input: "checkpoint_initializer_128/prefix"
  input: "checkpoint_initializer_128/tensor_names"
  input: "checkpoint_initializer_128/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_128"
  op: "Assign"
  input: "conv2d_20/kernel"
  input: "checkpoint_initializer_128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_129/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_129/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_20/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_129/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_129"
  op: "RestoreV2"
  input: "checkpoint_initializer_129/prefix"
  input: "checkpoint_initializer_129/tensor_names"
  input: "checkpoint_initializer_129/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_129"
  op: "Assign"
  input: "conv2d_20/kernel/Momentum"
  input: "checkpoint_initializer_129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_130/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_130/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_130/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_130"
  op: "RestoreV2"
  input: "checkpoint_initializer_130/prefix"
  input: "checkpoint_initializer_130/tensor_names"
  input: "checkpoint_initializer_130/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_130"
  op: "Assign"
  input: "conv2d_3/kernel"
  input: "checkpoint_initializer_130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_131/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_131/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_3/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_131/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_131"
  op: "RestoreV2"
  input: "checkpoint_initializer_131/prefix"
  input: "checkpoint_initializer_131/tensor_names"
  input: "checkpoint_initializer_131/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_131"
  op: "Assign"
  input: "conv2d_3/kernel/Momentum"
  input: "checkpoint_initializer_131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_132/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_132/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_132/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_132"
  op: "RestoreV2"
  input: "checkpoint_initializer_132/prefix"
  input: "checkpoint_initializer_132/tensor_names"
  input: "checkpoint_initializer_132/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_132"
  op: "Assign"
  input: "conv2d_4/kernel"
  input: "checkpoint_initializer_132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_133/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_133/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_4/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_133/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_133"
  op: "RestoreV2"
  input: "checkpoint_initializer_133/prefix"
  input: "checkpoint_initializer_133/tensor_names"
  input: "checkpoint_initializer_133/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_133"
  op: "Assign"
  input: "conv2d_4/kernel/Momentum"
  input: "checkpoint_initializer_133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_134/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_134/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_134/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_134"
  op: "RestoreV2"
  input: "checkpoint_initializer_134/prefix"
  input: "checkpoint_initializer_134/tensor_names"
  input: "checkpoint_initializer_134/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_134"
  op: "Assign"
  input: "conv2d_5/kernel"
  input: "checkpoint_initializer_134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_135/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_135/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_5/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_135/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_135"
  op: "RestoreV2"
  input: "checkpoint_initializer_135/prefix"
  input: "checkpoint_initializer_135/tensor_names"
  input: "checkpoint_initializer_135/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_135"
  op: "Assign"
  input: "conv2d_5/kernel/Momentum"
  input: "checkpoint_initializer_135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_136/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_136/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_136/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_136"
  op: "RestoreV2"
  input: "checkpoint_initializer_136/prefix"
  input: "checkpoint_initializer_136/tensor_names"
  input: "checkpoint_initializer_136/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_136"
  op: "Assign"
  input: "conv2d_6/kernel"
  input: "checkpoint_initializer_136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_137/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_137/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_6/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_137/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_137"
  op: "RestoreV2"
  input: "checkpoint_initializer_137/prefix"
  input: "checkpoint_initializer_137/tensor_names"
  input: "checkpoint_initializer_137/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_137"
  op: "Assign"
  input: "conv2d_6/kernel/Momentum"
  input: "checkpoint_initializer_137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_138/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_138/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_138/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_138"
  op: "RestoreV2"
  input: "checkpoint_initializer_138/prefix"
  input: "checkpoint_initializer_138/tensor_names"
  input: "checkpoint_initializer_138/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_138"
  op: "Assign"
  input: "conv2d_7/kernel"
  input: "checkpoint_initializer_138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_139/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_139/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_7/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_139/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_139"
  op: "RestoreV2"
  input: "checkpoint_initializer_139/prefix"
  input: "checkpoint_initializer_139/tensor_names"
  input: "checkpoint_initializer_139/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_139"
  op: "Assign"
  input: "conv2d_7/kernel/Momentum"
  input: "checkpoint_initializer_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_140/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_140/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_140/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_140"
  op: "RestoreV2"
  input: "checkpoint_initializer_140/prefix"
  input: "checkpoint_initializer_140/tensor_names"
  input: "checkpoint_initializer_140/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_140"
  op: "Assign"
  input: "conv2d_8/kernel"
  input: "checkpoint_initializer_140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_141/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_141/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_8/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_141/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_141"
  op: "RestoreV2"
  input: "checkpoint_initializer_141/prefix"
  input: "checkpoint_initializer_141/tensor_names"
  input: "checkpoint_initializer_141/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_141"
  op: "Assign"
  input: "conv2d_8/kernel/Momentum"
  input: "checkpoint_initializer_141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_142/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_142/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_142/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_142"
  op: "RestoreV2"
  input: "checkpoint_initializer_142/prefix"
  input: "checkpoint_initializer_142/tensor_names"
  input: "checkpoint_initializer_142/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_142"
  op: "Assign"
  input: "conv2d_9/kernel"
  input: "checkpoint_initializer_142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "checkpoint_initializer_143/prefix"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "./pretrained/testrun2/model.ckpt-250200"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_143/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2d_9/kernel/Momentum"
      }
    }
  }
}
node {
  name: "checkpoint_initializer_143/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "checkpoint_initializer_143"
  op: "RestoreV2"
  input: "checkpoint_initializer_143/prefix"
  input: "checkpoint_initializer_143/tensor_names"
  input: "checkpoint_initializer_143/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Assign_143"
  op: "Assign"
  input: "conv2d_9/kernel/Momentum"
  input: "checkpoint_initializer_143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Assign"
  input: "^Assign_1"
  input: "^Assign_10"
  input: "^Assign_100"
  input: "^Assign_101"
  input: "^Assign_102"
  input: "^Assign_103"
  input: "^Assign_104"
  input: "^Assign_105"
  input: "^Assign_106"
  input: "^Assign_107"
  input: "^Assign_108"
  input: "^Assign_109"
  input: "^Assign_11"
  input: "^Assign_110"
  input: "^Assign_111"
  input: "^Assign_112"
  input: "^Assign_113"
  input: "^Assign_114"
  input: "^Assign_115"
  input: "^Assign_116"
  input: "^Assign_117"
  input: "^Assign_118"
  input: "^Assign_119"
  input: "^Assign_12"
  input: "^Assign_120"
  input: "^Assign_121"
  input: "^Assign_122"
  input: "^Assign_123"
  input: "^Assign_124"
  input: "^Assign_125"
  input: "^Assign_126"
  input: "^Assign_127"
  input: "^Assign_128"
  input: "^Assign_129"
  input: "^Assign_13"
  input: "^Assign_130"
  input: "^Assign_131"
  input: "^Assign_132"
  input: "^Assign_133"
  input: "^Assign_134"
  input: "^Assign_135"
  input: "^Assign_136"
  input: "^Assign_137"
  input: "^Assign_138"
  input: "^Assign_139"
  input: "^Assign_14"
  input: "^Assign_140"
  input: "^Assign_141"
  input: "^Assign_142"
  input: "^Assign_143"
  input: "^Assign_15"
  input: "^Assign_16"
  input: "^Assign_17"
  input: "^Assign_18"
  input: "^Assign_19"
  input: "^Assign_2"
  input: "^Assign_20"
  input: "^Assign_21"
  input: "^Assign_22"
  input: "^Assign_23"
  input: "^Assign_24"
  input: "^Assign_25"
  input: "^Assign_26"
  input: "^Assign_27"
  input: "^Assign_28"
  input: "^Assign_29"
  input: "^Assign_3"
  input: "^Assign_30"
  input: "^Assign_31"
  input: "^Assign_32"
  input: "^Assign_33"
  input: "^Assign_34"
  input: "^Assign_35"
  input: "^Assign_36"
  input: "^Assign_37"
  input: "^Assign_38"
  input: "^Assign_39"
  input: "^Assign_4"
  input: "^Assign_40"
  input: "^Assign_41"
  input: "^Assign_42"
  input: "^Assign_43"
  input: "^Assign_44"
  input: "^Assign_45"
  input: "^Assign_46"
  input: "^Assign_47"
  input: "^Assign_48"
  input: "^Assign_49"
  input: "^Assign_5"
  input: "^Assign_50"
  input: "^Assign_51"
  input: "^Assign_52"
  input: "^Assign_53"
  input: "^Assign_54"
  input: "^Assign_55"
  input: "^Assign_56"
  input: "^Assign_57"
  input: "^Assign_58"
  input: "^Assign_59"
  input: "^Assign_6"
  input: "^Assign_60"
  input: "^Assign_61"
  input: "^Assign_62"
  input: "^Assign_63"
  input: "^Assign_64"
  input: "^Assign_65"
  input: "^Assign_66"
  input: "^Assign_67"
  input: "^Assign_68"
  input: "^Assign_69"
  input: "^Assign_7"
  input: "^Assign_70"
  input: "^Assign_71"
  input: "^Assign_72"
  input: "^Assign_73"
  input: "^Assign_74"
  input: "^Assign_75"
  input: "^Assign_76"
  input: "^Assign_77"
  input: "^Assign_78"
  input: "^Assign_79"
  input: "^Assign_8"
  input: "^Assign_80"
  input: "^Assign_81"
  input: "^Assign_82"
  input: "^Assign_83"
  input: "^Assign_84"
  input: "^Assign_85"
  input: "^Assign_86"
  input: "^Assign_87"
  input: "^Assign_88"
  input: "^Assign_89"
  input: "^Assign_9"
  input: "^Assign_90"
  input: "^Assign_91"
  input: "^Assign_92"
  input: "^Assign_93"
  input: "^Assign_94"
  input: "^Assign_95"
  input: "^Assign_96"
  input: "^Assign_97"
  input: "^Assign_98"
  input: "^Assign_99"
  input: "^global_step/Assign"
  input: "^readout_layer/bias/Assign"
  input: "^readout_layer/bias/Momentum/Assign"
  input: "^readout_layer/kernel/Assign"
  input: "^readout_layer/kernel/Momentum/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv2d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "conv2d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "conv2d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "conv2d_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "conv2d_5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "conv2d_6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "conv2d_7/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "conv2d_8/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "conv2d_9/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "conv2d_10/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "conv2d_11/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "conv2d_12/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "conv2d_13/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "conv2d_14/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "conv2d_15/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "conv2d_16/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "conv2d_17/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "conv2d_18/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "conv2d_19/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "conv2d_20/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_89"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_90"
  op: "IsVariableInitialized"
  input: "readout_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_91"
  op: "IsVariableInitialized"
  input: "readout_layer/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_92"
  op: "IsVariableInitialized"
  input: "conv2d/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_93"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_94"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_95"
  op: "IsVariableInitialized"
  input: "conv2d_1/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_96"
  op: "IsVariableInitialized"
  input: "conv2d_2/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_97"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_98"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_99"
  op: "IsVariableInitialized"
  input: "conv2d_3/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_100"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_101"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_102"
  op: "IsVariableInitialized"
  input: "conv2d_4/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_103"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_104"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_105"
  op: "IsVariableInitialized"
  input: "conv2d_5/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_106"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_107"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_108"
  op: "IsVariableInitialized"
  input: "conv2d_6/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_109"
  op: "IsVariableInitialized"
  input: "conv2d_7/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_110"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_111"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_112"
  op: "IsVariableInitialized"
  input: "conv2d_8/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_113"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_114"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_115"
  op: "IsVariableInitialized"
  input: "conv2d_9/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_116"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_117"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_118"
  op: "IsVariableInitialized"
  input: "conv2d_10/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_119"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_120"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_121"
  op: "IsVariableInitialized"
  input: "conv2d_11/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_122"
  op: "IsVariableInitialized"
  input: "conv2d_12/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_123"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_124"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_125"
  op: "IsVariableInitialized"
  input: "conv2d_13/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_126"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_127"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_128"
  op: "IsVariableInitialized"
  input: "conv2d_14/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_129"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_130"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_131"
  op: "IsVariableInitialized"
  input: "conv2d_15/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_132"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_133"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_134"
  op: "IsVariableInitialized"
  input: "conv2d_16/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_135"
  op: "IsVariableInitialized"
  input: "conv2d_17/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_136"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_137"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_138"
  op: "IsVariableInitialized"
  input: "conv2d_18/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_139"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_140"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_141"
  op: "IsVariableInitialized"
  input: "conv2d_19/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_142"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_143"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_144"
  op: "IsVariableInitialized"
  input: "conv2d_20/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_145"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_146"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_147"
  op: "IsVariableInitialized"
  input: "readout_layer/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_148"
  op: "IsVariableInitialized"
  input: "readout_layer/bias/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_149"
  op: "IsVariableInitialized"
  input: "accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_150"
  op: "IsVariableInitialized"
  input: "accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  input: "report_uninitialized_variables/IsVariableInitialized_64"
  input: "report_uninitialized_variables/IsVariableInitialized_65"
  input: "report_uninitialized_variables/IsVariableInitialized_66"
  input: "report_uninitialized_variables/IsVariableInitialized_67"
  input: "report_uninitialized_variables/IsVariableInitialized_68"
  input: "report_uninitialized_variables/IsVariableInitialized_69"
  input: "report_uninitialized_variables/IsVariableInitialized_70"
  input: "report_uninitialized_variables/IsVariableInitialized_71"
  input: "report_uninitialized_variables/IsVariableInitialized_72"
  input: "report_uninitialized_variables/IsVariableInitialized_73"
  input: "report_uninitialized_variables/IsVariableInitialized_74"
  input: "report_uninitialized_variables/IsVariableInitialized_75"
  input: "report_uninitialized_variables/IsVariableInitialized_76"
  input: "report_uninitialized_variables/IsVariableInitialized_77"
  input: "report_uninitialized_variables/IsVariableInitialized_78"
  input: "report_uninitialized_variables/IsVariableInitialized_79"
  input: "report_uninitialized_variables/IsVariableInitialized_80"
  input: "report_uninitialized_variables/IsVariableInitialized_81"
  input: "report_uninitialized_variables/IsVariableInitialized_82"
  input: "report_uninitialized_variables/IsVariableInitialized_83"
  input: "report_uninitialized_variables/IsVariableInitialized_84"
  input: "report_uninitialized_variables/IsVariableInitialized_85"
  input: "report_uninitialized_variables/IsVariableInitialized_86"
  input: "report_uninitialized_variables/IsVariableInitialized_87"
  input: "report_uninitialized_variables/IsVariableInitialized_88"
  input: "report_uninitialized_variables/IsVariableInitialized_89"
  input: "report_uninitialized_variables/IsVariableInitialized_90"
  input: "report_uninitialized_variables/IsVariableInitialized_91"
  input: "report_uninitialized_variables/IsVariableInitialized_92"
  input: "report_uninitialized_variables/IsVariableInitialized_93"
  input: "report_uninitialized_variables/IsVariableInitialized_94"
  input: "report_uninitialized_variables/IsVariableInitialized_95"
  input: "report_uninitialized_variables/IsVariableInitialized_96"
  input: "report_uninitialized_variables/IsVariableInitialized_97"
  input: "report_uninitialized_variables/IsVariableInitialized_98"
  input: "report_uninitialized_variables/IsVariableInitialized_99"
  input: "report_uninitialized_variables/IsVariableInitialized_100"
  input: "report_uninitialized_variables/IsVariableInitialized_101"
  input: "report_uninitialized_variables/IsVariableInitialized_102"
  input: "report_uninitialized_variables/IsVariableInitialized_103"
  input: "report_uninitialized_variables/IsVariableInitialized_104"
  input: "report_uninitialized_variables/IsVariableInitialized_105"
  input: "report_uninitialized_variables/IsVariableInitialized_106"
  input: "report_uninitialized_variables/IsVariableInitialized_107"
  input: "report_uninitialized_variables/IsVariableInitialized_108"
  input: "report_uninitialized_variables/IsVariableInitialized_109"
  input: "report_uninitialized_variables/IsVariableInitialized_110"
  input: "report_uninitialized_variables/IsVariableInitialized_111"
  input: "report_uninitialized_variables/IsVariableInitialized_112"
  input: "report_uninitialized_variables/IsVariableInitialized_113"
  input: "report_uninitialized_variables/IsVariableInitialized_114"
  input: "report_uninitialized_variables/IsVariableInitialized_115"
  input: "report_uninitialized_variables/IsVariableInitialized_116"
  input: "report_uninitialized_variables/IsVariableInitialized_117"
  input: "report_uninitialized_variables/IsVariableInitialized_118"
  input: "report_uninitialized_variables/IsVariableInitialized_119"
  input: "report_uninitialized_variables/IsVariableInitialized_120"
  input: "report_uninitialized_variables/IsVariableInitialized_121"
  input: "report_uninitialized_variables/IsVariableInitialized_122"
  input: "report_uninitialized_variables/IsVariableInitialized_123"
  input: "report_uninitialized_variables/IsVariableInitialized_124"
  input: "report_uninitialized_variables/IsVariableInitialized_125"
  input: "report_uninitialized_variables/IsVariableInitialized_126"
  input: "report_uninitialized_variables/IsVariableInitialized_127"
  input: "report_uninitialized_variables/IsVariableInitialized_128"
  input: "report_uninitialized_variables/IsVariableInitialized_129"
  input: "report_uninitialized_variables/IsVariableInitialized_130"
  input: "report_uninitialized_variables/IsVariableInitialized_131"
  input: "report_uninitialized_variables/IsVariableInitialized_132"
  input: "report_uninitialized_variables/IsVariableInitialized_133"
  input: "report_uninitialized_variables/IsVariableInitialized_134"
  input: "report_uninitialized_variables/IsVariableInitialized_135"
  input: "report_uninitialized_variables/IsVariableInitialized_136"
  input: "report_uninitialized_variables/IsVariableInitialized_137"
  input: "report_uninitialized_variables/IsVariableInitialized_138"
  input: "report_uninitialized_variables/IsVariableInitialized_139"
  input: "report_uninitialized_variables/IsVariableInitialized_140"
  input: "report_uninitialized_variables/IsVariableInitialized_141"
  input: "report_uninitialized_variables/IsVariableInitialized_142"
  input: "report_uninitialized_variables/IsVariableInitialized_143"
  input: "report_uninitialized_variables/IsVariableInitialized_144"
  input: "report_uninitialized_variables/IsVariableInitialized_145"
  input: "report_uninitialized_variables/IsVariableInitialized_146"
  input: "report_uninitialized_variables/IsVariableInitialized_147"
  input: "report_uninitialized_variables/IsVariableInitialized_148"
  input: "report_uninitialized_variables/IsVariableInitialized_149"
  input: "report_uninitialized_variables/IsVariableInitialized_150"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 151
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 151
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 151
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 151
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 151
          }
        }
        string_val: "global_step"
        string_val: "conv2d/kernel"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_2/kernel"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "conv2d_3/kernel"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "conv2d_4/kernel"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "conv2d_5/kernel"
        string_val: "batch_normalization_4/gamma"
        string_val: "batch_normalization_4/beta"
        string_val: "batch_normalization_4/moving_mean"
        string_val: "batch_normalization_4/moving_variance"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_7/kernel"
        string_val: "batch_normalization_5/gamma"
        string_val: "batch_normalization_5/beta"
        string_val: "batch_normalization_5/moving_mean"
        string_val: "batch_normalization_5/moving_variance"
        string_val: "conv2d_8/kernel"
        string_val: "batch_normalization_6/gamma"
        string_val: "batch_normalization_6/beta"
        string_val: "batch_normalization_6/moving_mean"
        string_val: "batch_normalization_6/moving_variance"
        string_val: "conv2d_9/kernel"
        string_val: "batch_normalization_7/gamma"
        string_val: "batch_normalization_7/beta"
        string_val: "batch_normalization_7/moving_mean"
        string_val: "batch_normalization_7/moving_variance"
        string_val: "conv2d_10/kernel"
        string_val: "batch_normalization_8/gamma"
        string_val: "batch_normalization_8/beta"
        string_val: "batch_normalization_8/moving_mean"
        string_val: "batch_normalization_8/moving_variance"
        string_val: "conv2d_11/kernel"
        string_val: "conv2d_12/kernel"
        string_val: "batch_normalization_9/gamma"
        string_val: "batch_normalization_9/beta"
        string_val: "batch_normalization_9/moving_mean"
        string_val: "batch_normalization_9/moving_variance"
        string_val: "conv2d_13/kernel"
        string_val: "batch_normalization_10/gamma"
        string_val: "batch_normalization_10/beta"
        string_val: "batch_normalization_10/moving_mean"
        string_val: "batch_normalization_10/moving_variance"
        string_val: "conv2d_14/kernel"
        string_val: "batch_normalization_11/gamma"
        string_val: "batch_normalization_11/beta"
        string_val: "batch_normalization_11/moving_mean"
        string_val: "batch_normalization_11/moving_variance"
        string_val: "conv2d_15/kernel"
        string_val: "batch_normalization_12/gamma"
        string_val: "batch_normalization_12/beta"
        string_val: "batch_normalization_12/moving_mean"
        string_val: "batch_normalization_12/moving_variance"
        string_val: "conv2d_16/kernel"
        string_val: "conv2d_17/kernel"
        string_val: "batch_normalization_13/gamma"
        string_val: "batch_normalization_13/beta"
        string_val: "batch_normalization_13/moving_mean"
        string_val: "batch_normalization_13/moving_variance"
        string_val: "conv2d_18/kernel"
        string_val: "batch_normalization_14/gamma"
        string_val: "batch_normalization_14/beta"
        string_val: "batch_normalization_14/moving_mean"
        string_val: "batch_normalization_14/moving_variance"
        string_val: "conv2d_19/kernel"
        string_val: "batch_normalization_15/gamma"
        string_val: "batch_normalization_15/beta"
        string_val: "batch_normalization_15/moving_mean"
        string_val: "batch_normalization_15/moving_variance"
        string_val: "conv2d_20/kernel"
        string_val: "batch_normalization_16/gamma"
        string_val: "batch_normalization_16/beta"
        string_val: "batch_normalization_16/moving_mean"
        string_val: "batch_normalization_16/moving_variance"
        string_val: "readout_layer/kernel"
        string_val: "readout_layer/bias"
        string_val: "conv2d/kernel/Momentum"
        string_val: "batch_normalization/gamma/Momentum"
        string_val: "batch_normalization/beta/Momentum"
        string_val: "conv2d_1/kernel/Momentum"
        string_val: "conv2d_2/kernel/Momentum"
        string_val: "batch_normalization_1/gamma/Momentum"
        string_val: "batch_normalization_1/beta/Momentum"
        string_val: "conv2d_3/kernel/Momentum"
        string_val: "batch_normalization_2/gamma/Momentum"
        string_val: "batch_normalization_2/beta/Momentum"
        string_val: "conv2d_4/kernel/Momentum"
        string_val: "batch_normalization_3/gamma/Momentum"
        string_val: "batch_normalization_3/beta/Momentum"
        string_val: "conv2d_5/kernel/Momentum"
        string_val: "batch_normalization_4/gamma/Momentum"
        string_val: "batch_normalization_4/beta/Momentum"
        string_val: "conv2d_6/kernel/Momentum"
        string_val: "conv2d_7/kernel/Momentum"
        string_val: "batch_normalization_5/gamma/Momentum"
        string_val: "batch_normalization_5/beta/Momentum"
        string_val: "conv2d_8/kernel/Momentum"
        string_val: "batch_normalization_6/gamma/Momentum"
        string_val: "batch_normalization_6/beta/Momentum"
        string_val: "conv2d_9/kernel/Momentum"
        string_val: "batch_normalization_7/gamma/Momentum"
        string_val: "batch_normalization_7/beta/Momentum"
        string_val: "conv2d_10/kernel/Momentum"
        string_val: "batch_normalization_8/gamma/Momentum"
        string_val: "batch_normalization_8/beta/Momentum"
        string_val: "conv2d_11/kernel/Momentum"
        string_val: "conv2d_12/kernel/Momentum"
        string_val: "batch_normalization_9/gamma/Momentum"
        string_val: "batch_normalization_9/beta/Momentum"
        string_val: "conv2d_13/kernel/Momentum"
        string_val: "batch_normalization_10/gamma/Momentum"
        string_val: "batch_normalization_10/beta/Momentum"
        string_val: "conv2d_14/kernel/Momentum"
        string_val: "batch_normalization_11/gamma/Momentum"
        string_val: "batch_normalization_11/beta/Momentum"
        string_val: "conv2d_15/kernel/Momentum"
        string_val: "batch_normalization_12/gamma/Momentum"
        string_val: "batch_normalization_12/beta/Momentum"
        string_val: "conv2d_16/kernel/Momentum"
        string_val: "conv2d_17/kernel/Momentum"
        string_val: "batch_normalization_13/gamma/Momentum"
        string_val: "batch_normalization_13/beta/Momentum"
        string_val: "conv2d_18/kernel/Momentum"
        string_val: "batch_normalization_14/gamma/Momentum"
        string_val: "batch_normalization_14/beta/Momentum"
        string_val: "conv2d_19/kernel/Momentum"
        string_val: "batch_normalization_15/gamma/Momentum"
        string_val: "batch_normalization_15/beta/Momentum"
        string_val: "conv2d_20/kernel/Momentum"
        string_val: "batch_normalization_16/gamma/Momentum"
        string_val: "batch_normalization_16/beta/Momentum"
        string_val: "readout_layer/kernel/Momentum"
        string_val: "readout_layer/bias/Momentum"
        string_val: "accuracy/total"
        string_val: "accuracy/count"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 151
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 151
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 151
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 151
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 151
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv2d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "conv2d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "conv2d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "conv2d_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "conv2d_5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "conv2d_6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "conv2d_7/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "conv2d_8/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "conv2d_9/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "conv2d_10/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "conv2d_11/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "conv2d_12/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "conv2d_13/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "conv2d_14/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "conv2d_15/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "conv2d_16/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "conv2d_17/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "conv2d_18/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "conv2d_19/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "conv2d_20/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_89"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_90"
  op: "IsVariableInitialized"
  input: "readout_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_91"
  op: "IsVariableInitialized"
  input: "readout_layer/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_92"
  op: "IsVariableInitialized"
  input: "conv2d/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_93"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_94"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_95"
  op: "IsVariableInitialized"
  input: "conv2d_1/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_96"
  op: "IsVariableInitialized"
  input: "conv2d_2/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_97"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_98"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_99"
  op: "IsVariableInitialized"
  input: "conv2d_3/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_100"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_101"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_102"
  op: "IsVariableInitialized"
  input: "conv2d_4/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_103"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_104"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_105"
  op: "IsVariableInitialized"
  input: "conv2d_5/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_106"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_107"
  op: "IsVariableInitialized"
  input: "batch_normalization_4/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_108"
  op: "IsVariableInitialized"
  input: "conv2d_6/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_109"
  op: "IsVariableInitialized"
  input: "conv2d_7/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_110"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_111"
  op: "IsVariableInitialized"
  input: "batch_normalization_5/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_112"
  op: "IsVariableInitialized"
  input: "conv2d_8/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_113"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_114"
  op: "IsVariableInitialized"
  input: "batch_normalization_6/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_115"
  op: "IsVariableInitialized"
  input: "conv2d_9/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_116"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_117"
  op: "IsVariableInitialized"
  input: "batch_normalization_7/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_118"
  op: "IsVariableInitialized"
  input: "conv2d_10/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_119"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_120"
  op: "IsVariableInitialized"
  input: "batch_normalization_8/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_121"
  op: "IsVariableInitialized"
  input: "conv2d_11/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_122"
  op: "IsVariableInitialized"
  input: "conv2d_12/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_123"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_124"
  op: "IsVariableInitialized"
  input: "batch_normalization_9/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_125"
  op: "IsVariableInitialized"
  input: "conv2d_13/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_126"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_127"
  op: "IsVariableInitialized"
  input: "batch_normalization_10/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_128"
  op: "IsVariableInitialized"
  input: "conv2d_14/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_129"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_130"
  op: "IsVariableInitialized"
  input: "batch_normalization_11/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_131"
  op: "IsVariableInitialized"
  input: "conv2d_15/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_132"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_133"
  op: "IsVariableInitialized"
  input: "batch_normalization_12/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_134"
  op: "IsVariableInitialized"
  input: "conv2d_16/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_135"
  op: "IsVariableInitialized"
  input: "conv2d_17/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_136"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_137"
  op: "IsVariableInitialized"
  input: "batch_normalization_13/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_138"
  op: "IsVariableInitialized"
  input: "conv2d_18/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_139"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_140"
  op: "IsVariableInitialized"
  input: "batch_normalization_14/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_141"
  op: "IsVariableInitialized"
  input: "conv2d_19/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_142"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_143"
  op: "IsVariableInitialized"
  input: "batch_normalization_15/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_144"
  op: "IsVariableInitialized"
  input: "conv2d_20/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_145"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/gamma/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_146"
  op: "IsVariableInitialized"
  input: "batch_normalization_16/beta/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_147"
  op: "IsVariableInitialized"
  input: "readout_layer/kernel/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_148"
  op: "IsVariableInitialized"
  input: "readout_layer/bias/Momentum"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  input: "report_uninitialized_variables_1/IsVariableInitialized_49"
  input: "report_uninitialized_variables_1/IsVariableInitialized_50"
  input: "report_uninitialized_variables_1/IsVariableInitialized_51"
  input: "report_uninitialized_variables_1/IsVariableInitialized_52"
  input: "report_uninitialized_variables_1/IsVariableInitialized_53"
  input: "report_uninitialized_variables_1/IsVariableInitialized_54"
  input: "report_uninitialized_variables_1/IsVariableInitialized_55"
  input: "report_uninitialized_variables_1/IsVariableInitialized_56"
  input: "report_uninitialized_variables_1/IsVariableInitialized_57"
  input: "report_uninitialized_variables_1/IsVariableInitialized_58"
  input: "report_uninitialized_variables_1/IsVariableInitialized_59"
  input: "report_uninitialized_variables_1/IsVariableInitialized_60"
  input: "report_uninitialized_variables_1/IsVariableInitialized_61"
  input: "report_uninitialized_variables_1/IsVariableInitialized_62"
  input: "report_uninitialized_variables_1/IsVariableInitialized_63"
  input: "report_uninitialized_variables_1/IsVariableInitialized_64"
  input: "report_uninitialized_variables_1/IsVariableInitialized_65"
  input: "report_uninitialized_variables_1/IsVariableInitialized_66"
  input: "report_uninitialized_variables_1/IsVariableInitialized_67"
  input: "report_uninitialized_variables_1/IsVariableInitialized_68"
  input: "report_uninitialized_variables_1/IsVariableInitialized_69"
  input: "report_uninitialized_variables_1/IsVariableInitialized_70"
  input: "report_uninitialized_variables_1/IsVariableInitialized_71"
  input: "report_uninitialized_variables_1/IsVariableInitialized_72"
  input: "report_uninitialized_variables_1/IsVariableInitialized_73"
  input: "report_uninitialized_variables_1/IsVariableInitialized_74"
  input: "report_uninitialized_variables_1/IsVariableInitialized_75"
  input: "report_uninitialized_variables_1/IsVariableInitialized_76"
  input: "report_uninitialized_variables_1/IsVariableInitialized_77"
  input: "report_uninitialized_variables_1/IsVariableInitialized_78"
  input: "report_uninitialized_variables_1/IsVariableInitialized_79"
  input: "report_uninitialized_variables_1/IsVariableInitialized_80"
  input: "report_uninitialized_variables_1/IsVariableInitialized_81"
  input: "report_uninitialized_variables_1/IsVariableInitialized_82"
  input: "report_uninitialized_variables_1/IsVariableInitialized_83"
  input: "report_uninitialized_variables_1/IsVariableInitialized_84"
  input: "report_uninitialized_variables_1/IsVariableInitialized_85"
  input: "report_uninitialized_variables_1/IsVariableInitialized_86"
  input: "report_uninitialized_variables_1/IsVariableInitialized_87"
  input: "report_uninitialized_variables_1/IsVariableInitialized_88"
  input: "report_uninitialized_variables_1/IsVariableInitialized_89"
  input: "report_uninitialized_variables_1/IsVariableInitialized_90"
  input: "report_uninitialized_variables_1/IsVariableInitialized_91"
  input: "report_uninitialized_variables_1/IsVariableInitialized_92"
  input: "report_uninitialized_variables_1/IsVariableInitialized_93"
  input: "report_uninitialized_variables_1/IsVariableInitialized_94"
  input: "report_uninitialized_variables_1/IsVariableInitialized_95"
  input: "report_uninitialized_variables_1/IsVariableInitialized_96"
  input: "report_uninitialized_variables_1/IsVariableInitialized_97"
  input: "report_uninitialized_variables_1/IsVariableInitialized_98"
  input: "report_uninitialized_variables_1/IsVariableInitialized_99"
  input: "report_uninitialized_variables_1/IsVariableInitialized_100"
  input: "report_uninitialized_variables_1/IsVariableInitialized_101"
  input: "report_uninitialized_variables_1/IsVariableInitialized_102"
  input: "report_uninitialized_variables_1/IsVariableInitialized_103"
  input: "report_uninitialized_variables_1/IsVariableInitialized_104"
  input: "report_uninitialized_variables_1/IsVariableInitialized_105"
  input: "report_uninitialized_variables_1/IsVariableInitialized_106"
  input: "report_uninitialized_variables_1/IsVariableInitialized_107"
  input: "report_uninitialized_variables_1/IsVariableInitialized_108"
  input: "report_uninitialized_variables_1/IsVariableInitialized_109"
  input: "report_uninitialized_variables_1/IsVariableInitialized_110"
  input: "report_uninitialized_variables_1/IsVariableInitialized_111"
  input: "report_uninitialized_variables_1/IsVariableInitialized_112"
  input: "report_uninitialized_variables_1/IsVariableInitialized_113"
  input: "report_uninitialized_variables_1/IsVariableInitialized_114"
  input: "report_uninitialized_variables_1/IsVariableInitialized_115"
  input: "report_uninitialized_variables_1/IsVariableInitialized_116"
  input: "report_uninitialized_variables_1/IsVariableInitialized_117"
  input: "report_uninitialized_variables_1/IsVariableInitialized_118"
  input: "report_uninitialized_variables_1/IsVariableInitialized_119"
  input: "report_uninitialized_variables_1/IsVariableInitialized_120"
  input: "report_uninitialized_variables_1/IsVariableInitialized_121"
  input: "report_uninitialized_variables_1/IsVariableInitialized_122"
  input: "report_uninitialized_variables_1/IsVariableInitialized_123"
  input: "report_uninitialized_variables_1/IsVariableInitialized_124"
  input: "report_uninitialized_variables_1/IsVariableInitialized_125"
  input: "report_uninitialized_variables_1/IsVariableInitialized_126"
  input: "report_uninitialized_variables_1/IsVariableInitialized_127"
  input: "report_uninitialized_variables_1/IsVariableInitialized_128"
  input: "report_uninitialized_variables_1/IsVariableInitialized_129"
  input: "report_uninitialized_variables_1/IsVariableInitialized_130"
  input: "report_uninitialized_variables_1/IsVariableInitialized_131"
  input: "report_uninitialized_variables_1/IsVariableInitialized_132"
  input: "report_uninitialized_variables_1/IsVariableInitialized_133"
  input: "report_uninitialized_variables_1/IsVariableInitialized_134"
  input: "report_uninitialized_variables_1/IsVariableInitialized_135"
  input: "report_uninitialized_variables_1/IsVariableInitialized_136"
  input: "report_uninitialized_variables_1/IsVariableInitialized_137"
  input: "report_uninitialized_variables_1/IsVariableInitialized_138"
  input: "report_uninitialized_variables_1/IsVariableInitialized_139"
  input: "report_uninitialized_variables_1/IsVariableInitialized_140"
  input: "report_uninitialized_variables_1/IsVariableInitialized_141"
  input: "report_uninitialized_variables_1/IsVariableInitialized_142"
  input: "report_uninitialized_variables_1/IsVariableInitialized_143"
  input: "report_uninitialized_variables_1/IsVariableInitialized_144"
  input: "report_uninitialized_variables_1/IsVariableInitialized_145"
  input: "report_uninitialized_variables_1/IsVariableInitialized_146"
  input: "report_uninitialized_variables_1/IsVariableInitialized_147"
  input: "report_uninitialized_variables_1/IsVariableInitialized_148"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 149
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: "global_step"
        string_val: "conv2d/kernel"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_2/kernel"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "conv2d_3/kernel"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "conv2d_4/kernel"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "conv2d_5/kernel"
        string_val: "batch_normalization_4/gamma"
        string_val: "batch_normalization_4/beta"
        string_val: "batch_normalization_4/moving_mean"
        string_val: "batch_normalization_4/moving_variance"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_7/kernel"
        string_val: "batch_normalization_5/gamma"
        string_val: "batch_normalization_5/beta"
        string_val: "batch_normalization_5/moving_mean"
        string_val: "batch_normalization_5/moving_variance"
        string_val: "conv2d_8/kernel"
        string_val: "batch_normalization_6/gamma"
        string_val: "batch_normalization_6/beta"
        string_val: "batch_normalization_6/moving_mean"
        string_val: "batch_normalization_6/moving_variance"
        string_val: "conv2d_9/kernel"
        string_val: "batch_normalization_7/gamma"
        string_val: "batch_normalization_7/beta"
        string_val: "batch_normalization_7/moving_mean"
        string_val: "batch_normalization_7/moving_variance"
        string_val: "conv2d_10/kernel"
        string_val: "batch_normalization_8/gamma"
        string_val: "batch_normalization_8/beta"
        string_val: "batch_normalization_8/moving_mean"
        string_val: "batch_normalization_8/moving_variance"
        string_val: "conv2d_11/kernel"
        string_val: "conv2d_12/kernel"
        string_val: "batch_normalization_9/gamma"
        string_val: "batch_normalization_9/beta"
        string_val: "batch_normalization_9/moving_mean"
        string_val: "batch_normalization_9/moving_variance"
        string_val: "conv2d_13/kernel"
        string_val: "batch_normalization_10/gamma"
        string_val: "batch_normalization_10/beta"
        string_val: "batch_normalization_10/moving_mean"
        string_val: "batch_normalization_10/moving_variance"
        string_val: "conv2d_14/kernel"
        string_val: "batch_normalization_11/gamma"
        string_val: "batch_normalization_11/beta"
        string_val: "batch_normalization_11/moving_mean"
        string_val: "batch_normalization_11/moving_variance"
        string_val: "conv2d_15/kernel"
        string_val: "batch_normalization_12/gamma"
        string_val: "batch_normalization_12/beta"
        string_val: "batch_normalization_12/moving_mean"
        string_val: "batch_normalization_12/moving_variance"
        string_val: "conv2d_16/kernel"
        string_val: "conv2d_17/kernel"
        string_val: "batch_normalization_13/gamma"
        string_val: "batch_normalization_13/beta"
        string_val: "batch_normalization_13/moving_mean"
        string_val: "batch_normalization_13/moving_variance"
        string_val: "conv2d_18/kernel"
        string_val: "batch_normalization_14/gamma"
        string_val: "batch_normalization_14/beta"
        string_val: "batch_normalization_14/moving_mean"
        string_val: "batch_normalization_14/moving_variance"
        string_val: "conv2d_19/kernel"
        string_val: "batch_normalization_15/gamma"
        string_val: "batch_normalization_15/beta"
        string_val: "batch_normalization_15/moving_mean"
        string_val: "batch_normalization_15/moving_variance"
        string_val: "conv2d_20/kernel"
        string_val: "batch_normalization_16/gamma"
        string_val: "batch_normalization_16/beta"
        string_val: "batch_normalization_16/moving_mean"
        string_val: "batch_normalization_16/moving_variance"
        string_val: "readout_layer/kernel"
        string_val: "readout_layer/bias"
        string_val: "conv2d/kernel/Momentum"
        string_val: "batch_normalization/gamma/Momentum"
        string_val: "batch_normalization/beta/Momentum"
        string_val: "conv2d_1/kernel/Momentum"
        string_val: "conv2d_2/kernel/Momentum"
        string_val: "batch_normalization_1/gamma/Momentum"
        string_val: "batch_normalization_1/beta/Momentum"
        string_val: "conv2d_3/kernel/Momentum"
        string_val: "batch_normalization_2/gamma/Momentum"
        string_val: "batch_normalization_2/beta/Momentum"
        string_val: "conv2d_4/kernel/Momentum"
        string_val: "batch_normalization_3/gamma/Momentum"
        string_val: "batch_normalization_3/beta/Momentum"
        string_val: "conv2d_5/kernel/Momentum"
        string_val: "batch_normalization_4/gamma/Momentum"
        string_val: "batch_normalization_4/beta/Momentum"
        string_val: "conv2d_6/kernel/Momentum"
        string_val: "conv2d_7/kernel/Momentum"
        string_val: "batch_normalization_5/gamma/Momentum"
        string_val: "batch_normalization_5/beta/Momentum"
        string_val: "conv2d_8/kernel/Momentum"
        string_val: "batch_normalization_6/gamma/Momentum"
        string_val: "batch_normalization_6/beta/Momentum"
        string_val: "conv2d_9/kernel/Momentum"
        string_val: "batch_normalization_7/gamma/Momentum"
        string_val: "batch_normalization_7/beta/Momentum"
        string_val: "conv2d_10/kernel/Momentum"
        string_val: "batch_normalization_8/gamma/Momentum"
        string_val: "batch_normalization_8/beta/Momentum"
        string_val: "conv2d_11/kernel/Momentum"
        string_val: "conv2d_12/kernel/Momentum"
        string_val: "batch_normalization_9/gamma/Momentum"
        string_val: "batch_normalization_9/beta/Momentum"
        string_val: "conv2d_13/kernel/Momentum"
        string_val: "batch_normalization_10/gamma/Momentum"
        string_val: "batch_normalization_10/beta/Momentum"
        string_val: "conv2d_14/kernel/Momentum"
        string_val: "batch_normalization_11/gamma/Momentum"
        string_val: "batch_normalization_11/beta/Momentum"
        string_val: "conv2d_15/kernel/Momentum"
        string_val: "batch_normalization_12/gamma/Momentum"
        string_val: "batch_normalization_12/beta/Momentum"
        string_val: "conv2d_16/kernel/Momentum"
        string_val: "conv2d_17/kernel/Momentum"
        string_val: "batch_normalization_13/gamma/Momentum"
        string_val: "batch_normalization_13/beta/Momentum"
        string_val: "conv2d_18/kernel/Momentum"
        string_val: "batch_normalization_14/gamma/Momentum"
        string_val: "batch_normalization_14/beta/Momentum"
        string_val: "conv2d_19/kernel/Momentum"
        string_val: "batch_normalization_15/gamma/Momentum"
        string_val: "batch_normalization_15/beta/Momentum"
        string_val: "conv2d_20/kernel/Momentum"
        string_val: "batch_normalization_16/gamma/Momentum"
        string_val: "batch_normalization_16/beta/Momentum"
        string_val: "readout_layer/kernel/Momentum"
        string_val: "readout_layer/bias/Momentum"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 149
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 149
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 149
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^accuracy/count/Assign"
  input: "^accuracy/total/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_2"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "images"
  input: "cross_entropy_1"
  input: "l2_loss"
  input: "learning_rate_1"
  input: "train_accuracy_1"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_d62b7f178ca447c69cc936a590df4b90/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/beta/Momentum"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/gamma/Momentum"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/beta/Momentum"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/gamma/Momentum"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "batch_normalization_10/beta"
        string_val: "batch_normalization_10/beta/Momentum"
        string_val: "batch_normalization_10/gamma"
        string_val: "batch_normalization_10/gamma/Momentum"
        string_val: "batch_normalization_10/moving_mean"
        string_val: "batch_normalization_10/moving_variance"
        string_val: "batch_normalization_11/beta"
        string_val: "batch_normalization_11/beta/Momentum"
        string_val: "batch_normalization_11/gamma"
        string_val: "batch_normalization_11/gamma/Momentum"
        string_val: "batch_normalization_11/moving_mean"
        string_val: "batch_normalization_11/moving_variance"
        string_val: "batch_normalization_12/beta"
        string_val: "batch_normalization_12/beta/Momentum"
        string_val: "batch_normalization_12/gamma"
        string_val: "batch_normalization_12/gamma/Momentum"
        string_val: "batch_normalization_12/moving_mean"
        string_val: "batch_normalization_12/moving_variance"
        string_val: "batch_normalization_13/beta"
        string_val: "batch_normalization_13/beta/Momentum"
        string_val: "batch_normalization_13/gamma"
        string_val: "batch_normalization_13/gamma/Momentum"
        string_val: "batch_normalization_13/moving_mean"
        string_val: "batch_normalization_13/moving_variance"
        string_val: "batch_normalization_14/beta"
        string_val: "batch_normalization_14/beta/Momentum"
        string_val: "batch_normalization_14/gamma"
        string_val: "batch_normalization_14/gamma/Momentum"
        string_val: "batch_normalization_14/moving_mean"
        string_val: "batch_normalization_14/moving_variance"
        string_val: "batch_normalization_15/beta"
        string_val: "batch_normalization_15/beta/Momentum"
        string_val: "batch_normalization_15/gamma"
        string_val: "batch_normalization_15/gamma/Momentum"
        string_val: "batch_normalization_15/moving_mean"
        string_val: "batch_normalization_15/moving_variance"
        string_val: "batch_normalization_16/beta"
        string_val: "batch_normalization_16/beta/Momentum"
        string_val: "batch_normalization_16/gamma"
        string_val: "batch_normalization_16/gamma/Momentum"
        string_val: "batch_normalization_16/moving_mean"
        string_val: "batch_normalization_16/moving_variance"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/beta/Momentum"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/gamma/Momentum"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/beta/Momentum"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/gamma/Momentum"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "batch_normalization_4/beta"
        string_val: "batch_normalization_4/beta/Momentum"
        string_val: "batch_normalization_4/gamma"
        string_val: "batch_normalization_4/gamma/Momentum"
        string_val: "batch_normalization_4/moving_mean"
        string_val: "batch_normalization_4/moving_variance"
        string_val: "batch_normalization_5/beta"
        string_val: "batch_normalization_5/beta/Momentum"
        string_val: "batch_normalization_5/gamma"
        string_val: "batch_normalization_5/gamma/Momentum"
        string_val: "batch_normalization_5/moving_mean"
        string_val: "batch_normalization_5/moving_variance"
        string_val: "batch_normalization_6/beta"
        string_val: "batch_normalization_6/beta/Momentum"
        string_val: "batch_normalization_6/gamma"
        string_val: "batch_normalization_6/gamma/Momentum"
        string_val: "batch_normalization_6/moving_mean"
        string_val: "batch_normalization_6/moving_variance"
        string_val: "batch_normalization_7/beta"
        string_val: "batch_normalization_7/beta/Momentum"
        string_val: "batch_normalization_7/gamma"
        string_val: "batch_normalization_7/gamma/Momentum"
        string_val: "batch_normalization_7/moving_mean"
        string_val: "batch_normalization_7/moving_variance"
        string_val: "batch_normalization_8/beta"
        string_val: "batch_normalization_8/beta/Momentum"
        string_val: "batch_normalization_8/gamma"
        string_val: "batch_normalization_8/gamma/Momentum"
        string_val: "batch_normalization_8/moving_mean"
        string_val: "batch_normalization_8/moving_variance"
        string_val: "batch_normalization_9/beta"
        string_val: "batch_normalization_9/beta/Momentum"
        string_val: "batch_normalization_9/gamma"
        string_val: "batch_normalization_9/gamma/Momentum"
        string_val: "batch_normalization_9/moving_mean"
        string_val: "batch_normalization_9/moving_variance"
        string_val: "conv2d/kernel"
        string_val: "conv2d/kernel/Momentum"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_1/kernel/Momentum"
        string_val: "conv2d_10/kernel"
        string_val: "conv2d_10/kernel/Momentum"
        string_val: "conv2d_11/kernel"
        string_val: "conv2d_11/kernel/Momentum"
        string_val: "conv2d_12/kernel"
        string_val: "conv2d_12/kernel/Momentum"
        string_val: "conv2d_13/kernel"
        string_val: "conv2d_13/kernel/Momentum"
        string_val: "conv2d_14/kernel"
        string_val: "conv2d_14/kernel/Momentum"
        string_val: "conv2d_15/kernel"
        string_val: "conv2d_15/kernel/Momentum"
        string_val: "conv2d_16/kernel"
        string_val: "conv2d_16/kernel/Momentum"
        string_val: "conv2d_17/kernel"
        string_val: "conv2d_17/kernel/Momentum"
        string_val: "conv2d_18/kernel"
        string_val: "conv2d_18/kernel/Momentum"
        string_val: "conv2d_19/kernel"
        string_val: "conv2d_19/kernel/Momentum"
        string_val: "conv2d_2/kernel"
        string_val: "conv2d_2/kernel/Momentum"
        string_val: "conv2d_20/kernel"
        string_val: "conv2d_20/kernel/Momentum"
        string_val: "conv2d_3/kernel"
        string_val: "conv2d_3/kernel/Momentum"
        string_val: "conv2d_4/kernel"
        string_val: "conv2d_4/kernel/Momentum"
        string_val: "conv2d_5/kernel"
        string_val: "conv2d_5/kernel/Momentum"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_6/kernel/Momentum"
        string_val: "conv2d_7/kernel"
        string_val: "conv2d_7/kernel/Momentum"
        string_val: "conv2d_8/kernel"
        string_val: "conv2d_8/kernel/Momentum"
        string_val: "conv2d_9/kernel"
        string_val: "conv2d_9/kernel/Momentum"
        string_val: "global_step"
        string_val: "readout_layer/bias"
        string_val: "readout_layer/bias/Momentum"
        string_val: "readout_layer/kernel"
        string_val: "readout_layer/kernel/Momentum"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Momentum"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Momentum"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Momentum"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Momentum"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_10/beta"
  input: "batch_normalization_10/beta/Momentum"
  input: "batch_normalization_10/gamma"
  input: "batch_normalization_10/gamma/Momentum"
  input: "batch_normalization_10/moving_mean"
  input: "batch_normalization_10/moving_variance"
  input: "batch_normalization_11/beta"
  input: "batch_normalization_11/beta/Momentum"
  input: "batch_normalization_11/gamma"
  input: "batch_normalization_11/gamma/Momentum"
  input: "batch_normalization_11/moving_mean"
  input: "batch_normalization_11/moving_variance"
  input: "batch_normalization_12/beta"
  input: "batch_normalization_12/beta/Momentum"
  input: "batch_normalization_12/gamma"
  input: "batch_normalization_12/gamma/Momentum"
  input: "batch_normalization_12/moving_mean"
  input: "batch_normalization_12/moving_variance"
  input: "batch_normalization_13/beta"
  input: "batch_normalization_13/beta/Momentum"
  input: "batch_normalization_13/gamma"
  input: "batch_normalization_13/gamma/Momentum"
  input: "batch_normalization_13/moving_mean"
  input: "batch_normalization_13/moving_variance"
  input: "batch_normalization_14/beta"
  input: "batch_normalization_14/beta/Momentum"
  input: "batch_normalization_14/gamma"
  input: "batch_normalization_14/gamma/Momentum"
  input: "batch_normalization_14/moving_mean"
  input: "batch_normalization_14/moving_variance"
  input: "batch_normalization_15/beta"
  input: "batch_normalization_15/beta/Momentum"
  input: "batch_normalization_15/gamma"
  input: "batch_normalization_15/gamma/Momentum"
  input: "batch_normalization_15/moving_mean"
  input: "batch_normalization_15/moving_variance"
  input: "batch_normalization_16/beta"
  input: "batch_normalization_16/beta/Momentum"
  input: "batch_normalization_16/gamma"
  input: "batch_normalization_16/gamma/Momentum"
  input: "batch_normalization_16/moving_mean"
  input: "batch_normalization_16/moving_variance"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Momentum"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/gamma/Momentum"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Momentum"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/gamma/Momentum"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_4/beta"
  input: "batch_normalization_4/beta/Momentum"
  input: "batch_normalization_4/gamma"
  input: "batch_normalization_4/gamma/Momentum"
  input: "batch_normalization_4/moving_mean"
  input: "batch_normalization_4/moving_variance"
  input: "batch_normalization_5/beta"
  input: "batch_normalization_5/beta/Momentum"
  input: "batch_normalization_5/gamma"
  input: "batch_normalization_5/gamma/Momentum"
  input: "batch_normalization_5/moving_mean"
  input: "batch_normalization_5/moving_variance"
  input: "batch_normalization_6/beta"
  input: "batch_normalization_6/beta/Momentum"
  input: "batch_normalization_6/gamma"
  input: "batch_normalization_6/gamma/Momentum"
  input: "batch_normalization_6/moving_mean"
  input: "batch_normalization_6/moving_variance"
  input: "batch_normalization_7/beta"
  input: "batch_normalization_7/beta/Momentum"
  input: "batch_normalization_7/gamma"
  input: "batch_normalization_7/gamma/Momentum"
  input: "batch_normalization_7/moving_mean"
  input: "batch_normalization_7/moving_variance"
  input: "batch_normalization_8/beta"
  input: "batch_normalization_8/beta/Momentum"
  input: "batch_normalization_8/gamma"
  input: "batch_normalization_8/gamma/Momentum"
  input: "batch_normalization_8/moving_mean"
  input: "batch_normalization_8/moving_variance"
  input: "batch_normalization_9/beta"
  input: "batch_normalization_9/beta/Momentum"
  input: "batch_normalization_9/gamma"
  input: "batch_normalization_9/gamma/Momentum"
  input: "batch_normalization_9/moving_mean"
  input: "batch_normalization_9/moving_variance"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Momentum"
  input: "conv2d_1/kernel"
  input: "conv2d_1/kernel/Momentum"
  input: "conv2d_10/kernel"
  input: "conv2d_10/kernel/Momentum"
  input: "conv2d_11/kernel"
  input: "conv2d_11/kernel/Momentum"
  input: "conv2d_12/kernel"
  input: "conv2d_12/kernel/Momentum"
  input: "conv2d_13/kernel"
  input: "conv2d_13/kernel/Momentum"
  input: "conv2d_14/kernel"
  input: "conv2d_14/kernel/Momentum"
  input: "conv2d_15/kernel"
  input: "conv2d_15/kernel/Momentum"
  input: "conv2d_16/kernel"
  input: "conv2d_16/kernel/Momentum"
  input: "conv2d_17/kernel"
  input: "conv2d_17/kernel/Momentum"
  input: "conv2d_18/kernel"
  input: "conv2d_18/kernel/Momentum"
  input: "conv2d_19/kernel"
  input: "conv2d_19/kernel/Momentum"
  input: "conv2d_2/kernel"
  input: "conv2d_2/kernel/Momentum"
  input: "conv2d_20/kernel"
  input: "conv2d_20/kernel/Momentum"
  input: "conv2d_3/kernel"
  input: "conv2d_3/kernel/Momentum"
  input: "conv2d_4/kernel"
  input: "conv2d_4/kernel/Momentum"
  input: "conv2d_5/kernel"
  input: "conv2d_5/kernel/Momentum"
  input: "conv2d_6/kernel"
  input: "conv2d_6/kernel/Momentum"
  input: "conv2d_7/kernel"
  input: "conv2d_7/kernel/Momentum"
  input: "conv2d_8/kernel"
  input: "conv2d_8/kernel/Momentum"
  input: "conv2d_9/kernel"
  input: "conv2d_9/kernel/Momentum"
  input: "global_step"
  input: "readout_layer/bias"
  input: "readout_layer/bias/Momentum"
  input: "readout_layer/kernel"
  input: "readout_layer/kernel/Momentum"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/beta/Momentum"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/gamma/Momentum"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/beta/Momentum"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/gamma/Momentum"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "batch_normalization_10/beta"
        string_val: "batch_normalization_10/beta/Momentum"
        string_val: "batch_normalization_10/gamma"
        string_val: "batch_normalization_10/gamma/Momentum"
        string_val: "batch_normalization_10/moving_mean"
        string_val: "batch_normalization_10/moving_variance"
        string_val: "batch_normalization_11/beta"
        string_val: "batch_normalization_11/beta/Momentum"
        string_val: "batch_normalization_11/gamma"
        string_val: "batch_normalization_11/gamma/Momentum"
        string_val: "batch_normalization_11/moving_mean"
        string_val: "batch_normalization_11/moving_variance"
        string_val: "batch_normalization_12/beta"
        string_val: "batch_normalization_12/beta/Momentum"
        string_val: "batch_normalization_12/gamma"
        string_val: "batch_normalization_12/gamma/Momentum"
        string_val: "batch_normalization_12/moving_mean"
        string_val: "batch_normalization_12/moving_variance"
        string_val: "batch_normalization_13/beta"
        string_val: "batch_normalization_13/beta/Momentum"
        string_val: "batch_normalization_13/gamma"
        string_val: "batch_normalization_13/gamma/Momentum"
        string_val: "batch_normalization_13/moving_mean"
        string_val: "batch_normalization_13/moving_variance"
        string_val: "batch_normalization_14/beta"
        string_val: "batch_normalization_14/beta/Momentum"
        string_val: "batch_normalization_14/gamma"
        string_val: "batch_normalization_14/gamma/Momentum"
        string_val: "batch_normalization_14/moving_mean"
        string_val: "batch_normalization_14/moving_variance"
        string_val: "batch_normalization_15/beta"
        string_val: "batch_normalization_15/beta/Momentum"
        string_val: "batch_normalization_15/gamma"
        string_val: "batch_normalization_15/gamma/Momentum"
        string_val: "batch_normalization_15/moving_mean"
        string_val: "batch_normalization_15/moving_variance"
        string_val: "batch_normalization_16/beta"
        string_val: "batch_normalization_16/beta/Momentum"
        string_val: "batch_normalization_16/gamma"
        string_val: "batch_normalization_16/gamma/Momentum"
        string_val: "batch_normalization_16/moving_mean"
        string_val: "batch_normalization_16/moving_variance"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/beta/Momentum"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/gamma/Momentum"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/beta/Momentum"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/gamma/Momentum"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "batch_normalization_4/beta"
        string_val: "batch_normalization_4/beta/Momentum"
        string_val: "batch_normalization_4/gamma"
        string_val: "batch_normalization_4/gamma/Momentum"
        string_val: "batch_normalization_4/moving_mean"
        string_val: "batch_normalization_4/moving_variance"
        string_val: "batch_normalization_5/beta"
        string_val: "batch_normalization_5/beta/Momentum"
        string_val: "batch_normalization_5/gamma"
        string_val: "batch_normalization_5/gamma/Momentum"
        string_val: "batch_normalization_5/moving_mean"
        string_val: "batch_normalization_5/moving_variance"
        string_val: "batch_normalization_6/beta"
        string_val: "batch_normalization_6/beta/Momentum"
        string_val: "batch_normalization_6/gamma"
        string_val: "batch_normalization_6/gamma/Momentum"
        string_val: "batch_normalization_6/moving_mean"
        string_val: "batch_normalization_6/moving_variance"
        string_val: "batch_normalization_7/beta"
        string_val: "batch_normalization_7/beta/Momentum"
        string_val: "batch_normalization_7/gamma"
        string_val: "batch_normalization_7/gamma/Momentum"
        string_val: "batch_normalization_7/moving_mean"
        string_val: "batch_normalization_7/moving_variance"
        string_val: "batch_normalization_8/beta"
        string_val: "batch_normalization_8/beta/Momentum"
        string_val: "batch_normalization_8/gamma"
        string_val: "batch_normalization_8/gamma/Momentum"
        string_val: "batch_normalization_8/moving_mean"
        string_val: "batch_normalization_8/moving_variance"
        string_val: "batch_normalization_9/beta"
        string_val: "batch_normalization_9/beta/Momentum"
        string_val: "batch_normalization_9/gamma"
        string_val: "batch_normalization_9/gamma/Momentum"
        string_val: "batch_normalization_9/moving_mean"
        string_val: "batch_normalization_9/moving_variance"
        string_val: "conv2d/kernel"
        string_val: "conv2d/kernel/Momentum"
        string_val: "conv2d_1/kernel"
        string_val: "conv2d_1/kernel/Momentum"
        string_val: "conv2d_10/kernel"
        string_val: "conv2d_10/kernel/Momentum"
        string_val: "conv2d_11/kernel"
        string_val: "conv2d_11/kernel/Momentum"
        string_val: "conv2d_12/kernel"
        string_val: "conv2d_12/kernel/Momentum"
        string_val: "conv2d_13/kernel"
        string_val: "conv2d_13/kernel/Momentum"
        string_val: "conv2d_14/kernel"
        string_val: "conv2d_14/kernel/Momentum"
        string_val: "conv2d_15/kernel"
        string_val: "conv2d_15/kernel/Momentum"
        string_val: "conv2d_16/kernel"
        string_val: "conv2d_16/kernel/Momentum"
        string_val: "conv2d_17/kernel"
        string_val: "conv2d_17/kernel/Momentum"
        string_val: "conv2d_18/kernel"
        string_val: "conv2d_18/kernel/Momentum"
        string_val: "conv2d_19/kernel"
        string_val: "conv2d_19/kernel/Momentum"
        string_val: "conv2d_2/kernel"
        string_val: "conv2d_2/kernel/Momentum"
        string_val: "conv2d_20/kernel"
        string_val: "conv2d_20/kernel/Momentum"
        string_val: "conv2d_3/kernel"
        string_val: "conv2d_3/kernel/Momentum"
        string_val: "conv2d_4/kernel"
        string_val: "conv2d_4/kernel/Momentum"
        string_val: "conv2d_5/kernel"
        string_val: "conv2d_5/kernel/Momentum"
        string_val: "conv2d_6/kernel"
        string_val: "conv2d_6/kernel/Momentum"
        string_val: "conv2d_7/kernel"
        string_val: "conv2d_7/kernel/Momentum"
        string_val: "conv2d_8/kernel"
        string_val: "conv2d_8/kernel/Momentum"
        string_val: "conv2d_9/kernel"
        string_val: "conv2d_9/kernel/Momentum"
        string_val: "global_step"
        string_val: "readout_layer/bias"
        string_val: "readout_layer/bias/Momentum"
        string_val: "readout_layer/kernel"
        string_val: "readout_layer/kernel/Momentum"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 149
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 149
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "batch_normalization/beta"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "batch_normalization/beta/Momentum"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "batch_normalization/gamma"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "batch_normalization/gamma/Momentum"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "batch_normalization/moving_mean"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "batch_normalization/moving_variance"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "batch_normalization_1/beta"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "batch_normalization_1/beta/Momentum"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "batch_normalization_1/gamma"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "batch_normalization_1/gamma/Momentum"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "batch_normalization_1/moving_mean"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "batch_normalization_1/moving_variance"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "batch_normalization_10/beta"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "batch_normalization_10/beta/Momentum"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "batch_normalization_10/gamma"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "batch_normalization_10/gamma/Momentum"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "batch_normalization_10/moving_mean"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "batch_normalization_10/moving_variance"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "batch_normalization_11/beta"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "batch_normalization_11/beta/Momentum"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "batch_normalization_11/gamma"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "batch_normalization_11/gamma/Momentum"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "batch_normalization_11/moving_mean"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "batch_normalization_11/moving_variance"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "batch_normalization_12/beta"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "batch_normalization_12/beta/Momentum"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "batch_normalization_12/gamma"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "batch_normalization_12/gamma/Momentum"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "batch_normalization_12/moving_mean"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "batch_normalization_12/moving_variance"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "batch_normalization_13/beta"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "batch_normalization_13/beta/Momentum"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "batch_normalization_13/gamma"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "batch_normalization_13/gamma/Momentum"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "batch_normalization_13/moving_mean"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "batch_normalization_13/moving_variance"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "batch_normalization_14/beta"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "batch_normalization_14/beta/Momentum"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "batch_normalization_14/gamma"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "batch_normalization_14/gamma/Momentum"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "batch_normalization_14/moving_mean"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "batch_normalization_14/moving_variance"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "batch_normalization_15/beta"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "batch_normalization_15/beta/Momentum"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "batch_normalization_15/gamma"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "batch_normalization_15/gamma/Momentum"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "batch_normalization_15/moving_mean"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "batch_normalization_15/moving_variance"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "batch_normalization_16/beta"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "batch_normalization_16/beta/Momentum"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "batch_normalization_16/gamma"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "batch_normalization_16/gamma/Momentum"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "batch_normalization_16/moving_mean"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "batch_normalization_16/moving_variance"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "batch_normalization_2/beta"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "batch_normalization_2/beta/Momentum"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "batch_normalization_2/gamma"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "batch_normalization_2/gamma/Momentum"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "batch_normalization_2/moving_mean"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "batch_normalization_2/moving_variance"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "batch_normalization_3/beta"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "batch_normalization_3/beta/Momentum"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "batch_normalization_3/gamma"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "batch_normalization_3/gamma/Momentum"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "batch_normalization_3/moving_mean"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "batch_normalization_3/moving_variance"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "batch_normalization_4/beta"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "batch_normalization_4/beta/Momentum"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "batch_normalization_4/gamma"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "batch_normalization_4/gamma/Momentum"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "batch_normalization_4/moving_mean"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "batch_normalization_4/moving_variance"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "batch_normalization_5/beta"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "batch_normalization_5/beta/Momentum"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "batch_normalization_5/gamma"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "batch_normalization_5/gamma/Momentum"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "batch_normalization_5/moving_mean"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "batch_normalization_5/moving_variance"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "batch_normalization_6/beta"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "batch_normalization_6/beta/Momentum"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_80"
  op: "Assign"
  input: "batch_normalization_6/gamma"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_81"
  op: "Assign"
  input: "batch_normalization_6/gamma/Momentum"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_82"
  op: "Assign"
  input: "batch_normalization_6/moving_mean"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_83"
  op: "Assign"
  input: "batch_normalization_6/moving_variance"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_84"
  op: "Assign"
  input: "batch_normalization_7/beta"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_85"
  op: "Assign"
  input: "batch_normalization_7/beta/Momentum"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_86"
  op: "Assign"
  input: "batch_normalization_7/gamma"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_87"
  op: "Assign"
  input: "batch_normalization_7/gamma/Momentum"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_88"
  op: "Assign"
  input: "batch_normalization_7/moving_mean"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_89"
  op: "Assign"
  input: "batch_normalization_7/moving_variance"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_90"
  op: "Assign"
  input: "batch_normalization_8/beta"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_91"
  op: "Assign"
  input: "batch_normalization_8/beta/Momentum"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_92"
  op: "Assign"
  input: "batch_normalization_8/gamma"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_93"
  op: "Assign"
  input: "batch_normalization_8/gamma/Momentum"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_94"
  op: "Assign"
  input: "batch_normalization_8/moving_mean"
  input: "save/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_95"
  op: "Assign"
  input: "batch_normalization_8/moving_variance"
  input: "save/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_96"
  op: "Assign"
  input: "batch_normalization_9/beta"
  input: "save/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_97"
  op: "Assign"
  input: "batch_normalization_9/beta/Momentum"
  input: "save/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_98"
  op: "Assign"
  input: "batch_normalization_9/gamma"
  input: "save/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_99"
  op: "Assign"
  input: "batch_normalization_9/gamma/Momentum"
  input: "save/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_100"
  op: "Assign"
  input: "batch_normalization_9/moving_mean"
  input: "save/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_101"
  op: "Assign"
  input: "batch_normalization_9/moving_variance"
  input: "save/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_102"
  op: "Assign"
  input: "conv2d/kernel"
  input: "save/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_103"
  op: "Assign"
  input: "conv2d/kernel/Momentum"
  input: "save/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_104"
  op: "Assign"
  input: "conv2d_1/kernel"
  input: "save/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_105"
  op: "Assign"
  input: "conv2d_1/kernel/Momentum"
  input: "save/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_106"
  op: "Assign"
  input: "conv2d_10/kernel"
  input: "save/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_107"
  op: "Assign"
  input: "conv2d_10/kernel/Momentum"
  input: "save/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_108"
  op: "Assign"
  input: "conv2d_11/kernel"
  input: "save/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_109"
  op: "Assign"
  input: "conv2d_11/kernel/Momentum"
  input: "save/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_110"
  op: "Assign"
  input: "conv2d_12/kernel"
  input: "save/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_111"
  op: "Assign"
  input: "conv2d_12/kernel/Momentum"
  input: "save/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_112"
  op: "Assign"
  input: "conv2d_13/kernel"
  input: "save/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_113"
  op: "Assign"
  input: "conv2d_13/kernel/Momentum"
  input: "save/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_114"
  op: "Assign"
  input: "conv2d_14/kernel"
  input: "save/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_115"
  op: "Assign"
  input: "conv2d_14/kernel/Momentum"
  input: "save/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_116"
  op: "Assign"
  input: "conv2d_15/kernel"
  input: "save/RestoreV2:116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_117"
  op: "Assign"
  input: "conv2d_15/kernel/Momentum"
  input: "save/RestoreV2:117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_118"
  op: "Assign"
  input: "conv2d_16/kernel"
  input: "save/RestoreV2:118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_119"
  op: "Assign"
  input: "conv2d_16/kernel/Momentum"
  input: "save/RestoreV2:119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_120"
  op: "Assign"
  input: "conv2d_17/kernel"
  input: "save/RestoreV2:120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_121"
  op: "Assign"
  input: "conv2d_17/kernel/Momentum"
  input: "save/RestoreV2:121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_122"
  op: "Assign"
  input: "conv2d_18/kernel"
  input: "save/RestoreV2:122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_123"
  op: "Assign"
  input: "conv2d_18/kernel/Momentum"
  input: "save/RestoreV2:123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_124"
  op: "Assign"
  input: "conv2d_19/kernel"
  input: "save/RestoreV2:124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_125"
  op: "Assign"
  input: "conv2d_19/kernel/Momentum"
  input: "save/RestoreV2:125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_126"
  op: "Assign"
  input: "conv2d_2/kernel"
  input: "save/RestoreV2:126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_127"
  op: "Assign"
  input: "conv2d_2/kernel/Momentum"
  input: "save/RestoreV2:127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_128"
  op: "Assign"
  input: "conv2d_20/kernel"
  input: "save/RestoreV2:128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_129"
  op: "Assign"
  input: "conv2d_20/kernel/Momentum"
  input: "save/RestoreV2:129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_130"
  op: "Assign"
  input: "conv2d_3/kernel"
  input: "save/RestoreV2:130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_131"
  op: "Assign"
  input: "conv2d_3/kernel/Momentum"
  input: "save/RestoreV2:131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_132"
  op: "Assign"
  input: "conv2d_4/kernel"
  input: "save/RestoreV2:132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_133"
  op: "Assign"
  input: "conv2d_4/kernel/Momentum"
  input: "save/RestoreV2:133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_134"
  op: "Assign"
  input: "conv2d_5/kernel"
  input: "save/RestoreV2:134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_135"
  op: "Assign"
  input: "conv2d_5/kernel/Momentum"
  input: "save/RestoreV2:135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_136"
  op: "Assign"
  input: "conv2d_6/kernel"
  input: "save/RestoreV2:136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_137"
  op: "Assign"
  input: "conv2d_6/kernel/Momentum"
  input: "save/RestoreV2:137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_138"
  op: "Assign"
  input: "conv2d_7/kernel"
  input: "save/RestoreV2:138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_139"
  op: "Assign"
  input: "conv2d_7/kernel/Momentum"
  input: "save/RestoreV2:139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_140"
  op: "Assign"
  input: "conv2d_8/kernel"
  input: "save/RestoreV2:140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_141"
  op: "Assign"
  input: "conv2d_8/kernel/Momentum"
  input: "save/RestoreV2:141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_142"
  op: "Assign"
  input: "conv2d_9/kernel"
  input: "save/RestoreV2:142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_143"
  op: "Assign"
  input: "conv2d_9/kernel/Momentum"
  input: "save/RestoreV2:143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_144"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:144"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_145"
  op: "Assign"
  input: "readout_layer/bias"
  input: "save/RestoreV2:145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_146"
  op: "Assign"
  input: "readout_layer/bias/Momentum"
  input: "save/RestoreV2:146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_147"
  op: "Assign"
  input: "readout_layer/kernel"
  input: "save/RestoreV2:147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_148"
  op: "Assign"
  input: "readout_layer/kernel/Momentum"
  input: "save/RestoreV2:148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@readout_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_100"
  input: "^save/Assign_101"
  input: "^save/Assign_102"
  input: "^save/Assign_103"
  input: "^save/Assign_104"
  input: "^save/Assign_105"
  input: "^save/Assign_106"
  input: "^save/Assign_107"
  input: "^save/Assign_108"
  input: "^save/Assign_109"
  input: "^save/Assign_11"
  input: "^save/Assign_110"
  input: "^save/Assign_111"
  input: "^save/Assign_112"
  input: "^save/Assign_113"
  input: "^save/Assign_114"
  input: "^save/Assign_115"
  input: "^save/Assign_116"
  input: "^save/Assign_117"
  input: "^save/Assign_118"
  input: "^save/Assign_119"
  input: "^save/Assign_12"
  input: "^save/Assign_120"
  input: "^save/Assign_121"
  input: "^save/Assign_122"
  input: "^save/Assign_123"
  input: "^save/Assign_124"
  input: "^save/Assign_125"
  input: "^save/Assign_126"
  input: "^save/Assign_127"
  input: "^save/Assign_128"
  input: "^save/Assign_129"
  input: "^save/Assign_13"
  input: "^save/Assign_130"
  input: "^save/Assign_131"
  input: "^save/Assign_132"
  input: "^save/Assign_133"
  input: "^save/Assign_134"
  input: "^save/Assign_135"
  input: "^save/Assign_136"
  input: "^save/Assign_137"
  input: "^save/Assign_138"
  input: "^save/Assign_139"
  input: "^save/Assign_14"
  input: "^save/Assign_140"
  input: "^save/Assign_141"
  input: "^save/Assign_142"
  input: "^save/Assign_143"
  input: "^save/Assign_144"
  input: "^save/Assign_145"
  input: "^save/Assign_146"
  input: "^save/Assign_147"
  input: "^save/Assign_148"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_7"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
  input: "^save/Assign_8"
  input: "^save/Assign_80"
  input: "^save/Assign_81"
  input: "^save/Assign_82"
  input: "^save/Assign_83"
  input: "^save/Assign_84"
  input: "^save/Assign_85"
  input: "^save/Assign_86"
  input: "^save/Assign_87"
  input: "^save/Assign_88"
  input: "^save/Assign_89"
  input: "^save/Assign_9"
  input: "^save/Assign_90"
  input: "^save/Assign_91"
  input: "^save/Assign_92"
  input: "^save/Assign_93"
  input: "^save/Assign_94"
  input: "^save/Assign_95"
  input: "^save/Assign_96"
  input: "^save/Assign_97"
  input: "^save/Assign_98"
  input: "^save/Assign_99"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "tf_map_func_FnxK8VMp2OM"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "flatmapdataset"
        type: DT_VARIANT
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "flat_filenames/shape"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "flat_filenames"
      op: "Reshape"
      input: "arg0"
      input: "flat_filenames/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "flat_filenames:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "FlatMapDataset"
      op: "FlatMapDataset"
      input: "TensorSliceDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_mmkoEM2H6lk"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
    }
    ret {
      key: "flatmapdataset"
      value: "FlatMapDataset:handle:0"
    }
  }
  function {
    signature {
      name: "tf_map_func_Cr21um4S1no"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "sub"
        type: DT_FLOAT
      }
      output_arg {
        name: "one_hot"
        type: DT_FLOAT
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "ParseSingleExample/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ParseSingleExample/Const_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ParseSingleExample/ParseSingleExample"
      op: "ParseSingleExample"
      input: "arg0"
      input: "ParseSingleExample/Const:output:0"
      input: "ParseSingleExample/Const_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "dense_keys"
        value {
          list {
            s: "image"
            s: "target"
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "num_sparse"
        value {
          i: 0
        }
      }
      attr {
        key: "sparse_keys"
        value {
          list {
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "ParseSingleExample/ParseSingleExample:dense_values:1"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "DecodeJpeg"
      op: "DecodeJpeg"
      input: "ParseSingleExample/ParseSingleExample:dense_values:0"
      device: "/device:CPU:0"
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 3
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "convert_image/Cast"
      op: "Cast"
      input: "DecodeJpeg:image:0"
      device: "/device:CPU:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_UINT8
        }
      }
    }
    node_def {
      name: "convert_image/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.003921568859368563
          }
        }
      }
    }
    node_def {
      name: "convert_image"
      op: "Mul"
      input: "convert_image/Cast:y:0"
      input: "convert_image/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Shape"
      op: "Shape"
      input: "convert_image:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_flip_left_right/assert_positive/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/assert_positive/assert_less/Less"
      op: "Less"
      input: "random_flip_left_right/assert_positive/Const:output:0"
      input: "random_flip_left_right/Shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_flip_left_right/assert_positive/assert_less/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/assert_positive/assert_less/All"
      op: "All"
      input: "random_flip_left_right/assert_positive/assert_less/Less:z:0"
      input: "random_flip_left_right/assert_positive/assert_less/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "random_flip_left_right/assert_positive/assert_less/Assert/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "all dims of \'image.shape\' must be > 0."
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/assert_positive/assert_less/Assert/Assert/data_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "all dims of \'image.shape\' must be > 0."
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/assert_positive/assert_less/Assert/Assert"
      op: "Assert"
      input: "random_flip_left_right/assert_positive/assert_less/All:output:0"
      input: "random_flip_left_right/assert_positive/assert_less/Assert/Assert/data_0:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "random_flip_left_right/control_dependency"
      op: "Identity"
      input: "convert_image:z:0"
      input: "^random_flip_left_right/assert_positive/assert_less/Assert/Assert"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@convert_image"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/shape"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/min"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/max"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "random_flip_left_right/random_uniform/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/sub"
      op: "Sub"
      input: "random_flip_left_right/random_uniform/max:output:0"
      input: "random_flip_left_right/random_uniform/min:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/mul"
      op: "Mul"
      input: "random_flip_left_right/random_uniform/RandomUniform:output:0"
      input: "random_flip_left_right/random_uniform/sub:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform"
      op: "Add"
      input: "random_flip_left_right/random_uniform/mul:z:0"
      input: "random_flip_left_right/random_uniform/min:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Less/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Less"
      op: "Less"
      input: "random_flip_left_right/random_uniform:z:0"
      input: "random_flip_left_right/Less/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Switch"
      op: "Switch"
      input: "random_flip_left_right/Less:z:0"
      input: "random_flip_left_right/Less:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right/switch_t"
      op: "Identity"
      input: "random_flip_left_right/Switch:output_true:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right/switch_f"
      op: "Identity"
      input: "random_flip_left_right/Switch:output_false:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right/pred_id"
      op: "Identity"
      input: "random_flip_left_right/Less:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right/ReverseV2/axis"
      op: "Const"
      input: "^random_flip_left_right/switch_t"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/ReverseV2"
      op: "ReverseV2"
      input: "random_flip_left_right/ReverseV2/Switch:output_true:0"
      input: "random_flip_left_right/ReverseV2/axis:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_flip_left_right/ReverseV2/Switch"
      op: "Switch"
      input: "random_flip_left_right/control_dependency:output:0"
      input: "random_flip_left_right/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@convert_image"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Switch_1"
      op: "Switch"
      input: "random_flip_left_right/control_dependency:output:0"
      input: "random_flip_left_right/pred_id:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@convert_image"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Merge"
      op: "Merge"
      input: "random_flip_left_right/Switch_1:output_false:0"
      input: "random_flip_left_right/ReverseV2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_crop/size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "8\000\000\0008\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "random_crop/Shape"
      op: "Shape"
      input: "random_flip_left_right/Merge:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_crop/GreaterEqual"
      op: "GreaterEqual"
      input: "random_crop/Shape:output:0"
      input: "random_crop/size:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_crop/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_crop/All"
      op: "All"
      input: "random_crop/GreaterEqual:z:0"
      input: "random_crop/Const:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "random_crop/Assert/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Need value.shape >= size, got "
          }
        }
      }
    }
    node_def {
      name: "random_crop/Assert/Assert/data_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Need value.shape >= size, got "
          }
        }
      }
    }
    node_def {
      name: "random_crop/Assert/Assert"
      op: "Assert"
      input: "random_crop/All:output:0"
      input: "random_crop/Assert/Assert/data_0:output:0"
      input: "random_crop/Shape:output:0"
      input: "random_crop/size:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 1000
        }
      }
    }
    node_def {
      name: "random_crop/control_dependency"
      op: "Identity"
      input: "random_crop/Shape:output:0"
      input: "^random_crop/Assert/Assert"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@random_crop/Shape"
          }
        }
      }
    }
    node_def {
      name: "random_crop/sub"
      op: "Sub"
      input: "random_crop/control_dependency:output:0"
      input: "random_crop/size:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_crop/add/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "random_crop/add"
      op: "Add"
      input: "random_crop/sub:z:0"
      input: "random_crop/add/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_crop/Shape_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "random_crop/random_uniform/min"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_crop/random_uniform/max"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "random_crop/random_uniform"
      op: "RandomUniformInt"
      input: "random_crop/Shape_1:output:0"
      input: "random_crop/random_uniform/min:output:0"
      input: "random_crop/random_uniform/max:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "random_crop/mod"
      op: "FloorMod"
      input: "random_crop/random_uniform:output:0"
      input: "random_crop/add:z:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_crop"
      op: "Slice"
      input: "random_flip_left_right/Merge:output:0"
      input: "random_crop/mod:z:0"
      input: "random_crop/size:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value/Minimum"
      op: "Minimum"
      input: "random_crop:output:0"
      input: "clip_by_value/Minimum/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "clip_by_value/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "clip_by_value"
      op: "Maximum"
      input: "clip_by_value/Minimum:z:0"
      input: "clip_by_value/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "mul/y"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 255.0
          }
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "clip_by_value:z:0"
      input: "mul/y:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ExpandDims/input"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: ")\\\367B\\\217\351BH\341\317B"
          }
        }
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "ExpandDims/input:output:0"
      input: "ExpandDims/dim:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1/dim:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "sub_0"
      op: "Sub"
      input: "mul:z:0"
      input: "ExpandDims_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Reshape/shape"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "Cast:y:0"
      input: "Reshape/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "one_hot/on_value"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "one_hot/off_value"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "one_hot/depth"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 200
          }
        }
      }
    }
    node_def {
      name: "one_hot_0"
      op: "OneHot"
      input: "Reshape:output:0"
      input: "one_hot/depth:output:0"
      input: "one_hot/on_value:output:0"
      input: "one_hot/off_value:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "TI"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: -1
        }
      }
    }
    ret {
      key: "one_hot"
      value: "one_hot_0:output:0"
    }
    ret {
      key: "sub"
      value: "sub_0:z:0"
    }
  }
  function {
    signature {
      name: "tf_map_func_mmkoEM2H6lk"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "tfrecorddataset"
        type: DT_VARIANT
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "compression_type"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "arg0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      device: "/device:CPU:0"
    }
    ret {
      key: "tfrecorddataset"
      value: "TFRecordDataset:handle:0"
    }
  }
}
versions {
  producer: 26
  min_consumer: 12
}
